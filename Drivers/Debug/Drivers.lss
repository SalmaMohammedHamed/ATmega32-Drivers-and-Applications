
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004cf6  00004d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800192  00800192  00004ebc  2**0
                  ALLOC
  3 .stab         00007e9c  00000000  00000000  00004ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003b5a  00000000  00000000  0000cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000108b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00010a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00010c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000143d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000155ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001576c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00015a62  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000163d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__vector_1>
       8:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__vector_2>
       c:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <__vector_6>
      1c:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__vector_7>
      20:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__vector_8>
      24:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_9>
      28:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_10>
      2c:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ef       	ldi	r30, 0xF6	; 246
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <main>
      8a:	0c 94 79 26 	jmp	0x4cf2	; 0x4cf2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6e 26 	jmp	0x4cdc	; 0x4cdc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 66 26 	jmp	0x4ccc	; 0x4ccc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
 */

#include "UART_Interface.h"

void UART_voidInit(u32 BoudRate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_voidInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
	/*Set boud rate*/
	clear_bit(UART_UBRRH,UBRRH_URSEL);
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
	UART_UBRRH=0;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
	UART_UBRRL=BoudRate;
     e56:	e9 e2       	ldi	r30, 0x29	; 41
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24

	/*Interrupts*/
#if TXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
#elif TXIEState==enable
	set_bit(UART_UCSRB,UCSRB_TXCIE);
#endif

#if RXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_RXCIE);
     e6c:	aa e2       	ldi	r26, 0x2A	; 42
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e2       	ldi	r30, 0x2A	; 42
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	8c 93       	st	X, r24
#elif RXIEState==enable
	set_bit(UART_UCSRB,UCSRB_RXCIE);
#endif

#if UDIEState==disable
	clear_bit(UART_UCSRB,UCSRB_UDRIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
#elif UDIEState==enable
	set_bit(UART_UCSRB,UCSRB_UDRIE);
#endif

	/*Async*/
	set_bit(UART_UCSRC,UCSRC_URSEL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UMSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24

	/*parity*/
#if ParityEnable==enable
#if Parity==odd
	set_bit(UART_UCSRC,UCSRC_UPM0);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UPM1);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UPM1);
#endif

	/*Stop bits*/
#if NoStopBits==1
	clear_bit(UART_UCSRC,UCSRC_USBS);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24
#elif DataSize==7
	clear_bit(UART_UCSRC,UCSRC_UCSZ0);
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
#elif DataSize==8
	set_bit(UART_UCSRC,UCSRC_UCSZ0);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	set_bit(UART_UCSRB,UCSRB_UCSZ2);
#else
#error "Invalid Option"
#endif
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_voidSendData>:

void UART_voidSendData(u8 Data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	a1 f3       	breq	.-24     	; 0xf12 <UART_voidSendData+0xc>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f2a:	ab e2       	ldi	r26, 0x2B	; 43
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e2       	ldi	r30, 0x2B	; 43
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
	UART_UDR=Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
	set_bit(UART_UCSRB,UCSRB_TXEN);
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24

}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_u8RecieveData>:

u8 UART_u8RecieveData()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u8 RecievedData;
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_u8RecieveData+0xa>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
	set_bit(UART_UCSRB,UCSRB_RXEN);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	while (get_bit(UART_UCSRA,UCSRA_RXC)==Low);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <UART_u8RecieveData+0x3e>
	set_bit(UART_UCSRA,UCSRA_RXC);
     f9e:	ab e2       	ldi	r26, 0x2B	; 43
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	RecievedData=UART_UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return RecievedData;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <T1_voidNormalModeInit>:



/*******************************Normal Mode Functions*******************************************/
void T1_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <T1_voidNormalModeInit+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
     fd0:	af e4       	ldi	r26, 0x4F	; 79
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
     fde:	af e4       	ldi	r26, 0x4F	; 79
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e4       	ldi	r30, 0x4F	; 79
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
     ffa:	ae e4       	ldi	r26, 0x4E	; 78
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7e       	andi	r24, 0xEF	; 239
    1006:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	87 70       	andi	r24, 0x07	; 7
    100c:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    100e:	ae e4       	ldi	r26, 0x4E	; 78
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ee e4       	ldi	r30, 0x4E	; 78
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ee e4       	ldi	r30, 0x4E	; 78
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	90 81       	ld	r25, Z
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	89 2b       	or	r24, r25
    102a:	8c 93       	st	X, r24
	T1_TCNT1=PreloadValue;
    102c:	ec e4       	ldi	r30, 0x4C	; 76
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	41 f4       	brne	.+16     	; 0x1050 <T1_voidNormalModeInit+0x92>
	{
		set_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1040:	a9 e5       	ldi	r26, 0x59	; 89
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e9 e5       	ldi	r30, 0x59	; 89
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	}
	else if(InterruptState ==disable)
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	39 f4       	brne	.+14     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8b 7f       	andi	r24, 0xFB	; 251
    1062:	8c 93       	st	X, r24
	}

}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <T1_voidCallBackFuncNormalMode>:


void T1_voidCallBackFuncNormalMode(void (*Normalpf)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <T1_voidCallBackFuncNormalMode+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(Normalpf!=NULL)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <T1_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPf=Normalpf;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	90 93 95 01 	sts	0x0195, r25
    108e:	80 93 94 01 	sts	0x0194, r24
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <__vector_9>:


void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOVPf!=NULL)
    10c6:	80 91 94 01 	lds	r24, 0x0194
    10ca:	90 91 95 01 	lds	r25, 0x0195
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	29 f0       	breq	.+10     	; 0x10dc <__vector_9+0x40>
	{
		GlobalOVPf();
    10d2:	e0 91 94 01 	lds	r30, 0x0194
    10d6:	f0 91 95 01 	lds	r31, 0x0195
    10da:	09 95       	icall
	}

}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <T1_voidClearTimerModeInit>:



/********************************CTC Functions****************************************************/
void T1_voidClearTimerModeInit(u8 Prescaller,u16 CompareValue,u8 Interruptstate,u8 OC1AState)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <T1_voidClearTimerModeInit+0x6>
    1108:	00 d0       	rcall	.+0      	; 0x110a <T1_voidClearTimerModeInit+0x8>
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	7b 83       	std	Y+3, r23	; 0x03
    1114:	6a 83       	std	Y+2, r22	; 0x02
    1116:	4c 83       	std	Y+4, r20	; 0x04
    1118:	2d 83       	std	Y+5, r18	; 0x05
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    111a:	af e4       	ldi	r26, 0x4F	; 79
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	ef e4       	ldi	r30, 0x4F	; 79
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1128:	af e4       	ldi	r26, 0x4F	; 79
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ef e4       	ldi	r30, 0x4F	; 79
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	8d 7f       	andi	r24, 0xFD	; 253
    1134:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1136:	ae e4       	ldi	r26, 0x4E	; 78
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ee e4       	ldi	r30, 0x4E	; 78
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	88 60       	ori	r24, 0x08	; 8
    1142:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1144:	ae e4       	ldi	r26, 0x4E	; 78
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ee e4       	ldi	r30, 0x4E	; 78
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	8c 93       	st	X, r24
	T1_OCR1A=CompareValue;
    1152:	ea e4       	ldi	r30, 0x4A	; 74
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8a 81       	ldd	r24, Y+2	; 0x02
    1158:	9b 81       	ldd	r25, Y+3	; 0x03
    115a:	91 83       	std	Z+1, r25	; 0x01
    115c:	80 83       	st	Z, r24
	if (Interruptstate==enable)
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	41 f4       	brne	.+16     	; 0x1174 <T1_voidClearTimerModeInit+0x72>
	{
		set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1164:	a9 e5       	ldi	r26, 0x59	; 89
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e9 e5       	ldi	r30, 0x59	; 89
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	80 61       	ori	r24, 0x10	; 16
    1170:	8c 93       	st	X, r24
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <T1_voidClearTimerModeInit+0x86>
	}
	else if (Interruptstate==disable)
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	39 f4       	brne	.+14     	; 0x1188 <T1_voidClearTimerModeInit+0x86>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    117a:	a9 e5       	ldi	r26, 0x59	; 89
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e9 e5       	ldi	r30, 0x59	; 89
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 7e       	andi	r24, 0xEF	; 239
    1186:	8c 93       	st	X, r24
	}
	if(OC1AState==CTC_OC1A_Disconnect)
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	79 f4       	brne	.+30     	; 0x11ac <T1_voidClearTimerModeInit+0xaa>
	{//disconnect  pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    118e:	af e4       	ldi	r26, 0x4F	; 79
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ef e4       	ldi	r30, 0x4F	; 79
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8f 7b       	andi	r24, 0xBF	; 191
    119a:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    119c:	af e4       	ldi	r26, 0x4F	; 79
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	ef e4       	ldi	r30, 0x4F	; 79
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8f 77       	andi	r24, 0x7F	; 127
    11a8:	8c 93       	st	X, r24
    11aa:	35 c0       	rjmp	.+106    	; 0x1216 <T1_voidClearTimerModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Tog)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	79 f4       	brne	.+30     	; 0x11d0 <T1_voidClearTimerModeInit+0xce>
	{	//Tog Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11b2:	af e4       	ldi	r26, 0x4F	; 79
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	ef e4       	ldi	r30, 0x4F	; 79
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	80 64       	ori	r24, 0x40	; 64
    11be:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11c0:	af e4       	ldi	r26, 0x4F	; 79
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e4       	ldi	r30, 0x4F	; 79
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	8f 77       	andi	r24, 0x7F	; 127
    11cc:	8c 93       	st	X, r24
    11ce:	23 c0       	rjmp	.+70     	; 0x1216 <T1_voidClearTimerModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_CLr)
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	83 30       	cpi	r24, 0x03	; 3
    11d4:	79 f4       	brne	.+30     	; 0x11f4 <T1_voidClearTimerModeInit+0xf2>
	{
		//clr Pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11d6:	af e4       	ldi	r26, 0x4F	; 79
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ef e4       	ldi	r30, 0x4F	; 79
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7b       	andi	r24, 0xBF	; 191
    11e2:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11e4:	af e4       	ldi	r26, 0x4F	; 79
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef e4       	ldi	r30, 0x4F	; 79
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 68       	ori	r24, 0x80	; 128
    11f0:	8c 93       	st	X, r24
    11f2:	11 c0       	rjmp	.+34     	; 0x1216 <T1_voidClearTimerModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Set)
    11f4:	8d 81       	ldd	r24, Y+5	; 0x05
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	71 f4       	brne	.+28     	; 0x1216 <T1_voidClearTimerModeInit+0x114>
	{
		//set Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11fa:	af e4       	ldi	r26, 0x4F	; 79
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ef e4       	ldi	r30, 0x4F	; 79
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 64       	ori	r24, 0x40	; 64
    1206:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1208:	af e4       	ldi	r26, 0x4F	; 79
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ef e4       	ldi	r30, 0x4F	; 79
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	8c 93       	st	X, r24
	}

	Prescaller&=0x07;
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	87 70       	andi	r24, 0x07	; 7
    121a:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    121c:	ae e4       	ldi	r26, 0x4E	; 78
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	ee e4       	ldi	r30, 0x4E	; 78
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 7f       	andi	r24, 0xF8	; 248
    1228:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    122a:	ae e4       	ldi	r26, 0x4E	; 78
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	ee e4       	ldi	r30, 0x4E	; 78
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	90 81       	ld	r25, Z
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	89 2b       	or	r24, r25
    1238:	8c 93       	st	X, r24
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <T1_voidCallBackFuncCTCModeA>:


void T1_voidCallBackFuncCTCModeA(void (*CTCApf)(void))
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <T1_voidCallBackFuncCTCModeA+0x6>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	9a 83       	std	Y+2, r25	; 0x02
    1256:	89 83       	std	Y+1, r24	; 0x01
	if(CTCApf!=NULL)
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	31 f0       	breq	.+12     	; 0x126c <T1_voidCallBackFuncCTCModeA+0x22>
	{
		GlobalCTCAPf=CTCApf;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	90 93 97 01 	sts	0x0197, r25
    1268:	80 93 96 01 	sts	0x0196, r24
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <__vector_7>:


void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    1276:	1f 92       	push	r1
    1278:	0f 92       	push	r0
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	0f 92       	push	r0
    127e:	11 24       	eor	r1, r1
    1280:	2f 93       	push	r18
    1282:	3f 93       	push	r19
    1284:	4f 93       	push	r20
    1286:	5f 93       	push	r21
    1288:	6f 93       	push	r22
    128a:	7f 93       	push	r23
    128c:	8f 93       	push	r24
    128e:	9f 93       	push	r25
    1290:	af 93       	push	r26
    1292:	bf 93       	push	r27
    1294:	ef 93       	push	r30
    1296:	ff 93       	push	r31
    1298:	df 93       	push	r29
    129a:	cf 93       	push	r28
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCAPf!=NULL)
    12a0:	80 91 96 01 	lds	r24, 0x0196
    12a4:	90 91 97 01 	lds	r25, 0x0197
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	29 f0       	breq	.+10     	; 0x12b6 <__vector_7+0x40>
	{
		GlobalCTCAPf();
    12ac:	e0 91 96 01 	lds	r30, 0x0196
    12b0:	f0 91 97 01 	lds	r31, 0x0197
    12b4:	09 95       	icall
	}
}
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

000012dc <T1_voidCallBackFuncCTCModeB>:


void T1_voidCallBackFuncCTCModeB(void (*CTCBpf)(void))
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <T1_voidCallBackFuncCTCModeB+0x6>
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
	if(CTCBpf!=NULL)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	31 f0       	breq	.+12     	; 0x12fe <T1_voidCallBackFuncCTCModeB+0x22>
	{
		GlobalCTCBPf=CTCBpf;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	9a 81       	ldd	r25, Y+2	; 0x02
    12f6:	90 93 99 01 	sts	0x0199, r25
    12fa:	80 93 98 01 	sts	0x0198, r24
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <__vector_8>:


void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1308:	1f 92       	push	r1
    130a:	0f 92       	push	r0
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	0f 92       	push	r0
    1310:	11 24       	eor	r1, r1
    1312:	2f 93       	push	r18
    1314:	3f 93       	push	r19
    1316:	4f 93       	push	r20
    1318:	5f 93       	push	r21
    131a:	6f 93       	push	r22
    131c:	7f 93       	push	r23
    131e:	8f 93       	push	r24
    1320:	9f 93       	push	r25
    1322:	af 93       	push	r26
    1324:	bf 93       	push	r27
    1326:	ef 93       	push	r30
    1328:	ff 93       	push	r31
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCBPf!=NULL)
    1332:	80 91 98 01 	lds	r24, 0x0198
    1336:	90 91 99 01 	lds	r25, 0x0199
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	29 f0       	breq	.+10     	; 0x1348 <__vector_8+0x40>
	{
		GlobalCTCBPf();
    133e:	e0 91 98 01 	lds	r30, 0x0198
    1342:	f0 91 99 01 	lds	r31, 0x0199
    1346:	09 95       	icall
	}
}
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	ff 91       	pop	r31
    134e:	ef 91       	pop	r30
    1350:	bf 91       	pop	r27
    1352:	af 91       	pop	r26
    1354:	9f 91       	pop	r25
    1356:	8f 91       	pop	r24
    1358:	7f 91       	pop	r23
    135a:	6f 91       	pop	r22
    135c:	5f 91       	pop	r21
    135e:	4f 91       	pop	r20
    1360:	3f 91       	pop	r19
    1362:	2f 91       	pop	r18
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <T1_voidFastPWM>:



/*******************************Fast PWM*********************************/
void T1_voidFastPWM(u8 Type,u8 CompareUnit ,u8 PWMMode , u8 DutyCycle, u8 PreScaller )
{
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <T1_voidFastPWM+0xa>
    1378:	00 d0       	rcall	.+0      	; 0x137a <T1_voidFastPWM+0xc>
    137a:	0f 92       	push	r0
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
    1384:	4b 83       	std	Y+3, r20	; 0x03
    1386:	2c 83       	std	Y+4, r18	; 0x04
    1388:	0d 83       	std	Y+5, r16	; 0x05
	//prescaller
	PreScaller&=0x07;
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	87 70       	andi	r24, 0x07	; 7
    138e:	8d 83       	std	Y+5, r24	; 0x05
	T1_TCCR1B&=0xF8;
    1390:	ae e4       	ldi	r26, 0x4E	; 78
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ee e4       	ldi	r30, 0x4E	; 78
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 7f       	andi	r24, 0xF8	; 248
    139c:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    139e:	ae e4       	ldi	r26, 0x4E	; 78
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ee e4       	ldi	r30, 0x4E	; 78
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	90 81       	ld	r25, Z
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	89 2b       	or	r24, r25
    13ac:	8c 93       	st	X, r24
	//select mode
	if (Type==FastPWM_8Bit)
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	88 23       	and	r24, r24
    13b2:	e9 f4       	brne	.+58     	; 0x13ee <T1_voidFastPWM+0x80>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    13b4:	af e4       	ldi	r26, 0x4F	; 79
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ef e4       	ldi	r30, 0x4F	; 79
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	81 60       	ori	r24, 0x01	; 1
    13c0:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    13c2:	af e4       	ldi	r26, 0x4F	; 79
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ef e4       	ldi	r30, 0x4F	; 79
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    13d0:	ae e4       	ldi	r26, 0x4E	; 78
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ee e4       	ldi	r30, 0x4E	; 78
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 60       	ori	r24, 0x08	; 8
    13dc:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    13de:	ae e4       	ldi	r26, 0x4E	; 78
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ee e4       	ldi	r30, 0x4E	; 78
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8f 7e       	andi	r24, 0xEF	; 239
    13ea:	8c 93       	st	X, r24
    13ec:	7f c0       	rjmp	.+254    	; 0x14ec <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_9Bit)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	e9 f4       	brne	.+58     	; 0x142e <T1_voidFastPWM+0xc0>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    13f4:	af e4       	ldi	r26, 0x4F	; 79
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ef e4       	ldi	r30, 0x4F	; 79
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1402:	af e4       	ldi	r26, 0x4F	; 79
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ef e4       	ldi	r30, 0x4F	; 79
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	82 60       	ori	r24, 0x02	; 2
    140e:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1410:	ae e4       	ldi	r26, 0x4E	; 78
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e4       	ldi	r30, 0x4E	; 78
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    141e:	ae e4       	ldi	r26, 0x4E	; 78
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ee e4       	ldi	r30, 0x4E	; 78
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7e       	andi	r24, 0xEF	; 239
    142a:	8c 93       	st	X, r24
    142c:	5f c0       	rjmp	.+190    	; 0x14ec <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_10Bit)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	e9 f4       	brne	.+58     	; 0x146e <T1_voidFastPWM+0x100>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1434:	af e4       	ldi	r26, 0x4F	; 79
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	ef e4       	ldi	r30, 0x4F	; 79
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	81 60       	ori	r24, 0x01	; 1
    1440:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1442:	af e4       	ldi	r26, 0x4F	; 79
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	ef e4       	ldi	r30, 0x4F	; 79
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1450:	ae e4       	ldi	r26, 0x4E	; 78
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ee e4       	ldi	r30, 0x4E	; 78
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	88 60       	ori	r24, 0x08	; 8
    145c:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    145e:	ae e4       	ldi	r26, 0x4E	; 78
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	ee e4       	ldi	r30, 0x4E	; 78
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 7e       	andi	r24, 0xEF	; 239
    146a:	8c 93       	st	X, r24
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_ICR1)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	e9 f4       	brne	.+58     	; 0x14ae <T1_voidFastPWM+0x140>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1474:	af e4       	ldi	r26, 0x4F	; 79
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ef e4       	ldi	r30, 0x4F	; 79
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1482:	af e4       	ldi	r26, 0x4F	; 79
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	ef e4       	ldi	r30, 0x4F	; 79
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	82 60       	ori	r24, 0x02	; 2
    148e:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1490:	ae e4       	ldi	r26, 0x4E	; 78
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	ee e4       	ldi	r30, 0x4E	; 78
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	88 60       	ori	r24, 0x08	; 8
    149c:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    149e:	ae e4       	ldi	r26, 0x4E	; 78
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	ee e4       	ldi	r30, 0x4E	; 78
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	80 61       	ori	r24, 0x10	; 16
    14aa:	8c 93       	st	X, r24
    14ac:	1f c0       	rjmp	.+62     	; 0x14ec <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_OCR1A)
    14ae:	89 81       	ldd	r24, Y+1	; 0x01
    14b0:	84 30       	cpi	r24, 0x04	; 4
    14b2:	e1 f4       	brne	.+56     	; 0x14ec <T1_voidFastPWM+0x17e>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    14b4:	af e4       	ldi	r26, 0x4F	; 79
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	ef e4       	ldi	r30, 0x4F	; 79
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    14c2:	af e4       	ldi	r26, 0x4F	; 79
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ef e4       	ldi	r30, 0x4F	; 79
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	82 60       	ori	r24, 0x02	; 2
    14ce:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    14d0:	ae e4       	ldi	r26, 0x4E	; 78
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e4       	ldi	r30, 0x4E	; 78
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	88 60       	ori	r24, 0x08	; 8
    14dc:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    14de:	ae e4       	ldi	r26, 0x4E	; 78
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	ee e4       	ldi	r30, 0x4E	; 78
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	80 61       	ori	r24, 0x10	; 16
    14ea:	8c 93       	st	X, r24
	}

	//select compare unit & mode
	if (CompareUnit==PWM_UnitA)
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	81 30       	cpi	r24, 0x01	; 1
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <T1_voidFastPWM+0x186>
    14f2:	65 c0       	rjmp	.+202    	; 0x15be <T1_voidFastPWM+0x250>
	{
		T1_OCR1A=(65535*DutyCycle)/100;
    14f4:	0a e4       	ldi	r16, 0x4A	; 74
    14f6:	10 e0       	ldi	r17, 0x00	; 0
    14f8:	8c 81       	ldd	r24, Y+4	; 0x04
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a0 e0       	ldi	r26, 0x00	; 0
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	2f ef       	ldi	r18, 0xFF	; 255
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	bc 01       	movw	r22, r24
    150c:	cd 01       	movw	r24, r26
    150e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	24 e6       	ldi	r18, 0x64	; 100
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__divmodsi4>
    1526:	da 01       	movw	r26, r20
    1528:	c9 01       	movw	r24, r18
    152a:	f8 01       	movw	r30, r16
    152c:	91 83       	std	Z+1, r25	; 0x01
    152e:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1A_Disconnect)
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	79 f4       	brne	.+30     	; 0x1554 <T1_voidFastPWM+0x1e6>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1536:	af e4       	ldi	r26, 0x4F	; 79
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ef e4       	ldi	r30, 0x4F	; 79
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	8f 7b       	andi	r24, 0xBF	; 191
    1542:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1544:	af e4       	ldi	r26, 0x4F	; 79
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ef e4       	ldi	r30, 0x4F	; 79
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	8f 77       	andi	r24, 0x7F	; 127
    1550:	8c 93       	st	X, r24
    1552:	35 c0       	rjmp	.+106    	; 0x15be <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Tog)
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	82 30       	cpi	r24, 0x02	; 2
    1558:	79 f4       	brne	.+30     	; 0x1578 <T1_voidFastPWM+0x20a>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    155a:	af e4       	ldi	r26, 0x4F	; 79
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ef e4       	ldi	r30, 0x4F	; 79
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 64       	ori	r24, 0x40	; 64
    1566:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1568:	af e4       	ldi	r26, 0x4F	; 79
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ef e4       	ldi	r30, 0x4F	; 79
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8f 77       	andi	r24, 0x7F	; 127
    1574:	8c 93       	st	X, r24
    1576:	23 c0       	rjmp	.+70     	; 0x15be <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_CLr)
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	79 f4       	brne	.+30     	; 0x159c <T1_voidFastPWM+0x22e>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    157e:	af e4       	ldi	r26, 0x4F	; 79
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	ef e4       	ldi	r30, 0x4F	; 79
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	8f 7b       	andi	r24, 0xBF	; 191
    158a:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    158c:	af e4       	ldi	r26, 0x4F	; 79
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ef e4       	ldi	r30, 0x4F	; 79
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	80 68       	ori	r24, 0x80	; 128
    1598:	8c 93       	st	X, r24
    159a:	11 c0       	rjmp	.+34     	; 0x15be <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Set)
    159c:	8b 81       	ldd	r24, Y+3	; 0x03
    159e:	84 30       	cpi	r24, 0x04	; 4
    15a0:	71 f4       	brne	.+28     	; 0x15be <T1_voidFastPWM+0x250>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    15a2:	af e4       	ldi	r26, 0x4F	; 79
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ef e4       	ldi	r30, 0x4F	; 79
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 64       	ori	r24, 0x40	; 64
    15ae:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    15b0:	af e4       	ldi	r26, 0x4F	; 79
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ef e4       	ldi	r30, 0x4F	; 79
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	80 68       	ori	r24, 0x80	; 128
    15bc:	8c 93       	st	X, r24
		}
	}
	if (CompareUnit==PWM_UnitB)
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	82 30       	cpi	r24, 0x02	; 2
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <T1_voidFastPWM+0x258>
    15c4:	65 c0       	rjmp	.+202    	; 0x1690 <T1_voidFastPWM+0x322>
	{
		T1_OCR1B=(65535*DutyCycle)/100;
    15c6:	08 e4       	ldi	r16, 0x48	; 72
    15c8:	10 e0       	ldi	r17, 0x00	; 0
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a0 e0       	ldi	r26, 0x00	; 0
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	2f ef       	ldi	r18, 0xFF	; 255
    15d6:	3f ef       	ldi	r19, 0xFF	; 255
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	24 e6       	ldi	r18, 0x64	; 100
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	bc 01       	movw	r22, r24
    15f2:	cd 01       	movw	r24, r26
    15f4:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__divmodsi4>
    15f8:	da 01       	movw	r26, r20
    15fa:	c9 01       	movw	r24, r18
    15fc:	f8 01       	movw	r30, r16
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1B_Disconnect)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	79 f4       	brne	.+30     	; 0x1626 <T1_voidFastPWM+0x2b8>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1608:	af e4       	ldi	r26, 0x4F	; 79
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ef e4       	ldi	r30, 0x4F	; 79
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7e       	andi	r24, 0xEF	; 239
    1614:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1616:	af e4       	ldi	r26, 0x4F	; 79
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	ef e4       	ldi	r30, 0x4F	; 79
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7d       	andi	r24, 0xDF	; 223
    1622:	8c 93       	st	X, r24
    1624:	35 c0       	rjmp	.+106    	; 0x1690 <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Tog)
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	82 30       	cpi	r24, 0x02	; 2
    162a:	79 f4       	brne	.+30     	; 0x164a <T1_voidFastPWM+0x2dc>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	80 61       	ori	r24, 0x10	; 16
    1638:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    163a:	af e4       	ldi	r26, 0x4F	; 79
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ef e4       	ldi	r30, 0x4F	; 79
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7d       	andi	r24, 0xDF	; 223
    1646:	8c 93       	st	X, r24
    1648:	23 c0       	rjmp	.+70     	; 0x1690 <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_CLr)
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	79 f4       	brne	.+30     	; 0x166e <T1_voidFastPWM+0x300>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1650:	af e4       	ldi	r26, 0x4F	; 79
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ef e4       	ldi	r30, 0x4F	; 79
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 7e       	andi	r24, 0xEF	; 239
    165c:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    165e:	af e4       	ldi	r26, 0x4F	; 79
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ef e4       	ldi	r30, 0x4F	; 79
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	80 62       	ori	r24, 0x20	; 32
    166a:	8c 93       	st	X, r24
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Set)
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	71 f4       	brne	.+28     	; 0x1690 <T1_voidFastPWM+0x322>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1674:	af e4       	ldi	r26, 0x4F	; 79
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ef e4       	ldi	r30, 0x4F	; 79
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 61       	ori	r24, 0x10	; 16
    1680:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1682:	af e4       	ldi	r26, 0x4F	; 79
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ef e4       	ldi	r30, 0x4F	; 79
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	80 62       	ori	r24, 0x20	; 32
    168e:	8c 93       	st	X, r24
		}
	}

}
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	08 95       	ret

000016a4 <T1_voidFastPWMServo>:



/****************************Servo Functions*************************/
void T1_voidFastPWMServo(u8 angle)
{
    16a4:	df 93       	push	r29
    16a6:	cf 93       	push	r28
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <T1_voidFastPWMServo+0x6>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Prescaller=prescaler8;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	89 83       	std	Y+1, r24	; 0x01
	Prescaller&=0x07;
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	87 70       	andi	r24, 0x07	; 7
    16b8:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    16ba:	ae e4       	ldi	r26, 0x4E	; 78
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ee e4       	ldi	r30, 0x4E	; 78
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	88 7f       	andi	r24, 0xF8	; 248
    16c6:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    16c8:	ae e4       	ldi	r26, 0x4E	; 78
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ee e4       	ldi	r30, 0x4E	; 78
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	90 81       	ld	r25, Z
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	89 2b       	or	r24, r25
    16d6:	8c 93       	st	X, r24
	//select mode 14 (ICR1)
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    16d8:	af e4       	ldi	r26, 0x4F	; 79
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ef e4       	ldi	r30, 0x4F	; 79
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8e 7f       	andi	r24, 0xFE	; 254
    16e4:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    16e6:	af e4       	ldi	r26, 0x4F	; 79
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ef e4       	ldi	r30, 0x4F	; 79
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	82 60       	ori	r24, 0x02	; 2
    16f2:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    16f4:	ae e4       	ldi	r26, 0x4E	; 78
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	ee e4       	ldi	r30, 0x4E	; 78
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 60       	ori	r24, 0x08	; 8
    1700:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1702:	ae e4       	ldi	r26, 0x4E	; 78
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ee e4       	ldi	r30, 0x4E	; 78
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 61       	ori	r24, 0x10	; 16
    170e:	8c 93       	st	X, r24
	//Set the Top Value
	T1_ICR1=Servo_value;
    1710:	e8 e4       	ldi	r30, 0x48	; 72
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8f e1       	ldi	r24, 0x1F	; 31
    1716:	9e e4       	ldi	r25, 0x4E	; 78
    1718:	91 83       	std	Z+1, r25	; 0x01
    171a:	80 83       	st	Z, r24

	//set the angle
	T1_OCR1A=angle;
    171c:	ea e4       	ldi	r30, 0x4A	; 74
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	80 83       	st	Z, r24
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	08 95       	ret

00001734 <T1_voidICUInit>:



/***********************ICU functions*******************************/
void T1_voidICUInit(void)
{
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	0f 92       	push	r0
    173a:	cd b7       	in	r28, 0x3d	; 61
    173c:	de b7       	in	r29, 0x3e	; 62
	u8 Prescaller=prescaler8;
    173e:	82 e0       	ldi	r24, 0x02	; 2
    1740:	89 83       	std	Y+1, r24	; 0x01
	//NormalMode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1742:	af e4       	ldi	r26, 0x4F	; 79
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e4       	ldi	r30, 0x4F	; 79
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	8e 7f       	andi	r24, 0xFE	; 254
    174e:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1750:	af e4       	ldi	r26, 0x4F	; 79
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	ef e4       	ldi	r30, 0x4F	; 79
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	8d 7f       	andi	r24, 0xFD	; 253
    175c:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    175e:	ae e4       	ldi	r26, 0x4E	; 78
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ee e4       	ldi	r30, 0x4E	; 78
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    176c:	ae e4       	ldi	r26, 0x4E	; 78
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	ee e4       	ldi	r30, 0x4E	; 78
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	8f 7e       	andi	r24, 0xEF	; 239
    1778:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	87 70       	andi	r24, 0x07	; 7
    177e:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1780:	ae e4       	ldi	r26, 0x4E	; 78
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	ee e4       	ldi	r30, 0x4E	; 78
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	88 7f       	andi	r24, 0xF8	; 248
    178c:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    178e:	ae e4       	ldi	r26, 0x4E	; 78
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	ee e4       	ldi	r30, 0x4E	; 78
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	90 81       	ld	r25, Z
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	89 2b       	or	r24, r25
    179c:	8c 93       	st	X, r24
	//Set ICU Bit to Rising
	set_bit(T1_TCCR1B,T1_TCCR1B_ICES1);
    179e:	ae e4       	ldi	r26, 0x4E	; 78
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ee e4       	ldi	r30, 0x4E	; 78
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	80 64       	ori	r24, 0x40	; 64
    17aa:	8c 93       	st	X, r24
	//Enable ICU Interrupt
	set_bit(T1_TIMSK,T1_TIMSK_TICIE1);
    17ac:	a9 e5       	ldi	r26, 0x59	; 89
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e9 e5       	ldi	r30, 0x59	; 89
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 62       	ori	r24, 0x20	; 32
    17b8:	8c 93       	st	X, r24
	}
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <T1_voidCallBackFuncICUMode>:


void T1_voidCallBackFuncICUMode(void (*ICUpf)(void))
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <T1_voidCallBackFuncICUMode+0x6>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
	if(ICUpf!=NULL)
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <T1_voidCallBackFuncICUMode+0x22>
	{
		GlobalICUPf=ICUpf;
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	90 93 93 01 	sts	0x0193, r25
    17e0:	80 93 92 01 	sts	0x0192, r24
	}
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <__vector_6>:


void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    17ee:	1f 92       	push	r1
    17f0:	0f 92       	push	r0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	0f 92       	push	r0
    17f6:	11 24       	eor	r1, r1
    17f8:	2f 93       	push	r18
    17fa:	3f 93       	push	r19
    17fc:	4f 93       	push	r20
    17fe:	5f 93       	push	r21
    1800:	6f 93       	push	r22
    1802:	7f 93       	push	r23
    1804:	8f 93       	push	r24
    1806:	9f 93       	push	r25
    1808:	af 93       	push	r26
    180a:	bf 93       	push	r27
    180c:	ef 93       	push	r30
    180e:	ff 93       	push	r31
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62

	if (GlobalICUPf!=NULL)
    1818:	80 91 92 01 	lds	r24, 0x0192
    181c:	90 91 93 01 	lds	r25, 0x0193
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	29 f0       	breq	.+10     	; 0x182e <__vector_6+0x40>
	{
		GlobalICUPf();
    1824:	e0 91 92 01 	lds	r30, 0x0192
    1828:	f0 91 93 01 	lds	r31, 0x0193
    182c:	09 95       	icall
	}

}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	0f 90       	pop	r0
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	0f 90       	pop	r0
    1850:	1f 90       	pop	r1
    1852:	18 95       	reti

00001854 <T0_voidNormalModeInit>:



/*************************************Normal Mode functions***************************/
void T0_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <T0_voidNormalModeInit+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	6a 83       	std	Y+2, r22	; 0x02
    1864:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1866:	a3 e5       	ldi	r26, 0x53	; 83
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e3 e5       	ldi	r30, 0x53	; 83
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8f 7b       	andi	r24, 0xBF	; 191
    1872:	8c 93       	st	X, r24
	clear_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1874:	a3 e5       	ldi	r26, 0x53	; 83
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e3 e5       	ldi	r30, 0x53	; 83
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	87 7f       	andi	r24, 0xF7	; 247
    1880:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	87 70       	andi	r24, 0x07	; 7
    1886:	89 83       	std	Y+1, r24	; 0x01
	T0_TCCR0&=0xF8;
    1888:	a3 e5       	ldi	r26, 0x53	; 83
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e3 e5       	ldi	r30, 0x53	; 83
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	88 7f       	andi	r24, 0xF8	; 248
    1894:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1896:	a3 e5       	ldi	r26, 0x53	; 83
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e3 e5       	ldi	r30, 0x53	; 83
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	90 81       	ld	r25, Z
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	89 2b       	or	r24, r25
    18a4:	8c 93       	st	X, r24
	T0_TCNT0=PreloadValue;
    18a6:	e2 e5       	ldi	r30, 0x52	; 82
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <T0_voidNormalModeInit+0x70>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    18b4:	a9 e5       	ldi	r26, 0x59	; 89
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e9 e5       	ldi	r30, 0x59	; 89
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	81 60       	ori	r24, 0x01	; 1
    18c0:	8c 93       	st	X, r24
    18c2:	0a c0       	rjmp	.+20     	; 0x18d8 <T0_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	82 30       	cpi	r24, 0x02	; 2
    18c8:	39 f4       	brne	.+14     	; 0x18d8 <T0_voidNormalModeInit+0x84>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    18ca:	a9 e5       	ldi	r26, 0x59	; 89
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e9 e5       	ldi	r30, 0x59	; 89
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8e 7f       	andi	r24, 0xFE	; 254
    18d6:	8c 93       	st	X, r24
	}

}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <T0_voidCallBackFuncNormalMode>:


void T0_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <T0_voidCallBackFuncNormalMode+0x6>
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	9a 81       	ldd	r25, Y+2	; 0x02
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	31 f0       	breq	.+12     	; 0x1906 <T0_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	9a 81       	ldd	r25, Y+2	; 0x02
    18fe:	90 93 9b 01 	sts	0x019B, r25
    1902:	80 93 9a 01 	sts	0x019A, r24
	}
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <__vector_11>:


void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    193a:	80 91 9a 01 	lds	r24, 0x019A
    193e:	90 91 9b 01 	lds	r25, 0x019B
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	29 f0       	breq	.+10     	; 0x1950 <__vector_11+0x40>
	{
		GlobalOVPF();
    1946:	e0 91 9a 01 	lds	r30, 0x019A
    194a:	f0 91 9b 01 	lds	r31, 0x019B
    194e:	09 95       	icall
	}
}
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <T0_voidClearTimerModeInit>:



/**************************************CTC*****************************************/
void T0_voidClearTimerModeInit(u8 OC0State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <T0_voidClearTimerModeInit+0x6>
    197c:	00 d0       	rcall	.+0      	; 0x197e <T0_voidClearTimerModeInit+0x8>
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	6a 83       	std	Y+2, r22	; 0x02
    1986:	4b 83       	std	Y+3, r20	; 0x03
    1988:	2c 83       	std	Y+4, r18	; 0x04
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    198a:	a3 e5       	ldi	r26, 0x53	; 83
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e3 e5       	ldi	r30, 0x53	; 83
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	8f 7b       	andi	r24, 0xBF	; 191
    1996:	8c 93       	st	X, r24
	set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1998:	a3 e5       	ldi	r26, 0x53	; 83
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e3 e5       	ldi	r30, 0x53	; 83
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 60       	ori	r24, 0x08	; 8
    19a4:	8c 93       	st	X, r24
	if(OC0State==CTC_OC0_Disconnect)
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	79 f4       	brne	.+30     	; 0x19ca <T0_voidClearTimerModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    19ac:	a3 e5       	ldi	r26, 0x53	; 83
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e3 e5       	ldi	r30, 0x53	; 83
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	8f 7e       	andi	r24, 0xEF	; 239
    19b8:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    19ba:	a3 e5       	ldi	r26, 0x53	; 83
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e3 e5       	ldi	r30, 0x53	; 83
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	8f 7d       	andi	r24, 0xDF	; 223
    19c6:	8c 93       	st	X, r24
    19c8:	35 c0       	rjmp	.+106    	; 0x1a34 <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Tog)
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	82 30       	cpi	r24, 0x02	; 2
    19ce:	79 f4       	brne	.+30     	; 0x19ee <T0_voidClearTimerModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    19d0:	a3 e5       	ldi	r26, 0x53	; 83
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e3 e5       	ldi	r30, 0x53	; 83
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	80 61       	ori	r24, 0x10	; 16
    19dc:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    19de:	a3 e5       	ldi	r26, 0x53	; 83
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e3 e5       	ldi	r30, 0x53	; 83
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 7d       	andi	r24, 0xDF	; 223
    19ea:	8c 93       	st	X, r24
    19ec:	23 c0       	rjmp	.+70     	; 0x1a34 <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_CLr)
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	79 f4       	brne	.+30     	; 0x1a12 <T0_voidClearTimerModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    19f4:	a3 e5       	ldi	r26, 0x53	; 83
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e3 e5       	ldi	r30, 0x53	; 83
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7e       	andi	r24, 0xEF	; 239
    1a00:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1a02:	a3 e5       	ldi	r26, 0x53	; 83
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e3 e5       	ldi	r30, 0x53	; 83
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 62       	ori	r24, 0x20	; 32
    1a0e:	8c 93       	st	X, r24
    1a10:	11 c0       	rjmp	.+34     	; 0x1a34 <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Set)
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	71 f4       	brne	.+28     	; 0x1a34 <T0_voidClearTimerModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1a18:	a3 e5       	ldi	r26, 0x53	; 83
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e3 e5       	ldi	r30, 0x53	; 83
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 61       	ori	r24, 0x10	; 16
    1a24:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1a26:	a3 e5       	ldi	r26, 0x53	; 83
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e3 e5       	ldi	r30, 0x53	; 83
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	8c 93       	st	X, r24
	}
	//Prescaller
	Prescaller&=0x07;
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	87 70       	andi	r24, 0x07	; 7
    1a38:	8a 83       	std	Y+2, r24	; 0x02
	T0_TCCR0&=0xF8;
    1a3a:	a3 e5       	ldi	r26, 0x53	; 83
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	e3 e5       	ldi	r30, 0x53	; 83
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	88 7f       	andi	r24, 0xF8	; 248
    1a46:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1a48:	a3 e5       	ldi	r26, 0x53	; 83
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e3 e5       	ldi	r30, 0x53	; 83
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	90 81       	ld	r25, Z
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	89 2b       	or	r24, r25
    1a56:	8c 93       	st	X, r24
	//Output compare
	T0_OCR0 = CompareValue;
    1a58:	ec e5       	ldi	r30, 0x5C	; 92
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	41 f4       	brne	.+16     	; 0x1a76 <T0_voidClearTimerModeInit+0x100>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1a66:	a9 e5       	ldi	r26, 0x59	; 89
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e5       	ldi	r30, 0x59	; 89
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	81 60       	ori	r24, 0x01	; 1
    1a72:	8c 93       	st	X, r24
    1a74:	0a c0       	rjmp	.+20     	; 0x1a8a <T0_voidClearTimerModeInit+0x114>
	}
	else if(InterruptState ==disable)
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	39 f4       	brne	.+14     	; 0x1a8a <T0_voidClearTimerModeInit+0x114>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1a7c:	a9 e5       	ldi	r26, 0x59	; 89
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e9 e5       	ldi	r30, 0x59	; 89
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8e 7f       	andi	r24, 0xFE	; 254
    1a88:	8c 93       	st	X, r24
	}

}
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <T0_voidCallBackFuncClearTimerMode>:


void T0_voidCallBackFuncClearTimerMode(void (*CTCpf)(void))
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <T0_voidCallBackFuncClearTimerMode+0x6>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	31 f0       	breq	.+12     	; 0x1aba <T0_voidCallBackFuncClearTimerMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	90 93 9d 01 	sts	0x019D, r25
    1ab6:	80 93 9c 01 	sts	0x019C, r24
	}
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <__vector_10>:


void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    1aee:	80 91 9c 01 	lds	r24, 0x019C
    1af2:	90 91 9d 01 	lds	r25, 0x019D
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_10+0x40>
	{
		GlobalCTCPF();
    1afa:	e0 91 9c 01 	lds	r30, 0x019C
    1afe:	f0 91 9d 01 	lds	r31, 0x019D
    1b02:	09 95       	icall
	}
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <T0_voidPWMModeInit>:



/**************************************PWM**************************************/
void T0_voidPWMModeInit(u8 PWMType, u8 OC0State ,u8 Prescaller, u8 DutyCycle)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <T0_voidPWMModeInit+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <T0_voidPWMModeInit+0x8>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	6a 83       	std	Y+2, r22	; 0x02
    1b3a:	4b 83       	std	Y+3, r20	; 0x03
    1b3c:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <T0_voidPWMModeInit+0x1c>
    1b44:	8f c0       	rjmp	.+286    	; 0x1c64 <T0_voidPWMModeInit+0x13a>
	{
		//fast PWM
		set_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1b46:	a3 e5       	ldi	r26, 0x53	; 83
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e3 e5       	ldi	r30, 0x53	; 83
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	80 64       	ori	r24, 0x40	; 64
    1b52:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1b54:	a3 e5       	ldi	r26, 0x53	; 83
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e3 e5       	ldi	r30, 0x53	; 83
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	88 60       	ori	r24, 0x08	; 8
    1b60:	8c 93       	st	X, r24
		if (OC0State==PWM_OC0_Disconnect)
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	79 f4       	brne	.+30     	; 0x1b86 <T0_voidPWMModeInit+0x5c>
		{
			//disconnect  pin OC0
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1b68:	a3 e5       	ldi	r26, 0x53	; 83
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e3 e5       	ldi	r30, 0x53	; 83
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	8f 7e       	andi	r24, 0xEF	; 239
    1b74:	8c 93       	st	X, r24
			clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1b76:	a3 e5       	ldi	r26, 0x53	; 83
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e3 e5       	ldi	r30, 0x53	; 83
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	8f 7d       	andi	r24, 0xDF	; 223
    1b82:	8c 93       	st	X, r24
    1b84:	5c c0       	rjmp	.+184    	; 0x1c3e <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_nonInverting)
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	49 f5       	brne	.+82     	; 0x1bde <T0_voidPWMModeInit+0xb4>
		{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1b8c:	a3 e5       	ldi	r26, 0x53	; 83
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e3 e5       	ldi	r30, 0x53	; 83
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7e       	andi	r24, 0xEF	; 239
    1b98:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1b9a:	a3 e5       	ldi	r26, 0x53	; 83
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e3 e5       	ldi	r30, 0x53	; 83
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	80 62       	ori	r24, 0x20	; 32
    1ba6:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1ba8:	ec e5       	ldi	r30, 0x5C	; 92
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	48 2f       	mov	r20, r24
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
    1bb2:	ca 01       	movw	r24, r20
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	22 0f       	add	r18, r18
    1bb8:	33 1f       	adc	r19, r19
    1bba:	c9 01       	movw	r24, r18
    1bbc:	96 95       	lsr	r25
    1bbe:	98 2f       	mov	r25, r24
    1bc0:	88 27       	eor	r24, r24
    1bc2:	97 95       	ror	r25
    1bc4:	87 95       	ror	r24
    1bc6:	82 1b       	sub	r24, r18
    1bc8:	93 0b       	sbc	r25, r19
    1bca:	84 0f       	add	r24, r20
    1bcc:	95 1f       	adc	r25, r21
    1bce:	24 e6       	ldi	r18, 0x64	; 100
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <__divmodhi4>
    1bd8:	cb 01       	movw	r24, r22
    1bda:	80 83       	st	Z, r24
    1bdc:	30 c0       	rjmp	.+96     	; 0x1c3e <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_Inverting)
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	83 30       	cpi	r24, 0x03	; 3
    1be2:	69 f5       	brne	.+90     	; 0x1c3e <T0_voidPWMModeInit+0x114>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1be4:	a3 e5       	ldi	r26, 0x53	; 83
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e3 e5       	ldi	r30, 0x53	; 83
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	80 61       	ori	r24, 0x10	; 16
    1bf0:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1bf2:	a3 e5       	ldi	r26, 0x53	; 83
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e3 e5       	ldi	r30, 0x53	; 83
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	80 62       	ori	r24, 0x20	; 32
    1bfe:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1c00:	ec e5       	ldi	r30, 0x5C	; 92
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	28 2f       	mov	r18, r24
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	82 1b       	sub	r24, r18
    1c10:	93 0b       	sbc	r25, r19
    1c12:	24 e6       	ldi	r18, 0x64	; 100
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	b9 01       	movw	r22, r18
    1c18:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <__divmodhi4>
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	ac 01       	movw	r20, r24
    1c20:	ca 01       	movw	r24, r20
    1c22:	9c 01       	movw	r18, r24
    1c24:	22 0f       	add	r18, r18
    1c26:	33 1f       	adc	r19, r19
    1c28:	c9 01       	movw	r24, r18
    1c2a:	96 95       	lsr	r25
    1c2c:	98 2f       	mov	r25, r24
    1c2e:	88 27       	eor	r24, r24
    1c30:	97 95       	ror	r25
    1c32:	87 95       	ror	r24
    1c34:	82 1b       	sub	r24, r18
    1c36:	93 0b       	sbc	r25, r19
    1c38:	84 0f       	add	r24, r20
    1c3a:	95 1f       	adc	r25, r21
    1c3c:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	87 70       	andi	r24, 0x07	; 7
    1c42:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1c44:	a3 e5       	ldi	r26, 0x53	; 83
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e3 e5       	ldi	r30, 0x53	; 83
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	88 7f       	andi	r24, 0xF8	; 248
    1c50:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1c52:	a3 e5       	ldi	r26, 0x53	; 83
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e3 e5       	ldi	r30, 0x53	; 83
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	90 81       	ld	r25, Z
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	89 2b       	or	r24, r25
    1c60:	8c 93       	st	X, r24
    1c62:	84 c0       	rjmp	.+264    	; 0x1d6c <T0_voidPWMModeInit+0x242>
	}
	else if (PWMType==PhaseCorrectPWM)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <T0_voidPWMModeInit+0x142>
    1c6a:	80 c0       	rjmp	.+256    	; 0x1d6c <T0_voidPWMModeInit+0x242>
	{
		if (OC0State==PWM_OC0_Disconnect)
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	81 30       	cpi	r24, 0x01	; 1
    1c70:	79 f4       	brne	.+30     	; 0x1c90 <T0_voidPWMModeInit+0x166>
			{
				//disconnect  pin OC0
				clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c72:	a3 e5       	ldi	r26, 0x53	; 83
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e3 e5       	ldi	r30, 0x53	; 83
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7e       	andi	r24, 0xEF	; 239
    1c7e:	8c 93       	st	X, r24
				clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c80:	a3 e5       	ldi	r26, 0x53	; 83
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e3 e5       	ldi	r30, 0x53	; 83
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	8f 7d       	andi	r24, 0xDF	; 223
    1c8c:	8c 93       	st	X, r24
    1c8e:	5c c0       	rjmp	.+184    	; 0x1d48 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_nonInverting)
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	82 30       	cpi	r24, 0x02	; 2
    1c94:	49 f5       	brne	.+82     	; 0x1ce8 <T0_voidPWMModeInit+0x1be>
			{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c96:	a3 e5       	ldi	r26, 0x53	; 83
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e3 e5       	ldi	r30, 0x53	; 83
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7e       	andi	r24, 0xEF	; 239
    1ca2:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1ca4:	a3 e5       	ldi	r26, 0x53	; 83
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e3 e5       	ldi	r30, 0x53	; 83
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 62       	ori	r24, 0x20	; 32
    1cb0:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1cb2:	ec e5       	ldi	r30, 0x5C	; 92
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	48 2f       	mov	r20, r24
    1cba:	50 e0       	ldi	r21, 0x00	; 0
    1cbc:	ca 01       	movw	r24, r20
    1cbe:	9c 01       	movw	r18, r24
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	c9 01       	movw	r24, r18
    1cc6:	96 95       	lsr	r25
    1cc8:	98 2f       	mov	r25, r24
    1cca:	88 27       	eor	r24, r24
    1ccc:	97 95       	ror	r25
    1cce:	87 95       	ror	r24
    1cd0:	82 1b       	sub	r24, r18
    1cd2:	93 0b       	sbc	r25, r19
    1cd4:	84 0f       	add	r24, r20
    1cd6:	95 1f       	adc	r25, r21
    1cd8:	24 e6       	ldi	r18, 0x64	; 100
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	b9 01       	movw	r22, r18
    1cde:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <__divmodhi4>
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	80 83       	st	Z, r24
    1ce6:	30 c0       	rjmp	.+96     	; 0x1d48 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_Inverting)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	83 30       	cpi	r24, 0x03	; 3
    1cec:	69 f5       	brne	.+90     	; 0x1d48 <T0_voidPWMModeInit+0x21e>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1cee:	a3 e5       	ldi	r26, 0x53	; 83
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e3 e5       	ldi	r30, 0x53	; 83
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	80 61       	ori	r24, 0x10	; 16
    1cfa:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1cfc:	a3 e5       	ldi	r26, 0x53	; 83
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e3 e5       	ldi	r30, 0x53	; 83
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	80 62       	ori	r24, 0x20	; 32
    1d08:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1d0a:	ec e5       	ldi	r30, 0x5C	; 92
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	82 1b       	sub	r24, r18
    1d1a:	93 0b       	sbc	r25, r19
    1d1c:	24 e6       	ldi	r18, 0x64	; 100
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	b9 01       	movw	r22, r18
    1d22:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <__divmodhi4>
    1d26:	cb 01       	movw	r24, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	ca 01       	movw	r24, r20
    1d2c:	9c 01       	movw	r18, r24
    1d2e:	22 0f       	add	r18, r18
    1d30:	33 1f       	adc	r19, r19
    1d32:	c9 01       	movw	r24, r18
    1d34:	96 95       	lsr	r25
    1d36:	98 2f       	mov	r25, r24
    1d38:	88 27       	eor	r24, r24
    1d3a:	97 95       	ror	r25
    1d3c:	87 95       	ror	r24
    1d3e:	82 1b       	sub	r24, r18
    1d40:	93 0b       	sbc	r25, r19
    1d42:	84 0f       	add	r24, r20
    1d44:	95 1f       	adc	r25, r21
    1d46:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	87 70       	andi	r24, 0x07	; 7
    1d4c:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1d4e:	a3 e5       	ldi	r26, 0x53	; 83
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e3 e5       	ldi	r30, 0x53	; 83
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	88 7f       	andi	r24, 0xF8	; 248
    1d5a:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1d5c:	a3 e5       	ldi	r26, 0x53	; 83
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e3 e5       	ldi	r30, 0x53	; 83
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	90 81       	ld	r25, Z
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	89 2b       	or	r24, r25
    1d6a:	8c 93       	st	X, r24
	}

}
    1d6c:	0f 90       	pop	r0
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <TWI_voidMasterInit>:



/*Init*/
void TWI_voidMasterInit(void)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	0f 92       	push	r0
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	//Bit Rate
	//Prescaller
	u8 Prescaller=TWI_Prescaller;
    1d84:	19 82       	std	Y+1, r1	; 0x01
	Prescaller&=0x03;  //0000 0011
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	83 70       	andi	r24, 0x03	; 3
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWSR&=0xFC;        //1111 1100
    1d8c:	a1 e2       	ldi	r26, 0x21	; 33
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e2       	ldi	r30, 0x21	; 33
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8c 7f       	andi	r24, 0xFC	; 252
    1d98:	8c 93       	st	X, r24
	//TWBR value
	TWI_TWBR=TWI_TWBR_value;
    1d9a:	e0 e2       	ldi	r30, 0x20	; 32
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	80 83       	st	Z, r24
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    1da2:	a6 e5       	ldi	r26, 0x56	; 86
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e6 e5       	ldi	r30, 0x56	; 86
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	80 64       	ori	r24, 0x40	; 64
    1dae:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    1db0:	a6 e5       	ldi	r26, 0x56	; 86
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e6 e5       	ldi	r30, 0x56	; 86
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8e 7f       	andi	r24, 0xFE	; 254
    1dbc:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    1dbe:	e2 e2       	ldi	r30, 0x22	; 34
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    1dc4:	a6 e5       	ldi	r26, 0x56	; 86
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	e6 e5       	ldi	r30, 0x56	; 86
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	84 60       	ori	r24, 0x04	; 4
    1dd0:	8c 93       	st	X, r24

}
    1dd2:	0f 90       	pop	r0
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <TWI_voidSlaveInit>:
void TWI_voidSlaveInit()
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    1de2:	a6 e5       	ldi	r26, 0x56	; 86
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e6 e5       	ldi	r30, 0x56	; 86
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	80 64       	ori	r24, 0x40	; 64
    1dee:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    1df0:	a6 e5       	ldi	r26, 0x56	; 86
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e6 e5       	ldi	r30, 0x56	; 86
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    1dfe:	e2 e2       	ldi	r30, 0x22	; 34
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    1e04:	a6 e5       	ldi	r26, 0x56	; 86
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e6 e5       	ldi	r30, 0x56	; 86
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	84 60       	ori	r24, 0x04	; 4
    1e10:	8c 93       	st	X, r24

}
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	08 95       	ret

00001e18 <TWI_voidStartCondition>:
/*************************************/
/*Start Condtion */
void TWI_voidStartCondition()
{
    1e18:	df 93       	push	r29
    1e1a:	cf 93       	push	r28
    1e1c:	cd b7       	in	r28, 0x3d	; 61
    1e1e:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	set_bit(TWI_TWCR,TWI_TWCR_TWINT);
    1e20:	a6 e5       	ldi	r26, 0x56	; 86
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e6 e5       	ldi	r30, 0x56	; 86
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	80 68       	ori	r24, 0x80	; 128
    1e2c:	8c 93       	st	X, r24
	//Set Start Condition
	set_bit(TWI_TWCR,TWI_TWCR_TWSTA);
    1e2e:	a6 e5       	ldi	r26, 0x56	; 86
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e6 e5       	ldi	r30, 0x56	; 86
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	80 62       	ori	r24, 0x20	; 32
    1e3a:	8c 93       	st	X, r24
	//Wait Flag on () when the Current Job Finish
	while (!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    1e3c:	e6 e5       	ldi	r30, 0x56	; 86
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	88 23       	and	r24, r24
    1e44:	dc f7       	brge	.-10     	; 0x1e3c <TWI_voidStartCondition+0x24>
	//Check on the ACK (TWSR) -> TWI_StartCondition

}
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <TWI_voidRestartCondition>:
void TWI_voidRestartCondition()
{
    1e4c:	df 93       	push	r29
    1e4e:	cf 93       	push	r28
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	//Set Start Condition Job
	//Wait Flag on () when the Current Job Finish
	//Check on the ACK (TWSR)-> TWI_ReStartCondition
}
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <TWI_voidStopCondition>:
/*************************************/
/*Stop Condtion */
void TWI_voidStopCondition()
{
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag
	// Enable Stop Condition
}
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <TWI_voidSendSlAWithWrite>:
/*************************************/
/*Slave Address */
void TWI_voidSendSlAWithWrite(u8 DestinationAddress)
{	 	//Sent the Destiantion
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	0f 92       	push	r0
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	89 83       	std	Y+1, r24	; 0x01
		//TWDR = DestinationAddress + 0 ->Write
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/W )
	//Check on the ACK (TWSR) -> TWI_SLAWACK

}
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <TWI_voidSendSlAWithRead>:
void TWI_voidSendSlAWithRead(u8 DestinationAddress)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	89 83       	std	Y+1, r24	; 0x01
	//TWDR-> Sent Any thing (DestinationAddress and Write Date and Read Data)
		//TWDR = DestinationAddress + 1 ->Read
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/A )
	//Check on the ACK (TWSR) -> TWI_SLARACK
}
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <TWI_voidWriteDataByte>:
/*************************************/
/*Data Byte */
void TWI_voidWriteDataByte(u8 Data)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	89 83       	std	Y+1, r24	; 0x01
	//Write Data Byte in TWDR
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Write Byte)
	//Check on the ACK (TWSR) -> TWI_Tx_DataACK

}// Take this Value
    1e9c:	0f 90       	pop	r0
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <TWI_voidReadDataByte>:
void TWI_voidReadDataByte(u8 *Data)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <TWI_voidReadDataByte+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	9a 83       	std	Y+2, r25	; 0x02
    1eb0:	89 83       	std	Y+1, r24	; 0x01
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Read Byte)
	//Check on the ACK (TWSR) -> TWI_Rx_DataACK
	//Read Data From TWDR And Store it in side Pointer

}
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <SPI_voidinit>:
#include "SPI_Interface.h"



void SPI_voidinit(void)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
#if SPI_InterrptE==disable
	clear_bit(SPI_SPCR,SPCR_SPIE);
    1ec4:	ad e2       	ldi	r26, 0x2D	; 45
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ed e2       	ldi	r30, 0x2D	; 45
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 77       	andi	r24, 0x7F	; 127
    1ed0:	8c 93       	st	X, r24
#endif

#if SPI_DataOrder==DataorderLSB
	set_bit(SPI_SPCR,SPCR_DORD);
#elif SPI_DataOrder==DataorderMSB
	clear_bit(SPI_SPCR,SPCR_DORD);
    1ed2:	ad e2       	ldi	r26, 0x2D	; 45
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	ed e2       	ldi	r30, 0x2D	; 45
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 7d       	andi	r24, 0xDF	; 223
    1ede:	8c 93       	st	X, r24
#endif


	set_bit(SPI_SPCR,SPCR_SPE);
    1ee0:	ad e2       	ldi	r26, 0x2D	; 45
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	ed e2       	ldi	r30, 0x2D	; 45
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 64       	ori	r24, 0x40	; 64
    1eec:	8c 93       	st	X, r24
#if SPI_State==Master
	set_bit(SPI_SPCR,SPCR_MSTR);
    1eee:	ad e2       	ldi	r26, 0x2D	; 45
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	ed e2       	ldi	r30, 0x2D	; 45
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 61       	ori	r24, 0x10	; 16
    1efa:	8c 93       	st	X, r24
#elif SPI_State==Slave
	clear_bit(SPI_SPCR,SPCR_MSTR);
#endif

#if SPI_ClkPolarity==Rising
	clear_bit(SPI_SPCR,SPCR_CPOL);
    1efc:	ad e2       	ldi	r26, 0x2D	; 45
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	ed e2       	ldi	r30, 0x2D	; 45
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	87 7f       	andi	r24, 0xF7	; 247
    1f08:	8c 93       	st	X, r24
#elif SPI_ClkPolarity==Falling
	set_bit(SPI_SPCR,SPCR_CPOL);
#endif

#if SPI_ClkPhase==TxRx
	clear_bit(SPI_SPCR,SPCR_CPHA);
    1f0a:	ad e2       	ldi	r26, 0x2D	; 45
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ed e2       	ldi	r30, 0x2D	; 45
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8b 7f       	andi	r24, 0xFB	; 251
    1f16:	8c 93       	st	X, r24
	set_bit(SPI_SPCR,SPCR_CPHA);
#endif


#if SPI_Frequency==F4
	clear_bit(SPI_SPSR,SPSR_SPI2X);
    1f18:	ae e2       	ldi	r26, 0x2E	; 46
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	ee e2       	ldi	r30, 0x2E	; 46
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	8e 7f       	andi	r24, 0xFE	; 254
    1f24:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR0);
    1f26:	ad e2       	ldi	r26, 0x2D	; 45
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	ed e2       	ldi	r30, 0x2D	; 45
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	8e 7f       	andi	r24, 0xFE	; 254
    1f32:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR1);
    1f34:	ad e2       	ldi	r26, 0x2D	; 45
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	ed e2       	ldi	r30, 0x2D	; 45
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	8d 7f       	andi	r24, 0xFD	; 253
    1f40:	8c 93       	st	X, r24
	set_bit(SPI_SPSR,SPSR_SPI2X);
	clear_bit(SPI_SPCR,SPCR_SPR0);
	set_bit(SPI_SPCR,SPCR_SPR1);
#endif

}
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <SPI_u8sendReceiveByte>:




u8 SPI_u8sendReceiveByte(u8 data)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	0f 92       	push	r0
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPI_SPDR = data;
    1f54:	ef e2       	ldi	r30, 0x2F	; 47
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(!get_bit(SPI_SPSR,SPSR_SPIF)){}
    1f5c:	ee e2       	ldi	r30, 0x2E	; 46
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	88 23       	and	r24, r24
    1f64:	dc f7       	brge	.-10     	; 0x1f5c <SPI_u8sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPI_SPDR;
    1f66:	ef e2       	ldi	r30, 0x2F	; 47
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
}
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <SPI_voidsendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_voidsendString(const u8 *str)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <SPI_voidsendString+0x6>
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <SPI_voidsendString+0x8>
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	9c 83       	std	Y+4, r25	; 0x04
    1f82:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    1f84:	1a 82       	std	Y+2, r1	; 0x02
	u8 received_data = 0;
    1f86:	19 82       	std	Y+1, r1	; 0x01
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <SPI_voidsendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
    1f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	fc 01       	movw	r30, r24
    1f96:	e2 0f       	add	r30, r18
    1f98:	f3 1f       	adc	r31, r19
    1f9a:	80 81       	ld	r24, Z
    1f9c:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <SPI_u8sendReceiveByte>
    1fa0:	89 83       	std	Y+1, r24	; 0x01
		i++;
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	e2 0f       	add	r30, r18
    1fb6:	f3 1f       	adc	r31, r19
    1fb8:	80 81       	ld	r24, Z
    1fba:	88 23       	and	r24, r24
    1fbc:	31 f7       	brne	.-52     	; 0x1f8a <SPI_voidsendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
		i++;
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <SPI_voidreceiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_voidreceiveString(u8 *str)
{
    1fcc:	0f 93       	push	r16
    1fce:	1f 93       	push	r17
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	00 d0       	rcall	.+0      	; 0x1fd6 <SPI_voidreceiveString+0xa>
    1fd6:	0f 92       	push	r0
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	9b 83       	std	Y+3, r25	; 0x03
    1fde:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1fe0:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	8c 01       	movw	r16, r24
    1fee:	02 0f       	add	r16, r18
    1ff0:	13 1f       	adc	r17, r19
    1ff2:	8f ef       	ldi	r24, 0xFF	; 255
    1ff4:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <SPI_u8sendReceiveByte>
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	80 83       	st	Z, r24
    1ffc:	10 c0       	rjmp	.+32     	; 0x201e <SPI_voidreceiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	8f 5f       	subi	r24, 0xFF	; 255
    2002:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	8c 01       	movw	r16, r24
    2010:	02 0f       	add	r16, r18
    2012:	13 1f       	adc	r17, r19
    2014:	8f ef       	ldi	r24, 0xFF	; 255
    2016:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <SPI_u8sendReceiveByte>
    201a:	f8 01       	movw	r30, r16
    201c:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	9b 81       	ldd	r25, Y+3	; 0x03
    2028:	fc 01       	movw	r30, r24
    202a:	e2 0f       	add	r30, r18
    202c:	f3 1f       	adc	r31, r19
    202e:	80 81       	ld	r24, Z
    2030:	83 32       	cpi	r24, 0x23	; 35
    2032:	29 f7       	brne	.-54     	; 0x1ffe <SPI_voidreceiveString+0x32>
		i++;
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	28 2f       	mov	r18, r24
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	fc 01       	movw	r30, r24
    2040:	e2 0f       	add	r30, r18
    2042:	f3 1f       	adc	r31, r19
    2044:	10 82       	st	Z, r1
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	cf 91       	pop	r28
    204e:	df 91       	pop	r29
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	08 95       	ret

00002056 <GIE_voidEnable>:
#define GIE_SREG    *((volatile u8*)0x5F)
#define GIE_I       7


void GIE_voidEnable()
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	set_bit(GIE_SREG,GIE_I);
    205e:	af e5       	ldi	r26, 0x5F	; 95
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ef e5       	ldi	r30, 0x5F	; 95
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 68       	ori	r24, 0x80	; 128
    206a:	8c 93       	st	X, r24
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <GIE_voidDisable>:

void GIE_voidDisable()
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GIE_SREG,GIE_I);
    207a:	af e5       	ldi	r26, 0x5F	; 95
    207c:	b0 e0       	ldi	r27, 0x00	; 0
    207e:	ef e5       	ldi	r30, 0x5F	; 95
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	8f 77       	andi	r24, 0x7F	; 127
    2086:	8c 93       	st	X, r24
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <EXTI_voidInitINT0>:
#include "EXTI_Interface.h"
void (*EXTI0_ISR)();
void (*EXTI1_ISR)();
void (*EXTI2_ISR)();
void EXTI_voidInitINT0(u8 sense)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	81 30       	cpi	r24, 0x01	; 1
    209e:	79 f4       	brne	.+30     	; 0x20be <EXTI_voidInitINT0+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    20a0:	a5 e5       	ldi	r26, 0x55	; 85
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e5 e5       	ldi	r30, 0x55	; 85
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	8e 7f       	andi	r24, 0xFE	; 254
    20ac:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    20ae:	a5 e5       	ldi	r26, 0x55	; 85
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e5 e5       	ldi	r30, 0x55	; 85
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8d 7f       	andi	r24, 0xFD	; 253
    20ba:	8c 93       	st	X, r24
    20bc:	35 c0       	rjmp	.+106    	; 0x2128 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==AnyCahnge)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	82 30       	cpi	r24, 0x02	; 2
    20c2:	79 f4       	brne	.+30     	; 0x20e2 <EXTI_voidInitINT0+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    20c4:	a5 e5       	ldi	r26, 0x55	; 85
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e5 e5       	ldi	r30, 0x55	; 85
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    20d2:	a5 e5       	ldi	r26, 0x55	; 85
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e5 e5       	ldi	r30, 0x55	; 85
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8d 7f       	andi	r24, 0xFD	; 253
    20de:	8c 93       	st	X, r24
    20e0:	23 c0       	rjmp	.+70     	; 0x2128 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Falling)
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	79 f4       	brne	.+30     	; 0x2106 <EXTI_voidInitINT0+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    20e8:	a5 e5       	ldi	r26, 0x55	; 85
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e5 e5       	ldi	r30, 0x55	; 85
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8e 7f       	andi	r24, 0xFE	; 254
    20f4:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    20f6:	a5 e5       	ldi	r26, 0x55	; 85
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e5 e5       	ldi	r30, 0x55	; 85
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	82 60       	ori	r24, 0x02	; 2
    2102:	8c 93       	st	X, r24
    2104:	11 c0       	rjmp	.+34     	; 0x2128 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Rising)
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	84 30       	cpi	r24, 0x04	; 4
    210a:	71 f4       	brne	.+28     	; 0x2128 <EXTI_voidInitINT0+0x9a>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    210c:	a5 e5       	ldi	r26, 0x55	; 85
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e5       	ldi	r30, 0x55	; 85
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	81 60       	ori	r24, 0x01	; 1
    2118:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    211a:	a5 e5       	ldi	r26, 0x55	; 85
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e5 e5       	ldi	r30, 0x55	; 85
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	82 60       	ori	r24, 0x02	; 2
    2126:	8c 93       	st	X, r24
	}
	else
	{
		//error
	}
	set_bit(EXTI_GICR,EXTI_INT0);
    2128:	ab e5       	ldi	r26, 0x5B	; 91
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	eb e5       	ldi	r30, 0x5B	; 91
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	80 64       	ori	r24, 0x40	; 64
    2134:	8c 93       	st	X, r24

}
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <EXTI_voidInitINT1>:

void EXTI_voidInitINT1(u8 sense)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	0f 92       	push	r0
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	79 f4       	brne	.+30     	; 0x216e <EXTI_voidInitINT1+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    2150:	a5 e5       	ldi	r26, 0x55	; 85
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e5       	ldi	r30, 0x55	; 85
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	8b 7f       	andi	r24, 0xFB	; 251
    215c:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    215e:	a5 e5       	ldi	r26, 0x55	; 85
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e5       	ldi	r30, 0x55	; 85
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	87 7f       	andi	r24, 0xF7	; 247
    216a:	8c 93       	st	X, r24
    216c:	35 c0       	rjmp	.+106    	; 0x21d8 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==AnyCahnge)
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	79 f4       	brne	.+30     	; 0x2192 <EXTI_voidInitINT1+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    2174:	a5 e5       	ldi	r26, 0x55	; 85
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e5 e5       	ldi	r30, 0x55	; 85
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	84 60       	ori	r24, 0x04	; 4
    2180:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    2182:	a5 e5       	ldi	r26, 0x55	; 85
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e5 e5       	ldi	r30, 0x55	; 85
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	87 7f       	andi	r24, 0xF7	; 247
    218e:	8c 93       	st	X, r24
    2190:	23 c0       	rjmp	.+70     	; 0x21d8 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Falling)
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	83 30       	cpi	r24, 0x03	; 3
    2196:	79 f4       	brne	.+30     	; 0x21b6 <EXTI_voidInitINT1+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    2198:	a5 e5       	ldi	r26, 0x55	; 85
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e5 e5       	ldi	r30, 0x55	; 85
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	8b 7f       	andi	r24, 0xFB	; 251
    21a4:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    21a6:	a5 e5       	ldi	r26, 0x55	; 85
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	e5 e5       	ldi	r30, 0x55	; 85
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 60       	ori	r24, 0x08	; 8
    21b2:	8c 93       	st	X, r24
    21b4:	11 c0       	rjmp	.+34     	; 0x21d8 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Rising)
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	84 30       	cpi	r24, 0x04	; 4
    21ba:	a9 f4       	brne	.+42     	; 0x21e6 <EXTI_voidInitINT1+0xa8>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    21bc:	a5 e5       	ldi	r26, 0x55	; 85
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e5 e5       	ldi	r30, 0x55	; 85
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	84 60       	ori	r24, 0x04	; 4
    21c8:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    21ca:	a5 e5       	ldi	r26, 0x55	; 85
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e5 e5       	ldi	r30, 0x55	; 85
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	88 60       	ori	r24, 0x08	; 8
    21d6:	8c 93       	st	X, r24
	}
	else
	{
		return;
	}
	set_bit(EXTI_GICR,EXTI_INT1);
    21d8:	ab e5       	ldi	r26, 0x5B	; 91
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	eb e5       	ldi	r30, 0x5B	; 91
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	80 68       	ori	r24, 0x80	; 128
    21e4:	8c 93       	st	X, r24
}
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <EXTI_voidInitINT2>:

void EXTI_voidInitINT2(u8 sense)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	0f 92       	push	r0
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	89 83       	std	Y+1, r24	; 0x01
	if(sense==Rising)
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	84 30       	cpi	r24, 0x04	; 4
    21fe:	41 f4       	brne	.+16     	; 0x2210 <EXTI_voidInitINT2+0x22>
	{
		set_bit(EXTI_MCUCSR,EXTI_ISC2);
    2200:	a4 e5       	ldi	r26, 0x54	; 84
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e4 e5       	ldi	r30, 0x54	; 84
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 64       	ori	r24, 0x40	; 64
    220c:	8c 93       	st	X, r24
    220e:	0a c0       	rjmp	.+20     	; 0x2224 <EXTI_voidInitINT2+0x36>
	}
	else if (sense==Rising)
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	39 f4       	brne	.+14     	; 0x2224 <EXTI_voidInitINT2+0x36>
	{
		clear_bit(EXTI_MCUCSR,EXTI_ISC2);
    2216:	a4 e5       	ldi	r26, 0x54	; 84
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e4 e5       	ldi	r30, 0x54	; 84
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8f 7b       	andi	r24, 0xBF	; 191
    2222:	8c 93       	st	X, r24
	}
	else
	{

	}
	set_bit(EXTI_GICR,EXTI_INT2);
    2224:	ab e5       	ldi	r26, 0x5B	; 91
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	eb e5       	ldi	r30, 0x5B	; 91
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	80 62       	ori	r24, 0x20	; 32
    2230:	8c 93       	st	X, r24
}
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <EXTI0_CallBack>:

void EXTI0_CallBack (void (*ptr)(void))
{
    223a:	df 93       	push	r29
    223c:	cf 93       	push	r28
    223e:	00 d0       	rcall	.+0      	; 0x2240 <EXTI0_CallBack+0x6>
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	9a 83       	std	Y+2, r25	; 0x02
    2246:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_ISR = ptr;
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	9a 81       	ldd	r25, Y+2	; 0x02
    224c:	90 93 a5 01 	sts	0x01A5, r25
    2250:	80 93 a4 01 	sts	0x01A4, r24
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	08 95       	ret

0000225e <__vector_1>:
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    225e:	1f 92       	push	r1
    2260:	0f 92       	push	r0
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	0f 92       	push	r0
    2266:	11 24       	eor	r1, r1
    2268:	2f 93       	push	r18
    226a:	3f 93       	push	r19
    226c:	4f 93       	push	r20
    226e:	5f 93       	push	r21
    2270:	6f 93       	push	r22
    2272:	7f 93       	push	r23
    2274:	8f 93       	push	r24
    2276:	9f 93       	push	r25
    2278:	af 93       	push	r26
    227a:	bf 93       	push	r27
    227c:	ef 93       	push	r30
    227e:	ff 93       	push	r31
    2280:	df 93       	push	r29
    2282:	cf 93       	push	r28
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_ISR!=NULL)
    2288:	80 91 a4 01 	lds	r24, 0x01A4
    228c:	90 91 a5 01 	lds	r25, 0x01A5
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	29 f0       	breq	.+10     	; 0x229e <__vector_1+0x40>
	{
		EXTI0_ISR();
    2294:	e0 91 a4 01 	lds	r30, 0x01A4
    2298:	f0 91 a5 01 	lds	r31, 0x01A5
    229c:	09 95       	icall
	}
}
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	ff 91       	pop	r31
    22a4:	ef 91       	pop	r30
    22a6:	bf 91       	pop	r27
    22a8:	af 91       	pop	r26
    22aa:	9f 91       	pop	r25
    22ac:	8f 91       	pop	r24
    22ae:	7f 91       	pop	r23
    22b0:	6f 91       	pop	r22
    22b2:	5f 91       	pop	r21
    22b4:	4f 91       	pop	r20
    22b6:	3f 91       	pop	r19
    22b8:	2f 91       	pop	r18
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	0f 90       	pop	r0
    22c0:	1f 90       	pop	r1
    22c2:	18 95       	reti

000022c4 <EXTI1_CallBack>:

void EXTI1_CallBack (void (*ptr)(void))
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <EXTI1_CallBack+0x6>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	9a 83       	std	Y+2, r25	; 0x02
    22d0:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_ISR = ptr;
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	9a 81       	ldd	r25, Y+2	; 0x02
    22d6:	90 93 a3 01 	sts	0x01A3, r25
    22da:	80 93 a2 01 	sts	0x01A2, r24
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    22e8:	1f 92       	push	r1
    22ea:	0f 92       	push	r0
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	0f 92       	push	r0
    22f0:	11 24       	eor	r1, r1
    22f2:	2f 93       	push	r18
    22f4:	3f 93       	push	r19
    22f6:	4f 93       	push	r20
    22f8:	5f 93       	push	r21
    22fa:	6f 93       	push	r22
    22fc:	7f 93       	push	r23
    22fe:	8f 93       	push	r24
    2300:	9f 93       	push	r25
    2302:	af 93       	push	r26
    2304:	bf 93       	push	r27
    2306:	ef 93       	push	r30
    2308:	ff 93       	push	r31
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_ISR!=NULL)
    2312:	80 91 a2 01 	lds	r24, 0x01A2
    2316:	90 91 a3 01 	lds	r25, 0x01A3
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	29 f0       	breq	.+10     	; 0x2328 <__vector_2+0x40>
	{
		EXTI1_ISR();
    231e:	e0 91 a2 01 	lds	r30, 0x01A2
    2322:	f0 91 a3 01 	lds	r31, 0x01A3
    2326:	09 95       	icall
	}
}
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	ff 91       	pop	r31
    232e:	ef 91       	pop	r30
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	0f 90       	pop	r0
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	0f 90       	pop	r0
    234a:	1f 90       	pop	r1
    234c:	18 95       	reti

0000234e <EXTI2_CallBack>:
void EXTI2_CallBack (void (*ptr)(void))
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <EXTI2_CallBack+0x6>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9a 83       	std	Y+2, r25	; 0x02
    235a:	89 83       	std	Y+1, r24	; 0x01
    EXTI2_ISR = ptr;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	90 93 a1 01 	sts	0x01A1, r25
    2364:	80 93 a0 01 	sts	0x01A0, r24
}
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    2372:	1f 92       	push	r1
    2374:	0f 92       	push	r0
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	0f 92       	push	r0
    237a:	11 24       	eor	r1, r1
    237c:	2f 93       	push	r18
    237e:	3f 93       	push	r19
    2380:	4f 93       	push	r20
    2382:	5f 93       	push	r21
    2384:	6f 93       	push	r22
    2386:	7f 93       	push	r23
    2388:	8f 93       	push	r24
    238a:	9f 93       	push	r25
    238c:	af 93       	push	r26
    238e:	bf 93       	push	r27
    2390:	ef 93       	push	r30
    2392:	ff 93       	push	r31
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_ISR!=NULL)
    239c:	80 91 a0 01 	lds	r24, 0x01A0
    23a0:	90 91 a1 01 	lds	r25, 0x01A1
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	29 f0       	breq	.+10     	; 0x23b2 <__vector_3+0x40>
	{
		EXTI2_ISR();
    23a8:	e0 91 a0 01 	lds	r30, 0x01A0
    23ac:	f0 91 a1 01 	lds	r31, 0x01A1
    23b0:	09 95       	icall
	}
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	ff 91       	pop	r31
    23b8:	ef 91       	pop	r30
    23ba:	bf 91       	pop	r27
    23bc:	af 91       	pop	r26
    23be:	9f 91       	pop	r25
    23c0:	8f 91       	pop	r24
    23c2:	7f 91       	pop	r23
    23c4:	6f 91       	pop	r22
    23c6:	5f 91       	pop	r21
    23c8:	4f 91       	pop	r20
    23ca:	3f 91       	pop	r19
    23cc:	2f 91       	pop	r18
    23ce:	0f 90       	pop	r0
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	0f 90       	pop	r0
    23d4:	1f 90       	pop	r1
    23d6:	18 95       	reti

000023d8 <IN_EEPROM_voidWriteByte>:
 */

#include "EEPROM_Interface.h"

void IN_EEPROM_voidWriteByte( u8 Address , u8 data)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <IN_EEPROM_voidWriteByte+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    23e6:	ec e3       	ldi	r30, 0x3C	; 60
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	86 95       	lsr	r24
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	81 70       	andi	r24, 0x01	; 1
    23f4:	90 70       	andi	r25, 0x00	; 0
    23f6:	88 23       	and	r24, r24
    23f8:	b1 f7       	brne	.-20     	; 0x23e6 <IN_EEPROM_voidWriteByte+0xe>
	while(get_bit(E_SPMCR,E_SPMCR_SPMEN));
    23fa:	e7 e5       	ldi	r30, 0x57	; 87
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	81 70       	andi	r24, 0x01	; 1
    2406:	90 70       	andi	r25, 0x00	; 0
    2408:	88 23       	and	r24, r24
    240a:	b9 f7       	brne	.-18     	; 0x23fa <IN_EEPROM_voidWriteByte+0x22>
	EE_EEARL = Address ;
    240c:	ee e3       	ldi	r30, 0x3E	; 62
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	80 83       	st	Z, r24
	EE_EEDR  = data ;
    2414:	ed e3       	ldi	r30, 0x3D	; 61
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EEMWE);
    241c:	ac e3       	ldi	r26, 0x3C	; 60
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	ec e3       	ldi	r30, 0x3C	; 60
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	84 60       	ori	r24, 0x04	; 4
    2428:	8c 93       	st	X, r24
	set_bit(EE_EECR,EE_EECR_EEWE);
    242a:	ac e3       	ldi	r26, 0x3C	; 60
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	ec e3       	ldi	r30, 0x3C	; 60
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	82 60       	ori	r24, 0x02	; 2
    2436:	8c 93       	st	X, r24
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <IN_EEPROM_voidReadByte>:
void IN_EEPROM_voidReadByte( u8 Address , u8* data)
{
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <IN_EEPROM_voidReadByte+0x6>
    2448:	0f 92       	push	r0
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	7b 83       	std	Y+3, r23	; 0x03
    2452:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    2454:	ec e3       	ldi	r30, 0x3C	; 60
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	86 95       	lsr	r24
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	81 70       	andi	r24, 0x01	; 1
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	88 23       	and	r24, r24
    2466:	b1 f7       	brne	.-20     	; 0x2454 <IN_EEPROM_voidReadByte+0x12>
	while(get_bit(E_SPMCR,E_SPMCR_SPMEN));
    2468:	e7 e5       	ldi	r30, 0x57	; 87
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	81 70       	andi	r24, 0x01	; 1
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	88 23       	and	r24, r24
    2478:	b9 f7       	brne	.-18     	; 0x2468 <IN_EEPROM_voidReadByte+0x26>
	EE_EEARL = Address ;
    247a:	ee e3       	ldi	r30, 0x3E	; 62
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EERE);
    2482:	ac e3       	ldi	r26, 0x3C	; 60
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	ec e3       	ldi	r30, 0x3C	; 60
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	81 60       	ori	r24, 0x01	; 1
    248e:	8c 93       	st	X, r24
	*data = EE_EEDR ;
    2490:	ed e3       	ldi	r30, 0x3D	; 61
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	ea 81       	ldd	r30, Y+2	; 0x02
    2498:	fb 81       	ldd	r31, Y+3	; 0x03
    249a:	80 83       	st	Z, r24
}
    249c:	0f 90       	pop	r0
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <IN_EEPROM_voidEraseAll>:

void IN_EEPROM_voidEraseAll(void)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <IN_EEPROM_voidEraseAll+0x6>
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    24b2:	1a 82       	std	Y+2, r1	; 0x02
    24b4:	19 82       	std	Y+1, r1	; 0x01
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <IN_EEPROM_voidEraseAll+0x22>
	{
		IN_EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <IN_EEPROM_voidWriteByte>
}

void IN_EEPROM_voidEraseAll(void)
{
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	01 96       	adiw	r24, 0x01	; 1
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	24 e0       	ldi	r18, 0x04	; 4
    24d0:	80 30       	cpi	r24, 0x00	; 0
    24d2:	92 07       	cpc	r25, r18
    24d4:	88 f3       	brcs	.-30     	; 0x24b8 <IN_EEPROM_voidEraseAll+0x10>
	{
		IN_EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
	}
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <IN_EEPROM_voidEraseByte>:

void IN_EEPROM_voidEraseByte(u8 Address)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	89 83       	std	Y+1, r24	; 0x01
	IN_EEPROM_voidWriteByte( Address , 0x00 );
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <IN_EEPROM_voidWriteByte>
}
    24f4:	0f 90       	pop	r0
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <DIO_voidSetPinDir>:
#include "DIO_Praivte.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	27 97       	sbiw	r28, 0x07	; 7
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	89 83       	std	Y+1, r24	; 0x01
    2512:	6a 83       	std	Y+2, r22	; 0x02
    2514:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	88 23       	and	r24, r24
    251a:	09 f4       	brne	.+2      	; 0x251e <DIO_voidSetPinDir+0x22>
    251c:	f4 c0       	rjmp	.+488    	; 0x2706 <DIO_voidSetPinDir+0x20a>
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	85 30       	cpi	r24, 0x05	; 5
    2522:	08 f0       	brcs	.+2      	; 0x2526 <DIO_voidSetPinDir+0x2a>
    2524:	f0 c0       	rjmp	.+480    	; 0x2706 <DIO_voidSetPinDir+0x20a>
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	88 30       	cpi	r24, 0x08	; 8
    252a:	08 f0       	brcs	.+2      	; 0x252e <DIO_voidSetPinDir+0x32>
    252c:	ec c0       	rjmp	.+472    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	88 23       	and	r24, r24
    2532:	09 f0       	breq	.+2      	; 0x2536 <DIO_voidSetPinDir+0x3a>
    2534:	75 c0       	rjmp	.+234    	; 0x2620 <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	3f 83       	std	Y+7, r19	; 0x07
    253e:	2e 83       	std	Y+6, r18	; 0x06
    2540:	8e 81       	ldd	r24, Y+6	; 0x06
    2542:	9f 81       	ldd	r25, Y+7	; 0x07
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	91 05       	cpc	r25, r1
    2548:	61 f1       	breq	.+88     	; 0x25a2 <DIO_voidSetPinDir+0xa6>
    254a:	2e 81       	ldd	r18, Y+6	; 0x06
    254c:	3f 81       	ldd	r19, Y+7	; 0x07
    254e:	23 30       	cpi	r18, 0x03	; 3
    2550:	31 05       	cpc	r19, r1
    2552:	34 f4       	brge	.+12     	; 0x2560 <DIO_voidSetPinDir+0x64>
    2554:	8e 81       	ldd	r24, Y+6	; 0x06
    2556:	9f 81       	ldd	r25, Y+7	; 0x07
    2558:	81 30       	cpi	r24, 0x01	; 1
    255a:	91 05       	cpc	r25, r1
    255c:	69 f0       	breq	.+26     	; 0x2578 <DIO_voidSetPinDir+0x7c>
    255e:	d3 c0       	rjmp	.+422    	; 0x2706 <DIO_voidSetPinDir+0x20a>
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	23 30       	cpi	r18, 0x03	; 3
    2566:	31 05       	cpc	r19, r1
    2568:	89 f1       	breq	.+98     	; 0x25cc <DIO_voidSetPinDir+0xd0>
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	9f 81       	ldd	r25, Y+7	; 0x07
    256e:	84 30       	cpi	r24, 0x04	; 4
    2570:	91 05       	cpc	r25, r1
    2572:	09 f4       	brne	.+2      	; 0x2576 <DIO_voidSetPinDir+0x7a>
    2574:	40 c0       	rjmp	.+128    	; 0x25f6 <DIO_voidSetPinDir+0xfa>
    2576:	c7 c0       	rjmp	.+398    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
    2578:	aa e3       	ldi	r26, 0x3A	; 58
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	ea e3       	ldi	r30, 0x3A	; 58
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	48 2f       	mov	r20, r24
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	02 2e       	mov	r0, r18
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <DIO_voidSetPinDir+0x9a>
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	0a 94       	dec	r0
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <DIO_voidSetPinDir+0x96>
    259a:	80 95       	com	r24
    259c:	84 23       	and	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	b2 c0       	rjmp	.+356    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
    25a2:	a7 e3       	ldi	r26, 0x37	; 55
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e7 e3       	ldi	r30, 0x37	; 55
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <DIO_voidSetPinDir+0xc4>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <DIO_voidSetPinDir+0xc0>
    25c4:	80 95       	com	r24
    25c6:	84 23       	and	r24, r20
    25c8:	8c 93       	st	X, r24
    25ca:	9d c0       	rjmp	.+314    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
    25cc:	a4 e3       	ldi	r26, 0x34	; 52
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e4 e3       	ldi	r30, 0x34	; 52
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	48 2f       	mov	r20, r24
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	02 2e       	mov	r0, r18
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <DIO_voidSetPinDir+0xee>
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	0a 94       	dec	r0
    25ec:	e2 f7       	brpl	.-8      	; 0x25e6 <DIO_voidSetPinDir+0xea>
    25ee:	80 95       	com	r24
    25f0:	84 23       	and	r24, r20
    25f2:	8c 93       	st	X, r24
    25f4:	88 c0       	rjmp	.+272    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
    25f6:	a1 e3       	ldi	r26, 0x31	; 49
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e1 e3       	ldi	r30, 0x31	; 49
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	48 2f       	mov	r20, r24
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	02 2e       	mov	r0, r18
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <DIO_voidSetPinDir+0x118>
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	0a 94       	dec	r0
    2616:	e2 f7       	brpl	.-8      	; 0x2610 <DIO_voidSetPinDir+0x114>
    2618:	80 95       	com	r24
    261a:	84 23       	and	r24, r20
    261c:	8c 93       	st	X, r24
    261e:	73 c0       	rjmp	.+230    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	09 f0       	breq	.+2      	; 0x2628 <DIO_voidSetPinDir+0x12c>
    2626:	6f c0       	rjmp	.+222    	; 0x2706 <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3d 83       	std	Y+5, r19	; 0x05
    2630:	2c 83       	std	Y+4, r18	; 0x04
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	9d 81       	ldd	r25, Y+5	; 0x05
    2636:	82 30       	cpi	r24, 0x02	; 2
    2638:	91 05       	cpc	r25, r1
    263a:	51 f1       	breq	.+84     	; 0x2690 <DIO_voidSetPinDir+0x194>
    263c:	2c 81       	ldd	r18, Y+4	; 0x04
    263e:	3d 81       	ldd	r19, Y+5	; 0x05
    2640:	23 30       	cpi	r18, 0x03	; 3
    2642:	31 05       	cpc	r19, r1
    2644:	34 f4       	brge	.+12     	; 0x2652 <DIO_voidSetPinDir+0x156>
    2646:	8c 81       	ldd	r24, Y+4	; 0x04
    2648:	9d 81       	ldd	r25, Y+5	; 0x05
    264a:	81 30       	cpi	r24, 0x01	; 1
    264c:	91 05       	cpc	r25, r1
    264e:	61 f0       	breq	.+24     	; 0x2668 <DIO_voidSetPinDir+0x16c>
    2650:	5a c0       	rjmp	.+180    	; 0x2706 <DIO_voidSetPinDir+0x20a>
    2652:	2c 81       	ldd	r18, Y+4	; 0x04
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	23 30       	cpi	r18, 0x03	; 3
    2658:	31 05       	cpc	r19, r1
    265a:	71 f1       	breq	.+92     	; 0x26b8 <DIO_voidSetPinDir+0x1bc>
    265c:	8c 81       	ldd	r24, Y+4	; 0x04
    265e:	9d 81       	ldd	r25, Y+5	; 0x05
    2660:	84 30       	cpi	r24, 0x04	; 4
    2662:	91 05       	cpc	r25, r1
    2664:	e9 f1       	breq	.+122    	; 0x26e0 <DIO_voidSetPinDir+0x1e4>
    2666:	4f c0       	rjmp	.+158    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
    2668:	aa e3       	ldi	r26, 0x3A	; 58
    266a:	b0 e0       	ldi	r27, 0x00	; 0
    266c:	ea e3       	ldi	r30, 0x3A	; 58
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
    2672:	48 2f       	mov	r20, r24
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	02 2e       	mov	r0, r18
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <DIO_voidSetPinDir+0x18a>
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	0a 94       	dec	r0
    2688:	e2 f7       	brpl	.-8      	; 0x2682 <DIO_voidSetPinDir+0x186>
    268a:	84 2b       	or	r24, r20
    268c:	8c 93       	st	X, r24
    268e:	3b c0       	rjmp	.+118    	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
    2690:	a7 e3       	ldi	r26, 0x37	; 55
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	e7 e3       	ldi	r30, 0x37	; 55
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	80 81       	ld	r24, Z
    269a:	48 2f       	mov	r20, r24
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	02 2e       	mov	r0, r18
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <DIO_voidSetPinDir+0x1b2>
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	0a 94       	dec	r0
    26b0:	e2 f7       	brpl	.-8      	; 0x26aa <DIO_voidSetPinDir+0x1ae>
    26b2:	84 2b       	or	r24, r20
    26b4:	8c 93       	st	X, r24
    26b6:	27 c0       	rjmp	.+78     	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
    26b8:	a4 e3       	ldi	r26, 0x34	; 52
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e4 e3       	ldi	r30, 0x34	; 52
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	48 2f       	mov	r20, r24
    26c4:	8a 81       	ldd	r24, Y+2	; 0x02
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	02 2e       	mov	r0, r18
    26d0:	02 c0       	rjmp	.+4      	; 0x26d6 <DIO_voidSetPinDir+0x1da>
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	0a 94       	dec	r0
    26d8:	e2 f7       	brpl	.-8      	; 0x26d2 <DIO_voidSetPinDir+0x1d6>
    26da:	84 2b       	or	r24, r20
    26dc:	8c 93       	st	X, r24
    26de:	13 c0       	rjmp	.+38     	; 0x2706 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
    26e0:	a1 e3       	ldi	r26, 0x31	; 49
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e1 e3       	ldi	r30, 0x31	; 49
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	48 2f       	mov	r20, r24
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	28 2f       	mov	r18, r24
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	02 2e       	mov	r0, r18
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <DIO_voidSetPinDir+0x202>
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	0a 94       	dec	r0
    2700:	e2 f7       	brpl	.-8      	; 0x26fa <DIO_voidSetPinDir+0x1fe>
    2702:	84 2b       	or	r24, r20
    2704:	8c 93       	st	X, r24
			}
		}
	}


}
    2706:	27 96       	adiw	r28, 0x07	; 7
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	27 97       	sbiw	r28, 0x07	; 7
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	89 83       	std	Y+1, r24	; 0x01
    272e:	6a 83       	std	Y+2, r22	; 0x02
    2730:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	88 23       	and	r24, r24
    2736:	09 f4       	brne	.+2      	; 0x273a <DIO_voidSetPinValue+0x22>
    2738:	f4 c0       	rjmp	.+488    	; 0x2922 <DIO_voidSetPinValue+0x20a>
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	85 30       	cpi	r24, 0x05	; 5
    273e:	08 f0       	brcs	.+2      	; 0x2742 <DIO_voidSetPinValue+0x2a>
    2740:	f0 c0       	rjmp	.+480    	; 0x2922 <DIO_voidSetPinValue+0x20a>
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	88 30       	cpi	r24, 0x08	; 8
    2746:	08 f0       	brcs	.+2      	; 0x274a <DIO_voidSetPinValue+0x32>
    2748:	ec c0       	rjmp	.+472    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	88 23       	and	r24, r24
    274e:	09 f0       	breq	.+2      	; 0x2752 <DIO_voidSetPinValue+0x3a>
    2750:	75 c0       	rjmp	.+234    	; 0x283c <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	3f 83       	std	Y+7, r19	; 0x07
    275a:	2e 83       	std	Y+6, r18	; 0x06
    275c:	8e 81       	ldd	r24, Y+6	; 0x06
    275e:	9f 81       	ldd	r25, Y+7	; 0x07
    2760:	82 30       	cpi	r24, 0x02	; 2
    2762:	91 05       	cpc	r25, r1
    2764:	61 f1       	breq	.+88     	; 0x27be <DIO_voidSetPinValue+0xa6>
    2766:	2e 81       	ldd	r18, Y+6	; 0x06
    2768:	3f 81       	ldd	r19, Y+7	; 0x07
    276a:	23 30       	cpi	r18, 0x03	; 3
    276c:	31 05       	cpc	r19, r1
    276e:	34 f4       	brge	.+12     	; 0x277c <DIO_voidSetPinValue+0x64>
    2770:	8e 81       	ldd	r24, Y+6	; 0x06
    2772:	9f 81       	ldd	r25, Y+7	; 0x07
    2774:	81 30       	cpi	r24, 0x01	; 1
    2776:	91 05       	cpc	r25, r1
    2778:	69 f0       	breq	.+26     	; 0x2794 <DIO_voidSetPinValue+0x7c>
    277a:	d3 c0       	rjmp	.+422    	; 0x2922 <DIO_voidSetPinValue+0x20a>
    277c:	2e 81       	ldd	r18, Y+6	; 0x06
    277e:	3f 81       	ldd	r19, Y+7	; 0x07
    2780:	23 30       	cpi	r18, 0x03	; 3
    2782:	31 05       	cpc	r19, r1
    2784:	89 f1       	breq	.+98     	; 0x27e8 <DIO_voidSetPinValue+0xd0>
    2786:	8e 81       	ldd	r24, Y+6	; 0x06
    2788:	9f 81       	ldd	r25, Y+7	; 0x07
    278a:	84 30       	cpi	r24, 0x04	; 4
    278c:	91 05       	cpc	r25, r1
    278e:	09 f4       	brne	.+2      	; 0x2792 <DIO_voidSetPinValue+0x7a>
    2790:	40 c0       	rjmp	.+128    	; 0x2812 <DIO_voidSetPinValue+0xfa>
    2792:	c7 c0       	rjmp	.+398    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
    2794:	ab e3       	ldi	r26, 0x3B	; 59
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	eb e3       	ldi	r30, 0x3B	; 59
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	48 2f       	mov	r20, r24
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	02 2e       	mov	r0, r18
    27ac:	02 c0       	rjmp	.+4      	; 0x27b2 <DIO_voidSetPinValue+0x9a>
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	0a 94       	dec	r0
    27b4:	e2 f7       	brpl	.-8      	; 0x27ae <DIO_voidSetPinValue+0x96>
    27b6:	80 95       	com	r24
    27b8:	84 23       	and	r24, r20
    27ba:	8c 93       	st	X, r24
    27bc:	b2 c0       	rjmp	.+356    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
    27be:	a8 e3       	ldi	r26, 0x38	; 56
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e8 e3       	ldi	r30, 0x38	; 56
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	48 2f       	mov	r20, r24
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	02 2e       	mov	r0, r18
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <DIO_voidSetPinValue+0xc4>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	0a 94       	dec	r0
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <DIO_voidSetPinValue+0xc0>
    27e0:	80 95       	com	r24
    27e2:	84 23       	and	r24, r20
    27e4:	8c 93       	st	X, r24
    27e6:	9d c0       	rjmp	.+314    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
    27e8:	a5 e3       	ldi	r26, 0x35	; 53
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e5 e3       	ldi	r30, 0x35	; 53
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	48 2f       	mov	r20, r24
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 2e       	mov	r0, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <DIO_voidSetPinValue+0xee>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <DIO_voidSetPinValue+0xea>
    280a:	80 95       	com	r24
    280c:	84 23       	and	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	88 c0       	rjmp	.+272    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
    2812:	a2 e3       	ldi	r26, 0x32	; 50
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e2 e3       	ldi	r30, 0x32	; 50
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	48 2f       	mov	r20, r24
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	02 2e       	mov	r0, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <DIO_voidSetPinValue+0x118>
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	0a 94       	dec	r0
    2832:	e2 f7       	brpl	.-8      	; 0x282c <DIO_voidSetPinValue+0x114>
    2834:	80 95       	com	r24
    2836:	84 23       	and	r24, r20
    2838:	8c 93       	st	X, r24
    283a:	73 c0       	rjmp	.+230    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	81 30       	cpi	r24, 0x01	; 1
    2840:	09 f0       	breq	.+2      	; 0x2844 <DIO_voidSetPinValue+0x12c>
    2842:	6f c0       	rjmp	.+222    	; 0x2922 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	3d 83       	std	Y+5, r19	; 0x05
    284c:	2c 83       	std	Y+4, r18	; 0x04
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	91 05       	cpc	r25, r1
    2856:	51 f1       	breq	.+84     	; 0x28ac <DIO_voidSetPinValue+0x194>
    2858:	2c 81       	ldd	r18, Y+4	; 0x04
    285a:	3d 81       	ldd	r19, Y+5	; 0x05
    285c:	23 30       	cpi	r18, 0x03	; 3
    285e:	31 05       	cpc	r19, r1
    2860:	34 f4       	brge	.+12     	; 0x286e <DIO_voidSetPinValue+0x156>
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	91 05       	cpc	r25, r1
    286a:	61 f0       	breq	.+24     	; 0x2884 <DIO_voidSetPinValue+0x16c>
    286c:	5a c0       	rjmp	.+180    	; 0x2922 <DIO_voidSetPinValue+0x20a>
    286e:	2c 81       	ldd	r18, Y+4	; 0x04
    2870:	3d 81       	ldd	r19, Y+5	; 0x05
    2872:	23 30       	cpi	r18, 0x03	; 3
    2874:	31 05       	cpc	r19, r1
    2876:	71 f1       	breq	.+92     	; 0x28d4 <DIO_voidSetPinValue+0x1bc>
    2878:	8c 81       	ldd	r24, Y+4	; 0x04
    287a:	9d 81       	ldd	r25, Y+5	; 0x05
    287c:	84 30       	cpi	r24, 0x04	; 4
    287e:	91 05       	cpc	r25, r1
    2880:	e9 f1       	breq	.+122    	; 0x28fc <DIO_voidSetPinValue+0x1e4>
    2882:	4f c0       	rjmp	.+158    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    2884:	ab e3       	ldi	r26, 0x3B	; 59
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	eb e3       	ldi	r30, 0x3B	; 59
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_voidSetPinValue+0x18a>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_voidSetPinValue+0x186>
    28a6:	84 2b       	or	r24, r20
    28a8:	8c 93       	st	X, r24
    28aa:	3b c0       	rjmp	.+118    	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    28ac:	a8 e3       	ldi	r26, 0x38	; 56
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	e8 e3       	ldi	r30, 0x38	; 56
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	48 2f       	mov	r20, r24
    28b8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	02 2e       	mov	r0, r18
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <DIO_voidSetPinValue+0x1b2>
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	0a 94       	dec	r0
    28cc:	e2 f7       	brpl	.-8      	; 0x28c6 <DIO_voidSetPinValue+0x1ae>
    28ce:	84 2b       	or	r24, r20
    28d0:	8c 93       	st	X, r24
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    28d4:	a5 e3       	ldi	r26, 0x35	; 53
    28d6:	b0 e0       	ldi	r27, 0x00	; 0
    28d8:	e5 e3       	ldi	r30, 0x35	; 53
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	80 81       	ld	r24, Z
    28de:	48 2f       	mov	r20, r24
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	02 2e       	mov	r0, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <DIO_voidSetPinValue+0x1da>
    28ee:	88 0f       	add	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	0a 94       	dec	r0
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <DIO_voidSetPinValue+0x1d6>
    28f6:	84 2b       	or	r24, r20
    28f8:	8c 93       	st	X, r24
    28fa:	13 c0       	rjmp	.+38     	; 0x2922 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    28fc:	a2 e3       	ldi	r26, 0x32	; 50
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e2 e3       	ldi	r30, 0x32	; 50
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	48 2f       	mov	r20, r24
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	28 2f       	mov	r18, r24
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	02 2e       	mov	r0, r18
    2914:	02 c0       	rjmp	.+4      	; 0x291a <DIO_voidSetPinValue+0x202>
    2916:	88 0f       	add	r24, r24
    2918:	99 1f       	adc	r25, r25
    291a:	0a 94       	dec	r0
    291c:	e2 f7       	brpl	.-8      	; 0x2916 <DIO_voidSetPinValue+0x1fe>
    291e:	84 2b       	or	r24, r20
    2920:	8c 93       	st	X, r24
			}
		}
	}
}
    2922:	27 96       	adiw	r28, 0x07	; 7
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	de bf       	out	0x3e, r29	; 62
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	cd bf       	out	0x3d, r28	; 61
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <DIO_u8ReadPinValue>:
u8 DIO_u8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	00 d0       	rcall	.+0      	; 0x293a <DIO_u8ReadPinValue+0x6>
    293a:	00 d0       	rcall	.+0      	; 0x293c <DIO_u8ReadPinValue+0x8>
    293c:	0f 92       	push	r0
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	88 23       	and	r24, r24
    294a:	09 f4       	brne	.+2      	; 0x294e <DIO_u8ReadPinValue+0x1a>
    294c:	5e c1       	rjmp	.+700    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	85 30       	cpi	r24, 0x05	; 5
    2952:	08 f0       	brcs	.+2      	; 0x2956 <DIO_u8ReadPinValue+0x22>
    2954:	5a c1       	rjmp	.+692    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	08 f0       	brcs	.+2      	; 0x295e <DIO_u8ReadPinValue+0x2a>
    295c:	56 c1       	rjmp	.+684    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	3d 83       	std	Y+5, r19	; 0x05
    2966:	2c 83       	std	Y+4, r18	; 0x04
    2968:	4c 81       	ldd	r20, Y+4	; 0x04
    296a:	5d 81       	ldd	r21, Y+5	; 0x05
    296c:	42 30       	cpi	r20, 0x02	; 2
    296e:	51 05       	cpc	r21, r1
    2970:	09 f4       	brne	.+2      	; 0x2974 <DIO_u8ReadPinValue+0x40>
    2972:	65 c0       	rjmp	.+202    	; 0x2a3e <DIO_u8ReadPinValue+0x10a>
    2974:	8c 81       	ldd	r24, Y+4	; 0x04
    2976:	9d 81       	ldd	r25, Y+5	; 0x05
    2978:	83 30       	cpi	r24, 0x03	; 3
    297a:	91 05       	cpc	r25, r1
    297c:	34 f4       	brge	.+12     	; 0x298a <DIO_u8ReadPinValue+0x56>
    297e:	2c 81       	ldd	r18, Y+4	; 0x04
    2980:	3d 81       	ldd	r19, Y+5	; 0x05
    2982:	21 30       	cpi	r18, 0x01	; 1
    2984:	31 05       	cpc	r19, r1
    2986:	71 f0       	breq	.+28     	; 0x29a4 <DIO_u8ReadPinValue+0x70>
    2988:	40 c1       	rjmp	.+640    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
    298a:	4c 81       	ldd	r20, Y+4	; 0x04
    298c:	5d 81       	ldd	r21, Y+5	; 0x05
    298e:	43 30       	cpi	r20, 0x03	; 3
    2990:	51 05       	cpc	r21, r1
    2992:	09 f4       	brne	.+2      	; 0x2996 <DIO_u8ReadPinValue+0x62>
    2994:	a1 c0       	rjmp	.+322    	; 0x2ad8 <DIO_u8ReadPinValue+0x1a4>
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	9d 81       	ldd	r25, Y+5	; 0x05
    299a:	84 30       	cpi	r24, 0x04	; 4
    299c:	91 05       	cpc	r25, r1
    299e:	09 f4       	brne	.+2      	; 0x29a2 <DIO_u8ReadPinValue+0x6e>
    29a0:	e8 c0       	rjmp	.+464    	; 0x2b72 <DIO_u8ReadPinValue+0x23e>
    29a2:	33 c1       	rjmp	.+614    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
		{
		case DIO_GroupA:
			if(get_bit(DIO_DDRA,Pin_No)==Input)
    29a4:	ea e3       	ldi	r30, 0x3A	; 58
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	88 2f       	mov	r24, r24
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	a9 01       	movw	r20, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <DIO_u8ReadPinValue+0x88>
    29b8:	55 95       	asr	r21
    29ba:	47 95       	ror	r20
    29bc:	8a 95       	dec	r24
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <DIO_u8ReadPinValue+0x84>
    29c0:	ca 01       	movw	r24, r20
    29c2:	81 70       	andi	r24, 0x01	; 1
    29c4:	90 70       	andi	r25, 0x00	; 0
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	99 f4       	brne	.+38     	; 0x29f0 <DIO_u8ReadPinValue+0xbc>
			{
				return((DIO_PINA>>Pin_No)&1);
    29ca:	e9 e3       	ldi	r30, 0x39	; 57
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	28 2f       	mov	r18, r24
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	8a 81       	ldd	r24, Y+2	; 0x02
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	a9 01       	movw	r20, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <DIO_u8ReadPinValue+0xae>
    29de:	55 95       	asr	r21
    29e0:	47 95       	ror	r20
    29e2:	8a 95       	dec	r24
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <DIO_u8ReadPinValue+0xaa>
    29e6:	ca 01       	movw	r24, r20
    29e8:	58 2f       	mov	r21, r24
    29ea:	51 70       	andi	r21, 0x01	; 1
    29ec:	5b 83       	std	Y+3, r21	; 0x03
    29ee:	0f c1       	rjmp	.+542    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRA,Pin_No)==Output)
    29f0:	ea e3       	ldi	r30, 0x3A	; 58
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	80 81       	ld	r24, Z
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	8a 81       	ldd	r24, Y+2	; 0x02
    29fc:	88 2f       	mov	r24, r24
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a9 01       	movw	r20, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_u8ReadPinValue+0xd4>
    2a04:	55 95       	asr	r21
    2a06:	47 95       	ror	r20
    2a08:	8a 95       	dec	r24
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <DIO_u8ReadPinValue+0xd0>
    2a0c:	ca 01       	movw	r24, r20
    2a0e:	81 70       	andi	r24, 0x01	; 1
    2a10:	90 70       	andi	r25, 0x00	; 0
    2a12:	88 23       	and	r24, r24
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <DIO_u8ReadPinValue+0xe4>
    2a16:	f9 c0       	rjmp	.+498    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTA>>Pin_No)&1);
    2a18:	eb e3       	ldi	r30, 0x3B	; 59
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	28 2f       	mov	r18, r24
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	8a 81       	ldd	r24, Y+2	; 0x02
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a9 01       	movw	r20, r18
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <DIO_u8ReadPinValue+0xfc>
    2a2c:	55 95       	asr	r21
    2a2e:	47 95       	ror	r20
    2a30:	8a 95       	dec	r24
    2a32:	e2 f7       	brpl	.-8      	; 0x2a2c <DIO_u8ReadPinValue+0xf8>
    2a34:	ca 01       	movw	r24, r20
    2a36:	58 2f       	mov	r21, r24
    2a38:	51 70       	andi	r21, 0x01	; 1
    2a3a:	5b 83       	std	Y+3, r21	; 0x03
    2a3c:	e8 c0       	rjmp	.+464    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupB:
			if(get_bit(DIO_DDRB,Pin_No)==Input)
    2a3e:	e7 e3       	ldi	r30, 0x37	; 55
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a9 01       	movw	r20, r18
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_u8ReadPinValue+0x122>
    2a52:	55 95       	asr	r21
    2a54:	47 95       	ror	r20
    2a56:	8a 95       	dec	r24
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <DIO_u8ReadPinValue+0x11e>
    2a5a:	ca 01       	movw	r24, r20
    2a5c:	81 70       	andi	r24, 0x01	; 1
    2a5e:	90 70       	andi	r25, 0x00	; 0
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	99 f4       	brne	.+38     	; 0x2a8a <DIO_u8ReadPinValue+0x156>
			{
				return((DIO_PINB>>Pin_No)&1);
    2a64:	e6 e3       	ldi	r30, 0x36	; 54
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	a9 01       	movw	r20, r18
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <DIO_u8ReadPinValue+0x148>
    2a78:	55 95       	asr	r21
    2a7a:	47 95       	ror	r20
    2a7c:	8a 95       	dec	r24
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <DIO_u8ReadPinValue+0x144>
    2a80:	ca 01       	movw	r24, r20
    2a82:	58 2f       	mov	r21, r24
    2a84:	51 70       	andi	r21, 0x01	; 1
    2a86:	5b 83       	std	Y+3, r21	; 0x03
    2a88:	c2 c0       	rjmp	.+388    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRB,Pin_No)==Output)
    2a8a:	e7 e3       	ldi	r30, 0x37	; 55
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	28 2f       	mov	r18, r24
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	88 2f       	mov	r24, r24
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	a9 01       	movw	r20, r18
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <DIO_u8ReadPinValue+0x16e>
    2a9e:	55 95       	asr	r21
    2aa0:	47 95       	ror	r20
    2aa2:	8a 95       	dec	r24
    2aa4:	e2 f7       	brpl	.-8      	; 0x2a9e <DIO_u8ReadPinValue+0x16a>
    2aa6:	ca 01       	movw	r24, r20
    2aa8:	81 70       	andi	r24, 0x01	; 1
    2aaa:	90 70       	andi	r25, 0x00	; 0
    2aac:	88 23       	and	r24, r24
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <DIO_u8ReadPinValue+0x17e>
    2ab0:	ac c0       	rjmp	.+344    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTB>>Pin_No)&1);
    2ab2:	e8 e3       	ldi	r30, 0x38	; 56
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a9 01       	movw	r20, r18
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <DIO_u8ReadPinValue+0x196>
    2ac6:	55 95       	asr	r21
    2ac8:	47 95       	ror	r20
    2aca:	8a 95       	dec	r24
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <DIO_u8ReadPinValue+0x192>
    2ace:	ca 01       	movw	r24, r20
    2ad0:	58 2f       	mov	r21, r24
    2ad2:	51 70       	andi	r21, 0x01	; 1
    2ad4:	5b 83       	std	Y+3, r21	; 0x03
    2ad6:	9b c0       	rjmp	.+310    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupC:
			if(get_bit(DIO_DDRC,Pin_No)==Input)
    2ad8:	e4 e3       	ldi	r30, 0x34	; 52
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae4:	88 2f       	mov	r24, r24
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	a9 01       	movw	r20, r18
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <DIO_u8ReadPinValue+0x1bc>
    2aec:	55 95       	asr	r21
    2aee:	47 95       	ror	r20
    2af0:	8a 95       	dec	r24
    2af2:	e2 f7       	brpl	.-8      	; 0x2aec <DIO_u8ReadPinValue+0x1b8>
    2af4:	ca 01       	movw	r24, r20
    2af6:	81 70       	andi	r24, 0x01	; 1
    2af8:	90 70       	andi	r25, 0x00	; 0
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	99 f4       	brne	.+38     	; 0x2b24 <DIO_u8ReadPinValue+0x1f0>
			{
				return((DIO_PINC>>Pin_No)&1);
    2afe:	e3 e3       	ldi	r30, 0x33	; 51
    2b00:	f0 e0       	ldi	r31, 0x00	; 0
    2b02:	80 81       	ld	r24, Z
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a9 01       	movw	r20, r18
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <DIO_u8ReadPinValue+0x1e2>
    2b12:	55 95       	asr	r21
    2b14:	47 95       	ror	r20
    2b16:	8a 95       	dec	r24
    2b18:	e2 f7       	brpl	.-8      	; 0x2b12 <DIO_u8ReadPinValue+0x1de>
    2b1a:	ca 01       	movw	r24, r20
    2b1c:	58 2f       	mov	r21, r24
    2b1e:	51 70       	andi	r21, 0x01	; 1
    2b20:	5b 83       	std	Y+3, r21	; 0x03
    2b22:	75 c0       	rjmp	.+234    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRC,Pin_No)==Output)
    2b24:	e4 e3       	ldi	r30, 0x34	; 52
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	28 2f       	mov	r18, r24
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b30:	88 2f       	mov	r24, r24
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a9 01       	movw	r20, r18
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <DIO_u8ReadPinValue+0x208>
    2b38:	55 95       	asr	r21
    2b3a:	47 95       	ror	r20
    2b3c:	8a 95       	dec	r24
    2b3e:	e2 f7       	brpl	.-8      	; 0x2b38 <DIO_u8ReadPinValue+0x204>
    2b40:	ca 01       	movw	r24, r20
    2b42:	81 70       	andi	r24, 0x01	; 1
    2b44:	90 70       	andi	r25, 0x00	; 0
    2b46:	88 23       	and	r24, r24
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <DIO_u8ReadPinValue+0x218>
    2b4a:	5f c0       	rjmp	.+190    	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTC>>Pin_No)&1);
    2b4c:	e5 e3       	ldi	r30, 0x35	; 53
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	a9 01       	movw	r20, r18
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <DIO_u8ReadPinValue+0x230>
    2b60:	55 95       	asr	r21
    2b62:	47 95       	ror	r20
    2b64:	8a 95       	dec	r24
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <DIO_u8ReadPinValue+0x22c>
    2b68:	ca 01       	movw	r24, r20
    2b6a:	58 2f       	mov	r21, r24
    2b6c:	51 70       	andi	r21, 0x01	; 1
    2b6e:	5b 83       	std	Y+3, r21	; 0x03
    2b70:	4e c0       	rjmp	.+156    	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupD:
			if(get_bit(DIO_DDRD,Pin_No)==Input)
    2b72:	e1 e3       	ldi	r30, 0x31	; 49
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	a9 01       	movw	r20, r18
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <DIO_u8ReadPinValue+0x256>
    2b86:	55 95       	asr	r21
    2b88:	47 95       	ror	r20
    2b8a:	8a 95       	dec	r24
    2b8c:	e2 f7       	brpl	.-8      	; 0x2b86 <DIO_u8ReadPinValue+0x252>
    2b8e:	ca 01       	movw	r24, r20
    2b90:	81 70       	andi	r24, 0x01	; 1
    2b92:	90 70       	andi	r25, 0x00	; 0
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	99 f4       	brne	.+38     	; 0x2bbe <DIO_u8ReadPinValue+0x28a>
			{
				return((DIO_PIND>>Pin_No)&1);
    2b98:	e0 e3       	ldi	r30, 0x30	; 48
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	88 2f       	mov	r24, r24
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a9 01       	movw	r20, r18
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <DIO_u8ReadPinValue+0x27c>
    2bac:	55 95       	asr	r21
    2bae:	47 95       	ror	r20
    2bb0:	8a 95       	dec	r24
    2bb2:	e2 f7       	brpl	.-8      	; 0x2bac <DIO_u8ReadPinValue+0x278>
    2bb4:	ca 01       	movw	r24, r20
    2bb6:	58 2f       	mov	r21, r24
    2bb8:	51 70       	andi	r21, 0x01	; 1
    2bba:	5b 83       	std	Y+3, r21	; 0x03
    2bbc:	28 c0       	rjmp	.+80     	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRD,Pin_No)==Output)
    2bbe:	e1 e3       	ldi	r30, 0x31	; 49
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a9 01       	movw	r20, r18
    2bd0:	02 c0       	rjmp	.+4      	; 0x2bd6 <DIO_u8ReadPinValue+0x2a2>
    2bd2:	55 95       	asr	r21
    2bd4:	47 95       	ror	r20
    2bd6:	8a 95       	dec	r24
    2bd8:	e2 f7       	brpl	.-8      	; 0x2bd2 <DIO_u8ReadPinValue+0x29e>
    2bda:	ca 01       	movw	r24, r20
    2bdc:	81 70       	andi	r24, 0x01	; 1
    2bde:	90 70       	andi	r25, 0x00	; 0
    2be0:	88 23       	and	r24, r24
    2be2:	99 f0       	breq	.+38     	; 0x2c0a <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTD>>Pin_No)&1);
    2be4:	e2 e3       	ldi	r30, 0x32	; 50
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a9 01       	movw	r20, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <DIO_u8ReadPinValue+0x2c8>
    2bf8:	55 95       	asr	r21
    2bfa:	47 95       	ror	r20
    2bfc:	8a 95       	dec	r24
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <DIO_u8ReadPinValue+0x2c4>
    2c00:	ca 01       	movw	r24, r20
    2c02:	58 2f       	mov	r21, r24
    2c04:	51 70       	andi	r21, 0x01	; 1
    2c06:	5b 83       	std	Y+3, r21	; 0x03
    2c08:	02 c0       	rjmp	.+4      	; 0x2c0e <DIO_u8ReadPinValue+0x2da>
			}
			break;
		}
	}
	return -1;
    2c0a:	8f ef       	ldi	r24, 0xFF	; 255
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	cf 91       	pop	r28
    2c1c:	df 91       	pop	r29
    2c1e:	08 95       	ret

00002c20 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	00 d0       	rcall	.+0      	; 0x2c26 <DIO_voidSetPortDir+0x6>
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <DIO_voidSetPortDir+0x8>
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	88 23       	and	r24, r24
    2c34:	b1 f1       	breq	.+108    	; 0x2ca2 <DIO_voidSetPortDir+0x82>
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	85 30       	cpi	r24, 0x05	; 5
    2c3a:	98 f5       	brcc	.+102    	; 0x2ca2 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	28 2f       	mov	r18, r24
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	3c 83       	std	Y+4, r19	; 0x04
    2c44:	2b 83       	std	Y+3, r18	; 0x03
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4a:	82 30       	cpi	r24, 0x02	; 2
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	d9 f0       	breq	.+54     	; 0x2c86 <DIO_voidSetPortDir+0x66>
    2c50:	2b 81       	ldd	r18, Y+3	; 0x03
    2c52:	3c 81       	ldd	r19, Y+4	; 0x04
    2c54:	23 30       	cpi	r18, 0x03	; 3
    2c56:	31 05       	cpc	r19, r1
    2c58:	34 f4       	brge	.+12     	; 0x2c66 <DIO_voidSetPortDir+0x46>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5e:	81 30       	cpi	r24, 0x01	; 1
    2c60:	91 05       	cpc	r25, r1
    2c62:	61 f0       	breq	.+24     	; 0x2c7c <DIO_voidSetPortDir+0x5c>
    2c64:	1e c0       	rjmp	.+60     	; 0x2ca2 <DIO_voidSetPortDir+0x82>
    2c66:	2b 81       	ldd	r18, Y+3	; 0x03
    2c68:	3c 81       	ldd	r19, Y+4	; 0x04
    2c6a:	23 30       	cpi	r18, 0x03	; 3
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	81 f0       	breq	.+32     	; 0x2c90 <DIO_voidSetPortDir+0x70>
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	84 30       	cpi	r24, 0x04	; 4
    2c76:	91 05       	cpc	r25, r1
    2c78:	81 f0       	breq	.+32     	; 0x2c9a <DIO_voidSetPortDir+0x7a>
    2c7a:	13 c0       	rjmp	.+38     	; 0x2ca2 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    2c7c:	ea e3       	ldi	r30, 0x3A	; 58
    2c7e:	f0 e0       	ldi	r31, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	80 83       	st	Z, r24
    2c84:	0e c0       	rjmp	.+28     	; 0x2ca2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    2c86:	e7 e3       	ldi	r30, 0x37	; 55
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	80 83       	st	Z, r24
    2c8e:	09 c0       	rjmp	.+18     	; 0x2ca2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    2c90:	e4 e3       	ldi	r30, 0x34	; 52
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	80 83       	st	Z, r24
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    2c9a:	e1 e3       	ldi	r30, 0x31	; 49
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	80 83       	st	Z, r24
		}
	}

}
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	0f 90       	pop	r0
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <DIO_voidSetPortValue+0x6>
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <DIO_voidSetPortValue+0x8>
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	88 23       	and	r24, r24
    2cc4:	b1 f1       	breq	.+108    	; 0x2d32 <DIO_voidSetPortValue+0x82>
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	85 30       	cpi	r24, 0x05	; 5
    2cca:	98 f5       	brcc	.+102    	; 0x2d32 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	28 2f       	mov	r18, r24
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	3c 83       	std	Y+4, r19	; 0x04
    2cd4:	2b 83       	std	Y+3, r18	; 0x03
    2cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	91 05       	cpc	r25, r1
    2cde:	d9 f0       	breq	.+54     	; 0x2d16 <DIO_voidSetPortValue+0x66>
    2ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce2:	3c 81       	ldd	r19, Y+4	; 0x04
    2ce4:	23 30       	cpi	r18, 0x03	; 3
    2ce6:	31 05       	cpc	r19, r1
    2ce8:	34 f4       	brge	.+12     	; 0x2cf6 <DIO_voidSetPortValue+0x46>
    2cea:	8b 81       	ldd	r24, Y+3	; 0x03
    2cec:	9c 81       	ldd	r25, Y+4	; 0x04
    2cee:	81 30       	cpi	r24, 0x01	; 1
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	61 f0       	breq	.+24     	; 0x2d0c <DIO_voidSetPortValue+0x5c>
    2cf4:	1e c0       	rjmp	.+60     	; 0x2d32 <DIO_voidSetPortValue+0x82>
    2cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    2cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cfa:	23 30       	cpi	r18, 0x03	; 3
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	81 f0       	breq	.+32     	; 0x2d20 <DIO_voidSetPortValue+0x70>
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	9c 81       	ldd	r25, Y+4	; 0x04
    2d04:	84 30       	cpi	r24, 0x04	; 4
    2d06:	91 05       	cpc	r25, r1
    2d08:	81 f0       	breq	.+32     	; 0x2d2a <DIO_voidSetPortValue+0x7a>
    2d0a:	13 c0       	rjmp	.+38     	; 0x2d32 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    2d0c:	eb e3       	ldi	r30, 0x3B	; 59
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	8a 81       	ldd	r24, Y+2	; 0x02
    2d12:	80 83       	st	Z, r24
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    2d16:	e8 e3       	ldi	r30, 0x38	; 56
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	80 83       	st	Z, r24
    2d1e:	09 c0       	rjmp	.+18     	; 0x2d32 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    2d20:	e5 e3       	ldi	r30, 0x35	; 53
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	80 83       	st	Z, r24
    2d28:	04 c0       	rjmp	.+8      	; 0x2d32 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    2d2a:	e2 e3       	ldi	r30, 0x32	; 50
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	80 83       	st	Z, r24
		}
	}

}
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <DIO_U8ReadPortValue+0x6>
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <DIO_U8ReadPortValue+0x8>
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2d4e:	89 81       	ldd	r24, Y+1	; 0x01
    2d50:	88 23       	and	r24, r24
    2d52:	b9 f1       	breq	.+110    	; 0x2dc2 <DIO_U8ReadPortValue+0x82>
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	85 30       	cpi	r24, 0x05	; 5
    2d58:	a0 f5       	brcc	.+104    	; 0x2dc2 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	3c 83       	std	Y+4, r19	; 0x04
    2d62:	2b 83       	std	Y+3, r18	; 0x03
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	9c 81       	ldd	r25, Y+4	; 0x04
    2d68:	82 30       	cpi	r24, 0x02	; 2
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	d9 f0       	breq	.+54     	; 0x2da4 <DIO_U8ReadPortValue+0x64>
    2d6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d70:	3c 81       	ldd	r19, Y+4	; 0x04
    2d72:	23 30       	cpi	r18, 0x03	; 3
    2d74:	31 05       	cpc	r19, r1
    2d76:	34 f4       	brge	.+12     	; 0x2d84 <DIO_U8ReadPortValue+0x44>
    2d78:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7c:	81 30       	cpi	r24, 0x01	; 1
    2d7e:	91 05       	cpc	r25, r1
    2d80:	61 f0       	breq	.+24     	; 0x2d9a <DIO_U8ReadPortValue+0x5a>
    2d82:	1f c0       	rjmp	.+62     	; 0x2dc2 <DIO_U8ReadPortValue+0x82>
    2d84:	2b 81       	ldd	r18, Y+3	; 0x03
    2d86:	3c 81       	ldd	r19, Y+4	; 0x04
    2d88:	23 30       	cpi	r18, 0x03	; 3
    2d8a:	31 05       	cpc	r19, r1
    2d8c:	81 f0       	breq	.+32     	; 0x2dae <DIO_U8ReadPortValue+0x6e>
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	9c 81       	ldd	r25, Y+4	; 0x04
    2d92:	84 30       	cpi	r24, 0x04	; 4
    2d94:	91 05       	cpc	r25, r1
    2d96:	81 f0       	breq	.+32     	; 0x2db8 <DIO_U8ReadPortValue+0x78>
    2d98:	14 c0       	rjmp	.+40     	; 0x2dc2 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    2d9a:	e9 e3       	ldi	r30, 0x39	; 57
    2d9c:	f0 e0       	ldi	r31, 0x00	; 0
    2d9e:	90 81       	ld	r25, Z
    2da0:	9a 83       	std	Y+2, r25	; 0x02
    2da2:	11 c0       	rjmp	.+34     	; 0x2dc6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    2da4:	e6 e3       	ldi	r30, 0x36	; 54
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	20 81       	ld	r18, Z
    2daa:	2a 83       	std	Y+2, r18	; 0x02
    2dac:	0c c0       	rjmp	.+24     	; 0x2dc6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    2dae:	e3 e3       	ldi	r30, 0x33	; 51
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	30 81       	ld	r19, Z
    2db4:	3a 83       	std	Y+2, r19	; 0x02
    2db6:	07 c0       	rjmp	.+14     	; 0x2dc6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    2db8:	e0 e3       	ldi	r30, 0x30	; 48
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	8a 83       	std	Y+2, r24	; 0x02
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    2dc2:	9f ef       	ldi	r25, 0xFF	; 255
    2dc4:	9a 83       	std	Y+2, r25	; 0x02
    2dc6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2dc8:	0f 90       	pop	r0
    2dca:	0f 90       	pop	r0
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <DIO_voidControlPullupPin>:

void DIO_voidControlPullupPin(u8 Group_Type,u8 Pin_No , u8 PullUp_Status)
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <DIO_voidControlPullupPin+0x6>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	6a 83       	std	Y+2, r22	; 0x02
    2de6:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPinDir(Group_Type,Pin_No,Input);
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	6a 81       	ldd	r22, Y+2	; 0x02
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinValue(Group_Type,Pin_No,PullUp_Status);
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	6a 81       	ldd	r22, Y+2	; 0x02
    2df6:	4b 81       	ldd	r20, Y+3	; 0x03
    2df8:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	cf 91       	pop	r28
    2e04:	df 91       	pop	r29
    2e06:	08 95       	ret

00002e08 <ADC_voidInit>:
 */
#include "ADC_Interface.h"
static u16 InterruptData ;  //static??

void ADC_voidInit()
{
    2e08:	df 93       	push	r29
    2e0a:	cf 93       	push	r28
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <ADC_voidInit+0x6>
    2e0e:	0f 92       	push	r0
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
	ADCInformation ADCInformationSet ;
	ADCInformationSet.AutoTriggerState=ADC_AutoTriggerState;
    2e14:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationSet.DivisionFactor=ADC_DivisionFactor;
    2e16:	83 e0       	ldi	r24, 0x03	; 3
    2e18:	8b 83       	std	Y+3, r24	; 0x03
	ADCInformationSet.TriggerSource=ADC_TriggerSource;
    2e1a:	1a 82       	std	Y+2, r1	; 0x02
#if ADC_Mode==Polling
	ADC_voidInitPolling(ADCInformationSet);
    2e1c:	69 81       	ldd	r22, Y+1	; 0x01
    2e1e:	7a 81       	ldd	r23, Y+2	; 0x02
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	0e 94 19 17 	call	0x2e32	; 0x2e32 <ADC_voidInitPolling>
#elif
	ADC_voidInitInterrupt(ADCInformationSet);
#endif
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	cf 91       	pop	r28
    2e2e:	df 91       	pop	r29
    2e30:	08 95       	ret

00002e32 <ADC_voidInitPolling>:
void ADC_voidInitPolling(ADCInformation ADCInfo)
{
    2e32:	df 93       	push	r29
    2e34:	cf 93       	push	r28
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <ADC_voidInitPolling+0x6>
    2e38:	0f 92       	push	r0
    2e3a:	cd b7       	in	r28, 0x3d	; 61
    2e3c:	de b7       	in	r29, 0x3e	; 62
    2e3e:	69 83       	std	Y+1, r22	; 0x01
    2e40:	7a 83       	std	Y+2, r23	; 0x02
    2e42:	8b 83       	std	Y+3, r24	; 0x03
	/*Voltage Reference Selections*/
#if ReferenceSelect==ADCOff
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    2e44:	a7 e2       	ldi	r26, 0x27	; 39
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e7 e2       	ldi	r30, 0x27	; 39
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	8f 77       	andi	r24, 0x7F	; 127
    2e50:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    2e52:	a7 e2       	ldi	r26, 0x27	; 39
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e7 e2       	ldi	r30, 0x27	; 39
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	80 64       	ori	r24, 0x40	; 64
    2e5e:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    2e60:	a7 e2       	ldi	r26, 0x27	; 39
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e7 e2       	ldi	r30, 0x27	; 39
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	8f 7d       	andi	r24, 0xDF	; 223
    2e6c:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    2e6e:	a6 e2       	ldi	r26, 0x26	; 38
    2e70:	b0 e0       	ldi	r27, 0x00	; 0
    2e72:	e6 e2       	ldi	r30, 0x26	; 38
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	80 81       	ld	r24, Z
    2e78:	80 68       	ori	r24, 0x80	; 128
    2e7a:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	d1 f4       	brne	.+52     	; 0x2eb6 <ADC_voidInitPolling+0x84>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    2e82:	a6 e2       	ldi	r26, 0x26	; 38
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e6 e2       	ldi	r30, 0x26	; 38
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	80 62       	ori	r24, 0x20	; 32
    2e8e:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	80 7e       	andi	r24, 0xE0	; 224
    2e94:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    2e96:	a0 e5       	ldi	r26, 0x50	; 80
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e0 e5       	ldi	r30, 0x50	; 80
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	8f 71       	andi	r24, 0x1F	; 31
    2ea2:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    2ea4:	a0 e5       	ldi	r26, 0x50	; 80
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e0 e5       	ldi	r30, 0x50	; 80
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	90 81       	ld	r25, Z
    2eae:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb0:	89 2b       	or	r24, r25
    2eb2:	8c 93       	st	X, r24
    2eb4:	0a c0       	rjmp	.+20     	; 0x2eca <ADC_voidInitPolling+0x98>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    2eb6:	89 81       	ldd	r24, Y+1	; 0x01
    2eb8:	88 23       	and	r24, r24
    2eba:	39 f4       	brne	.+14     	; 0x2eca <ADC_voidInitPolling+0x98>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    2ebc:	a6 e2       	ldi	r26, 0x26	; 38
    2ebe:	b0 e0       	ldi	r27, 0x00	; 0
    2ec0:	e6 e2       	ldi	r30, 0x26	; 38
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	8f 7d       	andi	r24, 0xDF	; 223
    2ec8:	8c 93       	st	X, r24
	}


	/*disable interrupt*/
	clear_bit(ADC_SRA,ADCSRA_ADIE);
    2eca:	a6 e2       	ldi	r26, 0x26	; 38
    2ecc:	b0 e0       	ldi	r27, 0x00	; 0
    2ece:	e6 e2       	ldi	r30, 0x26	; 38
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	80 81       	ld	r24, Z
    2ed4:	87 7f       	andi	r24, 0xF7	; 247
    2ed6:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	87 70       	andi	r24, 0x07	; 7
    2edc:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    2ede:	a6 e2       	ldi	r26, 0x26	; 38
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e6 e2       	ldi	r30, 0x26	; 38
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 7f       	andi	r24, 0xF8	; 248
    2eea:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    2eec:	a6 e2       	ldi	r26, 0x26	; 38
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	e6 e2       	ldi	r30, 0x26	; 38
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	90 81       	ld	r25, Z
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	89 2b       	or	r24, r25
    2efa:	8c 93       	st	X, r24

}
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <ADC_voidReadResultPolling>:


void ADC_voidReadResultPolling(u8 channel, u16 *Result)
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <ADC_voidReadResultPolling+0x6>
    2f0e:	0f 92       	push	r0
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	7b 83       	std	Y+3, r23	; 0x03
    2f18:	6a 83       	std	Y+2, r22	; 0x02
	channel&=0x1F;
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	8f 71       	andi	r24, 0x1F	; 31
    2f1e:	89 83       	std	Y+1, r24	; 0x01
	ADC_MUX&=0xE0;
    2f20:	a7 e2       	ldi	r26, 0x27	; 39
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	e7 e2       	ldi	r30, 0x27	; 39
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
    2f2a:	80 7e       	andi	r24, 0xE0	; 224
    2f2c:	8c 93       	st	X, r24
	ADC_MUX|=channel; //choose the channel
    2f2e:	a7 e2       	ldi	r26, 0x27	; 39
    2f30:	b0 e0       	ldi	r27, 0x00	; 0
    2f32:	e7 e2       	ldi	r30, 0x27	; 39
    2f34:	f0 e0       	ldi	r31, 0x00	; 0
    2f36:	90 81       	ld	r25, Z
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	89 2b       	or	r24, r25
    2f3c:	8c 93       	st	X, r24
	set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    2f3e:	a6 e2       	ldi	r26, 0x26	; 38
    2f40:	b0 e0       	ldi	r27, 0x00	; 0
    2f42:	e6 e2       	ldi	r30, 0x26	; 38
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	80 81       	ld	r24, Z
    2f48:	80 64       	ori	r24, 0x40	; 64
    2f4a:	8c 93       	st	X, r24
	while(get_bit(ADC_SRA,ADCSRA_ADIF)!=ON);
    2f4c:	e6 e2       	ldi	r30, 0x26	; 38
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	82 95       	swap	r24
    2f54:	8f 70       	andi	r24, 0x0F	; 15
    2f56:	88 2f       	mov	r24, r24
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	81 70       	andi	r24, 0x01	; 1
    2f5c:	90 70       	andi	r25, 0x00	; 0
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	a9 f3       	breq	.-22     	; 0x2f4c <ADC_voidReadResultPolling+0x44>
	*Result=ADC_DATA;
    2f62:	e4 e2       	ldi	r30, 0x24	; 36
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    2f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    2f6e:	91 83       	std	Z+1, r25	; 0x01
    2f70:	80 83       	st	Z, r24
	set_bit(ADC_SRA,ADCSRA_ADIF);
    2f72:	a6 e2       	ldi	r26, 0x26	; 38
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e6 e2       	ldi	r30, 0x26	; 38
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 61       	ori	r24, 0x10	; 16
    2f7e:	8c 93       	st	X, r24
}
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	0f 90       	pop	r0
    2f86:	cf 91       	pop	r28
    2f88:	df 91       	pop	r29
    2f8a:	08 95       	ret

00002f8c <ADC_voidInitInterrupt>:


void ADC_voidInitInterrupt(ADCInformation ADCInfo)
{
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <ADC_voidInitInterrupt+0x6>
    2f92:	0f 92       	push	r0
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	69 83       	std	Y+1, r22	; 0x01
    2f9a:	7a 83       	std	Y+2, r23	; 0x02
    2f9c:	8b 83       	std	Y+3, r24	; 0x03
	ADC_MUX=0xFF; //initially to disable the channels until needed
    2f9e:	e7 e2       	ldi	r30, 0x27	; 39
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	8f ef       	ldi	r24, 0xFF	; 255
    2fa4:	80 83       	st	Z, r24
	/*Voltage Reference Selections*/
#if ReferenceSelect==Off
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    2fa6:	a7 e2       	ldi	r26, 0x27	; 39
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e7 e2       	ldi	r30, 0x27	; 39
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	80 81       	ld	r24, Z
    2fb0:	8f 77       	andi	r24, 0x7F	; 127
    2fb2:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    2fb4:	a7 e2       	ldi	r26, 0x27	; 39
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e7 e2       	ldi	r30, 0x27	; 39
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 64       	ori	r24, 0x40	; 64
    2fc0:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    2fc2:	a7 e2       	ldi	r26, 0x27	; 39
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e7 e2       	ldi	r30, 0x27	; 39
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	80 81       	ld	r24, Z
    2fcc:	8f 7d       	andi	r24, 0xDF	; 223
    2fce:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    2fd0:	a6 e2       	ldi	r26, 0x26	; 38
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e6 e2       	ldi	r30, 0x26	; 38
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	80 68       	ori	r24, 0x80	; 128
    2fdc:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	81 30       	cpi	r24, 0x01	; 1
    2fe2:	d1 f4       	brne	.+52     	; 0x3018 <ADC_voidInitInterrupt+0x8c>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    2fe4:	a6 e2       	ldi	r26, 0x26	; 38
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e6 e2       	ldi	r30, 0x26	; 38
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	80 62       	ori	r24, 0x20	; 32
    2ff0:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    2ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff4:	80 7e       	andi	r24, 0xE0	; 224
    2ff6:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    2ff8:	a0 e5       	ldi	r26, 0x50	; 80
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e0 e5       	ldi	r30, 0x50	; 80
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	8f 71       	andi	r24, 0x1F	; 31
    3004:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    3006:	a0 e5       	ldi	r26, 0x50	; 80
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e0 e5       	ldi	r30, 0x50	; 80
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	90 81       	ld	r25, Z
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	89 2b       	or	r24, r25
    3014:	8c 93       	st	X, r24
    3016:	0a c0       	rjmp	.+20     	; 0x302c <ADC_voidInitInterrupt+0xa0>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	88 23       	and	r24, r24
    301c:	39 f4       	brne	.+14     	; 0x302c <ADC_voidInitInterrupt+0xa0>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    301e:	a6 e2       	ldi	r26, 0x26	; 38
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e6 e2       	ldi	r30, 0x26	; 38
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	8f 7d       	andi	r24, 0xDF	; 223
    302a:	8c 93       	st	X, r24
	}


	/*enable interrupt*/
	set_bit(ADC_SRA,ADCSRA_ADIE);
    302c:	a6 e2       	ldi	r26, 0x26	; 38
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e6 e2       	ldi	r30, 0x26	; 38
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	80 81       	ld	r24, Z
    3036:	88 60       	ori	r24, 0x08	; 8
    3038:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	87 70       	andi	r24, 0x07	; 7
    303e:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    3040:	a6 e2       	ldi	r26, 0x26	; 38
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e6 e2       	ldi	r30, 0x26	; 38
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	88 7f       	andi	r24, 0xF8	; 248
    304c:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    304e:	a6 e2       	ldi	r26, 0x26	; 38
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e6 e2       	ldi	r30, 0x26	; 38
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	90 81       	ld	r25, Z
    3058:	8b 81       	ldd	r24, Y+3	; 0x03
    305a:	89 2b       	or	r24, r25
    305c:	8c 93       	st	X, r24
}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	cf 91       	pop	r28
    3066:	df 91       	pop	r29
    3068:	08 95       	ret

0000306a <ADC_voidReadResultInterrupt>:


void ADC_voidReadResultInterrupt(u8 channel)
{
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	0f 92       	push	r0
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	89 83       	std	Y+1, r24	; 0x01
	channel&=0x1F;
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8f 71       	andi	r24, 0x1F	; 31
    307a:	89 83       	std	Y+1, r24	; 0x01
		ADC_MUX&=0xE0;
    307c:	a7 e2       	ldi	r26, 0x27	; 39
    307e:	b0 e0       	ldi	r27, 0x00	; 0
    3080:	e7 e2       	ldi	r30, 0x27	; 39
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	80 81       	ld	r24, Z
    3086:	80 7e       	andi	r24, 0xE0	; 224
    3088:	8c 93       	st	X, r24
		ADC_MUX|=channel; //choose the channel
    308a:	a7 e2       	ldi	r26, 0x27	; 39
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e7 e2       	ldi	r30, 0x27	; 39
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	90 81       	ld	r25, Z
    3094:	89 81       	ldd	r24, Y+1	; 0x01
    3096:	89 2b       	or	r24, r25
    3098:	8c 93       	st	X, r24
		set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    309a:	a6 e2       	ldi	r26, 0x26	; 38
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e6 e2       	ldi	r30, 0x26	; 38
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	80 64       	ori	r24, 0x40	; 64
    30a6:	8c 93       	st	X, r24
}
    30a8:	0f 90       	pop	r0
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <__vector_16>:

void __vector_16()
{
    30b0:	1f 92       	push	r1
    30b2:	0f 92       	push	r0
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	0f 92       	push	r0
    30b8:	11 24       	eor	r1, r1
    30ba:	8f 93       	push	r24
    30bc:	9f 93       	push	r25
    30be:	ef 93       	push	r30
    30c0:	ff 93       	push	r31
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	InterruptData=ADC_DATA;
    30ca:	e4 e2       	ldi	r30, 0x24	; 36
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	80 81       	ld	r24, Z
    30d0:	91 81       	ldd	r25, Z+1	; 0x01
    30d2:	90 93 9f 01 	sts	0x019F, r25
    30d6:	80 93 9e 01 	sts	0x019E, r24
}
    30da:	cf 91       	pop	r28
    30dc:	df 91       	pop	r29
    30de:	ff 91       	pop	r31
    30e0:	ef 91       	pop	r30
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <WaterSensor_voidInit>:
 *      Author: salma
 */

#include "WaterSensor_Interface.h"
void WaterSensor_voidInit()
{
    30f0:	df 93       	push	r29
    30f2:	cf 93       	push	r28
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(WaterSensorGroup,WaterSensorPin,Input);
    30f8:	81 e0       	ldi	r24, 0x01	; 1
    30fa:	67 e0       	ldi	r22, 0x07	; 7
    30fc:	40 e0       	ldi	r20, 0x00	; 0
    30fe:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <WaterSensor_voidRead>:
void WaterSensor_voidRead(u16 *WaterRead)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	00 d0       	rcall	.+0      	; 0x310e <WaterSensor_voidRead+0x6>
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(WaterSensorPin,WaterRead);
    3116:	29 81       	ldd	r18, Y+1	; 0x01
    3118:	3a 81       	ldd	r19, Y+2	; 0x02
    311a:	87 e0       	ldi	r24, 0x07	; 7
    311c:	b9 01       	movw	r22, r18
    311e:	0e 94 84 17 	call	0x2f08	; 0x2f08 <ADC_voidReadResultPolling>
	*WaterRead=((u32)(*WaterRead)*ADCRefmV)/DACRes; //convert out equivalent mV
    3122:	e9 81       	ldd	r30, Y+1	; 0x01
    3124:	fa 81       	ldd	r31, Y+2	; 0x02
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	cc 01       	movw	r24, r24
    312c:	a0 e0       	ldi	r26, 0x00	; 0
    312e:	b0 e0       	ldi	r27, 0x00	; 0
    3130:	28 e8       	ldi	r18, 0x88	; 136
    3132:	33 e1       	ldi	r19, 0x13	; 19
    3134:	40 e0       	ldi	r20, 0x00	; 0
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	07 2e       	mov	r0, r23
    3146:	7a e0       	ldi	r23, 0x0A	; 10
    3148:	b6 95       	lsr	r27
    314a:	a7 95       	ror	r26
    314c:	97 95       	ror	r25
    314e:	87 95       	ror	r24
    3150:	7a 95       	dec	r23
    3152:	d1 f7       	brne	.-12     	; 0x3148 <WaterSensor_voidRead+0x40>
    3154:	70 2d       	mov	r23, r0
    3156:	e9 81       	ldd	r30, Y+1	; 0x01
    3158:	fa 81       	ldd	r31, Y+2	; 0x02
    315a:	91 83       	std	Z+1, r25	; 0x01
    315c:	80 83       	st	Z, r24
	*WaterRead= (*WaterRead)/10.00;
    315e:	e9 81       	ldd	r30, Y+1	; 0x01
    3160:	fa 81       	ldd	r31, Y+2	; 0x02
    3162:	80 81       	ld	r24, Z
    3164:	91 81       	ldd	r25, Z+1	; 0x01
    3166:	cc 01       	movw	r24, r24
    3168:	a0 e0       	ldi	r26, 0x00	; 0
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	bc 01       	movw	r22, r24
    316e:	cd 01       	movw	r24, r26
    3170:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3174:	dc 01       	movw	r26, r24
    3176:	cb 01       	movw	r24, r22
    3178:	bc 01       	movw	r22, r24
    317a:	cd 01       	movw	r24, r26
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e2       	ldi	r20, 0x20	; 32
    3182:	51 e4       	ldi	r21, 0x41	; 65
    3184:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	91 83       	std	Z+1, r25	; 0x01
    319e:	80 83       	st	Z, r24
	}
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	cf 91       	pop	r28
    31a6:	df 91       	pop	r29
    31a8:	08 95       	ret

000031aa <TouchSensor_voidInit>:
 */

#include "TouchSensor_Interface.h"

void TouchSensor_voidInit (u8 Group, u8 pin)
{
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <TouchSensor_voidInit+0x6>
    31b0:	cd b7       	in	r28, 0x3d	; 61
    31b2:	de b7       	in	r29, 0x3e	; 62
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,input);
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	6a 81       	ldd	r22, Y+2	; 0x02
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	cf 91       	pop	r28
    31c8:	df 91       	pop	r29
    31ca:	08 95       	ret

000031cc <TouchSensor_u8GetValue>:

u8 TouchSensor_u8GetValue (u8 Group, u8 pin)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <TouchSensor_u8GetValue+0x6>
    31d2:	0f 92       	push	r0
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	8a 83       	std	Y+2, r24	; 0x02
    31da:	6b 83       	std	Y+3, r22	; 0x03
	u8 TouchSensorState;
	TouchSensorState=DIO_u8ReadPinValue(Group,pin);
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	6b 81       	ldd	r22, Y+3	; 0x03
    31e0:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
    31e4:	89 83       	std	Y+1, r24	; 0x01
	return TouchSensorState;
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <SWITCH_voidInit>:
 *      Author: salma
 */

#include "Switch_Interface.h"
void SWITCH_voidInit (u8 Group, u8 pin)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <SWITCH_voidInit+0x6>
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,Input);
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	6a 81       	ldd	r22, Y+2	; 0x02
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidControlPullupPin(Group,pin,High);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	6a 81       	ldd	r22, Y+2	; 0x02
    3210:	41 e0       	ldi	r20, 0x01	; 1
    3212:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <DIO_voidControlPullupPin>
}
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	cf 91       	pop	r28
    321c:	df 91       	pop	r29
    321e:	08 95       	ret

00003220 <SWITCH_u8GetValue>:

u8 SWITCH_u8GetValue (u8 Group, u8 pin)
{
    3220:	df 93       	push	r29
    3222:	cf 93       	push	r28
    3224:	00 d0       	rcall	.+0      	; 0x3226 <SWITCH_u8GetValue+0x6>
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	89 83       	std	Y+1, r24	; 0x01
    322c:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPinValue(Group,pin);
    322e:	89 81       	ldd	r24, Y+1	; 0x01
    3230:	6a 81       	ldd	r22, Y+2	; 0x02
    3232:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <STEPPER_voidInit>:
 */
#include "Stepper_Interface.h"
#include <util/delay.h>

void STEPPER_voidInit ()
{
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(StepperGroup,StepperB1,Output);
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	41 e0       	ldi	r20, 0x01	; 1
    324e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB2,Output);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	61 e0       	ldi	r22, 0x01	; 1
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB3,Output);
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	62 e0       	ldi	r22, 0x02	; 2
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB4,Output);
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	63 e0       	ldi	r22, 0x03	; 3
    326a:	41 e0       	ldi	r20, 0x01	; 1
    326c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    3270:	cf 91       	pop	r28
    3272:	df 91       	pop	r29
    3274:	08 95       	ret

00003276 <STEPPER_voidCW>:

void STEPPER_voidCW(u16 angle)
{
    3276:	df 93       	push	r29
    3278:	cf 93       	push	r28
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	c2 54       	subi	r28, 0x42	; 66
    3280:	d0 40       	sbci	r29, 0x00	; 0
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	fe 01       	movw	r30, r28
    328e:	ef 5b       	subi	r30, 0xBF	; 191
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
	u32 NOSteps =(angle/FullStepAngle);
    3296:	fe 01       	movw	r30, r28
    3298:	ef 5b       	subi	r30, 0xBF	; 191
    329a:	ff 4f       	sbci	r31, 0xFF	; 255
    329c:	80 81       	ld	r24, Z
    329e:	91 81       	ldd	r25, Z+1	; 0x01
    32a0:	cc 01       	movw	r24, r24
    32a2:	a0 e0       	ldi	r26, 0x00	; 0
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	bc 01       	movw	r22, r24
    32a8:	cd 01       	movw	r24, r26
    32aa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32ae:	dc 01       	movw	r26, r24
    32b0:	cb 01       	movw	r24, r22
    32b2:	bc 01       	movw	r22, r24
    32b4:	cd 01       	movw	r24, r26
    32b6:	2c eb       	ldi	r18, 0xBC	; 188
    32b8:	3c ec       	ldi	r19, 0xCC	; 204
    32ba:	40 e3       	ldi	r20, 0x30	; 48
    32bc:	5e e3       	ldi	r21, 0x3E	; 62
    32be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	bc 01       	movw	r22, r24
    32c8:	cd 01       	movw	r24, r26
    32ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	fe 01       	movw	r30, r28
    32d4:	fd 96       	adiw	r30, 0x3d	; 61
    32d6:	80 83       	st	Z, r24
    32d8:	91 83       	std	Z+1, r25	; 0x01
    32da:	a2 83       	std	Z+2, r26	; 0x02
    32dc:	b3 83       	std	Z+3, r27	; 0x03
	u16 NOIterations=NOSteps/FUllIteration;
    32de:	fe 01       	movw	r30, r28
    32e0:	fd 96       	adiw	r30, 0x3d	; 61
    32e2:	80 81       	ld	r24, Z
    32e4:	91 81       	ldd	r25, Z+1	; 0x01
    32e6:	a2 81       	ldd	r26, Z+2	; 0x02
    32e8:	b3 81       	ldd	r27, Z+3	; 0x03
    32ea:	b6 95       	lsr	r27
    32ec:	a7 95       	ror	r26
    32ee:	97 95       	ror	r25
    32f0:	87 95       	ror	r24
    32f2:	b6 95       	lsr	r27
    32f4:	a7 95       	ror	r26
    32f6:	97 95       	ror	r25
    32f8:	87 95       	ror	r24
    32fa:	9c af       	std	Y+60, r25	; 0x3c
    32fc:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    32fe:	1a ae       	std	Y+58, r1	; 0x3a
    3300:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3302:	1a ae       	std	Y+58, r1	; 0x3a
    3304:	19 ae       	std	Y+57, r1	; 0x39
    3306:	1d c2       	rjmp	.+1082   	; 0x3742 <STEPPER_voidCW+0x4cc>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	62 e0       	ldi	r22, 0x02	; 2
    3320:	41 e0       	ldi	r20, 0x01	; 1
    3322:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	63 e0       	ldi	r22, 0x03	; 3
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e2       	ldi	r26, 0x20	; 32
    3336:	b1 e4       	ldi	r27, 0x41	; 65
    3338:	8d ab       	std	Y+53, r24	; 0x35
    333a:	9e ab       	std	Y+54, r25	; 0x36
    333c:	af ab       	std	Y+55, r26	; 0x37
    333e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3340:	6d a9       	ldd	r22, Y+53	; 0x35
    3342:	7e a9       	ldd	r23, Y+54	; 0x36
    3344:	8f a9       	ldd	r24, Y+55	; 0x37
    3346:	98 ad       	ldd	r25, Y+56	; 0x38
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	4a ef       	ldi	r20, 0xFA	; 250
    334e:	54 e4       	ldi	r21, 0x44	; 68
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	89 ab       	std	Y+49, r24	; 0x31
    335a:	9a ab       	std	Y+50, r25	; 0x32
    335c:	ab ab       	std	Y+51, r26	; 0x33
    335e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3360:	69 a9       	ldd	r22, Y+49	; 0x31
    3362:	7a a9       	ldd	r23, Y+50	; 0x32
    3364:	8b a9       	ldd	r24, Y+51	; 0x33
    3366:	9c a9       	ldd	r25, Y+52	; 0x34
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	2c f4       	brge	.+10     	; 0x3382 <STEPPER_voidCW+0x10c>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	98 ab       	std	Y+48, r25	; 0x30
    337e:	8f a7       	std	Y+47, r24	; 0x2f
    3380:	3f c0       	rjmp	.+126    	; 0x3400 <STEPPER_voidCW+0x18a>
	else if (__tmp > 65535)
    3382:	69 a9       	ldd	r22, Y+49	; 0x31
    3384:	7a a9       	ldd	r23, Y+50	; 0x32
    3386:	8b a9       	ldd	r24, Y+51	; 0x33
    3388:	9c a9       	ldd	r25, Y+52	; 0x34
    338a:	20 e0       	ldi	r18, 0x00	; 0
    338c:	3f ef       	ldi	r19, 0xFF	; 255
    338e:	4f e7       	ldi	r20, 0x7F	; 127
    3390:	57 e4       	ldi	r21, 0x47	; 71
    3392:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3396:	18 16       	cp	r1, r24
    3398:	4c f5       	brge	.+82     	; 0x33ec <STEPPER_voidCW+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    339a:	6d a9       	ldd	r22, Y+53	; 0x35
    339c:	7e a9       	ldd	r23, Y+54	; 0x36
    339e:	8f a9       	ldd	r24, Y+55	; 0x37
    33a0:	98 ad       	ldd	r25, Y+56	; 0x38
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	40 e2       	ldi	r20, 0x20	; 32
    33a8:	51 e4       	ldi	r21, 0x41	; 65
    33aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ae:	dc 01       	movw	r26, r24
    33b0:	cb 01       	movw	r24, r22
    33b2:	bc 01       	movw	r22, r24
    33b4:	cd 01       	movw	r24, r26
    33b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ba:	dc 01       	movw	r26, r24
    33bc:	cb 01       	movw	r24, r22
    33be:	98 ab       	std	Y+48, r25	; 0x30
    33c0:	8f a7       	std	Y+47, r24	; 0x2f
    33c2:	0f c0       	rjmp	.+30     	; 0x33e2 <STEPPER_voidCW+0x16c>
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	9e a7       	std	Y+46, r25	; 0x2e
    33ca:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33cc:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ce:	9e a5       	ldd	r25, Y+46	; 0x2e
    33d0:	01 97       	sbiw	r24, 0x01	; 1
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <STEPPER_voidCW+0x15a>
    33d4:	9e a7       	std	Y+46, r25	; 0x2e
    33d6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    33da:	98 a9       	ldd	r25, Y+48	; 0x30
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	98 ab       	std	Y+48, r25	; 0x30
    33e0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    33e4:	98 a9       	ldd	r25, Y+48	; 0x30
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	69 f7       	brne	.-38     	; 0x33c4 <STEPPER_voidCW+0x14e>
    33ea:	14 c0       	rjmp	.+40     	; 0x3414 <STEPPER_voidCW+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	69 a9       	ldd	r22, Y+49	; 0x31
    33ee:	7a a9       	ldd	r23, Y+50	; 0x32
    33f0:	8b a9       	ldd	r24, Y+51	; 0x33
    33f2:	9c a9       	ldd	r25, Y+52	; 0x34
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	98 ab       	std	Y+48, r25	; 0x30
    33fe:	8f a7       	std	Y+47, r24	; 0x2f
    3400:	8f a5       	ldd	r24, Y+47	; 0x2f
    3402:	98 a9       	ldd	r25, Y+48	; 0x30
    3404:	9c a7       	std	Y+44, r25	; 0x2c
    3406:	8b a7       	std	Y+43, r24	; 0x2b
    3408:	8b a5       	ldd	r24, Y+43	; 0x2b
    340a:	9c a5       	ldd	r25, Y+44	; 0x2c
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	f1 f7       	brne	.-4      	; 0x340c <STEPPER_voidCW+0x196>
    3410:	9c a7       	std	Y+44, r25	; 0x2c
    3412:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	60 e0       	ldi	r22, 0x00	; 0
    3418:	41 e0       	ldi	r20, 0x01	; 1
    341a:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	62 e0       	ldi	r22, 0x02	; 2
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	63 e0       	ldi	r22, 0x03	; 3
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	a0 e2       	ldi	r26, 0x20	; 32
    3442:	b1 e4       	ldi	r27, 0x41	; 65
    3444:	8f a3       	std	Y+39, r24	; 0x27
    3446:	98 a7       	std	Y+40, r25	; 0x28
    3448:	a9 a7       	std	Y+41, r26	; 0x29
    344a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344c:	6f a1       	ldd	r22, Y+39	; 0x27
    344e:	78 a5       	ldd	r23, Y+40	; 0x28
    3450:	89 a5       	ldd	r24, Y+41	; 0x29
    3452:	9a a5       	ldd	r25, Y+42	; 0x2a
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	8b a3       	std	Y+35, r24	; 0x23
    3466:	9c a3       	std	Y+36, r25	; 0x24
    3468:	ad a3       	std	Y+37, r26	; 0x25
    346a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    346c:	6b a1       	ldd	r22, Y+35	; 0x23
    346e:	7c a1       	ldd	r23, Y+36	; 0x24
    3470:	8d a1       	ldd	r24, Y+37	; 0x25
    3472:	9e a1       	ldd	r25, Y+38	; 0x26
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	40 e8       	ldi	r20, 0x80	; 128
    347a:	5f e3       	ldi	r21, 0x3F	; 63
    347c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3480:	88 23       	and	r24, r24
    3482:	2c f4       	brge	.+10     	; 0x348e <STEPPER_voidCW+0x218>
		__ticks = 1;
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	9a a3       	std	Y+34, r25	; 0x22
    348a:	89 a3       	std	Y+33, r24	; 0x21
    348c:	3f c0       	rjmp	.+126    	; 0x350c <STEPPER_voidCW+0x296>
	else if (__tmp > 65535)
    348e:	6b a1       	ldd	r22, Y+35	; 0x23
    3490:	7c a1       	ldd	r23, Y+36	; 0x24
    3492:	8d a1       	ldd	r24, Y+37	; 0x25
    3494:	9e a1       	ldd	r25, Y+38	; 0x26
    3496:	20 e0       	ldi	r18, 0x00	; 0
    3498:	3f ef       	ldi	r19, 0xFF	; 255
    349a:	4f e7       	ldi	r20, 0x7F	; 127
    349c:	57 e4       	ldi	r21, 0x47	; 71
    349e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34a2:	18 16       	cp	r1, r24
    34a4:	4c f5       	brge	.+82     	; 0x34f8 <STEPPER_voidCW+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a6:	6f a1       	ldd	r22, Y+39	; 0x27
    34a8:	78 a5       	ldd	r23, Y+40	; 0x28
    34aa:	89 a5       	ldd	r24, Y+41	; 0x29
    34ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	40 e2       	ldi	r20, 0x20	; 32
    34b4:	51 e4       	ldi	r21, 0x41	; 65
    34b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	9a a3       	std	Y+34, r25	; 0x22
    34cc:	89 a3       	std	Y+33, r24	; 0x21
    34ce:	0f c0       	rjmp	.+30     	; 0x34ee <STEPPER_voidCW+0x278>
    34d0:	88 ec       	ldi	r24, 0xC8	; 200
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	98 a3       	std	Y+32, r25	; 0x20
    34d6:	8f 8f       	std	Y+31, r24	; 0x1f
    34d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34da:	98 a1       	ldd	r25, Y+32	; 0x20
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	f1 f7       	brne	.-4      	; 0x34dc <STEPPER_voidCW+0x266>
    34e0:	98 a3       	std	Y+32, r25	; 0x20
    34e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e4:	89 a1       	ldd	r24, Y+33	; 0x21
    34e6:	9a a1       	ldd	r25, Y+34	; 0x22
    34e8:	01 97       	sbiw	r24, 0x01	; 1
    34ea:	9a a3       	std	Y+34, r25	; 0x22
    34ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ee:	89 a1       	ldd	r24, Y+33	; 0x21
    34f0:	9a a1       	ldd	r25, Y+34	; 0x22
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	69 f7       	brne	.-38     	; 0x34d0 <STEPPER_voidCW+0x25a>
    34f6:	14 c0       	rjmp	.+40     	; 0x3520 <STEPPER_voidCW+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f8:	6b a1       	ldd	r22, Y+35	; 0x23
    34fa:	7c a1       	ldd	r23, Y+36	; 0x24
    34fc:	8d a1       	ldd	r24, Y+37	; 0x25
    34fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3500:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	9a a3       	std	Y+34, r25	; 0x22
    350a:	89 a3       	std	Y+33, r24	; 0x21
    350c:	89 a1       	ldd	r24, Y+33	; 0x21
    350e:	9a a1       	ldd	r25, Y+34	; 0x22
    3510:	9e 8f       	std	Y+30, r25	; 0x1e
    3512:	8d 8f       	std	Y+29, r24	; 0x1d
    3514:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3516:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <STEPPER_voidCW+0x2a2>
    351c:	9e 8f       	std	Y+30, r25	; 0x1e
    351e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	60 e0       	ldi	r22, 0x00	; 0
    3524:	41 e0       	ldi	r20, 0x01	; 1
    3526:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	41 e0       	ldi	r20, 0x01	; 1
    3530:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	62 e0       	ldi	r22, 0x02	; 2
    3538:	40 e0       	ldi	r20, 0x00	; 0
    353a:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    353e:	81 e0       	ldi	r24, 0x01	; 1
    3540:	63 e0       	ldi	r22, 0x03	; 3
    3542:	41 e0       	ldi	r20, 0x01	; 1
    3544:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a0 e2       	ldi	r26, 0x20	; 32
    354e:	b1 e4       	ldi	r27, 0x41	; 65
    3550:	89 8f       	std	Y+25, r24	; 0x19
    3552:	9a 8f       	std	Y+26, r25	; 0x1a
    3554:	ab 8f       	std	Y+27, r26	; 0x1b
    3556:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3558:	69 8d       	ldd	r22, Y+25	; 0x19
    355a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    355c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    355e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	4a ef       	ldi	r20, 0xFA	; 250
    3566:	54 e4       	ldi	r21, 0x44	; 68
    3568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    356c:	dc 01       	movw	r26, r24
    356e:	cb 01       	movw	r24, r22
    3570:	8d 8b       	std	Y+21, r24	; 0x15
    3572:	9e 8b       	std	Y+22, r25	; 0x16
    3574:	af 8b       	std	Y+23, r26	; 0x17
    3576:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3578:	6d 89       	ldd	r22, Y+21	; 0x15
    357a:	7e 89       	ldd	r23, Y+22	; 0x16
    357c:	8f 89       	ldd	r24, Y+23	; 0x17
    357e:	98 8d       	ldd	r25, Y+24	; 0x18
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	40 e8       	ldi	r20, 0x80	; 128
    3586:	5f e3       	ldi	r21, 0x3F	; 63
    3588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    358c:	88 23       	and	r24, r24
    358e:	2c f4       	brge	.+10     	; 0x359a <STEPPER_voidCW+0x324>
		__ticks = 1;
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9c 8b       	std	Y+20, r25	; 0x14
    3596:	8b 8b       	std	Y+19, r24	; 0x13
    3598:	3f c0       	rjmp	.+126    	; 0x3618 <STEPPER_voidCW+0x3a2>
	else if (__tmp > 65535)
    359a:	6d 89       	ldd	r22, Y+21	; 0x15
    359c:	7e 89       	ldd	r23, Y+22	; 0x16
    359e:	8f 89       	ldd	r24, Y+23	; 0x17
    35a0:	98 8d       	ldd	r25, Y+24	; 0x18
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	3f ef       	ldi	r19, 0xFF	; 255
    35a6:	4f e7       	ldi	r20, 0x7F	; 127
    35a8:	57 e4       	ldi	r21, 0x47	; 71
    35aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35ae:	18 16       	cp	r1, r24
    35b0:	4c f5       	brge	.+82     	; 0x3604 <STEPPER_voidCW+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35b2:	69 8d       	ldd	r22, Y+25	; 0x19
    35b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35ba:	20 e0       	ldi	r18, 0x00	; 0
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	40 e2       	ldi	r20, 0x20	; 32
    35c0:	51 e4       	ldi	r21, 0x41	; 65
    35c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	bc 01       	movw	r22, r24
    35cc:	cd 01       	movw	r24, r26
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	9c 8b       	std	Y+20, r25	; 0x14
    35d8:	8b 8b       	std	Y+19, r24	; 0x13
    35da:	0f c0       	rjmp	.+30     	; 0x35fa <STEPPER_voidCW+0x384>
    35dc:	88 ec       	ldi	r24, 0xC8	; 200
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9a 8b       	std	Y+18, r25	; 0x12
    35e2:	89 8b       	std	Y+17, r24	; 0x11
    35e4:	89 89       	ldd	r24, Y+17	; 0x11
    35e6:	9a 89       	ldd	r25, Y+18	; 0x12
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	f1 f7       	brne	.-4      	; 0x35e8 <STEPPER_voidCW+0x372>
    35ec:	9a 8b       	std	Y+18, r25	; 0x12
    35ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35f0:	8b 89       	ldd	r24, Y+19	; 0x13
    35f2:	9c 89       	ldd	r25, Y+20	; 0x14
    35f4:	01 97       	sbiw	r24, 0x01	; 1
    35f6:	9c 8b       	std	Y+20, r25	; 0x14
    35f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fa:	8b 89       	ldd	r24, Y+19	; 0x13
    35fc:	9c 89       	ldd	r25, Y+20	; 0x14
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	69 f7       	brne	.-38     	; 0x35dc <STEPPER_voidCW+0x366>
    3602:	14 c0       	rjmp	.+40     	; 0x362c <STEPPER_voidCW+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3604:	6d 89       	ldd	r22, Y+21	; 0x15
    3606:	7e 89       	ldd	r23, Y+22	; 0x16
    3608:	8f 89       	ldd	r24, Y+23	; 0x17
    360a:	98 8d       	ldd	r25, Y+24	; 0x18
    360c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	9c 8b       	std	Y+20, r25	; 0x14
    3616:	8b 8b       	std	Y+19, r24	; 0x13
    3618:	8b 89       	ldd	r24, Y+19	; 0x13
    361a:	9c 89       	ldd	r25, Y+20	; 0x14
    361c:	98 8b       	std	Y+16, r25	; 0x10
    361e:	8f 87       	std	Y+15, r24	; 0x0f
    3620:	8f 85       	ldd	r24, Y+15	; 0x0f
    3622:	98 89       	ldd	r25, Y+16	; 0x10
    3624:	01 97       	sbiw	r24, 0x01	; 1
    3626:	f1 f7       	brne	.-4      	; 0x3624 <STEPPER_voidCW+0x3ae>
    3628:	98 8b       	std	Y+16, r25	; 0x10
    362a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	41 e0       	ldi	r20, 0x01	; 1
    3632:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	61 e0       	ldi	r22, 0x01	; 1
    363a:	41 e0       	ldi	r20, 0x01	; 1
    363c:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	62 e0       	ldi	r22, 0x02	; 2
    3644:	41 e0       	ldi	r20, 0x01	; 1
    3646:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	63 e0       	ldi	r22, 0x03	; 3
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	a0 e2       	ldi	r26, 0x20	; 32
    365a:	b1 e4       	ldi	r27, 0x41	; 65
    365c:	8b 87       	std	Y+11, r24	; 0x0b
    365e:	9c 87       	std	Y+12, r25	; 0x0c
    3660:	ad 87       	std	Y+13, r26	; 0x0d
    3662:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3664:	6b 85       	ldd	r22, Y+11	; 0x0b
    3666:	7c 85       	ldd	r23, Y+12	; 0x0c
    3668:	8d 85       	ldd	r24, Y+13	; 0x0d
    366a:	9e 85       	ldd	r25, Y+14	; 0x0e
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	4a ef       	ldi	r20, 0xFA	; 250
    3672:	54 e4       	ldi	r21, 0x44	; 68
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	8f 83       	std	Y+7, r24	; 0x07
    367e:	98 87       	std	Y+8, r25	; 0x08
    3680:	a9 87       	std	Y+9, r26	; 0x09
    3682:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3684:	6f 81       	ldd	r22, Y+7	; 0x07
    3686:	78 85       	ldd	r23, Y+8	; 0x08
    3688:	89 85       	ldd	r24, Y+9	; 0x09
    368a:	9a 85       	ldd	r25, Y+10	; 0x0a
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	40 e8       	ldi	r20, 0x80	; 128
    3692:	5f e3       	ldi	r21, 0x3F	; 63
    3694:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3698:	88 23       	and	r24, r24
    369a:	2c f4       	brge	.+10     	; 0x36a6 <STEPPER_voidCW+0x430>
		__ticks = 1;
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	9e 83       	std	Y+6, r25	; 0x06
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	3f c0       	rjmp	.+126    	; 0x3724 <STEPPER_voidCW+0x4ae>
	else if (__tmp > 65535)
    36a6:	6f 81       	ldd	r22, Y+7	; 0x07
    36a8:	78 85       	ldd	r23, Y+8	; 0x08
    36aa:	89 85       	ldd	r24, Y+9	; 0x09
    36ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	3f ef       	ldi	r19, 0xFF	; 255
    36b2:	4f e7       	ldi	r20, 0x7F	; 127
    36b4:	57 e4       	ldi	r21, 0x47	; 71
    36b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36ba:	18 16       	cp	r1, r24
    36bc:	4c f5       	brge	.+82     	; 0x3710 <STEPPER_voidCW+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36be:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e2       	ldi	r20, 0x20	; 32
    36cc:	51 e4       	ldi	r21, 0x41	; 65
    36ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	bc 01       	movw	r22, r24
    36d8:	cd 01       	movw	r24, r26
    36da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	9e 83       	std	Y+6, r25	; 0x06
    36e4:	8d 83       	std	Y+5, r24	; 0x05
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <STEPPER_voidCW+0x490>
    36e8:	88 ec       	ldi	r24, 0xC8	; 200
    36ea:	90 e0       	ldi	r25, 0x00	; 0
    36ec:	9c 83       	std	Y+4, r25	; 0x04
    36ee:	8b 83       	std	Y+3, r24	; 0x03
    36f0:	8b 81       	ldd	r24, Y+3	; 0x03
    36f2:	9c 81       	ldd	r25, Y+4	; 0x04
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <STEPPER_voidCW+0x47e>
    36f8:	9c 83       	std	Y+4, r25	; 0x04
    36fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36fc:	8d 81       	ldd	r24, Y+5	; 0x05
    36fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	9e 83       	std	Y+6, r25	; 0x06
    3704:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3706:	8d 81       	ldd	r24, Y+5	; 0x05
    3708:	9e 81       	ldd	r25, Y+6	; 0x06
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	69 f7       	brne	.-38     	; 0x36e8 <STEPPER_voidCW+0x472>
    370e:	14 c0       	rjmp	.+40     	; 0x3738 <STEPPER_voidCW+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	6f 81       	ldd	r22, Y+7	; 0x07
    3712:	78 85       	ldd	r23, Y+8	; 0x08
    3714:	89 85       	ldd	r24, Y+9	; 0x09
    3716:	9a 85       	ldd	r25, Y+10	; 0x0a
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	9e 83       	std	Y+6, r25	; 0x06
    3722:	8d 83       	std	Y+5, r24	; 0x05
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	9a 83       	std	Y+2, r25	; 0x02
    372a:	89 83       	std	Y+1, r24	; 0x01
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <STEPPER_voidCW+0x4ba>
    3734:	9a 83       	std	Y+2, r25	; 0x02
    3736:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidCW(u16 angle)
{
	u32 NOSteps =(angle/FullStepAngle);
	u16 NOIterations=NOSteps/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3738:	89 ad       	ldd	r24, Y+57	; 0x39
    373a:	9a ad       	ldd	r25, Y+58	; 0x3a
    373c:	01 96       	adiw	r24, 0x01	; 1
    373e:	9a af       	std	Y+58, r25	; 0x3a
    3740:	89 af       	std	Y+57, r24	; 0x39
    3742:	29 ad       	ldd	r18, Y+57	; 0x39
    3744:	3a ad       	ldd	r19, Y+58	; 0x3a
    3746:	8b ad       	ldd	r24, Y+59	; 0x3b
    3748:	9c ad       	ldd	r25, Y+60	; 0x3c
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	08 f4       	brcc	.+2      	; 0x3752 <STEPPER_voidCW+0x4dc>
    3750:	db cd       	rjmp	.-1098   	; 0x3308 <STEPPER_voidCW+0x92>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
		_delay_ms(delay);
	}

}
    3752:	ce 5b       	subi	r28, 0xBE	; 190
    3754:	df 4f       	sbci	r29, 0xFF	; 255
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <STEPPER_voidACW>:

void STEPPER_voidACW(u16 angle)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	ee 97       	sbiw	r28, 0x3e	; 62
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
    377a:	9e af       	std	Y+62, r25	; 0x3e
    377c:	8d af       	std	Y+61, r24	; 0x3d

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
    377e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3780:	9e ad       	ldd	r25, Y+62	; 0x3e
    3782:	cc 01       	movw	r24, r24
    3784:	a0 e0       	ldi	r26, 0x00	; 0
    3786:	b0 e0       	ldi	r27, 0x00	; 0
    3788:	bc 01       	movw	r22, r24
    378a:	cd 01       	movw	r24, r26
    378c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	2c eb       	ldi	r18, 0xBC	; 188
    379a:	3c ec       	ldi	r19, 0xCC	; 204
    379c:	40 e3       	ldi	r20, 0x30	; 48
    379e:	5e e3       	ldi	r21, 0x3E	; 62
    37a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	30 e0       	ldi	r19, 0x00	; 0
    37b0:	40 e8       	ldi	r20, 0x80	; 128
    37b2:	50 e4       	ldi	r21, 0x40	; 64
    37b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	bc 01       	movw	r22, r24
    37be:	cd 01       	movw	r24, r26
    37c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	9c af       	std	Y+60, r25	; 0x3c
    37ca:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    37cc:	1a ae       	std	Y+58, r1	; 0x3a
    37ce:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    37d0:	1a ae       	std	Y+58, r1	; 0x3a
    37d2:	19 ae       	std	Y+57, r1	; 0x39
    37d4:	1d c2       	rjmp	.+1082   	; 0x3c10 <STEPPER_voidACW+0x4aa>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	61 e0       	ldi	r22, 0x01	; 1
    37e4:	41 e0       	ldi	r20, 0x01	; 1
    37e6:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	62 e0       	ldi	r22, 0x02	; 2
    37ee:	41 e0       	ldi	r20, 0x01	; 1
    37f0:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	63 e0       	ldi	r22, 0x03	; 3
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a0 e2       	ldi	r26, 0x20	; 32
    3804:	b1 e4       	ldi	r27, 0x41	; 65
    3806:	8d ab       	std	Y+53, r24	; 0x35
    3808:	9e ab       	std	Y+54, r25	; 0x36
    380a:	af ab       	std	Y+55, r26	; 0x37
    380c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380e:	6d a9       	ldd	r22, Y+53	; 0x35
    3810:	7e a9       	ldd	r23, Y+54	; 0x36
    3812:	8f a9       	ldd	r24, Y+55	; 0x37
    3814:	98 ad       	ldd	r25, Y+56	; 0x38
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	4a ef       	ldi	r20, 0xFA	; 250
    381c:	54 e4       	ldi	r21, 0x44	; 68
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	89 ab       	std	Y+49, r24	; 0x31
    3828:	9a ab       	std	Y+50, r25	; 0x32
    382a:	ab ab       	std	Y+51, r26	; 0x33
    382c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    382e:	69 a9       	ldd	r22, Y+49	; 0x31
    3830:	7a a9       	ldd	r23, Y+50	; 0x32
    3832:	8b a9       	ldd	r24, Y+51	; 0x33
    3834:	9c a9       	ldd	r25, Y+52	; 0x34
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	40 e8       	ldi	r20, 0x80	; 128
    383c:	5f e3       	ldi	r21, 0x3F	; 63
    383e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3842:	88 23       	and	r24, r24
    3844:	2c f4       	brge	.+10     	; 0x3850 <STEPPER_voidACW+0xea>
		__ticks = 1;
    3846:	81 e0       	ldi	r24, 0x01	; 1
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	98 ab       	std	Y+48, r25	; 0x30
    384c:	8f a7       	std	Y+47, r24	; 0x2f
    384e:	3f c0       	rjmp	.+126    	; 0x38ce <STEPPER_voidACW+0x168>
	else if (__tmp > 65535)
    3850:	69 a9       	ldd	r22, Y+49	; 0x31
    3852:	7a a9       	ldd	r23, Y+50	; 0x32
    3854:	8b a9       	ldd	r24, Y+51	; 0x33
    3856:	9c a9       	ldd	r25, Y+52	; 0x34
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	3f ef       	ldi	r19, 0xFF	; 255
    385c:	4f e7       	ldi	r20, 0x7F	; 127
    385e:	57 e4       	ldi	r21, 0x47	; 71
    3860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3864:	18 16       	cp	r1, r24
    3866:	4c f5       	brge	.+82     	; 0x38ba <STEPPER_voidACW+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3868:	6d a9       	ldd	r22, Y+53	; 0x35
    386a:	7e a9       	ldd	r23, Y+54	; 0x36
    386c:	8f a9       	ldd	r24, Y+55	; 0x37
    386e:	98 ad       	ldd	r25, Y+56	; 0x38
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	40 e2       	ldi	r20, 0x20	; 32
    3876:	51 e4       	ldi	r21, 0x41	; 65
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3888:	dc 01       	movw	r26, r24
    388a:	cb 01       	movw	r24, r22
    388c:	98 ab       	std	Y+48, r25	; 0x30
    388e:	8f a7       	std	Y+47, r24	; 0x2f
    3890:	0f c0       	rjmp	.+30     	; 0x38b0 <STEPPER_voidACW+0x14a>
    3892:	88 ec       	ldi	r24, 0xC8	; 200
    3894:	90 e0       	ldi	r25, 0x00	; 0
    3896:	9e a7       	std	Y+46, r25	; 0x2e
    3898:	8d a7       	std	Y+45, r24	; 0x2d
    389a:	8d a5       	ldd	r24, Y+45	; 0x2d
    389c:	9e a5       	ldd	r25, Y+46	; 0x2e
    389e:	01 97       	sbiw	r24, 0x01	; 1
    38a0:	f1 f7       	brne	.-4      	; 0x389e <STEPPER_voidACW+0x138>
    38a2:	9e a7       	std	Y+46, r25	; 0x2e
    38a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38a8:	98 a9       	ldd	r25, Y+48	; 0x30
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	98 ab       	std	Y+48, r25	; 0x30
    38ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b2:	98 a9       	ldd	r25, Y+48	; 0x30
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	69 f7       	brne	.-38     	; 0x3892 <STEPPER_voidACW+0x12c>
    38b8:	14 c0       	rjmp	.+40     	; 0x38e2 <STEPPER_voidACW+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38ba:	69 a9       	ldd	r22, Y+49	; 0x31
    38bc:	7a a9       	ldd	r23, Y+50	; 0x32
    38be:	8b a9       	ldd	r24, Y+51	; 0x33
    38c0:	9c a9       	ldd	r25, Y+52	; 0x34
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	98 ab       	std	Y+48, r25	; 0x30
    38cc:	8f a7       	std	Y+47, r24	; 0x2f
    38ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d0:	98 a9       	ldd	r25, Y+48	; 0x30
    38d2:	9c a7       	std	Y+44, r25	; 0x2c
    38d4:	8b a7       	std	Y+43, r24	; 0x2b
    38d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    38d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <STEPPER_voidACW+0x174>
    38de:	9c a7       	std	Y+44, r25	; 0x2c
    38e0:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	41 e0       	ldi	r20, 0x01	; 1
    38e8:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	41 e0       	ldi	r20, 0x01	; 1
    38f2:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	62 e0       	ldi	r22, 0x02	; 2
    38fa:	41 e0       	ldi	r20, 0x01	; 1
    38fc:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	63 e0       	ldi	r22, 0x03	; 3
    3904:	40 e0       	ldi	r20, 0x00	; 0
    3906:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    390a:	80 e0       	ldi	r24, 0x00	; 0
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	a0 e2       	ldi	r26, 0x20	; 32
    3910:	b1 e4       	ldi	r27, 0x41	; 65
    3912:	8f a3       	std	Y+39, r24	; 0x27
    3914:	98 a7       	std	Y+40, r25	; 0x28
    3916:	a9 a7       	std	Y+41, r26	; 0x29
    3918:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    391a:	6f a1       	ldd	r22, Y+39	; 0x27
    391c:	78 a5       	ldd	r23, Y+40	; 0x28
    391e:	89 a5       	ldd	r24, Y+41	; 0x29
    3920:	9a a5       	ldd	r25, Y+42	; 0x2a
    3922:	20 e0       	ldi	r18, 0x00	; 0
    3924:	30 e0       	ldi	r19, 0x00	; 0
    3926:	4a ef       	ldi	r20, 0xFA	; 250
    3928:	54 e4       	ldi	r21, 0x44	; 68
    392a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	8b a3       	std	Y+35, r24	; 0x23
    3934:	9c a3       	std	Y+36, r25	; 0x24
    3936:	ad a3       	std	Y+37, r26	; 0x25
    3938:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    393a:	6b a1       	ldd	r22, Y+35	; 0x23
    393c:	7c a1       	ldd	r23, Y+36	; 0x24
    393e:	8d a1       	ldd	r24, Y+37	; 0x25
    3940:	9e a1       	ldd	r25, Y+38	; 0x26
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	40 e8       	ldi	r20, 0x80	; 128
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394e:	88 23       	and	r24, r24
    3950:	2c f4       	brge	.+10     	; 0x395c <STEPPER_voidACW+0x1f6>
		__ticks = 1;
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	9a a3       	std	Y+34, r25	; 0x22
    3958:	89 a3       	std	Y+33, r24	; 0x21
    395a:	3f c0       	rjmp	.+126    	; 0x39da <STEPPER_voidACW+0x274>
	else if (__tmp > 65535)
    395c:	6b a1       	ldd	r22, Y+35	; 0x23
    395e:	7c a1       	ldd	r23, Y+36	; 0x24
    3960:	8d a1       	ldd	r24, Y+37	; 0x25
    3962:	9e a1       	ldd	r25, Y+38	; 0x26
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	3f ef       	ldi	r19, 0xFF	; 255
    3968:	4f e7       	ldi	r20, 0x7F	; 127
    396a:	57 e4       	ldi	r21, 0x47	; 71
    396c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3970:	18 16       	cp	r1, r24
    3972:	4c f5       	brge	.+82     	; 0x39c6 <STEPPER_voidACW+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3974:	6f a1       	ldd	r22, Y+39	; 0x27
    3976:	78 a5       	ldd	r23, Y+40	; 0x28
    3978:	89 a5       	ldd	r24, Y+41	; 0x29
    397a:	9a a5       	ldd	r25, Y+42	; 0x2a
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	30 e0       	ldi	r19, 0x00	; 0
    3980:	40 e2       	ldi	r20, 0x20	; 32
    3982:	51 e4       	ldi	r21, 0x41	; 65
    3984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3988:	dc 01       	movw	r26, r24
    398a:	cb 01       	movw	r24, r22
    398c:	bc 01       	movw	r22, r24
    398e:	cd 01       	movw	r24, r26
    3990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	9a a3       	std	Y+34, r25	; 0x22
    399a:	89 a3       	std	Y+33, r24	; 0x21
    399c:	0f c0       	rjmp	.+30     	; 0x39bc <STEPPER_voidACW+0x256>
    399e:	88 ec       	ldi	r24, 0xC8	; 200
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	98 a3       	std	Y+32, r25	; 0x20
    39a4:	8f 8f       	std	Y+31, r24	; 0x1f
    39a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39a8:	98 a1       	ldd	r25, Y+32	; 0x20
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <STEPPER_voidACW+0x244>
    39ae:	98 a3       	std	Y+32, r25	; 0x20
    39b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b2:	89 a1       	ldd	r24, Y+33	; 0x21
    39b4:	9a a1       	ldd	r25, Y+34	; 0x22
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9a a3       	std	Y+34, r25	; 0x22
    39ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39bc:	89 a1       	ldd	r24, Y+33	; 0x21
    39be:	9a a1       	ldd	r25, Y+34	; 0x22
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	69 f7       	brne	.-38     	; 0x399e <STEPPER_voidACW+0x238>
    39c4:	14 c0       	rjmp	.+40     	; 0x39ee <STEPPER_voidACW+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c6:	6b a1       	ldd	r22, Y+35	; 0x23
    39c8:	7c a1       	ldd	r23, Y+36	; 0x24
    39ca:	8d a1       	ldd	r24, Y+37	; 0x25
    39cc:	9e a1       	ldd	r25, Y+38	; 0x26
    39ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	9a a3       	std	Y+34, r25	; 0x22
    39d8:	89 a3       	std	Y+33, r24	; 0x21
    39da:	89 a1       	ldd	r24, Y+33	; 0x21
    39dc:	9a a1       	ldd	r25, Y+34	; 0x22
    39de:	9e 8f       	std	Y+30, r25	; 0x1e
    39e0:	8d 8f       	std	Y+29, r24	; 0x1d
    39e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	f1 f7       	brne	.-4      	; 0x39e6 <STEPPER_voidACW+0x280>
    39ea:	9e 8f       	std	Y+30, r25	; 0x1e
    39ec:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	41 e0       	ldi	r20, 0x01	; 1
    39f4:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	61 e0       	ldi	r22, 0x01	; 1
    39fc:	41 e0       	ldi	r20, 0x01	; 1
    39fe:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	62 e0       	ldi	r22, 0x02	; 2
    3a06:	40 e0       	ldi	r20, 0x00	; 0
    3a08:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	63 e0       	ldi	r22, 0x03	; 3
    3a10:	41 e0       	ldi	r20, 0x01	; 1
    3a12:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	a0 e2       	ldi	r26, 0x20	; 32
    3a1c:	b1 e4       	ldi	r27, 0x41	; 65
    3a1e:	89 8f       	std	Y+25, r24	; 0x19
    3a20:	9a 8f       	std	Y+26, r25	; 0x1a
    3a22:	ab 8f       	std	Y+27, r26	; 0x1b
    3a24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a26:	69 8d       	ldd	r22, Y+25	; 0x19
    3a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	4a ef       	ldi	r20, 0xFA	; 250
    3a34:	54 e4       	ldi	r21, 0x44	; 68
    3a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3a:	dc 01       	movw	r26, r24
    3a3c:	cb 01       	movw	r24, r22
    3a3e:	8d 8b       	std	Y+21, r24	; 0x15
    3a40:	9e 8b       	std	Y+22, r25	; 0x16
    3a42:	af 8b       	std	Y+23, r26	; 0x17
    3a44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a46:	6d 89       	ldd	r22, Y+21	; 0x15
    3a48:	7e 89       	ldd	r23, Y+22	; 0x16
    3a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    3a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	30 e0       	ldi	r19, 0x00	; 0
    3a52:	40 e8       	ldi	r20, 0x80	; 128
    3a54:	5f e3       	ldi	r21, 0x3F	; 63
    3a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5a:	88 23       	and	r24, r24
    3a5c:	2c f4       	brge	.+10     	; 0x3a68 <STEPPER_voidACW+0x302>
		__ticks = 1;
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	9c 8b       	std	Y+20, r25	; 0x14
    3a64:	8b 8b       	std	Y+19, r24	; 0x13
    3a66:	3f c0       	rjmp	.+126    	; 0x3ae6 <STEPPER_voidACW+0x380>
	else if (__tmp > 65535)
    3a68:	6d 89       	ldd	r22, Y+21	; 0x15
    3a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	3f ef       	ldi	r19, 0xFF	; 255
    3a74:	4f e7       	ldi	r20, 0x7F	; 127
    3a76:	57 e4       	ldi	r21, 0x47	; 71
    3a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a7c:	18 16       	cp	r1, r24
    3a7e:	4c f5       	brge	.+82     	; 0x3ad2 <STEPPER_voidACW+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a80:	69 8d       	ldd	r22, Y+25	; 0x19
    3a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e2       	ldi	r20, 0x20	; 32
    3a8e:	51 e4       	ldi	r21, 0x41	; 65
    3a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a94:	dc 01       	movw	r26, r24
    3a96:	cb 01       	movw	r24, r22
    3a98:	bc 01       	movw	r22, r24
    3a9a:	cd 01       	movw	r24, r26
    3a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	9c 8b       	std	Y+20, r25	; 0x14
    3aa6:	8b 8b       	std	Y+19, r24	; 0x13
    3aa8:	0f c0       	rjmp	.+30     	; 0x3ac8 <STEPPER_voidACW+0x362>
    3aaa:	88 ec       	ldi	r24, 0xC8	; 200
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	9a 8b       	std	Y+18, r25	; 0x12
    3ab0:	89 8b       	std	Y+17, r24	; 0x11
    3ab2:	89 89       	ldd	r24, Y+17	; 0x11
    3ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <STEPPER_voidACW+0x350>
    3aba:	9a 8b       	std	Y+18, r25	; 0x12
    3abc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3abe:	8b 89       	ldd	r24, Y+19	; 0x13
    3ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	9c 8b       	std	Y+20, r25	; 0x14
    3ac6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    3aca:	9c 89       	ldd	r25, Y+20	; 0x14
    3acc:	00 97       	sbiw	r24, 0x00	; 0
    3ace:	69 f7       	brne	.-38     	; 0x3aaa <STEPPER_voidACW+0x344>
    3ad0:	14 c0       	rjmp	.+40     	; 0x3afa <STEPPER_voidACW+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    3ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	9c 8b       	std	Y+20, r25	; 0x14
    3ae4:	8b 8b       	std	Y+19, r24	; 0x13
    3ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    3ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    3aea:	98 8b       	std	Y+16, r25	; 0x10
    3aec:	8f 87       	std	Y+15, r24	; 0x0f
    3aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af0:	98 89       	ldd	r25, Y+16	; 0x10
    3af2:	01 97       	sbiw	r24, 0x01	; 1
    3af4:	f1 f7       	brne	.-4      	; 0x3af2 <STEPPER_voidACW+0x38c>
    3af6:	98 8b       	std	Y+16, r25	; 0x10
    3af8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	60 e0       	ldi	r22, 0x00	; 0
    3afe:	41 e0       	ldi	r20, 0x01	; 1
    3b00:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	61 e0       	ldi	r22, 0x01	; 1
    3b08:	40 e0       	ldi	r20, 0x00	; 0
    3b0a:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	62 e0       	ldi	r22, 0x02	; 2
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	63 e0       	ldi	r22, 0x03	; 3
    3b1c:	41 e0       	ldi	r20, 0x01	; 1
    3b1e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	a0 e2       	ldi	r26, 0x20	; 32
    3b28:	b1 e4       	ldi	r27, 0x41	; 65
    3b2a:	8b 87       	std	Y+11, r24	; 0x0b
    3b2c:	9c 87       	std	Y+12, r25	; 0x0c
    3b2e:	ad 87       	std	Y+13, r26	; 0x0d
    3b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	4a ef       	ldi	r20, 0xFA	; 250
    3b40:	54 e4       	ldi	r21, 0x44	; 68
    3b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	8f 83       	std	Y+7, r24	; 0x07
    3b4c:	98 87       	std	Y+8, r25	; 0x08
    3b4e:	a9 87       	std	Y+9, r26	; 0x09
    3b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b52:	6f 81       	ldd	r22, Y+7	; 0x07
    3b54:	78 85       	ldd	r23, Y+8	; 0x08
    3b56:	89 85       	ldd	r24, Y+9	; 0x09
    3b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5a:	20 e0       	ldi	r18, 0x00	; 0
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	40 e8       	ldi	r20, 0x80	; 128
    3b60:	5f e3       	ldi	r21, 0x3F	; 63
    3b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b66:	88 23       	and	r24, r24
    3b68:	2c f4       	brge	.+10     	; 0x3b74 <STEPPER_voidACW+0x40e>
		__ticks = 1;
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	9e 83       	std	Y+6, r25	; 0x06
    3b70:	8d 83       	std	Y+5, r24	; 0x05
    3b72:	3f c0       	rjmp	.+126    	; 0x3bf2 <STEPPER_voidACW+0x48c>
	else if (__tmp > 65535)
    3b74:	6f 81       	ldd	r22, Y+7	; 0x07
    3b76:	78 85       	ldd	r23, Y+8	; 0x08
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	3f ef       	ldi	r19, 0xFF	; 255
    3b80:	4f e7       	ldi	r20, 0x7F	; 127
    3b82:	57 e4       	ldi	r21, 0x47	; 71
    3b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b88:	18 16       	cp	r1, r24
    3b8a:	4c f5       	brge	.+82     	; 0x3bde <STEPPER_voidACW+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	bc 01       	movw	r22, r24
    3ba6:	cd 01       	movw	r24, r26
    3ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	0f c0       	rjmp	.+30     	; 0x3bd4 <STEPPER_voidACW+0x46e>
    3bb6:	88 ec       	ldi	r24, 0xC8	; 200
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	9c 83       	std	Y+4, r25	; 0x04
    3bbc:	8b 83       	std	Y+3, r24	; 0x03
    3bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <STEPPER_voidACW+0x45c>
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	01 97       	sbiw	r24, 0x01	; 1
    3bd0:	9e 83       	std	Y+6, r25	; 0x06
    3bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bd8:	00 97       	sbiw	r24, 0x00	; 0
    3bda:	69 f7       	brne	.-38     	; 0x3bb6 <STEPPER_voidACW+0x450>
    3bdc:	14 c0       	rjmp	.+40     	; 0x3c06 <STEPPER_voidACW+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bde:	6f 81       	ldd	r22, Y+7	; 0x07
    3be0:	78 85       	ldd	r23, Y+8	; 0x08
    3be2:	89 85       	ldd	r24, Y+9	; 0x09
    3be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bea:	dc 01       	movw	r26, r24
    3bec:	cb 01       	movw	r24, r22
    3bee:	9e 83       	std	Y+6, r25	; 0x06
    3bf0:	8d 83       	std	Y+5, r24	; 0x05
    3bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    3bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    3bf6:	9a 83       	std	Y+2, r25	; 0x02
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfe:	01 97       	sbiw	r24, 0x01	; 1
    3c00:	f1 f7       	brne	.-4      	; 0x3bfe <STEPPER_voidACW+0x498>
    3c02:	9a 83       	std	Y+2, r25	; 0x02
    3c04:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidACW(u16 angle)
{

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3c06:	89 ad       	ldd	r24, Y+57	; 0x39
    3c08:	9a ad       	ldd	r25, Y+58	; 0x3a
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	9a af       	std	Y+58, r25	; 0x3a
    3c0e:	89 af       	std	Y+57, r24	; 0x39
    3c10:	29 ad       	ldd	r18, Y+57	; 0x39
    3c12:	3a ad       	ldd	r19, Y+58	; 0x3a
    3c14:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c16:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c18:	28 17       	cp	r18, r24
    3c1a:	39 07       	cpc	r19, r25
    3c1c:	08 f4       	brcc	.+2      	; 0x3c20 <STEPPER_voidACW+0x4ba>
    3c1e:	db cd       	rjmp	.-1098   	; 0x37d6 <STEPPER_voidACW+0x70>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
		_delay_ms(delay);
	}

}
    3c20:	ee 96       	adiw	r28, 0x3e	; 62
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	de bf       	out	0x3e, r29	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	cd bf       	out	0x3d, r28	; 61
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <SEVSEG_voidInit>:
 *      Author: salma
 */
#include "SevenSeg_Interface.h"
u8 SevSegValue[10]=SEVSEGVALUE;
void SEVSEG_voidInit()
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SevSeg1,0xff);
    3c3a:	81 e0       	ldi	r24, 0x01	; 1
    3c3c:	6f ef       	ldi	r22, 0xFF	; 255
    3c3e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(SevSeg2,0xff);
    3c42:	82 e0       	ldi	r24, 0x02	; 2
    3c44:	6f ef       	ldi	r22, 0xFF	; 255
    3c46:	0e 94 10 16 	call	0x2c20	; 0x2c20 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(SevSeg1,OFF);
    3c4a:	81 e0       	ldi	r24, 0x01	; 1
    3c4c:	6f ef       	ldi	r22, 0xFF	; 255
    3c4e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3c52:	82 e0       	ldi	r24, 0x02	; 2
    3c54:	6f ef       	ldi	r22, 0xFF	; 255
    3c56:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
}
    3c5a:	cf 91       	pop	r28
    3c5c:	df 91       	pop	r29
    3c5e:	08 95       	ret

00003c60 <SEVSEG_voidSetNum>:

void SEVSEG_voidSetNum(u8 num)
{
    3c60:	df 93       	push	r29
    3c62:	cf 93       	push	r28
    3c64:	00 d0       	rcall	.+0      	; 0x3c66 <SEVSEG_voidSetNum+0x6>
    3c66:	cd b7       	in	r28, 0x3d	; 61
    3c68:	de b7       	in	r29, 0x3e	; 62
    3c6a:	8a 83       	std	Y+2, r24	; 0x02

	if (num<10)
    3c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6e:	8a 30       	cpi	r24, 0x0A	; 10
    3c70:	80 f4       	brcc	.+32     	; 0x3c92 <SEVSEG_voidSetNum+0x32>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3c72:	8a 81       	ldd	r24, Y+2	; 0x02
    3c74:	88 2f       	mov	r24, r24
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	fc 01       	movw	r30, r24
    3c7a:	e8 59       	subi	r30, 0x98	; 152
    3c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3c7e:	90 81       	ld	r25, Z
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	69 2f       	mov	r22, r25
    3c84:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,OFF);
    3c88:	82 e0       	ldi	r24, 0x02	; 2
    3c8a:	6f ef       	ldi	r22, 0xFF	; 255
    3c8c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
    3c90:	31 c0       	rjmp	.+98     	; 0x3cf4 <SEVSEG_voidSetNum+0x94>
	}
	else if (num==10)
    3c92:	8a 81       	ldd	r24, Y+2	; 0x02
    3c94:	8a 30       	cpi	r24, 0x0A	; 10
    3c96:	69 f4       	brne	.+26     	; 0x3cb2 <SEVSEG_voidSetNum+0x52>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[0]);
    3c98:	90 91 68 01 	lds	r25, 0x0168
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	69 2f       	mov	r22, r25
    3ca0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
    3ca4:	90 91 69 01 	lds	r25, 0x0169
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	69 2f       	mov	r22, r25
    3cac:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
    3cb0:	21 c0       	rjmp	.+66     	; 0x3cf4 <SEVSEG_voidSetNum+0x94>
	}
	else
	{
		u8 counter = 0  ;
    3cb2:	19 82       	std	Y+1, r1	; 0x01
    3cb4:	06 c0       	rjmp	.+12     	; 0x3cc2 <SEVSEG_voidSetNum+0x62>
		while(num>=10)
		{
			counter++;
    3cb6:	89 81       	ldd	r24, Y+1	; 0x01
    3cb8:	8f 5f       	subi	r24, 0xFF	; 255
    3cba:	89 83       	std	Y+1, r24	; 0x01
			num-=10;
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	8a 50       	subi	r24, 0x0A	; 10
    3cc0:	8a 83       	std	Y+2, r24	; 0x02
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
	}
	else
	{
		u8 counter = 0  ;
		while(num>=10)
    3cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc4:	8a 30       	cpi	r24, 0x0A	; 10
    3cc6:	b8 f7       	brcc	.-18     	; 0x3cb6 <SEVSEG_voidSetNum+0x56>
		{
			counter++;
			num-=10;
		}
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cca:	88 2f       	mov	r24, r24
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e8 59       	subi	r30, 0x98	; 152
    3cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd4:	90 81       	ld	r25, Z
    3cd6:	81 e0       	ldi	r24, 0x01	; 1
    3cd8:	69 2f       	mov	r22, r25
    3cda:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[counter]);
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	88 2f       	mov	r24, r24
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	fc 01       	movw	r30, r24
    3ce6:	e8 59       	subi	r30, 0x98	; 152
    3ce8:	fe 4f       	sbci	r31, 0xFE	; 254
    3cea:	90 81       	ld	r25, Z
    3cec:	82 e0       	ldi	r24, 0x02	; 2
    3cee:	69 2f       	mov	r22, r25
    3cf0:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	}
}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <SEVSEG_voidOff>:
void SEVSEG_voidOff ()
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortValue(SevSeg1,OFF);
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	6f ef       	ldi	r22, 0xFF	; 255
    3d0a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3d0e:	82 e0       	ldi	r24, 0x02	; 2
    3d10:	6f ef       	ldi	r22, 0xFF	; 255
    3d12:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	}
    3d16:	cf 91       	pop	r28
    3d18:	df 91       	pop	r29
    3d1a:	08 95       	ret

00003d1c <LED_voidInit>:
 */

#include "Led_Interface.h"
#include <util/delay.h>
void LED_voidInit (u8 Group, u8 pin)
{
    3d1c:	df 93       	push	r29
    3d1e:	cf 93       	push	r28
    3d20:	00 d0       	rcall	.+0      	; 0x3d22 <LED_voidInit+0x6>
    3d22:	cd b7       	in	r28, 0x3d	; 61
    3d24:	de b7       	in	r29, 0x3e	; 62
    3d26:	89 83       	std	Y+1, r24	; 0x01
    3d28:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group, pin, Output);
    3d2a:	89 81       	ldd	r24, Y+1	; 0x01
    3d2c:	6a 81       	ldd	r22, Y+2	; 0x02
    3d2e:	41 e0       	ldi	r20, 0x01	; 1
    3d30:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    3d34:	0f 90       	pop	r0
    3d36:	0f 90       	pop	r0
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	08 95       	ret

00003d3e <LED_voidOn>:

void LED_voidOn (u8 Group, u8 pin)
{
    3d3e:	df 93       	push	r29
    3d40:	cf 93       	push	r28
    3d42:	00 d0       	rcall	.+0      	; 0x3d44 <LED_voidOn+0x6>
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	89 83       	std	Y+1, r24	; 0x01
    3d4a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, High);
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	6a 81       	ldd	r22, Y+2	; 0x02
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <LED_voidOff>:

void LED_voidOff (u8 Group, u8 pin)
{
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <LED_voidOff+0x6>
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, Low);
    3d6e:	89 81       	ldd	r24, Y+1	; 0x01
    3d70:	6a 81       	ldd	r22, Y+2	; 0x02
    3d72:	40 e0       	ldi	r20, 0x00	; 0
    3d74:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    3d78:	0f 90       	pop	r0
    3d7a:	0f 90       	pop	r0
    3d7c:	cf 91       	pop	r28
    3d7e:	df 91       	pop	r29
    3d80:	08 95       	ret

00003d82 <LED_voidToggle>:

void LED_voidToggle (u8 Group, u8 pin)
{
    3d82:	df 93       	push	r29
    3d84:	cf 93       	push	r28
    3d86:	00 d0       	rcall	.+0      	; 0x3d88 <LED_voidToggle+0x6>
    3d88:	cd b7       	in	r28, 0x3d	; 61
    3d8a:	de b7       	in	r29, 0x3e	; 62
    3d8c:	89 83       	std	Y+1, r24	; 0x01
    3d8e:	6a 83       	std	Y+2, r22	; 0x02
	if (DIO_u8ReadPinValue(Group,pin)==High)
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	6a 81       	ldd	r22, Y+2	; 0x02
    3d94:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
    3d98:	81 30       	cpi	r24, 0x01	; 1
    3d9a:	29 f4       	brne	.+10     	; 0x3da6 <LED_voidToggle+0x24>
	{
		LED_voidOff(Group,pin);
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	6a 81       	ldd	r22, Y+2	; 0x02
    3da0:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <LED_voidOff>
    3da4:	04 c0       	rjmp	.+8      	; 0x3dae <LED_voidToggle+0x2c>
	}
	else
	{
		LED_voidOn(Group,pin);
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	6a 81       	ldd	r22, Y+2	; 0x02
    3daa:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <LED_voidOn>
	}

}
    3dae:	0f 90       	pop	r0
    3db0:	0f 90       	pop	r0
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	08 95       	ret

00003db8 <LCD_voidSendCommand>:
#include <util/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Lcd_Interface.h"

void LCD_voidSendCommand(u8 command)
{
    3db8:	df 93       	push	r29
    3dba:	cf 93       	push	r28
    3dbc:	0f 92       	push	r0
    3dbe:	cd b7       	in	r28, 0x3d	; 61
    3dc0:	de b7       	in	r29, 0x3e	; 62
    3dc2:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	60 e0       	ldi	r22, 0x00	; 0
    3dc8:	40 e0       	ldi	r20, 0x00	; 0
    3dca:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3dce:	81 e0       	ldi	r24, 0x01	; 1
    3dd0:	61 e0       	ldi	r22, 0x01	; 1
    3dd2:	40 e0       	ldi	r20, 0x00	; 0
    3dd4:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	62 e0       	ldi	r22, 0x02	; 2
    3ddc:	41 e0       	ldi	r20, 0x01	; 1
    3dde:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//Send Command
		DIO_voidSetPortValue(Lcd_DCGroup,command);
    3de2:	83 e0       	ldi	r24, 0x03	; 3
    3de4:	69 81       	ldd	r22, Y+1	; 0x01
    3de6:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	62 e0       	ldi	r22, 0x02	; 2
    3dee:	40 e0       	ldi	r20, 0x00	; 0
    3df0:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Lcd_DCGroup,Lcd_D7,get_bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
#endif

}
    3df4:	0f 90       	pop	r0
    3df6:	cf 91       	pop	r28
    3df8:	df 91       	pop	r29
    3dfa:	08 95       	ret

00003dfc <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	0f 92       	push	r0
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	41 e0       	ldi	r20, 0x01	; 1
    3e0e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	62 e0       	ldi	r22, 0x02	; 2
    3e20:	41 e0       	ldi	r20, 0x01	; 1
    3e22:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//Send Data
		DIO_voidSetPortValue(Lcd_DCGroup,data);
    3e26:	83 e0       	ldi	r24, 0x03	; 3
    3e28:	69 81       	ldd	r22, Y+1	; 0x01
    3e2a:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	62 e0       	ldi	r22, 0x02	; 2
    3e32:	40 e0       	ldi	r20, 0x00	; 0
    3e34:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);

#endif

}
    3e38:	0f 90       	pop	r0
    3e3a:	cf 91       	pop	r28
    3e3c:	df 91       	pop	r29
    3e3e:	08 95       	ret

00003e40 <LCD_voidInit>:


void LCD_voidInit()
{
    3e40:	df 93       	push	r29
    3e42:	cf 93       	push	r28
    3e44:	cd b7       	in	r28, 0x3d	; 61
    3e46:	de b7       	in	r29, 0x3e	; 62
    3e48:	e8 97       	sbiw	r28, 0x38	; 56
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	60 e0       	ldi	r22, 0x00	; 0
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	41 e0       	ldi	r20, 0x01	; 1
    3e64:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	62 e0       	ldi	r22, 0x02	; 2
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    3e72:	83 e0       	ldi	r24, 0x03	; 3
    3e74:	6f ef       	ldi	r22, 0xFF	; 255
    3e76:	0e 94 10 16 	call	0x2c20	; 0x2c20 <DIO_voidSetPortDir>
    3e7a:	80 e0       	ldi	r24, 0x00	; 0
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	ac e0       	ldi	r26, 0x0C	; 12
    3e80:	b2 e4       	ldi	r27, 0x42	; 66
    3e82:	8d ab       	std	Y+53, r24	; 0x35
    3e84:	9e ab       	std	Y+54, r25	; 0x36
    3e86:	af ab       	std	Y+55, r26	; 0x37
    3e88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8a:	6d a9       	ldd	r22, Y+53	; 0x35
    3e8c:	7e a9       	ldd	r23, Y+54	; 0x36
    3e8e:	8f a9       	ldd	r24, Y+55	; 0x37
    3e90:	98 ad       	ldd	r25, Y+56	; 0x38
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	4a ef       	ldi	r20, 0xFA	; 250
    3e98:	54 e4       	ldi	r21, 0x44	; 68
    3e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	89 ab       	std	Y+49, r24	; 0x31
    3ea4:	9a ab       	std	Y+50, r25	; 0x32
    3ea6:	ab ab       	std	Y+51, r26	; 0x33
    3ea8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3eaa:	69 a9       	ldd	r22, Y+49	; 0x31
    3eac:	7a a9       	ldd	r23, Y+50	; 0x32
    3eae:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb0:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb2:	20 e0       	ldi	r18, 0x00	; 0
    3eb4:	30 e0       	ldi	r19, 0x00	; 0
    3eb6:	40 e8       	ldi	r20, 0x80	; 128
    3eb8:	5f e3       	ldi	r21, 0x3F	; 63
    3eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ebe:	88 23       	and	r24, r24
    3ec0:	2c f4       	brge	.+10     	; 0x3ecc <LCD_voidInit+0x8c>
		__ticks = 1;
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	98 ab       	std	Y+48, r25	; 0x30
    3ec8:	8f a7       	std	Y+47, r24	; 0x2f
    3eca:	3f c0       	rjmp	.+126    	; 0x3f4a <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    3ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    3ece:	7a a9       	ldd	r23, Y+50	; 0x32
    3ed0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ed2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	3f ef       	ldi	r19, 0xFF	; 255
    3ed8:	4f e7       	ldi	r20, 0x7F	; 127
    3eda:	57 e4       	ldi	r21, 0x47	; 71
    3edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ee0:	18 16       	cp	r1, r24
    3ee2:	4c f5       	brge	.+82     	; 0x3f36 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee4:	6d a9       	ldd	r22, Y+53	; 0x35
    3ee6:	7e a9       	ldd	r23, Y+54	; 0x36
    3ee8:	8f a9       	ldd	r24, Y+55	; 0x37
    3eea:	98 ad       	ldd	r25, Y+56	; 0x38
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
    3ef0:	40 e2       	ldi	r20, 0x20	; 32
    3ef2:	51 e4       	ldi	r21, 0x41	; 65
    3ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	bc 01       	movw	r22, r24
    3efe:	cd 01       	movw	r24, r26
    3f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f04:	dc 01       	movw	r26, r24
    3f06:	cb 01       	movw	r24, r22
    3f08:	98 ab       	std	Y+48, r25	; 0x30
    3f0a:	8f a7       	std	Y+47, r24	; 0x2f
    3f0c:	0f c0       	rjmp	.+30     	; 0x3f2c <LCD_voidInit+0xec>
    3f0e:	88 ec       	ldi	r24, 0xC8	; 200
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	9e a7       	std	Y+46, r25	; 0x2e
    3f14:	8d a7       	std	Y+45, r24	; 0x2d
    3f16:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f18:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <LCD_voidInit+0xda>
    3f1e:	9e a7       	std	Y+46, r25	; 0x2e
    3f20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f24:	98 a9       	ldd	r25, Y+48	; 0x30
    3f26:	01 97       	sbiw	r24, 0x01	; 1
    3f28:	98 ab       	std	Y+48, r25	; 0x30
    3f2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f30:	00 97       	sbiw	r24, 0x00	; 0
    3f32:	69 f7       	brne	.-38     	; 0x3f0e <LCD_voidInit+0xce>
    3f34:	14 c0       	rjmp	.+40     	; 0x3f5e <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f36:	69 a9       	ldd	r22, Y+49	; 0x31
    3f38:	7a a9       	ldd	r23, Y+50	; 0x32
    3f3a:	8b a9       	ldd	r24, Y+51	; 0x33
    3f3c:	9c a9       	ldd	r25, Y+52	; 0x34
    3f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	98 ab       	std	Y+48, r25	; 0x30
    3f48:	8f a7       	std	Y+47, r24	; 0x2f
    3f4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f4c:	98 a9       	ldd	r25, Y+48	; 0x30
    3f4e:	9c a7       	std	Y+44, r25	; 0x2c
    3f50:	8b a7       	std	Y+43, r24	; 0x2b
    3f52:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f54:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f56:	01 97       	sbiw	r24, 0x01	; 1
    3f58:	f1 f7       	brne	.-4      	; 0x3f56 <LCD_voidInit+0x116>
    3f5a:	9c a7       	std	Y+44, r25	; 0x2c
    3f5c:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    3f5e:	88 e3       	ldi	r24, 0x38	; 56
    3f60:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
    3f64:	80 e0       	ldi	r24, 0x00	; 0
    3f66:	90 e0       	ldi	r25, 0x00	; 0
    3f68:	a0 e8       	ldi	r26, 0x80	; 128
    3f6a:	bf e3       	ldi	r27, 0x3F	; 63
    3f6c:	8f a3       	std	Y+39, r24	; 0x27
    3f6e:	98 a7       	std	Y+40, r25	; 0x28
    3f70:	a9 a7       	std	Y+41, r26	; 0x29
    3f72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f74:	6f a1       	ldd	r22, Y+39	; 0x27
    3f76:	78 a5       	ldd	r23, Y+40	; 0x28
    3f78:	89 a5       	ldd	r24, Y+41	; 0x29
    3f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	4a ef       	ldi	r20, 0xFA	; 250
    3f82:	54 e4       	ldi	r21, 0x44	; 68
    3f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f88:	dc 01       	movw	r26, r24
    3f8a:	cb 01       	movw	r24, r22
    3f8c:	8b a3       	std	Y+35, r24	; 0x23
    3f8e:	9c a3       	std	Y+36, r25	; 0x24
    3f90:	ad a3       	std	Y+37, r26	; 0x25
    3f92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f94:	6b a1       	ldd	r22, Y+35	; 0x23
    3f96:	7c a1       	ldd	r23, Y+36	; 0x24
    3f98:	8d a1       	ldd	r24, Y+37	; 0x25
    3f9a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	40 e8       	ldi	r20, 0x80	; 128
    3fa2:	5f e3       	ldi	r21, 0x3F	; 63
    3fa4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fa8:	88 23       	and	r24, r24
    3faa:	2c f4       	brge	.+10     	; 0x3fb6 <LCD_voidInit+0x176>
		__ticks = 1;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	9a a3       	std	Y+34, r25	; 0x22
    3fb2:	89 a3       	std	Y+33, r24	; 0x21
    3fb4:	3f c0       	rjmp	.+126    	; 0x4034 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3fb6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fb8:	7c a1       	ldd	r23, Y+36	; 0x24
    3fba:	8d a1       	ldd	r24, Y+37	; 0x25
    3fbc:	9e a1       	ldd	r25, Y+38	; 0x26
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	3f ef       	ldi	r19, 0xFF	; 255
    3fc2:	4f e7       	ldi	r20, 0x7F	; 127
    3fc4:	57 e4       	ldi	r21, 0x47	; 71
    3fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fca:	18 16       	cp	r1, r24
    3fcc:	4c f5       	brge	.+82     	; 0x4020 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fce:	6f a1       	ldd	r22, Y+39	; 0x27
    3fd0:	78 a5       	ldd	r23, Y+40	; 0x28
    3fd2:	89 a5       	ldd	r24, Y+41	; 0x29
    3fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e2       	ldi	r20, 0x20	; 32
    3fdc:	51 e4       	ldi	r21, 0x41	; 65
    3fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	bc 01       	movw	r22, r24
    3fe8:	cd 01       	movw	r24, r26
    3fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	9a a3       	std	Y+34, r25	; 0x22
    3ff4:	89 a3       	std	Y+33, r24	; 0x21
    3ff6:	0f c0       	rjmp	.+30     	; 0x4016 <LCD_voidInit+0x1d6>
    3ff8:	88 ec       	ldi	r24, 0xC8	; 200
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	98 a3       	std	Y+32, r25	; 0x20
    3ffe:	8f 8f       	std	Y+31, r24	; 0x1f
    4000:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4002:	98 a1       	ldd	r25, Y+32	; 0x20
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <LCD_voidInit+0x1c4>
    4008:	98 a3       	std	Y+32, r25	; 0x20
    400a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    400c:	89 a1       	ldd	r24, Y+33	; 0x21
    400e:	9a a1       	ldd	r25, Y+34	; 0x22
    4010:	01 97       	sbiw	r24, 0x01	; 1
    4012:	9a a3       	std	Y+34, r25	; 0x22
    4014:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4016:	89 a1       	ldd	r24, Y+33	; 0x21
    4018:	9a a1       	ldd	r25, Y+34	; 0x22
    401a:	00 97       	sbiw	r24, 0x00	; 0
    401c:	69 f7       	brne	.-38     	; 0x3ff8 <LCD_voidInit+0x1b8>
    401e:	14 c0       	rjmp	.+40     	; 0x4048 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4020:	6b a1       	ldd	r22, Y+35	; 0x23
    4022:	7c a1       	ldd	r23, Y+36	; 0x24
    4024:	8d a1       	ldd	r24, Y+37	; 0x25
    4026:	9e a1       	ldd	r25, Y+38	; 0x26
    4028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    402c:	dc 01       	movw	r26, r24
    402e:	cb 01       	movw	r24, r22
    4030:	9a a3       	std	Y+34, r25	; 0x22
    4032:	89 a3       	std	Y+33, r24	; 0x21
    4034:	89 a1       	ldd	r24, Y+33	; 0x21
    4036:	9a a1       	ldd	r25, Y+34	; 0x22
    4038:	9e 8f       	std	Y+30, r25	; 0x1e
    403a:	8d 8f       	std	Y+29, r24	; 0x1d
    403c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    403e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4040:	01 97       	sbiw	r24, 0x01	; 1
    4042:	f1 f7       	brne	.-4      	; 0x4040 <LCD_voidInit+0x200>
    4044:	9e 8f       	std	Y+30, r25	; 0x1e
    4046:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    4048:	8f e0       	ldi	r24, 0x0F	; 15
    404a:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
    404e:	80 e0       	ldi	r24, 0x00	; 0
    4050:	90 e0       	ldi	r25, 0x00	; 0
    4052:	a0 e8       	ldi	r26, 0x80	; 128
    4054:	bf e3       	ldi	r27, 0x3F	; 63
    4056:	89 8f       	std	Y+25, r24	; 0x19
    4058:	9a 8f       	std	Y+26, r25	; 0x1a
    405a:	ab 8f       	std	Y+27, r26	; 0x1b
    405c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    405e:	69 8d       	ldd	r22, Y+25	; 0x19
    4060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	4a ef       	ldi	r20, 0xFA	; 250
    406c:	54 e4       	ldi	r21, 0x44	; 68
    406e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4072:	dc 01       	movw	r26, r24
    4074:	cb 01       	movw	r24, r22
    4076:	8d 8b       	std	Y+21, r24	; 0x15
    4078:	9e 8b       	std	Y+22, r25	; 0x16
    407a:	af 8b       	std	Y+23, r26	; 0x17
    407c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    407e:	6d 89       	ldd	r22, Y+21	; 0x15
    4080:	7e 89       	ldd	r23, Y+22	; 0x16
    4082:	8f 89       	ldd	r24, Y+23	; 0x17
    4084:	98 8d       	ldd	r25, Y+24	; 0x18
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e8       	ldi	r20, 0x80	; 128
    408c:	5f e3       	ldi	r21, 0x3F	; 63
    408e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4092:	88 23       	and	r24, r24
    4094:	2c f4       	brge	.+10     	; 0x40a0 <LCD_voidInit+0x260>
		__ticks = 1;
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	9c 8b       	std	Y+20, r25	; 0x14
    409c:	8b 8b       	std	Y+19, r24	; 0x13
    409e:	3f c0       	rjmp	.+126    	; 0x411e <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    40a0:	6d 89       	ldd	r22, Y+21	; 0x15
    40a2:	7e 89       	ldd	r23, Y+22	; 0x16
    40a4:	8f 89       	ldd	r24, Y+23	; 0x17
    40a6:	98 8d       	ldd	r25, Y+24	; 0x18
    40a8:	20 e0       	ldi	r18, 0x00	; 0
    40aa:	3f ef       	ldi	r19, 0xFF	; 255
    40ac:	4f e7       	ldi	r20, 0x7F	; 127
    40ae:	57 e4       	ldi	r21, 0x47	; 71
    40b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40b4:	18 16       	cp	r1, r24
    40b6:	4c f5       	brge	.+82     	; 0x410a <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b8:	69 8d       	ldd	r22, Y+25	; 0x19
    40ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40c0:	20 e0       	ldi	r18, 0x00	; 0
    40c2:	30 e0       	ldi	r19, 0x00	; 0
    40c4:	40 e2       	ldi	r20, 0x20	; 32
    40c6:	51 e4       	ldi	r21, 0x41	; 65
    40c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40cc:	dc 01       	movw	r26, r24
    40ce:	cb 01       	movw	r24, r22
    40d0:	bc 01       	movw	r22, r24
    40d2:	cd 01       	movw	r24, r26
    40d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d8:	dc 01       	movw	r26, r24
    40da:	cb 01       	movw	r24, r22
    40dc:	9c 8b       	std	Y+20, r25	; 0x14
    40de:	8b 8b       	std	Y+19, r24	; 0x13
    40e0:	0f c0       	rjmp	.+30     	; 0x4100 <LCD_voidInit+0x2c0>
    40e2:	88 ec       	ldi	r24, 0xC8	; 200
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	9a 8b       	std	Y+18, r25	; 0x12
    40e8:	89 8b       	std	Y+17, r24	; 0x11
    40ea:	89 89       	ldd	r24, Y+17	; 0x11
    40ec:	9a 89       	ldd	r25, Y+18	; 0x12
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	f1 f7       	brne	.-4      	; 0x40ee <LCD_voidInit+0x2ae>
    40f2:	9a 8b       	std	Y+18, r25	; 0x12
    40f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f6:	8b 89       	ldd	r24, Y+19	; 0x13
    40f8:	9c 89       	ldd	r25, Y+20	; 0x14
    40fa:	01 97       	sbiw	r24, 0x01	; 1
    40fc:	9c 8b       	std	Y+20, r25	; 0x14
    40fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4100:	8b 89       	ldd	r24, Y+19	; 0x13
    4102:	9c 89       	ldd	r25, Y+20	; 0x14
    4104:	00 97       	sbiw	r24, 0x00	; 0
    4106:	69 f7       	brne	.-38     	; 0x40e2 <LCD_voidInit+0x2a2>
    4108:	14 c0       	rjmp	.+40     	; 0x4132 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    410a:	6d 89       	ldd	r22, Y+21	; 0x15
    410c:	7e 89       	ldd	r23, Y+22	; 0x16
    410e:	8f 89       	ldd	r24, Y+23	; 0x17
    4110:	98 8d       	ldd	r25, Y+24	; 0x18
    4112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	9c 8b       	std	Y+20, r25	; 0x14
    411c:	8b 8b       	std	Y+19, r24	; 0x13
    411e:	8b 89       	ldd	r24, Y+19	; 0x13
    4120:	9c 89       	ldd	r25, Y+20	; 0x14
    4122:	98 8b       	std	Y+16, r25	; 0x10
    4124:	8f 87       	std	Y+15, r24	; 0x0f
    4126:	8f 85       	ldd	r24, Y+15	; 0x0f
    4128:	98 89       	ldd	r25, Y+16	; 0x10
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <LCD_voidInit+0x2ea>
    412e:	98 8b       	std	Y+16, r25	; 0x10
    4130:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	a0 e0       	ldi	r26, 0x00	; 0
    413e:	b0 e4       	ldi	r27, 0x40	; 64
    4140:	8b 87       	std	Y+11, r24	; 0x0b
    4142:	9c 87       	std	Y+12, r25	; 0x0c
    4144:	ad 87       	std	Y+13, r26	; 0x0d
    4146:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	6b 85       	ldd	r22, Y+11	; 0x0b
    414a:	7c 85       	ldd	r23, Y+12	; 0x0c
    414c:	8d 85       	ldd	r24, Y+13	; 0x0d
    414e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	4a ef       	ldi	r20, 0xFA	; 250
    4156:	54 e4       	ldi	r21, 0x44	; 68
    4158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	8f 83       	std	Y+7, r24	; 0x07
    4162:	98 87       	std	Y+8, r25	; 0x08
    4164:	a9 87       	std	Y+9, r26	; 0x09
    4166:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4168:	6f 81       	ldd	r22, Y+7	; 0x07
    416a:	78 85       	ldd	r23, Y+8	; 0x08
    416c:	89 85       	ldd	r24, Y+9	; 0x09
    416e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e8       	ldi	r20, 0x80	; 128
    4176:	5f e3       	ldi	r21, 0x3F	; 63
    4178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    417c:	88 23       	and	r24, r24
    417e:	2c f4       	brge	.+10     	; 0x418a <LCD_voidInit+0x34a>
		__ticks = 1;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	9e 83       	std	Y+6, r25	; 0x06
    4186:	8d 83       	std	Y+5, r24	; 0x05
    4188:	3f c0       	rjmp	.+126    	; 0x4208 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    418a:	6f 81       	ldd	r22, Y+7	; 0x07
    418c:	78 85       	ldd	r23, Y+8	; 0x08
    418e:	89 85       	ldd	r24, Y+9	; 0x09
    4190:	9a 85       	ldd	r25, Y+10	; 0x0a
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	3f ef       	ldi	r19, 0xFF	; 255
    4196:	4f e7       	ldi	r20, 0x7F	; 127
    4198:	57 e4       	ldi	r21, 0x47	; 71
    419a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    419e:	18 16       	cp	r1, r24
    41a0:	4c f5       	brge	.+82     	; 0x41f4 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e2       	ldi	r20, 0x20	; 32
    41b0:	51 e4       	ldi	r21, 0x41	; 65
    41b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	9e 83       	std	Y+6, r25	; 0x06
    41c8:	8d 83       	std	Y+5, r24	; 0x05
    41ca:	0f c0       	rjmp	.+30     	; 0x41ea <LCD_voidInit+0x3aa>
    41cc:	88 ec       	ldi	r24, 0xC8	; 200
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	9c 83       	std	Y+4, r25	; 0x04
    41d2:	8b 83       	std	Y+3, r24	; 0x03
    41d4:	8b 81       	ldd	r24, Y+3	; 0x03
    41d6:	9c 81       	ldd	r25, Y+4	; 0x04
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	f1 f7       	brne	.-4      	; 0x41d8 <LCD_voidInit+0x398>
    41dc:	9c 83       	std	Y+4, r25	; 0x04
    41de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e0:	8d 81       	ldd	r24, Y+5	; 0x05
    41e2:	9e 81       	ldd	r25, Y+6	; 0x06
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	9e 83       	std	Y+6, r25	; 0x06
    41e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ea:	8d 81       	ldd	r24, Y+5	; 0x05
    41ec:	9e 81       	ldd	r25, Y+6	; 0x06
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	69 f7       	brne	.-38     	; 0x41cc <LCD_voidInit+0x38c>
    41f2:	14 c0       	rjmp	.+40     	; 0x421c <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f4:	6f 81       	ldd	r22, Y+7	; 0x07
    41f6:	78 85       	ldd	r23, Y+8	; 0x08
    41f8:	89 85       	ldd	r24, Y+9	; 0x09
    41fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    41fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	9e 83       	std	Y+6, r25	; 0x06
    4206:	8d 83       	std	Y+5, r24	; 0x05
    4208:	8d 81       	ldd	r24, Y+5	; 0x05
    420a:	9e 81       	ldd	r25, Y+6	; 0x06
    420c:	9a 83       	std	Y+2, r25	; 0x02
    420e:	89 83       	std	Y+1, r24	; 0x01
    4210:	89 81       	ldd	r24, Y+1	; 0x01
    4212:	9a 81       	ldd	r25, Y+2	; 0x02
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <LCD_voidInit+0x3d4>
    4218:	9a 83       	std	Y+2, r25	; 0x02
    421a:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    421c:	86 e0       	ldi	r24, 0x06	; 6
    421e:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    4222:	e8 96       	adiw	r28, 0x38	; 56
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	f8 94       	cli
    4228:	de bf       	out	0x3e, r29	; 62
    422a:	0f be       	out	0x3f, r0	; 63
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	08 95       	ret

00004234 <LCD_voidSendString>:


void LCD_voidSendString(u8 String[])
{
    4234:	df 93       	push	r29
    4236:	cf 93       	push	r28
    4238:	00 d0       	rcall	.+0      	; 0x423a <LCD_voidSendString+0x6>
    423a:	0f 92       	push	r0
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	9b 83       	std	Y+3, r25	; 0x03
    4242:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    4244:	19 82       	std	Y+1, r1	; 0x01
    4246:	0e c0       	rjmp	.+28     	; 0x4264 <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    4248:	89 81       	ldd	r24, Y+1	; 0x01
    424a:	28 2f       	mov	r18, r24
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	9b 81       	ldd	r25, Y+3	; 0x03
    4252:	fc 01       	movw	r30, r24
    4254:	e2 0f       	add	r30, r18
    4256:	f3 1f       	adc	r31, r19
    4258:	80 81       	ld	r24, Z
    425a:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_voidSendData>
		i++;
    425e:	89 81       	ldd	r24, Y+1	; 0x01
    4260:	8f 5f       	subi	r24, 0xFF	; 255
    4262:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 String[])
{
	u8 i = 0 ;
	while(String[i]!='\0')
    4264:	89 81       	ldd	r24, Y+1	; 0x01
    4266:	28 2f       	mov	r18, r24
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	8a 81       	ldd	r24, Y+2	; 0x02
    426c:	9b 81       	ldd	r25, Y+3	; 0x03
    426e:	fc 01       	movw	r30, r24
    4270:	e2 0f       	add	r30, r18
    4272:	f3 1f       	adc	r31, r19
    4274:	80 81       	ld	r24, Z
    4276:	88 23       	and	r24, r24
    4278:	39 f7       	brne	.-50     	; 0x4248 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	00 d0       	rcall	.+0      	; 0x428c <LCD_voidSetPos+0x6>
    428c:	0f 92       	push	r0
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	8a 83       	std	Y+2, r24	; 0x02
    4294:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    4296:	8a 81       	ldd	r24, Y+2	; 0x02
    4298:	88 23       	and	r24, r24
    429a:	19 f4       	brne	.+6      	; 0x42a2 <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    429c:	8b 81       	ldd	r24, Y+3	; 0x03
    429e:	89 83       	std	Y+1, r24	; 0x01
    42a0:	06 c0       	rjmp	.+12     	; 0x42ae <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    42a2:	8a 81       	ldd	r24, Y+2	; 0x02
    42a4:	81 30       	cpi	r24, 0x01	; 1
    42a6:	19 f4       	brne	.+6      	; 0x42ae <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	80 5c       	subi	r24, 0xC0	; 192
    42ac:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	80 68       	ori	r24, 0x80	; 128
    42b2:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
}
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	cf 91       	pop	r28
    42be:	df 91       	pop	r29
    42c0:	08 95       	ret

000042c2 <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	27 97       	sbiw	r28, 0x07	; 7
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61
    42d6:	8b 83       	std	Y+3, r24	; 0x03
    42d8:	7d 83       	std	Y+5, r23	; 0x05
    42da:	6c 83       	std	Y+4, r22	; 0x04
    42dc:	4e 83       	std	Y+6, r20	; 0x06
    42de:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    42e0:	8b 81       	ldd	r24, Y+3	; 0x03
    42e2:	88 2f       	mov	r24, r24
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	88 0f       	add	r24, r24
    42e8:	99 1f       	adc	r25, r25
    42ea:	88 0f       	add	r24, r24
    42ec:	99 1f       	adc	r25, r25
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	80 64       	ori	r24, 0x40	; 64
    42f8:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    42fc:	19 82       	std	Y+1, r1	; 0x01
    42fe:	0e c0       	rjmp	.+28     	; 0x431c <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	28 2f       	mov	r18, r24
    4304:	30 e0       	ldi	r19, 0x00	; 0
    4306:	8c 81       	ldd	r24, Y+4	; 0x04
    4308:	9d 81       	ldd	r25, Y+5	; 0x05
    430a:	fc 01       	movw	r30, r24
    430c:	e2 0f       	add	r30, r18
    430e:	f3 1f       	adc	r31, r19
    4310:	80 81       	ld	r24, Z
    4312:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    4316:	89 81       	ldd	r24, Y+1	; 0x01
    4318:	8f 5f       	subi	r24, 0xFF	; 255
    431a:	89 83       	std	Y+1, r24	; 0x01
    431c:	89 81       	ldd	r24, Y+1	; 0x01
    431e:	88 30       	cpi	r24, 0x08	; 8
    4320:	78 f3       	brcs	.-34     	; 0x4300 <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    4322:	8e 81       	ldd	r24, Y+6	; 0x06
    4324:	6f 81       	ldd	r22, Y+7	; 0x07
    4326:	0e 94 43 21 	call	0x4286	; 0x4286 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    432a:	8b 81       	ldd	r24, Y+3	; 0x03
    432c:	0e 94 fe 1e 	call	0x3dfc	; 0x3dfc <LCD_voidSendData>
}
    4330:	27 96       	adiw	r28, 0x07	; 7
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	cf 91       	pop	r28
    433e:	df 91       	pop	r29
    4340:	08 95       	ret

00004342 <LCD_voidClear>:

void LCD_voidClear()
{
    4342:	df 93       	push	r29
    4344:	cf 93       	push	r28
    4346:	cd b7       	in	r28, 0x3d	; 61
    4348:	de b7       	in	r29, 0x3e	; 62
    434a:	2e 97       	sbiw	r28, 0x0e	; 14
    434c:	0f b6       	in	r0, 0x3f	; 63
    434e:	f8 94       	cli
    4350:	de bf       	out	0x3e, r29	; 62
    4352:	0f be       	out	0x3f, r0	; 63
    4354:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	0e 94 dc 1e 	call	0x3db8	; 0x3db8 <LCD_voidSendCommand>
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	a0 e0       	ldi	r26, 0x00	; 0
    4362:	b0 e4       	ldi	r27, 0x40	; 64
    4364:	8b 87       	std	Y+11, r24	; 0x0b
    4366:	9c 87       	std	Y+12, r25	; 0x0c
    4368:	ad 87       	std	Y+13, r26	; 0x0d
    436a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    436c:	6b 85       	ldd	r22, Y+11	; 0x0b
    436e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4370:	8d 85       	ldd	r24, Y+13	; 0x0d
    4372:	9e 85       	ldd	r25, Y+14	; 0x0e
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	4a ef       	ldi	r20, 0xFA	; 250
    437a:	54 e4       	ldi	r21, 0x44	; 68
    437c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4380:	dc 01       	movw	r26, r24
    4382:	cb 01       	movw	r24, r22
    4384:	8f 83       	std	Y+7, r24	; 0x07
    4386:	98 87       	std	Y+8, r25	; 0x08
    4388:	a9 87       	std	Y+9, r26	; 0x09
    438a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    438c:	6f 81       	ldd	r22, Y+7	; 0x07
    438e:	78 85       	ldd	r23, Y+8	; 0x08
    4390:	89 85       	ldd	r24, Y+9	; 0x09
    4392:	9a 85       	ldd	r25, Y+10	; 0x0a
    4394:	20 e0       	ldi	r18, 0x00	; 0
    4396:	30 e0       	ldi	r19, 0x00	; 0
    4398:	40 e8       	ldi	r20, 0x80	; 128
    439a:	5f e3       	ldi	r21, 0x3F	; 63
    439c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43a0:	88 23       	and	r24, r24
    43a2:	2c f4       	brge	.+10     	; 0x43ae <LCD_voidClear+0x6c>
		__ticks = 1;
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	9e 83       	std	Y+6, r25	; 0x06
    43aa:	8d 83       	std	Y+5, r24	; 0x05
    43ac:	3f c0       	rjmp	.+126    	; 0x442c <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    43ae:	6f 81       	ldd	r22, Y+7	; 0x07
    43b0:	78 85       	ldd	r23, Y+8	; 0x08
    43b2:	89 85       	ldd	r24, Y+9	; 0x09
    43b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	3f ef       	ldi	r19, 0xFF	; 255
    43ba:	4f e7       	ldi	r20, 0x7F	; 127
    43bc:	57 e4       	ldi	r21, 0x47	; 71
    43be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43c2:	18 16       	cp	r1, r24
    43c4:	4c f5       	brge	.+82     	; 0x4418 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    43c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    43ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    43cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	40 e2       	ldi	r20, 0x20	; 32
    43d4:	51 e4       	ldi	r21, 0x41	; 65
    43d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43da:	dc 01       	movw	r26, r24
    43dc:	cb 01       	movw	r24, r22
    43de:	bc 01       	movw	r22, r24
    43e0:	cd 01       	movw	r24, r26
    43e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e6:	dc 01       	movw	r26, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	9e 83       	std	Y+6, r25	; 0x06
    43ec:	8d 83       	std	Y+5, r24	; 0x05
    43ee:	0f c0       	rjmp	.+30     	; 0x440e <LCD_voidClear+0xcc>
    43f0:	88 ec       	ldi	r24, 0xC8	; 200
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	9c 83       	std	Y+4, r25	; 0x04
    43f6:	8b 83       	std	Y+3, r24	; 0x03
    43f8:	8b 81       	ldd	r24, Y+3	; 0x03
    43fa:	9c 81       	ldd	r25, Y+4	; 0x04
    43fc:	01 97       	sbiw	r24, 0x01	; 1
    43fe:	f1 f7       	brne	.-4      	; 0x43fc <LCD_voidClear+0xba>
    4400:	9c 83       	std	Y+4, r25	; 0x04
    4402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4404:	8d 81       	ldd	r24, Y+5	; 0x05
    4406:	9e 81       	ldd	r25, Y+6	; 0x06
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	9e 83       	std	Y+6, r25	; 0x06
    440c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440e:	8d 81       	ldd	r24, Y+5	; 0x05
    4410:	9e 81       	ldd	r25, Y+6	; 0x06
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	69 f7       	brne	.-38     	; 0x43f0 <LCD_voidClear+0xae>
    4416:	14 c0       	rjmp	.+40     	; 0x4440 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4418:	6f 81       	ldd	r22, Y+7	; 0x07
    441a:	78 85       	ldd	r23, Y+8	; 0x08
    441c:	89 85       	ldd	r24, Y+9	; 0x09
    441e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	9e 83       	std	Y+6, r25	; 0x06
    442a:	8d 83       	std	Y+5, r24	; 0x05
    442c:	8d 81       	ldd	r24, Y+5	; 0x05
    442e:	9e 81       	ldd	r25, Y+6	; 0x06
    4430:	9a 83       	std	Y+2, r25	; 0x02
    4432:	89 83       	std	Y+1, r24	; 0x01
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	9a 81       	ldd	r25, Y+2	; 0x02
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	f1 f7       	brne	.-4      	; 0x4438 <LCD_voidClear+0xf6>
    443c:	9a 83       	std	Y+2, r25	; 0x02
    443e:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    4440:	2e 96       	adiw	r28, 0x0e	; 14
    4442:	0f b6       	in	r0, 0x3f	; 63
    4444:	f8 94       	cli
    4446:	de bf       	out	0x3e, r29	; 62
    4448:	0f be       	out	0x3f, r0	; 63
    444a:	cd bf       	out	0x3d, r28	; 61
    444c:	cf 91       	pop	r28
    444e:	df 91       	pop	r29
    4450:	08 95       	ret

00004452 <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    4452:	0f 93       	push	r16
    4454:	1f 93       	push	r17
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
    445e:	a0 97       	sbiw	r28, 0x20	; 32
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	f8 94       	cli
    4464:	de bf       	out	0x3e, r29	; 62
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	cd bf       	out	0x3d, r28	; 61
    446a:	6d 8f       	std	Y+29, r22	; 0x1d
    446c:	7e 8f       	std	Y+30, r23	; 0x1e
    446e:	8f 8f       	std	Y+31, r24	; 0x1f
    4470:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    4472:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    4474:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    4476:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    4478:	8d 8d       	ldd	r24, Y+29	; 0x1d
    447a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    447c:	af 8d       	ldd	r26, Y+31	; 0x1f
    447e:	b8 a1       	ldd	r27, Y+32	; 0x20
    4480:	bb 23       	and	r27, r27
    4482:	c4 f4       	brge	.+48     	; 0x44b4 <LCD_voidSendNumber+0x62>
        num = -num;
    4484:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4486:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4488:	af 8d       	ldd	r26, Y+31	; 0x1f
    448a:	b8 a1       	ldd	r27, Y+32	; 0x20
    448c:	b0 95       	com	r27
    448e:	a0 95       	com	r26
    4490:	90 95       	com	r25
    4492:	81 95       	neg	r24
    4494:	9f 4f       	sbci	r25, 0xFF	; 255
    4496:	af 4f       	sbci	r26, 0xFF	; 255
    4498:	bf 4f       	sbci	r27, 0xFF	; 255
    449a:	8d 8f       	std	Y+29, r24	; 0x1d
    449c:	9e 8f       	std	Y+30, r25	; 0x1e
    449e:	af 8f       	std	Y+31, r26	; 0x1f
    44a0:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    44a2:	81 e0       	ldi	r24, 0x01	; 1
    44a4:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    44aa:	8d e2       	ldi	r24, 0x2D	; 45
    44ac:	89 87       	std	Y+9, r24	; 0x09
        length++;
    44ae:	8f 81       	ldd	r24, Y+7	; 0x07
    44b0:	8f 5f       	subi	r24, 0xFF	; 255
    44b2:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    44b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    44b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    44b8:	af 8d       	ldd	r26, Y+31	; 0x1f
    44ba:	b8 a1       	ldd	r27, Y+32	; 0x20
    44bc:	89 83       	std	Y+1, r24	; 0x01
    44be:	9a 83       	std	Y+2, r25	; 0x02
    44c0:	ab 83       	std	Y+3, r26	; 0x03
    44c2:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    44c4:	89 81       	ldd	r24, Y+1	; 0x01
    44c6:	9a 81       	ldd	r25, Y+2	; 0x02
    44c8:	ab 81       	ldd	r26, Y+3	; 0x03
    44ca:	bc 81       	ldd	r27, Y+4	; 0x04
    44cc:	2a e0       	ldi	r18, 0x0A	; 10
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	40 e0       	ldi	r20, 0x00	; 0
    44d2:	50 e0       	ldi	r21, 0x00	; 0
    44d4:	bc 01       	movw	r22, r24
    44d6:	cd 01       	movw	r24, r26
    44d8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__udivmodsi4>
    44dc:	da 01       	movw	r26, r20
    44de:	c9 01       	movw	r24, r18
    44e0:	89 83       	std	Y+1, r24	; 0x01
    44e2:	9a 83       	std	Y+2, r25	; 0x02
    44e4:	ab 83       	std	Y+3, r26	; 0x03
    44e6:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    44e8:	8f 81       	ldd	r24, Y+7	; 0x07
    44ea:	8f 5f       	subi	r24, 0xFF	; 255
    44ec:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	9a 81       	ldd	r25, Y+2	; 0x02
    44f2:	ab 81       	ldd	r26, Y+3	; 0x03
    44f4:	bc 81       	ldd	r27, Y+4	; 0x04
    44f6:	00 97       	sbiw	r24, 0x00	; 0
    44f8:	a1 05       	cpc	r26, r1
    44fa:	b1 05       	cpc	r27, r1
    44fc:	19 f7       	brne	.-58     	; 0x44c4 <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    44fe:	8f 81       	ldd	r24, Y+7	; 0x07
    4500:	81 50       	subi	r24, 0x01	; 1
    4502:	88 87       	std	Y+8, r24	; 0x08
    4504:	30 c0       	rjmp	.+96     	; 0x4566 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    4506:	88 85       	ldd	r24, Y+8	; 0x08
    4508:	08 2f       	mov	r16, r24
    450a:	11 27       	eor	r17, r17
    450c:	07 fd       	sbrc	r16, 7
    450e:	10 95       	com	r17
    4510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4512:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4514:	af 8d       	ldd	r26, Y+31	; 0x1f
    4516:	b8 a1       	ldd	r27, Y+32	; 0x20
    4518:	2a e0       	ldi	r18, 0x0A	; 10
    451a:	30 e0       	ldi	r19, 0x00	; 0
    451c:	40 e0       	ldi	r20, 0x00	; 0
    451e:	50 e0       	ldi	r21, 0x00	; 0
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__divmodsi4>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	28 2f       	mov	r18, r24
    452e:	20 5d       	subi	r18, 0xD0	; 208
    4530:	ce 01       	movw	r24, r28
    4532:	09 96       	adiw	r24, 0x09	; 9
    4534:	fc 01       	movw	r30, r24
    4536:	e0 0f       	add	r30, r16
    4538:	f1 1f       	adc	r31, r17
    453a:	20 83       	st	Z, r18
        num /= 10;
    453c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    453e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4540:	af 8d       	ldd	r26, Y+31	; 0x1f
    4542:	b8 a1       	ldd	r27, Y+32	; 0x20
    4544:	2a e0       	ldi	r18, 0x0A	; 10
    4546:	30 e0       	ldi	r19, 0x00	; 0
    4548:	40 e0       	ldi	r20, 0x00	; 0
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	bc 01       	movw	r22, r24
    454e:	cd 01       	movw	r24, r26
    4550:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__divmodsi4>
    4554:	da 01       	movw	r26, r20
    4556:	c9 01       	movw	r24, r18
    4558:	8d 8f       	std	Y+29, r24	; 0x1d
    455a:	9e 8f       	std	Y+30, r25	; 0x1e
    455c:	af 8f       	std	Y+31, r26	; 0x1f
    455e:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    4560:	88 85       	ldd	r24, Y+8	; 0x08
    4562:	81 50       	subi	r24, 0x01	; 1
    4564:	88 87       	std	Y+8, r24	; 0x08
    4566:	88 85       	ldd	r24, Y+8	; 0x08
    4568:	28 2f       	mov	r18, r24
    456a:	33 27       	eor	r19, r19
    456c:	27 fd       	sbrc	r18, 7
    456e:	30 95       	com	r19
    4570:	8e 81       	ldd	r24, Y+6	; 0x06
    4572:	88 2f       	mov	r24, r24
    4574:	90 e0       	ldi	r25, 0x00	; 0
    4576:	28 17       	cp	r18, r24
    4578:	39 07       	cpc	r19, r25
    457a:	2c f6       	brge	.-118    	; 0x4506 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    457c:	8f 81       	ldd	r24, Y+7	; 0x07
    457e:	28 2f       	mov	r18, r24
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	ce 01       	movw	r24, r28
    4584:	09 96       	adiw	r24, 0x09	; 9
    4586:	fc 01       	movw	r30, r24
    4588:	e2 0f       	add	r30, r18
    458a:	f3 1f       	adc	r31, r19
    458c:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    458e:	ce 01       	movw	r24, r28
    4590:	09 96       	adiw	r24, 0x09	; 9
    4592:	0e 94 1a 21 	call	0x4234	; 0x4234 <LCD_voidSendString>
}
    4596:	a0 96       	adiw	r28, 0x20	; 32
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	f8 94       	cli
    459c:	de bf       	out	0x3e, r29	; 62
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	cd bf       	out	0x3d, r28	; 61
    45a2:	cf 91       	pop	r28
    45a4:	df 91       	pop	r29
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	08 95       	ret

000045ac <LM35_voidInit>:

#include "LM35_Interface.h"
#include <util/delay.h>
#include "LM35_Config.h"
void LM35_voidInit()
{
    45ac:	df 93       	push	r29
    45ae:	cf 93       	push	r28
    45b0:	cd b7       	in	r28, 0x3d	; 61
    45b2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LM35Group,LM35Pin,Input);
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	63 e0       	ldi	r22, 0x03	; 3
    45b8:	40 e0       	ldi	r20, 0x00	; 0
    45ba:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <LM35_voidRead>:

void LM35_voidRead(u16 *temp)
{
    45c4:	df 93       	push	r29
    45c6:	cf 93       	push	r28
    45c8:	00 d0       	rcall	.+0      	; 0x45ca <LM35_voidRead+0x6>
    45ca:	cd b7       	in	r28, 0x3d	; 61
    45cc:	de b7       	in	r29, 0x3e	; 62
    45ce:	9a 83       	std	Y+2, r25	; 0x02
    45d0:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(LM35Pin,temp);
    45d2:	29 81       	ldd	r18, Y+1	; 0x01
    45d4:	3a 81       	ldd	r19, Y+2	; 0x02
    45d6:	83 e0       	ldi	r24, 0x03	; 3
    45d8:	b9 01       	movw	r22, r18
    45da:	0e 94 84 17 	call	0x2f08	; 0x2f08 <ADC_voidReadResultPolling>
	*temp=((u32)(*temp)*ADCRefmV)/DACRes; //convert ot equevilant mV
    45de:	e9 81       	ldd	r30, Y+1	; 0x01
    45e0:	fa 81       	ldd	r31, Y+2	; 0x02
    45e2:	80 81       	ld	r24, Z
    45e4:	91 81       	ldd	r25, Z+1	; 0x01
    45e6:	cc 01       	movw	r24, r24
    45e8:	a0 e0       	ldi	r26, 0x00	; 0
    45ea:	b0 e0       	ldi	r27, 0x00	; 0
    45ec:	28 e8       	ldi	r18, 0x88	; 136
    45ee:	33 e1       	ldi	r19, 0x13	; 19
    45f0:	40 e0       	ldi	r20, 0x00	; 0
    45f2:	50 e0       	ldi	r21, 0x00	; 0
    45f4:	bc 01       	movw	r22, r24
    45f6:	cd 01       	movw	r24, r26
    45f8:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    45fc:	dc 01       	movw	r26, r24
    45fe:	cb 01       	movw	r24, r22
    4600:	07 2e       	mov	r0, r23
    4602:	7a e0       	ldi	r23, 0x0A	; 10
    4604:	b6 95       	lsr	r27
    4606:	a7 95       	ror	r26
    4608:	97 95       	ror	r25
    460a:	87 95       	ror	r24
    460c:	7a 95       	dec	r23
    460e:	d1 f7       	brne	.-12     	; 0x4604 <LM35_voidRead+0x40>
    4610:	70 2d       	mov	r23, r0
    4612:	e9 81       	ldd	r30, Y+1	; 0x01
    4614:	fa 81       	ldd	r31, Y+2	; 0x02
    4616:	91 83       	std	Z+1, r25	; 0x01
    4618:	80 83       	st	Z, r24
	*temp= (*temp)/10.00;
    461a:	e9 81       	ldd	r30, Y+1	; 0x01
    461c:	fa 81       	ldd	r31, Y+2	; 0x02
    461e:	80 81       	ld	r24, Z
    4620:	91 81       	ldd	r25, Z+1	; 0x01
    4622:	cc 01       	movw	r24, r24
    4624:	a0 e0       	ldi	r26, 0x00	; 0
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	bc 01       	movw	r22, r24
    462a:	cd 01       	movw	r24, r26
    462c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	bc 01       	movw	r22, r24
    4636:	cd 01       	movw	r24, r26
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e2       	ldi	r20, 0x20	; 32
    463e:	51 e4       	ldi	r21, 0x41	; 65
    4640:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	bc 01       	movw	r22, r24
    464a:	cd 01       	movw	r24, r26
    464c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4650:	dc 01       	movw	r26, r24
    4652:	cb 01       	movw	r24, r22
    4654:	e9 81       	ldd	r30, Y+1	; 0x01
    4656:	fa 81       	ldd	r31, Y+2	; 0x02
    4658:	91 83       	std	Z+1, r25	; 0x01
    465a:	80 83       	st	Z, r24
}
    465c:	0f 90       	pop	r0
    465e:	0f 90       	pop	r0
    4660:	cf 91       	pop	r28
    4662:	df 91       	pop	r29
    4664:	08 95       	ret

00004666 <LDR_voidInit>:
 */

#include "LDR_Interface.h"

void LDR_voidInit()
{
    4666:	df 93       	push	r29
    4668:	cf 93       	push	r28
    466a:	00 d0       	rcall	.+0      	; 0x466c <LDR_voidInit+0x6>
    466c:	0f 92       	push	r0
    466e:	cd b7       	in	r28, 0x3d	; 61
    4670:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LDRGroup,LDRPin,Input);
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	64 e0       	ldi	r22, 0x04	; 4
    4676:	40 e0       	ldi	r20, 0x00	; 0
    4678:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	ADCInformation ADCInformationLDR;
	ADCInformationLDR.AutoTriggerState=LDR_ADC_AutoTriggerState;
    467c:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationLDR.TriggerSource=LDR_ADC_TriggerSource;
    467e:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationLDR.DivisionFactor=LDR_ADC_DivisionFactor;
    4680:	83 e0       	ldi	r24, 0x03	; 3
    4682:	8b 83       	std	Y+3, r24	; 0x03
#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
    4684:	69 81       	ldd	r22, Y+1	; 0x01
    4686:	7a 81       	ldd	r23, Y+2	; 0x02
    4688:	8b 81       	ldd	r24, Y+3	; 0x03
    468a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <ADC_voidInitPolling>
#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	cf 91       	pop	r28
    4696:	df 91       	pop	r29
    4698:	08 95       	ret

0000469a <LDR_voidRead>:

void LDR_voidRead(u16 *Light)
{
    469a:	df 93       	push	r29
    469c:	cf 93       	push	r28
    469e:	00 d0       	rcall	.+0      	; 0x46a0 <LDR_voidRead+0x6>
    46a0:	cd b7       	in	r28, 0x3d	; 61
    46a2:	de b7       	in	r29, 0x3e	; 62
    46a4:	9a 83       	std	Y+2, r25	; 0x02
    46a6:	89 83       	std	Y+1, r24	; 0x01
#if LDRMode==Polling
	ADC_voidReadResultPolling(LDRPin,Light);
    46a8:	29 81       	ldd	r18, Y+1	; 0x01
    46aa:	3a 81       	ldd	r19, Y+2	; 0x02
    46ac:	84 e0       	ldi	r24, 0x04	; 4
    46ae:	b9 01       	movw	r22, r18
    46b0:	0e 94 84 17 	call	0x2f08	; 0x2f08 <ADC_voidReadResultPolling>
	*Light=((u32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV
    46b4:	e9 81       	ldd	r30, Y+1	; 0x01
    46b6:	fa 81       	ldd	r31, Y+2	; 0x02
    46b8:	80 81       	ld	r24, Z
    46ba:	91 81       	ldd	r25, Z+1	; 0x01
    46bc:	cc 01       	movw	r24, r24
    46be:	a0 e0       	ldi	r26, 0x00	; 0
    46c0:	b0 e0       	ldi	r27, 0x00	; 0
    46c2:	28 e8       	ldi	r18, 0x88	; 136
    46c4:	33 e1       	ldi	r19, 0x13	; 19
    46c6:	40 e0       	ldi	r20, 0x00	; 0
    46c8:	50 e0       	ldi	r21, 0x00	; 0
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__mulsi3>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	07 2e       	mov	r0, r23
    46d8:	7a e0       	ldi	r23, 0x0A	; 10
    46da:	b6 95       	lsr	r27
    46dc:	a7 95       	ror	r26
    46de:	97 95       	ror	r25
    46e0:	87 95       	ror	r24
    46e2:	7a 95       	dec	r23
    46e4:	d1 f7       	brne	.-12     	; 0x46da <LDR_voidRead+0x40>
    46e6:	70 2d       	mov	r23, r0
    46e8:	e9 81       	ldd	r30, Y+1	; 0x01
    46ea:	fa 81       	ldd	r31, Y+2	; 0x02
    46ec:	91 83       	std	Z+1, r25	; 0x01
    46ee:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    46f0:	0f 90       	pop	r0
    46f2:	0f 90       	pop	r0
    46f4:	cf 91       	pop	r28
    46f6:	df 91       	pop	r29
    46f8:	08 95       	ret

000046fa <KEYPAD_voidInit>:
#include "Keypad_Interface.h"
#include "../../Common/definition.h"
u8 keypad_value1[Row][Column]= KEYPAD_ARR1;
u8 keypad_value2[Row][Column]=KEYPAD_ARR2;
void KEYPAD_voidInit()
{
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(KeypadGroup,0xF0);
    4702:	84 e0       	ldi	r24, 0x04	; 4
    4704:	60 ef       	ldi	r22, 0xF0	; 240
    4706:	0e 94 10 16 	call	0x2c20	; 0x2c20 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(KeypadGroup,0xFF);
    470a:	84 e0       	ldi	r24, 0x04	; 4
    470c:	6f ef       	ldi	r22, 0xFF	; 255
    470e:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
}
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <KEYPAD_u8GetValue1>:

u8 KEYPAD_u8GetValue1()
{
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	00 d0       	rcall	.+0      	; 0x471e <KEYPAD_u8GetValue1+0x6>
    471e:	0f 92       	push	r0
    4720:	cd b7       	in	r28, 0x3d	; 61
    4722:	de b7       	in	r29, 0x3e	; 62
	u8 C , R ;
	for(C=0;C<Column;C++)
    4724:	1a 82       	std	Y+2, r1	; 0x02
    4726:	38 c0       	rjmp	.+112    	; 0x4798 <KEYPAD_u8GetValue1+0x80>
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
    4728:	84 e0       	ldi	r24, 0x04	; 4
    472a:	6f ef       	ldi	r22, 0xFF	; 255
    472c:	0e 94 58 16 	call	0x2cb0	; 0x2cb0 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    4730:	8a 81       	ldd	r24, Y+2	; 0x02
    4732:	98 2f       	mov	r25, r24
    4734:	9c 5f       	subi	r25, 0xFC	; 252
    4736:	84 e0       	ldi	r24, 0x04	; 4
    4738:	69 2f       	mov	r22, r25
    473a:	40 e0       	ldi	r20, 0x00	; 0
    473c:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    4740:	19 82       	std	Y+1, r1	; 0x01
    4742:	1c c0       	rjmp	.+56     	; 0x477c <KEYPAD_u8GetValue1+0x64>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    4744:	84 e0       	ldi	r24, 0x04	; 4
    4746:	69 81       	ldd	r22, Y+1	; 0x01
    4748:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
    474c:	88 23       	and	r24, r24
    474e:	99 f4       	brne	.+38     	; 0x4776 <KEYPAD_u8GetValue1+0x5e>
			{
				return keypad_value1[R][C];
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	48 2f       	mov	r20, r24
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	8a 81       	ldd	r24, Y+2	; 0x02
    4758:	28 2f       	mov	r18, r24
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	ca 01       	movw	r24, r20
    475e:	88 0f       	add	r24, r24
    4760:	99 1f       	adc	r25, r25
    4762:	88 0f       	add	r24, r24
    4764:	99 1f       	adc	r25, r25
    4766:	82 0f       	add	r24, r18
    4768:	93 1f       	adc	r25, r19
    476a:	fc 01       	movw	r30, r24
    476c:	ee 58       	subi	r30, 0x8E	; 142
    476e:	fe 4f       	sbci	r31, 0xFE	; 254
    4770:	80 81       	ld	r24, Z
    4772:	8b 83       	std	Y+3, r24	; 0x03
    4774:	16 c0       	rjmp	.+44     	; 0x47a2 <KEYPAD_u8GetValue1+0x8a>
	u8 C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    4776:	89 81       	ldd	r24, Y+1	; 0x01
    4778:	8f 5f       	subi	r24, 0xFF	; 255
    477a:	89 83       	std	Y+1, r24	; 0x01
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	84 30       	cpi	r24, 0x04	; 4
    4780:	08 f3       	brcs	.-62     	; 0x4744 <KEYPAD_u8GetValue1+0x2c>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
    4782:	8a 81       	ldd	r24, Y+2	; 0x02
    4784:	98 2f       	mov	r25, r24
    4786:	9c 5f       	subi	r25, 0xFC	; 252
    4788:	84 e0       	ldi	r24, 0x04	; 4
    478a:	69 2f       	mov	r22, r25
    478c:	41 e0       	ldi	r20, 0x01	; 1
    478e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}

u8 KEYPAD_u8GetValue1()
{
	u8 C , R ;
	for(C=0;C<Column;C++)
    4792:	8a 81       	ldd	r24, Y+2	; 0x02
    4794:	8f 5f       	subi	r24, 0xFF	; 255
    4796:	8a 83       	std	Y+2, r24	; 0x02
    4798:	8a 81       	ldd	r24, Y+2	; 0x02
    479a:	84 30       	cpi	r24, 0x04	; 4
    479c:	28 f2       	brcs	.-118    	; 0x4728 <KEYPAD_u8GetValue1+0x10>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
	}
	return Unpressed ;
    479e:	8f ef       	ldi	r24, 0xFF	; 255
    47a0:	8b 83       	std	Y+3, r24	; 0x03
    47a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    47a4:	0f 90       	pop	r0
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	cf 91       	pop	r28
    47ac:	df 91       	pop	r29
    47ae:	08 95       	ret

000047b0 <KEYPAD_charGetValue2>:

char KEYPAD_charGetValue2()
{
    47b0:	df 93       	push	r29
    47b2:	cf 93       	push	r28
    47b4:	00 d0       	rcall	.+0      	; 0x47b6 <KEYPAD_charGetValue2+0x6>
    47b6:	00 d0       	rcall	.+0      	; 0x47b8 <KEYPAD_charGetValue2+0x8>
    47b8:	0f 92       	push	r0
    47ba:	cd b7       	in	r28, 0x3d	; 61
    47bc:	de b7       	in	r29, 0x3e	; 62
	int C , R ;
	for(C=0;C<Column;C++)
    47be:	1c 82       	std	Y+4, r1	; 0x04
    47c0:	1b 82       	std	Y+3, r1	; 0x03
    47c2:	39 c0       	rjmp	.+114    	; 0x4836 <KEYPAD_charGetValue2+0x86>
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    47c4:	8b 81       	ldd	r24, Y+3	; 0x03
    47c6:	98 2f       	mov	r25, r24
    47c8:	9c 5f       	subi	r25, 0xFC	; 252
    47ca:	84 e0       	ldi	r24, 0x04	; 4
    47cc:	69 2f       	mov	r22, r25
    47ce:	40 e0       	ldi	r20, 0x00	; 0
    47d0:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    47d4:	1a 82       	std	Y+2, r1	; 0x02
    47d6:	19 82       	std	Y+1, r1	; 0x01
    47d8:	1c c0       	rjmp	.+56     	; 0x4812 <KEYPAD_charGetValue2+0x62>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    47da:	99 81       	ldd	r25, Y+1	; 0x01
    47dc:	84 e0       	ldi	r24, 0x04	; 4
    47de:	69 2f       	mov	r22, r25
    47e0:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
    47e4:	88 23       	and	r24, r24
    47e6:	81 f4       	brne	.+32     	; 0x4808 <KEYPAD_charGetValue2+0x58>
			{
				return keypad_value1[R][C];
    47e8:	89 81       	ldd	r24, Y+1	; 0x01
    47ea:	9a 81       	ldd	r25, Y+2	; 0x02
    47ec:	2b 81       	ldd	r18, Y+3	; 0x03
    47ee:	3c 81       	ldd	r19, Y+4	; 0x04
    47f0:	88 0f       	add	r24, r24
    47f2:	99 1f       	adc	r25, r25
    47f4:	88 0f       	add	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	82 0f       	add	r24, r18
    47fa:	93 1f       	adc	r25, r19
    47fc:	fc 01       	movw	r30, r24
    47fe:	ee 58       	subi	r30, 0x8E	; 142
    4800:	fe 4f       	sbci	r31, 0xFE	; 254
    4802:	80 81       	ld	r24, Z
    4804:	8d 83       	std	Y+5, r24	; 0x05
    4806:	1e c0       	rjmp	.+60     	; 0x4844 <KEYPAD_charGetValue2+0x94>
{
	int C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    4808:	89 81       	ldd	r24, Y+1	; 0x01
    480a:	9a 81       	ldd	r25, Y+2	; 0x02
    480c:	01 96       	adiw	r24, 0x01	; 1
    480e:	9a 83       	std	Y+2, r25	; 0x02
    4810:	89 83       	std	Y+1, r24	; 0x01
    4812:	89 81       	ldd	r24, Y+1	; 0x01
    4814:	9a 81       	ldd	r25, Y+2	; 0x02
    4816:	84 30       	cpi	r24, 0x04	; 4
    4818:	91 05       	cpc	r25, r1
    481a:	fc f2       	brlt	.-66     	; 0x47da <KEYPAD_charGetValue2+0x2a>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    481c:	8b 81       	ldd	r24, Y+3	; 0x03
    481e:	98 2f       	mov	r25, r24
    4820:	9c 5f       	subi	r25, 0xFC	; 252
    4822:	84 e0       	ldi	r24, 0x04	; 4
    4824:	69 2f       	mov	r22, r25
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}

char KEYPAD_charGetValue2()
{
	int C , R ;
	for(C=0;C<Column;C++)
    482c:	8b 81       	ldd	r24, Y+3	; 0x03
    482e:	9c 81       	ldd	r25, Y+4	; 0x04
    4830:	01 96       	adiw	r24, 0x01	; 1
    4832:	9c 83       	std	Y+4, r25	; 0x04
    4834:	8b 83       	std	Y+3, r24	; 0x03
    4836:	8b 81       	ldd	r24, Y+3	; 0x03
    4838:	9c 81       	ldd	r25, Y+4	; 0x04
    483a:	84 30       	cpi	r24, 0x04	; 4
    483c:	91 05       	cpc	r25, r1
    483e:	14 f2       	brlt	.-124    	; 0x47c4 <KEYPAD_charGetValue2+0x14>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
	}
	return Unpressed ;
    4840:	8f ef       	ldi	r24, 0xFF	; 255
    4842:	8d 83       	std	Y+5, r24	; 0x05
    4844:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4846:	0f 90       	pop	r0
    4848:	0f 90       	pop	r0
    484a:	0f 90       	pop	r0
    484c:	0f 90       	pop	r0
    484e:	0f 90       	pop	r0
    4850:	cf 91       	pop	r28
    4852:	df 91       	pop	r29
    4854:	08 95       	ret

00004856 <GasSensor_voidAnalogInit>:
 */

#include "GasSensor_Interface.h"

void GasSensor_voidAnalogInit()
{
    4856:	df 93       	push	r29
    4858:	cf 93       	push	r28
    485a:	00 d0       	rcall	.+0      	; 0x485c <GasSensor_voidAnalogInit+0x6>
    485c:	0f 92       	push	r0
    485e:	cd b7       	in	r28, 0x3d	; 61
    4860:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	65 e0       	ldi	r22, 0x05	; 5
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	ADCInformation ADCInformationGasSensor;
	ADCInformationGasSensor.AutoTriggerState=GasSensor_ADC_AutoTriggerState;
    486c:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationGasSensor.TriggerSource=GasSensor_ADC_TriggerSource;
    486e:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationGasSensor.DivisionFactor=GasSensor_ADC_DivisionFactor;
    4870:	83 e0       	ldi	r24, 0x03	; 3
    4872:	8b 83       	std	Y+3, r24	; 0x03
#if GasSensorMode==Polling
	ADC_voidInitPolling(ADCInformationGasSensor);
    4874:	69 81       	ldd	r22, Y+1	; 0x01
    4876:	7a 81       	ldd	r23, Y+2	; 0x02
    4878:	8b 81       	ldd	r24, Y+3	; 0x03
    487a:	0e 94 19 17 	call	0x2e32	; 0x2e32 <ADC_voidInitPolling>
#elif GasSensorMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    487e:	0f 90       	pop	r0
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <GasSensor_voidDigitalInit>:

void GasSensor_voidDigitalInit()
{
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	65 e0       	ldi	r22, 0x05	; 5
    4896:	40 e0       	ldi	r20, 0x00	; 0
    4898:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    489c:	cf 91       	pop	r28
    489e:	df 91       	pop	r29
    48a0:	08 95       	ret

000048a2 <GasSensor_f32ReadAnalog>:

void GasSensor_f32ReadAnalog(u16 read)
{
    48a2:	df 93       	push	r29
    48a4:	cf 93       	push	r28
    48a6:	00 d0       	rcall	.+0      	; 0x48a8 <GasSensor_f32ReadAnalog+0x6>
    48a8:	cd b7       	in	r28, 0x3d	; 61
    48aa:	de b7       	in	r29, 0x3e	; 62
    48ac:	9a 83       	std	Y+2, r25	; 0x02
    48ae:	89 83       	std	Y+1, r24	; 0x01


}
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	cf 91       	pop	r28
    48b6:	df 91       	pop	r29
    48b8:	08 95       	ret

000048ba <GasSensor_u8DigitalState>:

u8 GasSensor_u8DigitalState()
{
    48ba:	df 93       	push	r29
    48bc:	cf 93       	push	r28
    48be:	cd b7       	in	r28, 0x3d	; 61
    48c0:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8ReadPinValue(GasSensorGroup,GasSensorPin);
    48c2:	81 e0       	ldi	r24, 0x01	; 1
    48c4:	65 e0       	ldi	r22, 0x05	; 5
    48c6:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
}
    48ca:	cf 91       	pop	r28
    48cc:	df 91       	pop	r29
    48ce:	08 95       	ret

000048d0 <DCMotor_voidInit>:

#include "DCMotor_Interface.h"


void DCMotor_voidInit()
{
    48d0:	df 93       	push	r29
    48d2:	cf 93       	push	r28
    48d4:	cd b7       	in	r28, 0x3d	; 61
    48d6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB1,Output);
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	60 e0       	ldi	r22, 0x00	; 0
    48dc:	41 e0       	ldi	r20, 0x01	; 1
    48de:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB2,Output);
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	41 e0       	ldi	r20, 0x01	; 1
    48e8:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB3,Output);
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	62 e0       	ldi	r22, 0x02	; 2
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB4,Output);
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	63 e0       	ldi	r22, 0x03	; 3
    48fa:	41 e0       	ldi	r20, 0x01	; 1
    48fc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    4900:	cf 91       	pop	r28
    4902:	df 91       	pop	r29
    4904:	08 95       	ret

00004906 <DCMotor_voidOnMaxSpeed>:

void DCMotor_voidOnMaxSpeed(u8 Dir)
{
    4906:	df 93       	push	r29
    4908:	cf 93       	push	r28
    490a:	0f 92       	push	r0
    490c:	cd b7       	in	r28, 0x3d	; 61
    490e:	de b7       	in	r29, 0x3e	; 62
    4910:	89 83       	std	Y+1, r24	; 0x01
	if (Dir==clock_wise)
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	88 23       	and	r24, r24
    4916:	a9 f4       	brne	.+42     	; 0x4942 <DCMotor_voidOnMaxSpeed+0x3c>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,High);
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	41 e0       	ldi	r20, 0x01	; 1
    491e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,High);
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	63 e0       	ldi	r22, 0x03	; 3
    4926:	41 e0       	ldi	r20, 0x01	; 1
    4928:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	40 e0       	ldi	r20, 0x00	; 0
    4932:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	62 e0       	ldi	r22, 0x02	; 2
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
    4940:	17 c0       	rjmp	.+46     	; 0x4970 <DCMotor_voidOnMaxSpeed+0x6a>
	}
	else if(Dir==anti_clock_wise)
    4942:	89 81       	ldd	r24, Y+1	; 0x01
    4944:	81 30       	cpi	r24, 0x01	; 1
    4946:	a1 f4       	brne	.+40     	; 0x4970 <DCMotor_voidOnMaxSpeed+0x6a>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	60 e0       	ldi	r22, 0x00	; 0
    494c:	40 e0       	ldi	r20, 0x00	; 0
    494e:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    4952:	81 e0       	ldi	r24, 0x01	; 1
    4954:	63 e0       	ldi	r22, 0x03	; 3
    4956:	40 e0       	ldi	r20, 0x00	; 0
    4958:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,High);
    495c:	81 e0       	ldi	r24, 0x01	; 1
    495e:	61 e0       	ldi	r22, 0x01	; 1
    4960:	41 e0       	ldi	r20, 0x01	; 1
    4962:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,High);
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	62 e0       	ldi	r22, 0x02	; 2
    496a:	41 e0       	ldi	r20, 0x01	; 1
    496c:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	}
}
    4970:	0f 90       	pop	r0
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <DCMotor_voidOff>:

void DCMotor_voidOff()
{
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	60 e0       	ldi	r22, 0x00	; 0
    4984:	40 e0       	ldi	r20, 0x00	; 0
    4986:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	63 e0       	ldi	r22, 0x03	; 3
    498e:	40 e0       	ldi	r20, 0x00	; 0
    4990:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	61 e0       	ldi	r22, 0x01	; 1
    4998:	40 e0       	ldi	r20, 0x00	; 0
    499a:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    499e:	81 e0       	ldi	r24, 0x01	; 1
    49a0:	62 e0       	ldi	r22, 0x02	; 2
    49a2:	40 e0       	ldi	r20, 0x00	; 0
    49a4:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <BUZZER_voidInit>:
 *      Author: salma
 */
#include "Buzzer_Interface.h"
#include <util/delay.h>
void BUZZER_voidInit ()
{
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(BuzzerGruop,BuzzerPin,Output);
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	61 e0       	ldi	r22, 0x01	; 1
    49ba:	41 e0       	ldi	r20, 0x01	; 1
    49bc:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
}
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <BUZZER_voidOn>:

void BUZZER_voidOn ()
{
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,High);
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	61 e0       	ldi	r22, 0x01	; 1
    49d2:	41 e0       	ldi	r20, 0x01	; 1
    49d4:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <BUZZER_voidOff>:

void BUZZER_voidOff ()
{
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	cd b7       	in	r28, 0x3d	; 61
    49e4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,Low);
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	61 e0       	ldi	r22, 0x01	; 1
    49ea:	40 e0       	ldi	r20, 0x00	; 0
    49ec:	0e 94 8c 13 	call	0x2718	; 0x2718 <DIO_voidSetPinValue>
}
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	08 95       	ret

000049f6 <BUZZER_voidToggle>:

void BUZZER_voidToggle ()
{
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8ReadPinValue(BuzzerGruop,BuzzerPin)==High)
    49fe:	81 e0       	ldi	r24, 0x01	; 1
    4a00:	61 e0       	ldi	r22, 0x01	; 1
    4a02:	0e 94 9a 14 	call	0x2934	; 0x2934 <DIO_u8ReadPinValue>
    4a06:	81 30       	cpi	r24, 0x01	; 1
    4a08:	19 f4       	brne	.+6      	; 0x4a10 <BUZZER_voidToggle+0x1a>
	{
		BUZZER_voidOff();
    4a0a:	0e 94 ef 24 	call	0x49de	; 0x49de <BUZZER_voidOff>
    4a0e:	02 c0       	rjmp	.+4      	; 0x4a14 <BUZZER_voidToggle+0x1e>
	}
	else
	{
		BUZZER_voidOn();
    4a10:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <BUZZER_voidOn>
	}
}
    4a14:	cf 91       	pop	r28
    4a16:	df 91       	pop	r29
    4a18:	08 95       	ret

00004a1a <BluetoothModule_voidInit>:
 */

#include "BluetoothModule_Interface.h"

void BluetoothModule_voidInit()
{
    4a1a:	df 93       	push	r29
    4a1c:	cf 93       	push	r28
    4a1e:	cd b7       	in	r28, 0x3d	; 61
    4a20:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(UARTGroup,TX,output);
    4a22:	84 e0       	ldi	r24, 0x04	; 4
    4a24:	61 e0       	ldi	r22, 0x01	; 1
    4a26:	41 e0       	ldi	r20, 0x01	; 1
    4a28:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	DIO_voidSetPinDir(UARTGroup,RX,input);
    4a2c:	84 e0       	ldi	r24, 0x04	; 4
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	40 e0       	ldi	r20, 0x00	; 0
    4a32:	0e 94 7e 12 	call	0x24fc	; 0x24fc <DIO_voidSetPinDir>
	UART_voidInit(9600);
    4a36:	60 e8       	ldi	r22, 0x80	; 128
    4a38:	75 e2       	ldi	r23, 0x25	; 37
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
}
    4a42:	cf 91       	pop	r28
    4a44:	df 91       	pop	r29
    4a46:	08 95       	ret

00004a48 <BluetoothModule_u8RecieveData>:

u8 BluetoothModule_u8RecieveData()
{
    4a48:	df 93       	push	r29
    4a4a:	cf 93       	push	r28
    4a4c:	cd b7       	in	r28, 0x3d	; 61
    4a4e:	de b7       	in	r29, 0x3e	; 62
	return UART_u8RecieveData();
    4a50:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_u8RecieveData>
}
    4a54:	cf 91       	pop	r28
    4a56:	df 91       	pop	r29
    4a58:	08 95       	ret

00004a5a <main>:
#include <util/delay.h>



void main()
{
    4a5a:	df 93       	push	r29
    4a5c:	cf 93       	push	r28
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    4a62:	60 97       	sbiw	r28, 0x10	; 16
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    4a6e:	0e 94 20 1f 	call	0x3e40	; 0x3e40 <LCD_voidInit>
	WaterSensor_voidInit();
    4a72:	0e 94 78 18 	call	0x30f0	; 0x30f0 <WaterSensor_voidInit>
	ADC_voidInit();
    4a76:	0e 94 04 17 	call	0x2e08	; 0x2e08 <ADC_voidInit>
	u16 Water;
	while(1)
	{
		LCD_voidClear();
    4a7a:	0e 94 a1 21 	call	0x4342	; 0x4342 <LCD_voidClear>
		WaterSensor_voidRead(&Water);
    4a7e:	ce 01       	movw	r24, r28
    4a80:	0f 96       	adiw	r24, 0x0f	; 15
    4a82:	0e 94 84 18 	call	0x3108	; 0x3108 <WaterSensor_voidRead>
		LCD_voidSendNumber(Water);
    4a86:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a88:	98 89       	ldd	r25, Y+16	; 0x10
    4a8a:	cc 01       	movw	r24, r24
    4a8c:	a0 e0       	ldi	r26, 0x00	; 0
    4a8e:	b0 e0       	ldi	r27, 0x00	; 0
    4a90:	bc 01       	movw	r22, r24
    4a92:	cd 01       	movw	r24, r26
    4a94:	0e 94 29 22 	call	0x4452	; 0x4452 <LCD_voidSendNumber>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	aa e7       	ldi	r26, 0x7A	; 122
    4a9e:	b4 e4       	ldi	r27, 0x44	; 68
    4aa0:	8b 87       	std	Y+11, r24	; 0x0b
    4aa2:	9c 87       	std	Y+12, r25	; 0x0c
    4aa4:	ad 87       	std	Y+13, r26	; 0x0d
    4aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ab0:	20 e0       	ldi	r18, 0x00	; 0
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	4a ef       	ldi	r20, 0xFA	; 250
    4ab6:	54 e4       	ldi	r21, 0x44	; 68
    4ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	8f 83       	std	Y+7, r24	; 0x07
    4ac2:	98 87       	std	Y+8, r25	; 0x08
    4ac4:	a9 87       	std	Y+9, r26	; 0x09
    4ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    4aca:	78 85       	ldd	r23, Y+8	; 0x08
    4acc:	89 85       	ldd	r24, Y+9	; 0x09
    4ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	40 e8       	ldi	r20, 0x80	; 128
    4ad6:	5f e3       	ldi	r21, 0x3F	; 63
    4ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4adc:	88 23       	and	r24, r24
    4ade:	2c f4       	brge	.+10     	; 0x4aea <main+0x90>
		__ticks = 1;
    4ae0:	81 e0       	ldi	r24, 0x01	; 1
    4ae2:	90 e0       	ldi	r25, 0x00	; 0
    4ae4:	9e 83       	std	Y+6, r25	; 0x06
    4ae6:	8d 83       	std	Y+5, r24	; 0x05
    4ae8:	3f c0       	rjmp	.+126    	; 0x4b68 <main+0x10e>
	else if (__tmp > 65535)
    4aea:	6f 81       	ldd	r22, Y+7	; 0x07
    4aec:	78 85       	ldd	r23, Y+8	; 0x08
    4aee:	89 85       	ldd	r24, Y+9	; 0x09
    4af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	3f ef       	ldi	r19, 0xFF	; 255
    4af6:	4f e7       	ldi	r20, 0x7F	; 127
    4af8:	57 e4       	ldi	r21, 0x47	; 71
    4afa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4afe:	18 16       	cp	r1, r24
    4b00:	4c f5       	brge	.+82     	; 0x4b54 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b0a:	20 e0       	ldi	r18, 0x00	; 0
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	40 e2       	ldi	r20, 0x20	; 32
    4b10:	51 e4       	ldi	r21, 0x41	; 65
    4b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b16:	dc 01       	movw	r26, r24
    4b18:	cb 01       	movw	r24, r22
    4b1a:	bc 01       	movw	r22, r24
    4b1c:	cd 01       	movw	r24, r26
    4b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b22:	dc 01       	movw	r26, r24
    4b24:	cb 01       	movw	r24, r22
    4b26:	9e 83       	std	Y+6, r25	; 0x06
    4b28:	8d 83       	std	Y+5, r24	; 0x05
    4b2a:	0f c0       	rjmp	.+30     	; 0x4b4a <main+0xf0>
    4b2c:	88 ec       	ldi	r24, 0xC8	; 200
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	9c 83       	std	Y+4, r25	; 0x04
    4b32:	8b 83       	std	Y+3, r24	; 0x03
    4b34:	8b 81       	ldd	r24, Y+3	; 0x03
    4b36:	9c 81       	ldd	r25, Y+4	; 0x04
    4b38:	01 97       	sbiw	r24, 0x01	; 1
    4b3a:	f1 f7       	brne	.-4      	; 0x4b38 <main+0xde>
    4b3c:	9c 83       	std	Y+4, r25	; 0x04
    4b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b40:	8d 81       	ldd	r24, Y+5	; 0x05
    4b42:	9e 81       	ldd	r25, Y+6	; 0x06
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	9e 83       	std	Y+6, r25	; 0x06
    4b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	69 f7       	brne	.-38     	; 0x4b2c <main+0xd2>
    4b52:	93 cf       	rjmp	.-218    	; 0x4a7a <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b54:	6f 81       	ldd	r22, Y+7	; 0x07
    4b56:	78 85       	ldd	r23, Y+8	; 0x08
    4b58:	89 85       	ldd	r24, Y+9	; 0x09
    4b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b60:	dc 01       	movw	r26, r24
    4b62:	cb 01       	movw	r24, r22
    4b64:	9e 83       	std	Y+6, r25	; 0x06
    4b66:	8d 83       	std	Y+5, r24	; 0x05
    4b68:	8d 81       	ldd	r24, Y+5	; 0x05
    4b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b6c:	9a 83       	std	Y+2, r25	; 0x02
    4b6e:	89 83       	std	Y+1, r24	; 0x01
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	9a 81       	ldd	r25, Y+2	; 0x02
    4b74:	01 97       	sbiw	r24, 0x01	; 1
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <main+0x11a>
    4b78:	9a 83       	std	Y+2, r25	; 0x02
    4b7a:	89 83       	std	Y+1, r24	; 0x01
    4b7c:	7e cf       	rjmp	.-260    	; 0x4a7a <main+0x20>

00004b7e <__mulsi3>:
    4b7e:	62 9f       	mul	r22, r18
    4b80:	d0 01       	movw	r26, r0
    4b82:	73 9f       	mul	r23, r19
    4b84:	f0 01       	movw	r30, r0
    4b86:	82 9f       	mul	r24, r18
    4b88:	e0 0d       	add	r30, r0
    4b8a:	f1 1d       	adc	r31, r1
    4b8c:	64 9f       	mul	r22, r20
    4b8e:	e0 0d       	add	r30, r0
    4b90:	f1 1d       	adc	r31, r1
    4b92:	92 9f       	mul	r25, r18
    4b94:	f0 0d       	add	r31, r0
    4b96:	83 9f       	mul	r24, r19
    4b98:	f0 0d       	add	r31, r0
    4b9a:	74 9f       	mul	r23, r20
    4b9c:	f0 0d       	add	r31, r0
    4b9e:	65 9f       	mul	r22, r21
    4ba0:	f0 0d       	add	r31, r0
    4ba2:	99 27       	eor	r25, r25
    4ba4:	72 9f       	mul	r23, r18
    4ba6:	b0 0d       	add	r27, r0
    4ba8:	e1 1d       	adc	r30, r1
    4baa:	f9 1f       	adc	r31, r25
    4bac:	63 9f       	mul	r22, r19
    4bae:	b0 0d       	add	r27, r0
    4bb0:	e1 1d       	adc	r30, r1
    4bb2:	f9 1f       	adc	r31, r25
    4bb4:	bd 01       	movw	r22, r26
    4bb6:	cf 01       	movw	r24, r30
    4bb8:	11 24       	eor	r1, r1
    4bba:	08 95       	ret

00004bbc <__divmodhi4>:
    4bbc:	97 fb       	bst	r25, 7
    4bbe:	09 2e       	mov	r0, r25
    4bc0:	07 26       	eor	r0, r23
    4bc2:	0a d0       	rcall	.+20     	; 0x4bd8 <__divmodhi4_neg1>
    4bc4:	77 fd       	sbrc	r23, 7
    4bc6:	04 d0       	rcall	.+8      	; 0x4bd0 <__divmodhi4_neg2>
    4bc8:	49 d0       	rcall	.+146    	; 0x4c5c <__udivmodhi4>
    4bca:	06 d0       	rcall	.+12     	; 0x4bd8 <__divmodhi4_neg1>
    4bcc:	00 20       	and	r0, r0
    4bce:	1a f4       	brpl	.+6      	; 0x4bd6 <__divmodhi4_exit>

00004bd0 <__divmodhi4_neg2>:
    4bd0:	70 95       	com	r23
    4bd2:	61 95       	neg	r22
    4bd4:	7f 4f       	sbci	r23, 0xFF	; 255

00004bd6 <__divmodhi4_exit>:
    4bd6:	08 95       	ret

00004bd8 <__divmodhi4_neg1>:
    4bd8:	f6 f7       	brtc	.-4      	; 0x4bd6 <__divmodhi4_exit>
    4bda:	90 95       	com	r25
    4bdc:	81 95       	neg	r24
    4bde:	9f 4f       	sbci	r25, 0xFF	; 255
    4be0:	08 95       	ret

00004be2 <__udivmodsi4>:
    4be2:	a1 e2       	ldi	r26, 0x21	; 33
    4be4:	1a 2e       	mov	r1, r26
    4be6:	aa 1b       	sub	r26, r26
    4be8:	bb 1b       	sub	r27, r27
    4bea:	fd 01       	movw	r30, r26
    4bec:	0d c0       	rjmp	.+26     	; 0x4c08 <__udivmodsi4_ep>

00004bee <__udivmodsi4_loop>:
    4bee:	aa 1f       	adc	r26, r26
    4bf0:	bb 1f       	adc	r27, r27
    4bf2:	ee 1f       	adc	r30, r30
    4bf4:	ff 1f       	adc	r31, r31
    4bf6:	a2 17       	cp	r26, r18
    4bf8:	b3 07       	cpc	r27, r19
    4bfa:	e4 07       	cpc	r30, r20
    4bfc:	f5 07       	cpc	r31, r21
    4bfe:	20 f0       	brcs	.+8      	; 0x4c08 <__udivmodsi4_ep>
    4c00:	a2 1b       	sub	r26, r18
    4c02:	b3 0b       	sbc	r27, r19
    4c04:	e4 0b       	sbc	r30, r20
    4c06:	f5 0b       	sbc	r31, r21

00004c08 <__udivmodsi4_ep>:
    4c08:	66 1f       	adc	r22, r22
    4c0a:	77 1f       	adc	r23, r23
    4c0c:	88 1f       	adc	r24, r24
    4c0e:	99 1f       	adc	r25, r25
    4c10:	1a 94       	dec	r1
    4c12:	69 f7       	brne	.-38     	; 0x4bee <__udivmodsi4_loop>
    4c14:	60 95       	com	r22
    4c16:	70 95       	com	r23
    4c18:	80 95       	com	r24
    4c1a:	90 95       	com	r25
    4c1c:	9b 01       	movw	r18, r22
    4c1e:	ac 01       	movw	r20, r24
    4c20:	bd 01       	movw	r22, r26
    4c22:	cf 01       	movw	r24, r30
    4c24:	08 95       	ret

00004c26 <__divmodsi4>:
    4c26:	97 fb       	bst	r25, 7
    4c28:	09 2e       	mov	r0, r25
    4c2a:	05 26       	eor	r0, r21
    4c2c:	0e d0       	rcall	.+28     	; 0x4c4a <__divmodsi4_neg1>
    4c2e:	57 fd       	sbrc	r21, 7
    4c30:	04 d0       	rcall	.+8      	; 0x4c3a <__divmodsi4_neg2>
    4c32:	d7 df       	rcall	.-82     	; 0x4be2 <__udivmodsi4>
    4c34:	0a d0       	rcall	.+20     	; 0x4c4a <__divmodsi4_neg1>
    4c36:	00 1c       	adc	r0, r0
    4c38:	38 f4       	brcc	.+14     	; 0x4c48 <__divmodsi4_exit>

00004c3a <__divmodsi4_neg2>:
    4c3a:	50 95       	com	r21
    4c3c:	40 95       	com	r20
    4c3e:	30 95       	com	r19
    4c40:	21 95       	neg	r18
    4c42:	3f 4f       	sbci	r19, 0xFF	; 255
    4c44:	4f 4f       	sbci	r20, 0xFF	; 255
    4c46:	5f 4f       	sbci	r21, 0xFF	; 255

00004c48 <__divmodsi4_exit>:
    4c48:	08 95       	ret

00004c4a <__divmodsi4_neg1>:
    4c4a:	f6 f7       	brtc	.-4      	; 0x4c48 <__divmodsi4_exit>
    4c4c:	90 95       	com	r25
    4c4e:	80 95       	com	r24
    4c50:	70 95       	com	r23
    4c52:	61 95       	neg	r22
    4c54:	7f 4f       	sbci	r23, 0xFF	; 255
    4c56:	8f 4f       	sbci	r24, 0xFF	; 255
    4c58:	9f 4f       	sbci	r25, 0xFF	; 255
    4c5a:	08 95       	ret

00004c5c <__udivmodhi4>:
    4c5c:	aa 1b       	sub	r26, r26
    4c5e:	bb 1b       	sub	r27, r27
    4c60:	51 e1       	ldi	r21, 0x11	; 17
    4c62:	07 c0       	rjmp	.+14     	; 0x4c72 <__udivmodhi4_ep>

00004c64 <__udivmodhi4_loop>:
    4c64:	aa 1f       	adc	r26, r26
    4c66:	bb 1f       	adc	r27, r27
    4c68:	a6 17       	cp	r26, r22
    4c6a:	b7 07       	cpc	r27, r23
    4c6c:	10 f0       	brcs	.+4      	; 0x4c72 <__udivmodhi4_ep>
    4c6e:	a6 1b       	sub	r26, r22
    4c70:	b7 0b       	sbc	r27, r23

00004c72 <__udivmodhi4_ep>:
    4c72:	88 1f       	adc	r24, r24
    4c74:	99 1f       	adc	r25, r25
    4c76:	5a 95       	dec	r21
    4c78:	a9 f7       	brne	.-22     	; 0x4c64 <__udivmodhi4_loop>
    4c7a:	80 95       	com	r24
    4c7c:	90 95       	com	r25
    4c7e:	bc 01       	movw	r22, r24
    4c80:	cd 01       	movw	r24, r26
    4c82:	08 95       	ret

00004c84 <__prologue_saves__>:
    4c84:	2f 92       	push	r2
    4c86:	3f 92       	push	r3
    4c88:	4f 92       	push	r4
    4c8a:	5f 92       	push	r5
    4c8c:	6f 92       	push	r6
    4c8e:	7f 92       	push	r7
    4c90:	8f 92       	push	r8
    4c92:	9f 92       	push	r9
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	cd b7       	in	r28, 0x3d	; 61
    4caa:	de b7       	in	r29, 0x3e	; 62
    4cac:	ca 1b       	sub	r28, r26
    4cae:	db 0b       	sbc	r29, r27
    4cb0:	0f b6       	in	r0, 0x3f	; 63
    4cb2:	f8 94       	cli
    4cb4:	de bf       	out	0x3e, r29	; 62
    4cb6:	0f be       	out	0x3f, r0	; 63
    4cb8:	cd bf       	out	0x3d, r28	; 61
    4cba:	09 94       	ijmp

00004cbc <__epilogue_restores__>:
    4cbc:	2a 88       	ldd	r2, Y+18	; 0x12
    4cbe:	39 88       	ldd	r3, Y+17	; 0x11
    4cc0:	48 88       	ldd	r4, Y+16	; 0x10
    4cc2:	5f 84       	ldd	r5, Y+15	; 0x0f
    4cc4:	6e 84       	ldd	r6, Y+14	; 0x0e
    4cc6:	7d 84       	ldd	r7, Y+13	; 0x0d
    4cc8:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cca:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ccc:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cce:	b9 84       	ldd	r11, Y+9	; 0x09
    4cd0:	c8 84       	ldd	r12, Y+8	; 0x08
    4cd2:	df 80       	ldd	r13, Y+7	; 0x07
    4cd4:	ee 80       	ldd	r14, Y+6	; 0x06
    4cd6:	fd 80       	ldd	r15, Y+5	; 0x05
    4cd8:	0c 81       	ldd	r16, Y+4	; 0x04
    4cda:	1b 81       	ldd	r17, Y+3	; 0x03
    4cdc:	aa 81       	ldd	r26, Y+2	; 0x02
    4cde:	b9 81       	ldd	r27, Y+1	; 0x01
    4ce0:	ce 0f       	add	r28, r30
    4ce2:	d1 1d       	adc	r29, r1
    4ce4:	0f b6       	in	r0, 0x3f	; 63
    4ce6:	f8 94       	cli
    4ce8:	de bf       	out	0x3e, r29	; 62
    4cea:	0f be       	out	0x3f, r0	; 63
    4cec:	cd bf       	out	0x3d, r28	; 61
    4cee:	ed 01       	movw	r28, r26
    4cf0:	08 95       	ret

00004cf2 <_exit>:
    4cf2:	f8 94       	cli

00004cf4 <__stop_program>:
    4cf4:	ff cf       	rjmp	.-2      	; 0x4cf4 <__stop_program>
