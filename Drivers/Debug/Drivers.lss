
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004efc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004efc  00004f90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800192  00800192  000050c2  2**0
                  ALLOC
  3 .stab         00007e90  00000000  00000000  000050c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039c5  00000000  00000000  0000cf54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00010919  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00010ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00010cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000130b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00015614  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000157d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00015aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016438  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6c 12 	jmp	0x24d8	; 0x24d8 <__vector_1>
       8:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_2>
       c:	0c 94 f6 12 	jmp	0x25ec	; 0x25ec <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_6>
      1c:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_7>
      20:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_8>
      24:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_9>
      28:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_10>
      2c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6e 19 	jmp	0x32dc	; 0x32dc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6d 26 	call	0x4cda	; 0x4cda <main>
      8a:	0c 94 7c 27 	jmp	0x4ef8	; 0x4ef8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 27 	jmp	0x4ec2	; 0x4ec2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 51 27 	jmp	0x4ea2	; 0x4ea2 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 6d 27 	jmp	0x4eda	; 0x4eda <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 55 27 	jmp	0x4eaa	; 0x4eaa <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 71 27 	jmp	0x4ee2	; 0x4ee2 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 4d 27 	jmp	0x4e9a	; 0x4e9a <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 69 27 	jmp	0x4ed2	; 0x4ed2 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
 */

#include "UART_Interface.h"

void UART_voidInit(u32 BoudRate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_voidInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
	/*Set boud rate*/
	clear_bit(UART_UBRRH,UBRRH_URSEL);
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
	UART_UBRRH=0;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
	UART_UBRRL=BoudRate;
     e56:	e9 e2       	ldi	r30, 0x29	; 41
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24

	/*Interrupts*/
#if TXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
#elif TXIEState==enable
	set_bit(UART_UCSRB,UCSRB_TXCIE);
#endif

#if RXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_RXCIE);
     e6c:	aa e2       	ldi	r26, 0x2A	; 42
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e2       	ldi	r30, 0x2A	; 42
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	8c 93       	st	X, r24
#elif RXIEState==enable
	set_bit(UART_UCSRB,UCSRB_RXCIE);
#endif

#if UDIEState==disable
	clear_bit(UART_UCSRB,UCSRB_UDRIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
#elif UDIEState==enable
	set_bit(UART_UCSRB,UCSRB_UDRIE);
#endif

	/*Async*/
	set_bit(UART_UCSRC,UCSRC_URSEL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UMSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24

	/*parity*/
#if ParityEnable==enable
#if Parity==odd
	set_bit(UART_UCSRC,UCSRC_UPM0);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UPM1);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UPM1);
#endif

	/*Stop bits*/
#if NoStopBits==1
	clear_bit(UART_UCSRC,UCSRC_USBS);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24
#elif DataSize==7
	clear_bit(UART_UCSRC,UCSRC_UCSZ0);
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
#elif DataSize==8
	set_bit(UART_UCSRC,UCSRC_UCSZ0);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	set_bit(UART_UCSRB,UCSRB_UCSZ2);
#else
#error "Invalid Option"
#endif
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_voidSendData>:

void UART_voidSendData(u8 Data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	a1 f3       	breq	.-24     	; 0xf12 <UART_voidSendData+0xc>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f2a:	ab e2       	ldi	r26, 0x2B	; 43
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e2       	ldi	r30, 0x2B	; 43
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
	UART_UDR=Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
	set_bit(UART_UCSRB,UCSRB_TXEN);
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24

}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_u8RecieveData>:

u8 UART_u8RecieveData()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u8 RecievedData;
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_u8RecieveData+0xa>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
	set_bit(UART_UCSRB,UCSRB_RXEN);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	while (get_bit(UART_UCSRA,UCSRA_RXC)==Low);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <UART_u8RecieveData+0x3e>
	set_bit(UART_UCSRA,UCSRA_RXC);
     f9e:	ab e2       	ldi	r26, 0x2B	; 43
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	RecievedData=UART_UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return RecievedData;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <T1_voidNormalModeInit>:



/*******************************Normal Mode Functions*******************************************/
void T1_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <T1_voidNormalModeInit+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
     fd0:	af e4       	ldi	r26, 0x4F	; 79
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
     fde:	af e4       	ldi	r26, 0x4F	; 79
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e4       	ldi	r30, 0x4F	; 79
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
     ffa:	ae e4       	ldi	r26, 0x4E	; 78
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7e       	andi	r24, 0xEF	; 239
    1006:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	87 70       	andi	r24, 0x07	; 7
    100c:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    100e:	ae e4       	ldi	r26, 0x4E	; 78
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ee e4       	ldi	r30, 0x4E	; 78
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ee e4       	ldi	r30, 0x4E	; 78
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	90 81       	ld	r25, Z
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	89 2b       	or	r24, r25
    102a:	8c 93       	st	X, r24
	T1_TCNT1=PreloadValue;
    102c:	ec e4       	ldi	r30, 0x4C	; 76
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	41 f4       	brne	.+16     	; 0x1050 <T1_voidNormalModeInit+0x92>
	{
		set_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1040:	a9 e5       	ldi	r26, 0x59	; 89
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e9 e5       	ldi	r30, 0x59	; 89
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	}
	else if(InterruptState ==disable)
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	39 f4       	brne	.+14     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8b 7f       	andi	r24, 0xFB	; 251
    1062:	8c 93       	st	X, r24
	}

}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <T1_voidCallBackFuncNormalMode>:


void T1_voidCallBackFuncNormalMode(void (*Normalpf)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <T1_voidCallBackFuncNormalMode+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(Normalpf!=NULL)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <T1_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPf=Normalpf;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	90 93 95 01 	sts	0x0195, r25
    108e:	80 93 94 01 	sts	0x0194, r24
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <__vector_9>:


void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOVPf!=NULL)
    10c6:	80 91 94 01 	lds	r24, 0x0194
    10ca:	90 91 95 01 	lds	r25, 0x0195
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	29 f0       	breq	.+10     	; 0x10dc <__vector_9+0x40>
	{
		GlobalOVPf();
    10d2:	e0 91 94 01 	lds	r30, 0x0194
    10d6:	f0 91 95 01 	lds	r31, 0x0195
    10da:	09 95       	icall
	}

}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <T1_voidClearTimerModeInit>:



/********************************CTC Functions****************************************************/
void T1_voidClearTimerModeInit(u8 Prescaller,u8 CompareUnit,u16 CompareValueA,u16 CompareValueB,u8 Interruptstate,u8 OC1AState ,u8 OC1BState)
{
    1102:	cf 92       	push	r12
    1104:	ef 92       	push	r14
    1106:	0f 93       	push	r16
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	29 97       	sbiw	r28, 0x09	; 9
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    1120:	5c 83       	std	Y+4, r21	; 0x04
    1122:	4b 83       	std	Y+3, r20	; 0x03
    1124:	3e 83       	std	Y+6, r19	; 0x06
    1126:	2d 83       	std	Y+5, r18	; 0x05
    1128:	0f 83       	std	Y+7, r16	; 0x07
    112a:	e8 86       	std	Y+8, r14	; 0x08
    112c:	c9 86       	std	Y+9, r12	; 0x09
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    112e:	af e4       	ldi	r26, 0x4F	; 79
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ef e4       	ldi	r30, 0x4F	; 79
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8e 7f       	andi	r24, 0xFE	; 254
    113a:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    113c:	af e4       	ldi	r26, 0x4F	; 79
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8d 7f       	andi	r24, 0xFD	; 253
    1148:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    114a:	ae e4       	ldi	r26, 0x4E	; 78
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ee e4       	ldi	r30, 0x4E	; 78
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1158:	ae e4       	ldi	r26, 0x4E	; 78
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 61       	ori	r24, 0x10	; 16
    1164:	8c 93       	st	X, r24
	//TCCR1A
	if (CompareUnit==CTC_UnitA)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <T1_voidClearTimerModeInit+0x6c>
    116c:	64 c0       	rjmp	.+200    	; 0x1236 <T1_voidClearTimerModeInit+0x134>
	{
		T1_OCR1A=CompareValueA;
    116e:	ea e4       	ldi	r30, 0x4A	; 74
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	41 f4       	brne	.+16     	; 0x1190 <T1_voidClearTimerModeInit+0x8e>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1180:	a9 e5       	ldi	r26, 0x59	; 89
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e5       	ldi	r30, 0x59	; 89
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	8c 93       	st	X, r24
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <T1_voidClearTimerModeInit+0xa2>
		}
		else if (Interruptstate==disable)
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	39 f4       	brne	.+14     	; 0x11a4 <T1_voidClearTimerModeInit+0xa2>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1196:	a9 e5       	ldi	r26, 0x59	; 89
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e9 e5       	ldi	r30, 0x59	; 89
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7e       	andi	r24, 0xEF	; 239
    11a2:	8c 93       	st	X, r24
		}
		if(OC1AState==CTC_OC1A_Disconnect)
    11a4:	88 85       	ldd	r24, Y+8	; 0x08
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	79 f4       	brne	.+30     	; 0x11c8 <T1_voidClearTimerModeInit+0xc6>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11aa:	af e4       	ldi	r26, 0x4F	; 79
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ef e4       	ldi	r30, 0x4F	; 79
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8f 7b       	andi	r24, 0xBF	; 191
    11b6:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11b8:	af e4       	ldi	r26, 0x4F	; 79
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ef e4       	ldi	r30, 0x4F	; 79
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 77       	andi	r24, 0x7F	; 127
    11c4:	8c 93       	st	X, r24
    11c6:	60 c1       	rjmp	.+704    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_Tog)
    11c8:	88 85       	ldd	r24, Y+8	; 0x08
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	79 f4       	brne	.+30     	; 0x11ec <T1_voidClearTimerModeInit+0xea>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11ce:	af e4       	ldi	r26, 0x4F	; 79
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ef e4       	ldi	r30, 0x4F	; 79
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 64       	ori	r24, 0x40	; 64
    11da:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11dc:	af e4       	ldi	r26, 0x4F	; 79
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	8c 93       	st	X, r24
    11ea:	4e c1       	rjmp	.+668    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_CLr)
    11ec:	88 85       	ldd	r24, Y+8	; 0x08
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	79 f4       	brne	.+30     	; 0x1210 <T1_voidClearTimerModeInit+0x10e>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24
    120e:	3c c1       	rjmp	.+632    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_Set)
    1210:	88 85       	ldd	r24, Y+8	; 0x08
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	09 f0       	breq	.+2      	; 0x1218 <T1_voidClearTimerModeInit+0x116>
    1216:	38 c1       	rjmp	.+624    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1218:	af e4       	ldi	r26, 0x4F	; 79
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 64       	ori	r24, 0x40	; 64
    1224:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1226:	af e4       	ldi	r26, 0x4F	; 79
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ef e4       	ldi	r30, 0x4F	; 79
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8c 93       	st	X, r24
    1234:	29 c1       	rjmp	.+594    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
	}
	else if (CompareUnit==CTC_UnitB)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	09 f0       	breq	.+2      	; 0x123e <T1_voidClearTimerModeInit+0x13c>
    123c:	64 c0       	rjmp	.+200    	; 0x1306 <T1_voidClearTimerModeInit+0x204>
	{
		T1_OCR1B=CompareValueB;
    123e:	e8 e4       	ldi	r30, 0x48	; 72
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	41 f4       	brne	.+16     	; 0x1260 <T1_voidClearTimerModeInit+0x15e>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    1250:	a9 e5       	ldi	r26, 0x59	; 89
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e9 e5       	ldi	r30, 0x59	; 89
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	8c 93       	st	X, r24
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <T1_voidClearTimerModeInit+0x172>
		}
		else if (Interruptstate==disable)
    1260:	8f 81       	ldd	r24, Y+7	; 0x07
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	39 f4       	brne	.+14     	; 0x1274 <T1_voidClearTimerModeInit+0x172>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    1266:	a9 e5       	ldi	r26, 0x59	; 89
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e5       	ldi	r30, 0x59	; 89
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	8c 93       	st	X, r24
		}
		if(OC1BState==CTC_OC1B_Disconnect)
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	79 f4       	brne	.+30     	; 0x1298 <T1_voidClearTimerModeInit+0x196>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    127a:	af e4       	ldi	r26, 0x4F	; 79
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e4       	ldi	r30, 0x4F	; 79
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7e       	andi	r24, 0xEF	; 239
    1286:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1288:	af e4       	ldi	r26, 0x4F	; 79
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ef e4       	ldi	r30, 0x4F	; 79
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	8c 93       	st	X, r24
    1296:	f8 c0       	rjmp	.+496    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_Tog)
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	79 f4       	brne	.+30     	; 0x12bc <T1_voidClearTimerModeInit+0x1ba>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    129e:	af e4       	ldi	r26, 0x4F	; 79
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e4       	ldi	r30, 0x4F	; 79
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	80 61       	ori	r24, 0x10	; 16
    12aa:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12ac:	af e4       	ldi	r26, 0x4F	; 79
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef e4       	ldi	r30, 0x4F	; 79
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	8c 93       	st	X, r24
    12ba:	e6 c0       	rjmp	.+460    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_CLr)
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	79 f4       	brne	.+30     	; 0x12e0 <T1_voidClearTimerModeInit+0x1de>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	8c 93       	st	X, r24
    12de:	d4 c0       	rjmp	.+424    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_Set)
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <T1_voidClearTimerModeInit+0x1e6>
    12e6:	d0 c0       	rjmp	.+416    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 62       	ori	r24, 0x20	; 32
    1302:	8c 93       	st	X, r24
    1304:	c1 c0       	rjmp	.+386    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
	}
	else if (CompareUnit==CTC_BothUnits)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	09 f0       	breq	.+2      	; 0x130e <T1_voidClearTimerModeInit+0x20c>
    130c:	bd c0       	rjmp	.+378    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
	{
		T1_OCR1A=CompareValueA;
    130e:	ea e4       	ldi	r30, 0x4A	; 74
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
		T1_OCR1B=CompareValueB;
    131a:	e8 e4       	ldi	r30, 0x48	; 72
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	79 f4       	brne	.+30     	; 0x134a <T1_voidClearTimerModeInit+0x248>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 61       	ori	r24, 0x10	; 16
    1338:	8c 93       	st	X, r24
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    133a:	a9 e5       	ldi	r26, 0x59	; 89
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e9 e5       	ldi	r30, 0x59	; 89
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	8c 93       	st	X, r24
    1348:	11 c0       	rjmp	.+34     	; 0x136c <T1_voidClearTimerModeInit+0x26a>
		}
		else if (Interruptstate==disable)
    134a:	8f 81       	ldd	r24, Y+7	; 0x07
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	71 f4       	brne	.+28     	; 0x136c <T1_voidClearTimerModeInit+0x26a>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1350:	a9 e5       	ldi	r26, 0x59	; 89
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e9 e5       	ldi	r30, 0x59	; 89
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    135e:	a9 e5       	ldi	r26, 0x59	; 89
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e9 e5       	ldi	r30, 0x59	; 89
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	87 7f       	andi	r24, 0xF7	; 247
    136a:	8c 93       	st	X, r24
		}
		if(OC1AState==CTC_OC1A_Disconnect)
    136c:	88 85       	ldd	r24, Y+8	; 0x08
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	79 f4       	brne	.+30     	; 0x1390 <T1_voidClearTimerModeInit+0x28e>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1372:	af e4       	ldi	r26, 0x4F	; 79
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7b       	andi	r24, 0xBF	; 191
    137e:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1380:	af e4       	ldi	r26, 0x4F	; 79
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 77       	andi	r24, 0x7F	; 127
    138c:	8c 93       	st	X, r24
    138e:	35 c0       	rjmp	.+106    	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_Tog)
    1390:	88 85       	ldd	r24, Y+8	; 0x08
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	79 f4       	brne	.+30     	; 0x13b4 <T1_voidClearTimerModeInit+0x2b2>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1396:	af e4       	ldi	r26, 0x4F	; 79
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ef e4       	ldi	r30, 0x4F	; 79
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13a4:	af e4       	ldi	r26, 0x4F	; 79
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e4       	ldi	r30, 0x4F	; 79
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 77       	andi	r24, 0x7F	; 127
    13b0:	8c 93       	st	X, r24
    13b2:	23 c0       	rjmp	.+70     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_CLr)
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	79 f4       	brne	.+30     	; 0x13d8 <T1_voidClearTimerModeInit+0x2d6>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    13ba:	af e4       	ldi	r26, 0x4F	; 79
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ef e4       	ldi	r30, 0x4F	; 79
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7b       	andi	r24, 0xBF	; 191
    13c6:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13c8:	af e4       	ldi	r26, 0x4F	; 79
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ef e4       	ldi	r30, 0x4F	; 79
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 68       	ori	r24, 0x80	; 128
    13d4:	8c 93       	st	X, r24
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_Set)
    13d8:	88 85       	ldd	r24, Y+8	; 0x08
    13da:	84 30       	cpi	r24, 0x04	; 4
    13dc:	71 f4       	brne	.+28     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    13de:	af e4       	ldi	r26, 0x4F	; 79
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13ec:	af e4       	ldi	r26, 0x4F	; 79
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e4       	ldi	r30, 0x4F	; 79
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 68       	ori	r24, 0x80	; 128
    13f8:	8c 93       	st	X, r24
		}
		if(OC1BState==CTC_OC1B_Disconnect)
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	79 f4       	brne	.+30     	; 0x141e <T1_voidClearTimerModeInit+0x31c>
				{//disconnect  pin OC0
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1400:	af e4       	ldi	r26, 0x4F	; 79
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ef e4       	ldi	r30, 0x4F	; 79
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	8c 93       	st	X, r24
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    140e:	af e4       	ldi	r26, 0x4F	; 79
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ef e4       	ldi	r30, 0x4F	; 79
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7d       	andi	r24, 0xDF	; 223
    141a:	8c 93       	st	X, r24
    141c:	35 c0       	rjmp	.+106    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_Tog)
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	79 f4       	brne	.+30     	; 0x1442 <T1_voidClearTimerModeInit+0x340>
				{	//Tog Pin OC0
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1424:	af e4       	ldi	r26, 0x4F	; 79
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ef e4       	ldi	r30, 0x4F	; 79
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 61       	ori	r24, 0x10	; 16
    1430:	8c 93       	st	X, r24
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 7d       	andi	r24, 0xDF	; 223
    143e:	8c 93       	st	X, r24
    1440:	23 c0       	rjmp	.+70     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_CLr)
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	79 f4       	brne	.+30     	; 0x1466 <T1_voidClearTimerModeInit+0x364>
				{
					//clr Pin OC0
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1448:	af e4       	ldi	r26, 0x4F	; 79
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e4       	ldi	r30, 0x4F	; 79
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8f 7e       	andi	r24, 0xEF	; 239
    1454:	8c 93       	st	X, r24
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1456:	af e4       	ldi	r26, 0x4F	; 79
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e4       	ldi	r30, 0x4F	; 79
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 62       	ori	r24, 0x20	; 32
    1462:	8c 93       	st	X, r24
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_Set)
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	71 f4       	brne	.+28     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				{
					//set Pin OC0
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    146c:	af e4       	ldi	r26, 0x4F	; 79
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ef e4       	ldi	r30, 0x4F	; 79
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 61       	ori	r24, 0x10	; 16
    1478:	8c 93       	st	X, r24
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    147a:	af e4       	ldi	r26, 0x4F	; 79
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ef e4       	ldi	r30, 0x4F	; 79
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 62       	ori	r24, 0x20	; 32
    1486:	8c 93       	st	X, r24
				}
	}
	Prescaller&=0x07;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	87 70       	andi	r24, 0x07	; 7
    148c:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    148e:	ae e4       	ldi	r26, 0x4E	; 78
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    149c:	ae e4       	ldi	r26, 0x4E	; 78
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ee e4       	ldi	r30, 0x4E	; 78
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	90 81       	ld	r25, Z
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	89 2b       	or	r24, r25
    14aa:	8c 93       	st	X, r24
}
    14ac:	29 96       	adiw	r28, 0x09	; 9
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	0f 91       	pop	r16
    14be:	ef 90       	pop	r14
    14c0:	cf 90       	pop	r12
    14c2:	08 95       	ret

000014c4 <T1_voidCallBackFuncCTCModeA>:


void T1_voidCallBackFuncCTCModeA(void (*CTCApf)(void))
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <T1_voidCallBackFuncCTCModeA+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	if(CTCApf!=NULL)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <T1_voidCallBackFuncCTCModeA+0x22>
	{
		GlobalCTCAPf=CTCApf;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	90 93 97 01 	sts	0x0197, r25
    14e2:	80 93 96 01 	sts	0x0196, r24
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <__vector_7>:


void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCAPf!=NULL)
    151a:	80 91 96 01 	lds	r24, 0x0196
    151e:	90 91 97 01 	lds	r25, 0x0197
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	29 f0       	breq	.+10     	; 0x1530 <__vector_7+0x40>
	{
		GlobalCTCAPf();
    1526:	e0 91 96 01 	lds	r30, 0x0196
    152a:	f0 91 97 01 	lds	r31, 0x0197
    152e:	09 95       	icall
	}
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <T1_voidCallBackFuncCTCModeB>:


void T1_voidCallBackFuncCTCModeB(void (*CTCBpf)(void))
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <T1_voidCallBackFuncCTCModeB+0x6>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
	if(CTCBpf!=NULL)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	31 f0       	breq	.+12     	; 0x1578 <T1_voidCallBackFuncCTCModeB+0x22>
	{
		GlobalCTCBPf=CTCBpf;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	90 93 99 01 	sts	0x0199, r25
    1574:	80 93 98 01 	sts	0x0198, r24
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <__vector_8>:


void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCBPf!=NULL)
    15ac:	80 91 98 01 	lds	r24, 0x0198
    15b0:	90 91 99 01 	lds	r25, 0x0199
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__vector_8+0x40>
	{
		GlobalCTCBPf();
    15b8:	e0 91 98 01 	lds	r30, 0x0198
    15bc:	f0 91 99 01 	lds	r31, 0x0199
    15c0:	09 95       	icall
	}
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <T1_voidFastPWM>:



/*******************************Fast PWM*********************************/
void T1_voidFastPWM(u8 Type,u8 CompareUnit ,u8 PWMMode , u8 DutyCycle, u8 PreScaller )
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <T1_voidFastPWM+0xa>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <T1_voidFastPWM+0xc>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	6a 83       	std	Y+2, r22	; 0x02
    15fe:	4b 83       	std	Y+3, r20	; 0x03
    1600:	2c 83       	std	Y+4, r18	; 0x04
    1602:	0d 83       	std	Y+5, r16	; 0x05
	//prescaller
	PreScaller&=0x07;
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	87 70       	andi	r24, 0x07	; 7
    1608:	8d 83       	std	Y+5, r24	; 0x05
	T1_TCCR1B&=0xF8;
    160a:	ae e4       	ldi	r26, 0x4E	; 78
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ee e4       	ldi	r30, 0x4E	; 78
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	88 7f       	andi	r24, 0xF8	; 248
    1616:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1618:	ae e4       	ldi	r26, 0x4E	; 78
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ee e4       	ldi	r30, 0x4E	; 78
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	90 81       	ld	r25, Z
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	89 2b       	or	r24, r25
    1626:	8c 93       	st	X, r24
	//select mode
	if (Type==FastPWM_8Bit)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	88 23       	and	r24, r24
    162c:	e9 f4       	brne	.+58     	; 0x1668 <T1_voidFastPWM+0x80>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    163c:	af e4       	ldi	r26, 0x4F	; 79
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ef e4       	ldi	r30, 0x4F	; 79
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1658:	ae e4       	ldi	r26, 0x4E	; 78
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ee e4       	ldi	r30, 0x4E	; 78
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8f 7e       	andi	r24, 0xEF	; 239
    1664:	8c 93       	st	X, r24
    1666:	7f c0       	rjmp	.+254    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_9Bit)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	e9 f4       	brne	.+58     	; 0x16a8 <T1_voidFastPWM+0xc0>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    166e:	af e4       	ldi	r26, 0x4F	; 79
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e4       	ldi	r30, 0x4F	; 79
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8e 7f       	andi	r24, 0xFE	; 254
    167a:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    167c:	af e4       	ldi	r26, 0x4F	; 79
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ef e4       	ldi	r30, 0x4F	; 79
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ee e4       	ldi	r30, 0x4E	; 78
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7e       	andi	r24, 0xEF	; 239
    16a4:	8c 93       	st	X, r24
    16a6:	5f c0       	rjmp	.+190    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_10Bit)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	e9 f4       	brne	.+58     	; 0x16e8 <T1_voidFastPWM+0x100>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    16ae:	af e4       	ldi	r26, 0x4F	; 79
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ef e4       	ldi	r30, 0x4F	; 79
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    16bc:	af e4       	ldi	r26, 0x4F	; 79
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    16ca:	ae e4       	ldi	r26, 0x4E	; 78
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ee e4       	ldi	r30, 0x4E	; 78
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 60       	ori	r24, 0x08	; 8
    16d6:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    16d8:	ae e4       	ldi	r26, 0x4E	; 78
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ee e4       	ldi	r30, 0x4E	; 78
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	8c 93       	st	X, r24
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_ICR1)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	e9 f4       	brne	.+58     	; 0x1728 <T1_voidFastPWM+0x140>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    16ee:	af e4       	ldi	r26, 0x4F	; 79
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8e 7f       	andi	r24, 0xFE	; 254
    16fa:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    16fc:	af e4       	ldi	r26, 0x4F	; 79
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ef e4       	ldi	r30, 0x4F	; 79
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 61       	ori	r24, 0x10	; 16
    1724:	8c 93       	st	X, r24
    1726:	1f c0       	rjmp	.+62     	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_OCR1A)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	e1 f4       	brne	.+56     	; 0x1766 <T1_voidFastPWM+0x17e>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    172e:	af e4       	ldi	r26, 0x4F	; 79
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e4       	ldi	r30, 0x4F	; 79
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    173c:	af e4       	ldi	r26, 0x4F	; 79
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ef e4       	ldi	r30, 0x4F	; 79
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    174a:	ae e4       	ldi	r26, 0x4E	; 78
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ee e4       	ldi	r30, 0x4E	; 78
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1758:	ae e4       	ldi	r26, 0x4E	; 78
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ee e4       	ldi	r30, 0x4E	; 78
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 61       	ori	r24, 0x10	; 16
    1764:	8c 93       	st	X, r24
	}

	//select compare unit & mode
	if (CompareUnit==PWM_UnitA)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <T1_voidFastPWM+0x186>
    176c:	65 c0       	rjmp	.+202    	; 0x1838 <T1_voidFastPWM+0x250>
	{
		T1_OCR1A=(65535*DutyCycle)/100;
    176e:	0a e4       	ldi	r16, 0x4A	; 74
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulsi3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	24 e6       	ldi	r18, 0x64	; 100
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__divmodsi4>
    17a0:	da 01       	movw	r26, r20
    17a2:	c9 01       	movw	r24, r18
    17a4:	f8 01       	movw	r30, r16
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1A_Disconnect)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	79 f4       	brne	.+30     	; 0x17ce <T1_voidFastPWM+0x1e6>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17b0:	af e4       	ldi	r26, 0x4F	; 79
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ef e4       	ldi	r30, 0x4F	; 79
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 7b       	andi	r24, 0xBF	; 191
    17bc:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    17be:	af e4       	ldi	r26, 0x4F	; 79
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 77       	andi	r24, 0x7F	; 127
    17ca:	8c 93       	st	X, r24
    17cc:	35 c0       	rjmp	.+106    	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Tog)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	79 f4       	brne	.+30     	; 0x17f2 <T1_voidFastPWM+0x20a>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17d4:	af e4       	ldi	r26, 0x4F	; 79
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ef e4       	ldi	r30, 0x4F	; 79
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e4       	ldi	r30, 0x4F	; 79
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 77       	andi	r24, 0x7F	; 127
    17ee:	8c 93       	st	X, r24
    17f0:	23 c0       	rjmp	.+70     	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_CLr)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	79 f4       	brne	.+30     	; 0x1816 <T1_voidFastPWM+0x22e>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17f8:	af e4       	ldi	r26, 0x4F	; 79
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ef e4       	ldi	r30, 0x4F	; 79
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 7b       	andi	r24, 0xBF	; 191
    1804:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1806:	af e4       	ldi	r26, 0x4F	; 79
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ef e4       	ldi	r30, 0x4F	; 79
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	8c 93       	st	X, r24
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Set)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	71 f4       	brne	.+28     	; 0x1838 <T1_voidFastPWM+0x250>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    181c:	af e4       	ldi	r26, 0x4F	; 79
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ef e4       	ldi	r30, 0x4F	; 79
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    182a:	af e4       	ldi	r26, 0x4F	; 79
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ef e4       	ldi	r30, 0x4F	; 79
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 68       	ori	r24, 0x80	; 128
    1836:	8c 93       	st	X, r24
		}
	}
	if (CompareUnit==PWM_UnitB)
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	09 f0       	breq	.+2      	; 0x1840 <T1_voidFastPWM+0x258>
    183e:	65 c0       	rjmp	.+202    	; 0x190a <T1_voidFastPWM+0x322>
	{
		T1_OCR1B=(65535*DutyCycle)/100;
    1840:	08 e4       	ldi	r16, 0x48	; 72
    1842:	10 e0       	ldi	r17, 0x00	; 0
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulsi3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	24 e6       	ldi	r18, 0x64	; 100
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__divmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	f8 01       	movw	r30, r16
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1B_Disconnect)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	79 f4       	brne	.+30     	; 0x18a0 <T1_voidFastPWM+0x2b8>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7e       	andi	r24, 0xEF	; 239
    188e:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1890:	af e4       	ldi	r26, 0x4F	; 79
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ef e4       	ldi	r30, 0x4F	; 79
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 7d       	andi	r24, 0xDF	; 223
    189c:	8c 93       	st	X, r24
    189e:	35 c0       	rjmp	.+106    	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Tog)
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	79 f4       	brne	.+30     	; 0x18c4 <T1_voidFastPWM+0x2dc>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18a6:	af e4       	ldi	r26, 0x4F	; 79
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e4       	ldi	r30, 0x4F	; 79
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18b4:	af e4       	ldi	r26, 0x4F	; 79
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ef e4       	ldi	r30, 0x4F	; 79
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8f 7d       	andi	r24, 0xDF	; 223
    18c0:	8c 93       	st	X, r24
    18c2:	23 c0       	rjmp	.+70     	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_CLr)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <T1_voidFastPWM+0x300>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18ca:	af e4       	ldi	r26, 0x4F	; 79
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ef e4       	ldi	r30, 0x4F	; 79
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 7e       	andi	r24, 0xEF	; 239
    18d6:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18d8:	af e4       	ldi	r26, 0x4F	; 79
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e4       	ldi	r30, 0x4F	; 79
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 62       	ori	r24, 0x20	; 32
    18e4:	8c 93       	st	X, r24
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Set)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	71 f4       	brne	.+28     	; 0x190a <T1_voidFastPWM+0x322>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18ee:	af e4       	ldi	r26, 0x4F	; 79
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e4       	ldi	r30, 0x4F	; 79
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18fc:	af e4       	ldi	r26, 0x4F	; 79
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ef e4       	ldi	r30, 0x4F	; 79
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 62       	ori	r24, 0x20	; 32
    1908:	8c 93       	st	X, r24
		}
	}

}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	08 95       	ret

0000191e <T1_voidFastPWMServo>:



/****************************Servo Functions*************************/
void T1_voidFastPWMServo(u8 angle)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <T1_voidFastPWMServo+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8a 83       	std	Y+2, r24	; 0x02
	u8 Prescaller=prescaler8;
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	89 83       	std	Y+1, r24	; 0x01
	Prescaller&=0x07;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	87 70       	andi	r24, 0x07	; 7
    1932:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1934:	ae e4       	ldi	r26, 0x4E	; 78
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ee e4       	ldi	r30, 0x4E	; 78
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 7f       	andi	r24, 0xF8	; 248
    1940:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	90 81       	ld	r25, Z
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	89 2b       	or	r24, r25
    1950:	8c 93       	st	X, r24
	//select mode 14 (ICR1)
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8e 7f       	andi	r24, 0xFE	; 254
    195e:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1960:	af e4       	ldi	r26, 0x4F	; 79
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e4       	ldi	r30, 0x4F	; 79
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	82 60       	ori	r24, 0x02	; 2
    196c:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 60       	ori	r24, 0x08	; 8
    197a:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 61       	ori	r24, 0x10	; 16
    1988:	8c 93       	st	X, r24
	//Set the Top Value
	T1_ICR1=Servo_value;
    198a:	e8 e4       	ldi	r30, 0x48	; 72
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8f e1       	ldi	r24, 0x1F	; 31
    1990:	9e e4       	ldi	r25, 0x4E	; 78
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24

	//set the angle
	T1_OCR1A=angle;
    1996:	ea e4       	ldi	r30, 0x4A	; 74
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <T1_voidICUInit>:



/***********************ICU functions*******************************/
void T1_voidICUInit(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	u8 Prescaller=prescaler8;
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	89 83       	std	Y+1, r24	; 0x01
	//NormalMode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    19d8:	ae e4       	ldi	r26, 0x4E	; 78
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ee e4       	ldi	r30, 0x4E	; 78
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	87 7f       	andi	r24, 0xF7	; 247
    19e4:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    19e6:	ae e4       	ldi	r26, 0x4E	; 78
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ee e4       	ldi	r30, 0x4E	; 78
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 7e       	andi	r24, 0xEF	; 239
    19f2:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	87 70       	andi	r24, 0x07	; 7
    19f8:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    19fa:	ae e4       	ldi	r26, 0x4E	; 78
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ee e4       	ldi	r30, 0x4E	; 78
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 7f       	andi	r24, 0xF8	; 248
    1a06:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1a08:	ae e4       	ldi	r26, 0x4E	; 78
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ee e4       	ldi	r30, 0x4E	; 78
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	90 81       	ld	r25, Z
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	89 2b       	or	r24, r25
    1a16:	8c 93       	st	X, r24
	//Set ICU Bit to Rising
	set_bit(T1_TCCR1B,T1_TCCR1B_ICES1);
    1a18:	ae e4       	ldi	r26, 0x4E	; 78
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ee e4       	ldi	r30, 0x4E	; 78
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 64       	ori	r24, 0x40	; 64
    1a24:	8c 93       	st	X, r24
	//Enable ICU Interrupt
	set_bit(T1_TIMSK,T1_TIMSK_TICIE1);
    1a26:	a9 e5       	ldi	r26, 0x59	; 89
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 e5       	ldi	r30, 0x59	; 89
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	8c 93       	st	X, r24
	}
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <T1_voidCallBackFuncICUMode>:


void T1_voidCallBackFuncICUMode(void (*ICUpf)(void))
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <T1_voidCallBackFuncICUMode+0x6>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	if(ICUpf!=NULL)
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <T1_voidCallBackFuncICUMode+0x22>
	{
		GlobalICUPf=ICUpf;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	90 93 93 01 	sts	0x0193, r25
    1a5a:	80 93 92 01 	sts	0x0192, r24
	}
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <__vector_6>:


void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62

	if (GlobalICUPf!=NULL)
    1a92:	80 91 92 01 	lds	r24, 0x0192
    1a96:	90 91 93 01 	lds	r25, 0x0193
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <__vector_6+0x40>
	{
		GlobalICUPf();
    1a9e:	e0 91 92 01 	lds	r30, 0x0192
    1aa2:	f0 91 93 01 	lds	r31, 0x0193
    1aa6:	09 95       	icall
	}

}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <T0_voidNormalModeInit>:



/*************************************Normal Mode functions***************************/
void T0_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <T0_voidNormalModeInit+0x6>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
    1ade:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1ae0:	a3 e5       	ldi	r26, 0x53	; 83
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e3 e5       	ldi	r30, 0x53	; 83
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 7b       	andi	r24, 0xBF	; 191
    1aec:	8c 93       	st	X, r24
	clear_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1aee:	a3 e5       	ldi	r26, 0x53	; 83
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e3 e5       	ldi	r30, 0x53	; 83
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	87 70       	andi	r24, 0x07	; 7
    1b00:	89 83       	std	Y+1, r24	; 0x01
	T0_TCCR0&=0xF8;
    1b02:	a3 e5       	ldi	r26, 0x53	; 83
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e3 e5       	ldi	r30, 0x53	; 83
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	88 7f       	andi	r24, 0xF8	; 248
    1b0e:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1b10:	a3 e5       	ldi	r26, 0x53	; 83
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	90 81       	ld	r25, Z
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	89 2b       	or	r24, r25
    1b1e:	8c 93       	st	X, r24
	T0_TCNT0=PreloadValue;
    1b20:	e2 e5       	ldi	r30, 0x52	; 82
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <T0_voidNormalModeInit+0x70>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1b2e:	a9 e5       	ldi	r26, 0x59	; 89
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
    1b3c:	0a c0       	rjmp	.+20     	; 0x1b52 <T0_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <T0_voidNormalModeInit+0x84>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1b44:	a9 e5       	ldi	r26, 0x59	; 89
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e9 e5       	ldi	r30, 0x59	; 89
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	8c 93       	st	X, r24
	}

}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <T0_voidCallBackFuncNormalMode>:


void T0_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <T0_voidCallBackFuncNormalMode+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <T0_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	90 93 9b 01 	sts	0x019B, r25
    1b7c:	80 93 9a 01 	sts	0x019A, r24
	}
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <__vector_11>:


void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1b8a:	1f 92       	push	r1
    1b8c:	0f 92       	push	r0
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	0f 92       	push	r0
    1b92:	11 24       	eor	r1, r1
    1b94:	2f 93       	push	r18
    1b96:	3f 93       	push	r19
    1b98:	4f 93       	push	r20
    1b9a:	5f 93       	push	r21
    1b9c:	6f 93       	push	r22
    1b9e:	7f 93       	push	r23
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    1bb4:	80 91 9a 01 	lds	r24, 0x019A
    1bb8:	90 91 9b 01 	lds	r25, 0x019B
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <__vector_11+0x40>
	{
		GlobalOVPF();
    1bc0:	e0 91 9a 01 	lds	r30, 0x019A
    1bc4:	f0 91 9b 01 	lds	r31, 0x019B
    1bc8:	09 95       	icall
	}
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	0f 90       	pop	r0
    1bec:	1f 90       	pop	r1
    1bee:	18 95       	reti

00001bf0 <T0_voidClearTimerModeInit>:



/**************************************CTC*****************************************/
void T0_voidClearTimerModeInit(u8 OC0State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <T0_voidClearTimerModeInit+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <T0_voidClearTimerModeInit+0x8>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	6a 83       	std	Y+2, r22	; 0x02
    1c00:	4b 83       	std	Y+3, r20	; 0x03
    1c02:	2c 83       	std	Y+4, r18	; 0x04
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e3 e5       	ldi	r30, 0x53	; 83
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	8c 93       	st	X, r24
	set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1c12:	a3 e5       	ldi	r26, 0x53	; 83
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e3 e5       	ldi	r30, 0x53	; 83
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 60       	ori	r24, 0x08	; 8
    1c1e:	8c 93       	st	X, r24
	if(OC0State==CTC_OC0_Disconnect)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	79 f4       	brne	.+30     	; 0x1c44 <T0_voidClearTimerModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 7e       	andi	r24, 0xEF	; 239
    1c32:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e5       	ldi	r30, 0x53	; 83
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 7d       	andi	r24, 0xDF	; 223
    1c40:	8c 93       	st	X, r24
    1c42:	35 c0       	rjmp	.+106    	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Tog)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	79 f4       	brne	.+30     	; 0x1c68 <T0_voidClearTimerModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c4a:	a3 e5       	ldi	r26, 0x53	; 83
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e3 e5       	ldi	r30, 0x53	; 83
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c58:	a3 e5       	ldi	r26, 0x53	; 83
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e3 e5       	ldi	r30, 0x53	; 83
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7d       	andi	r24, 0xDF	; 223
    1c64:	8c 93       	st	X, r24
    1c66:	23 c0       	rjmp	.+70     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_CLr)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	79 f4       	brne	.+30     	; 0x1c8c <T0_voidClearTimerModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c6e:	a3 e5       	ldi	r26, 0x53	; 83
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e3 e5       	ldi	r30, 0x53	; 83
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	8f 7e       	andi	r24, 0xEF	; 239
    1c7a:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 62       	ori	r24, 0x20	; 32
    1c88:	8c 93       	st	X, r24
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Set)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	84 30       	cpi	r24, 0x04	; 4
    1c90:	71 f4       	brne	.+28     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c92:	a3 e5       	ldi	r26, 0x53	; 83
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e3 e5       	ldi	r30, 0x53	; 83
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 61       	ori	r24, 0x10	; 16
    1c9e:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1ca0:	a3 e5       	ldi	r26, 0x53	; 83
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e3 e5       	ldi	r30, 0x53	; 83
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	8c 93       	st	X, r24
	}
	//Prescaller
	Prescaller&=0x07;
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	87 70       	andi	r24, 0x07	; 7
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	T0_TCCR0&=0xF8;
    1cb4:	a3 e5       	ldi	r26, 0x53	; 83
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e3 e5       	ldi	r30, 0x53	; 83
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 7f       	andi	r24, 0xF8	; 248
    1cc0:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1cc2:	a3 e5       	ldi	r26, 0x53	; 83
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e3 e5       	ldi	r30, 0x53	; 83
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	90 81       	ld	r25, Z
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	89 2b       	or	r24, r25
    1cd0:	8c 93       	st	X, r24
	//Output compare
	T0_OCR0 = CompareValue;
    1cd2:	ec e5       	ldi	r30, 0x5C	; 92
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	41 f4       	brne	.+16     	; 0x1cf0 <T0_voidClearTimerModeInit+0x100>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1ce0:	a9 e5       	ldi	r26, 0x59	; 89
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e9 e5       	ldi	r30, 0x59	; 89
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	81 60       	ori	r24, 0x01	; 1
    1cec:	8c 93       	st	X, r24
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <T0_voidClearTimerModeInit+0x114>
	}
	else if(InterruptState ==disable)
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	39 f4       	brne	.+14     	; 0x1d04 <T0_voidClearTimerModeInit+0x114>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	8c 93       	st	X, r24
	}

}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <T0_voidCallBackFuncClearTimerMode>:


void T0_voidCallBackFuncClearTimerMode(void (*CTCpf)(void))
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <T0_voidCallBackFuncClearTimerMode+0x6>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <T0_voidCallBackFuncClearTimerMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	90 93 9d 01 	sts	0x019D, r25
    1d30:	80 93 9c 01 	sts	0x019C, r24
	}
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <__vector_10>:


void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    1d68:	80 91 9c 01 	lds	r24, 0x019C
    1d6c:	90 91 9d 01 	lds	r25, 0x019D
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <__vector_10+0x40>
	{
		GlobalCTCPF();
    1d74:	e0 91 9c 01 	lds	r30, 0x019C
    1d78:	f0 91 9d 01 	lds	r31, 0x019D
    1d7c:	09 95       	icall
	}
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	0f 90       	pop	r0
    1da0:	1f 90       	pop	r1
    1da2:	18 95       	reti

00001da4 <T0_voidPWMModeInit>:



/**************************************PWM**************************************/
void T0_voidPWMModeInit(u8 PWMType, u8 OC0State ,u8 Prescaller, u8 DutyCycle)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <T0_voidPWMModeInit+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <T0_voidPWMModeInit+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	6a 83       	std	Y+2, r22	; 0x02
    1db4:	4b 83       	std	Y+3, r20	; 0x03
    1db6:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <T0_voidPWMModeInit+0x1c>
    1dbe:	8f c0       	rjmp	.+286    	; 0x1ede <T0_voidPWMModeInit+0x13a>
	{
		//fast PWM
		set_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1dc0:	a3 e5       	ldi	r26, 0x53	; 83
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e3 e5       	ldi	r30, 0x53	; 83
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 64       	ori	r24, 0x40	; 64
    1dcc:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	8c 93       	st	X, r24
		if (OC0State==PWM_OC0_Disconnect)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	79 f4       	brne	.+30     	; 0x1e00 <T0_voidPWMModeInit+0x5c>
		{
			//disconnect  pin OC0
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1de2:	a3 e5       	ldi	r26, 0x53	; 83
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e3 e5       	ldi	r30, 0x53	; 83
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 7e       	andi	r24, 0xEF	; 239
    1dee:	8c 93       	st	X, r24
			clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1df0:	a3 e5       	ldi	r26, 0x53	; 83
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e3 e5       	ldi	r30, 0x53	; 83
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 7d       	andi	r24, 0xDF	; 223
    1dfc:	8c 93       	st	X, r24
    1dfe:	5c c0       	rjmp	.+184    	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_nonInverting)
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	49 f5       	brne	.+82     	; 0x1e58 <T0_voidPWMModeInit+0xb4>
		{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1e06:	a3 e5       	ldi	r26, 0x53	; 83
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e3 e5       	ldi	r30, 0x53	; 83
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 7e       	andi	r24, 0xEF	; 239
    1e12:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1e14:	a3 e5       	ldi	r26, 0x53	; 83
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e3 e5       	ldi	r30, 0x53	; 83
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 62       	ori	r24, 0x20	; 32
    1e20:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1e22:	ec e5       	ldi	r30, 0x5C	; 92
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	48 2f       	mov	r20, r24
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	ca 01       	movw	r24, r20
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	c9 01       	movw	r24, r18
    1e36:	96 95       	lsr	r25
    1e38:	98 2f       	mov	r25, r24
    1e3a:	88 27       	eor	r24, r24
    1e3c:	97 95       	ror	r25
    1e3e:	87 95       	ror	r24
    1e40:	82 1b       	sub	r24, r18
    1e42:	93 0b       	sbc	r25, r19
    1e44:	84 0f       	add	r24, r20
    1e46:	95 1f       	adc	r25, r21
    1e48:	24 e6       	ldi	r18, 0x64	; 100
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__divmodhi4>
    1e52:	cb 01       	movw	r24, r22
    1e54:	80 83       	st	Z, r24
    1e56:	30 c0       	rjmp	.+96     	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_Inverting)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	69 f5       	brne	.+90     	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	80 61       	ori	r24, 0x10	; 16
    1e6a:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1e6c:	a3 e5       	ldi	r26, 0x53	; 83
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e3 e5       	ldi	r30, 0x53	; 83
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	80 62       	ori	r24, 0x20	; 32
    1e78:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1e7a:	ec e5       	ldi	r30, 0x5C	; 92
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	82 1b       	sub	r24, r18
    1e8a:	93 0b       	sbc	r25, r19
    1e8c:	24 e6       	ldi	r18, 0x64	; 100
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	b9 01       	movw	r22, r18
    1e92:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__divmodhi4>
    1e96:	cb 01       	movw	r24, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	96 95       	lsr	r25
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	88 27       	eor	r24, r24
    1eaa:	97 95       	ror	r25
    1eac:	87 95       	ror	r24
    1eae:	82 1b       	sub	r24, r18
    1eb0:	93 0b       	sbc	r25, r19
    1eb2:	84 0f       	add	r24, r20
    1eb4:	95 1f       	adc	r25, r21
    1eb6:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	87 70       	andi	r24, 0x07	; 7
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1ebe:	a3 e5       	ldi	r26, 0x53	; 83
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 7f       	andi	r24, 0xF8	; 248
    1eca:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	90 81       	ld	r25, Z
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	89 2b       	or	r24, r25
    1eda:	8c 93       	st	X, r24
    1edc:	84 c0       	rjmp	.+264    	; 0x1fe6 <T0_voidPWMModeInit+0x242>
	}
	else if (PWMType==PhaseCorrectPWM)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <T0_voidPWMModeInit+0x142>
    1ee4:	80 c0       	rjmp	.+256    	; 0x1fe6 <T0_voidPWMModeInit+0x242>
	{
		if (OC0State==PWM_OC0_Disconnect)
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	79 f4       	brne	.+30     	; 0x1f0a <T0_voidPWMModeInit+0x166>
			{
				//disconnect  pin OC0
				clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 7e       	andi	r24, 0xEF	; 239
    1ef8:	8c 93       	st	X, r24
				clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1efa:	a3 e5       	ldi	r26, 0x53	; 83
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e5       	ldi	r30, 0x53	; 83
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	8c 93       	st	X, r24
    1f08:	5c c0       	rjmp	.+184    	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_nonInverting)
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	49 f5       	brne	.+82     	; 0x1f62 <T0_voidPWMModeInit+0x1be>
			{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7e       	andi	r24, 0xEF	; 239
    1f1c:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1f1e:	a3 e5       	ldi	r26, 0x53	; 83
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e3 e5       	ldi	r30, 0x53	; 83
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 62       	ori	r24, 0x20	; 32
    1f2a:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1f2c:	ec e5       	ldi	r30, 0x5C	; 92
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	48 2f       	mov	r20, r24
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	ca 01       	movw	r24, r20
    1f38:	9c 01       	movw	r18, r24
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	c9 01       	movw	r24, r18
    1f40:	96 95       	lsr	r25
    1f42:	98 2f       	mov	r25, r24
    1f44:	88 27       	eor	r24, r24
    1f46:	97 95       	ror	r25
    1f48:	87 95       	ror	r24
    1f4a:	82 1b       	sub	r24, r18
    1f4c:	93 0b       	sbc	r25, r19
    1f4e:	84 0f       	add	r24, r20
    1f50:	95 1f       	adc	r25, r21
    1f52:	24 e6       	ldi	r18, 0x64	; 100
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	b9 01       	movw	r22, r18
    1f58:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__divmodhi4>
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	80 83       	st	Z, r24
    1f60:	30 c0       	rjmp	.+96     	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_Inverting)
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	69 f5       	brne	.+90     	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1f68:	a3 e5       	ldi	r26, 0x53	; 83
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e3 e5       	ldi	r30, 0x53	; 83
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1f76:	a3 e5       	ldi	r26, 0x53	; 83
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e3 e5       	ldi	r30, 0x53	; 83
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 62       	ori	r24, 0x20	; 32
    1f82:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1f84:	ec e5       	ldi	r30, 0x5C	; 92
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	82 1b       	sub	r24, r18
    1f94:	93 0b       	sbc	r25, r19
    1f96:	24 e6       	ldi	r18, 0x64	; 100
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <__divmodhi4>
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	9c 01       	movw	r18, r24
    1fa8:	22 0f       	add	r18, r18
    1faa:	33 1f       	adc	r19, r19
    1fac:	c9 01       	movw	r24, r18
    1fae:	96 95       	lsr	r25
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	88 27       	eor	r24, r24
    1fb4:	97 95       	ror	r25
    1fb6:	87 95       	ror	r24
    1fb8:	82 1b       	sub	r24, r18
    1fba:	93 0b       	sbc	r25, r19
    1fbc:	84 0f       	add	r24, r20
    1fbe:	95 1f       	adc	r25, r21
    1fc0:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	87 70       	andi	r24, 0x07	; 7
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1fc8:	a3 e5       	ldi	r26, 0x53	; 83
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 7f       	andi	r24, 0xF8	; 248
    1fd4:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1fd6:	a3 e5       	ldi	r26, 0x53	; 83
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e3 e5       	ldi	r30, 0x53	; 83
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	90 81       	ld	r25, Z
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8c 93       	st	X, r24
	}

}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <TWI_voidMasterInit>:



/*Init*/
void TWI_voidMasterInit(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	0f 92       	push	r0
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
	//Bit Rate
	//Prescaller
	u8 Prescaller=TWI_Prescaller;
    1ffe:	19 82       	std	Y+1, r1	; 0x01
	Prescaller&=0x03;  //0000 0011
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	83 70       	andi	r24, 0x03	; 3
    2004:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWSR&=0xFC;        //1111 1100
    2006:	a1 e2       	ldi	r26, 0x21	; 33
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	e1 e2       	ldi	r30, 0x21	; 33
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	8c 7f       	andi	r24, 0xFC	; 252
    2012:	8c 93       	st	X, r24
	//TWBR value
	TWI_TWBR=TWI_TWBR_value;
    2014:	e0 e2       	ldi	r30, 0x20	; 32
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	80 83       	st	Z, r24
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    201c:	a6 e5       	ldi	r26, 0x56	; 86
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e6 e5       	ldi	r30, 0x56	; 86
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 64       	ori	r24, 0x40	; 64
    2028:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    202a:	a6 e5       	ldi	r26, 0x56	; 86
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 e5       	ldi	r30, 0x56	; 86
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	8e 7f       	andi	r24, 0xFE	; 254
    2036:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    2038:	e2 e2       	ldi	r30, 0x22	; 34
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    203e:	a6 e5       	ldi	r26, 0x56	; 86
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e6 e5       	ldi	r30, 0x56	; 86
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	84 60       	ori	r24, 0x04	; 4
    204a:	8c 93       	st	X, r24

}
    204c:	0f 90       	pop	r0
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	08 95       	ret

00002054 <TWI_voidSlaveInit>:
void TWI_voidSlaveInit()
{
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    205c:	a6 e5       	ldi	r26, 0x56	; 86
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e5       	ldi	r30, 0x56	; 86
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	80 64       	ori	r24, 0x40	; 64
    2068:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    206a:	a6 e5       	ldi	r26, 0x56	; 86
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e6 e5       	ldi	r30, 0x56	; 86
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    2078:	e2 e2       	ldi	r30, 0x22	; 34
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    207e:	a6 e5       	ldi	r26, 0x56	; 86
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e6 e5       	ldi	r30, 0x56	; 86
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	84 60       	ori	r24, 0x04	; 4
    208a:	8c 93       	st	X, r24

}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <TWI_voidStartCondition>:
/*************************************/
/*Start Condtion */
void TWI_voidStartCondition()
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	set_bit(TWI_TWCR,TWI_TWCR_TWINT);
    209a:	a6 e5       	ldi	r26, 0x56	; 86
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	e6 e5       	ldi	r30, 0x56	; 86
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 68       	ori	r24, 0x80	; 128
    20a6:	8c 93       	st	X, r24
	//Set Start Condition
	set_bit(TWI_TWCR,TWI_TWCR_TWSTA);
    20a8:	a6 e5       	ldi	r26, 0x56	; 86
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e6 e5       	ldi	r30, 0x56	; 86
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	80 62       	ori	r24, 0x20	; 32
    20b4:	8c 93       	st	X, r24
	//Wait Flag on () when the Current Job Finish
	while (!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    20b6:	e6 e5       	ldi	r30, 0x56	; 86
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	88 23       	and	r24, r24
    20be:	dc f7       	brge	.-10     	; 0x20b6 <TWI_voidStartCondition+0x24>
	//Check on the ACK (TWSR) -> TWI_StartCondition

}
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <TWI_voidRestartCondition>:
void TWI_voidRestartCondition()
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	//Set Start Condition Job
	//Wait Flag on () when the Current Job Finish
	//Check on the ACK (TWSR)-> TWI_ReStartCondition
}
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <TWI_voidStopCondition>:
/*************************************/
/*Stop Condtion */
void TWI_voidStopCondition()
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag
	// Enable Stop Condition
}
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <TWI_voidSendSlAWithWrite>:
/*************************************/
/*Slave Address */
void TWI_voidSendSlAWithWrite(u8 DestinationAddress)
{	 	//Sent the Destiantion
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	0f 92       	push	r0
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	89 83       	std	Y+1, r24	; 0x01
		//TWDR = DestinationAddress + 0 ->Write
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/W )
	//Check on the ACK (TWSR) -> TWI_SLAWACK

}
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <TWI_voidSendSlAWithRead>:
void TWI_voidSendSlAWithRead(u8 DestinationAddress)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	0f 92       	push	r0
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	89 83       	std	Y+1, r24	; 0x01
	//TWDR-> Sent Any thing (DestinationAddress and Write Date and Read Data)
		//TWDR = DestinationAddress + 1 ->Read
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/A )
	//Check on the ACK (TWSR) -> TWI_SLARACK
}
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <TWI_voidWriteDataByte>:
/*************************************/
/*Data Byte */
void TWI_voidWriteDataByte(u8 Data)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	89 83       	std	Y+1, r24	; 0x01
	//Write Data Byte in TWDR
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Write Byte)
	//Check on the ACK (TWSR) -> TWI_Tx_DataACK

}// Take this Value
    2116:	0f 90       	pop	r0
    2118:	cf 91       	pop	r28
    211a:	df 91       	pop	r29
    211c:	08 95       	ret

0000211e <TWI_voidReadDataByte>:
void TWI_voidReadDataByte(u8 *Data)
{
    211e:	df 93       	push	r29
    2120:	cf 93       	push	r28
    2122:	00 d0       	rcall	.+0      	; 0x2124 <TWI_voidReadDataByte+0x6>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Read Byte)
	//Check on the ACK (TWSR) -> TWI_Rx_DataACK
	//Read Data From TWDR And Store it in side Pointer

}
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <SPI_voidinit>:
#include "SPI_Interface.h"



void SPI_voidinit(void)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
#if SPI_InterrptE==disable
	clear_bit(SPI_SPCR,SPCR_SPIE);
    213e:	ad e2       	ldi	r26, 0x2D	; 45
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ed e2       	ldi	r30, 0x2D	; 45
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 77       	andi	r24, 0x7F	; 127
    214a:	8c 93       	st	X, r24
#endif

#if SPI_DataOrder==DataorderLSB
	set_bit(SPI_SPCR,SPCR_DORD);
#elif SPI_DataOrder==DataorderMSB
	clear_bit(SPI_SPCR,SPCR_DORD);
    214c:	ad e2       	ldi	r26, 0x2D	; 45
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	ed e2       	ldi	r30, 0x2D	; 45
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	80 81       	ld	r24, Z
    2156:	8f 7d       	andi	r24, 0xDF	; 223
    2158:	8c 93       	st	X, r24
#endif


	set_bit(SPI_SPCR,SPCR_SPE);
    215a:	ad e2       	ldi	r26, 0x2D	; 45
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	ed e2       	ldi	r30, 0x2D	; 45
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	80 64       	ori	r24, 0x40	; 64
    2166:	8c 93       	st	X, r24
#if SPI_State==Master
	set_bit(SPI_SPCR,SPCR_MSTR);
    2168:	ad e2       	ldi	r26, 0x2D	; 45
    216a:	b0 e0       	ldi	r27, 0x00	; 0
    216c:	ed e2       	ldi	r30, 0x2D	; 45
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	80 61       	ori	r24, 0x10	; 16
    2174:	8c 93       	st	X, r24
#elif SPI_State==Slave
	clear_bit(SPI_SPCR,SPCR_MSTR);
#endif

#if SPI_ClkPolarity==Rising
	clear_bit(SPI_SPCR,SPCR_CPOL);
    2176:	ad e2       	ldi	r26, 0x2D	; 45
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	ed e2       	ldi	r30, 0x2D	; 45
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	87 7f       	andi	r24, 0xF7	; 247
    2182:	8c 93       	st	X, r24
#elif SPI_ClkPolarity==Falling
	set_bit(SPI_SPCR,SPCR_CPOL);
#endif

#if SPI_ClkPhase==TxRx
	clear_bit(SPI_SPCR,SPCR_CPHA);
    2184:	ad e2       	ldi	r26, 0x2D	; 45
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	ed e2       	ldi	r30, 0x2D	; 45
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8b 7f       	andi	r24, 0xFB	; 251
    2190:	8c 93       	st	X, r24
	set_bit(SPI_SPCR,SPCR_CPHA);
#endif


#if SPI_Frequency==F4
	clear_bit(SPI_SPSR,SPSR_SPI2X);
    2192:	ae e2       	ldi	r26, 0x2E	; 46
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ee e2       	ldi	r30, 0x2E	; 46
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8e 7f       	andi	r24, 0xFE	; 254
    219e:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR0);
    21a0:	ad e2       	ldi	r26, 0x2D	; 45
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	ed e2       	ldi	r30, 0x2D	; 45
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8e 7f       	andi	r24, 0xFE	; 254
    21ac:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR1);
    21ae:	ad e2       	ldi	r26, 0x2D	; 45
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	ed e2       	ldi	r30, 0x2D	; 45
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8d 7f       	andi	r24, 0xFD	; 253
    21ba:	8c 93       	st	X, r24
	set_bit(SPI_SPSR,SPSR_SPI2X);
	clear_bit(SPI_SPCR,SPCR_SPR0);
	set_bit(SPI_SPCR,SPCR_SPR1);
#endif

}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <SPI_u8sendReceiveByte>:




u8 SPI_u8sendReceiveByte(u8 data)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	0f 92       	push	r0
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPI_SPDR = data;
    21ce:	ef e2       	ldi	r30, 0x2F	; 47
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(!get_bit(SPI_SPSR,SPSR_SPIF)){}
    21d6:	ee e2       	ldi	r30, 0x2E	; 46
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	88 23       	and	r24, r24
    21de:	dc f7       	brge	.-10     	; 0x21d6 <SPI_u8sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPI_SPDR;
    21e0:	ef e2       	ldi	r30, 0x2F	; 47
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
}
    21e6:	0f 90       	pop	r0
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <SPI_voidsendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_voidsendString(const u8 *str)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	00 d0       	rcall	.+0      	; 0x21f4 <SPI_voidsendString+0x6>
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <SPI_voidsendString+0x8>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    21fe:	1a 82       	std	Y+2, r1	; 0x02
	u8 received_data = 0;
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	0f c0       	rjmp	.+30     	; 0x2222 <SPI_voidsendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	fc 01       	movw	r30, r24
    2210:	e2 0f       	add	r30, r18
    2212:	f3 1f       	adc	r31, r19
    2214:	80 81       	ld	r24, Z
    2216:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <SPI_u8sendReceiveByte>
    221a:	89 83       	std	Y+1, r24	; 0x01
		i++;
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	8f 5f       	subi	r24, 0xFF	; 255
    2220:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	fc 01       	movw	r30, r24
    222e:	e2 0f       	add	r30, r18
    2230:	f3 1f       	adc	r31, r19
    2232:	80 81       	ld	r24, Z
    2234:	88 23       	and	r24, r24
    2236:	31 f7       	brne	.-52     	; 0x2204 <SPI_voidsendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
		i++;
	}
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <SPI_voidreceiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_voidreceiveString(u8 *str)
{
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <SPI_voidreceiveString+0xa>
    2250:	0f 92       	push	r0
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	9b 83       	std	Y+3, r25	; 0x03
    2258:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    225a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	8c 01       	movw	r16, r24
    2268:	02 0f       	add	r16, r18
    226a:	13 1f       	adc	r17, r19
    226c:	8f ef       	ldi	r24, 0xFF	; 255
    226e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <SPI_u8sendReceiveByte>
    2272:	f8 01       	movw	r30, r16
    2274:	80 83       	st	Z, r24
    2276:	10 c0       	rjmp	.+32     	; 0x2298 <SPI_voidreceiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	8f 5f       	subi	r24, 0xFF	; 255
    227c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	28 2f       	mov	r18, r24
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	8a 81       	ldd	r24, Y+2	; 0x02
    2286:	9b 81       	ldd	r25, Y+3	; 0x03
    2288:	8c 01       	movw	r16, r24
    228a:	02 0f       	add	r16, r18
    228c:	13 1f       	adc	r17, r19
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <SPI_u8sendReceiveByte>
    2294:	f8 01       	movw	r30, r16
    2296:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	9b 81       	ldd	r25, Y+3	; 0x03
    22a2:	fc 01       	movw	r30, r24
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	80 81       	ld	r24, Z
    22aa:	83 32       	cpi	r24, 0x23	; 35
    22ac:	29 f7       	brne	.-54     	; 0x2278 <SPI_voidreceiveString+0x32>
		i++;
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	9b 81       	ldd	r25, Y+3	; 0x03
    22b8:	fc 01       	movw	r30, r24
    22ba:	e2 0f       	add	r30, r18
    22bc:	f3 1f       	adc	r31, r19
    22be:	10 82       	st	Z, r1
}
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	1f 91       	pop	r17
    22cc:	0f 91       	pop	r16
    22ce:	08 95       	ret

000022d0 <GIE_voidEnable>:
#define GIE_SREG    *((volatile u8*)0x5F)
#define GIE_I       7


void GIE_voidEnable()
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
	set_bit(GIE_SREG,GIE_I);
    22d8:	af e5       	ldi	r26, 0x5F	; 95
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ef e5       	ldi	r30, 0x5F	; 95
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	80 68       	ori	r24, 0x80	; 128
    22e4:	8c 93       	st	X, r24
}
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <GIE_voidDisable>:

void GIE_voidDisable()
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GIE_SREG,GIE_I);
    22f4:	af e5       	ldi	r26, 0x5F	; 95
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	ef e5       	ldi	r30, 0x5F	; 95
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8f 77       	andi	r24, 0x7F	; 127
    2300:	8c 93       	st	X, r24
}
    2302:	cf 91       	pop	r28
    2304:	df 91       	pop	r29
    2306:	08 95       	ret

00002308 <EXTI_voidInitINT0>:
#include "EXTI_Interface.h"
void (*EXTI0_ISR)();
void (*EXTI1_ISR)();
void (*EXTI2_ISR)();
void EXTI_voidInitINT0(u8 sense)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	0f 92       	push	r0
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	79 f4       	brne	.+30     	; 0x2338 <EXTI_voidInitINT0+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    231a:	a5 e5       	ldi	r26, 0x55	; 85
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e5 e5       	ldi	r30, 0x55	; 85
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	8e 7f       	andi	r24, 0xFE	; 254
    2326:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    2328:	a5 e5       	ldi	r26, 0x55	; 85
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e5 e5       	ldi	r30, 0x55	; 85
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	80 81       	ld	r24, Z
    2332:	8d 7f       	andi	r24, 0xFD	; 253
    2334:	8c 93       	st	X, r24
    2336:	35 c0       	rjmp	.+106    	; 0x23a2 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==AnyCahnge)
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	82 30       	cpi	r24, 0x02	; 2
    233c:	79 f4       	brne	.+30     	; 0x235c <EXTI_voidInitINT0+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    233e:	a5 e5       	ldi	r26, 0x55	; 85
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e5 e5       	ldi	r30, 0x55	; 85
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	81 60       	ori	r24, 0x01	; 1
    234a:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    234c:	a5 e5       	ldi	r26, 0x55	; 85
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e5 e5       	ldi	r30, 0x55	; 85
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	8d 7f       	andi	r24, 0xFD	; 253
    2358:	8c 93       	st	X, r24
    235a:	23 c0       	rjmp	.+70     	; 0x23a2 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Falling)
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	83 30       	cpi	r24, 0x03	; 3
    2360:	79 f4       	brne	.+30     	; 0x2380 <EXTI_voidInitINT0+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    2362:	a5 e5       	ldi	r26, 0x55	; 85
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e5 e5       	ldi	r30, 0x55	; 85
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8e 7f       	andi	r24, 0xFE	; 254
    236e:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2370:	a5 e5       	ldi	r26, 0x55	; 85
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e5 e5       	ldi	r30, 0x55	; 85
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	82 60       	ori	r24, 0x02	; 2
    237c:	8c 93       	st	X, r24
    237e:	11 c0       	rjmp	.+34     	; 0x23a2 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Rising)
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	71 f4       	brne	.+28     	; 0x23a2 <EXTI_voidInitINT0+0x9a>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    2386:	a5 e5       	ldi	r26, 0x55	; 85
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e5       	ldi	r30, 0x55	; 85
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	81 60       	ori	r24, 0x01	; 1
    2392:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2394:	a5 e5       	ldi	r26, 0x55	; 85
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e5 e5       	ldi	r30, 0x55	; 85
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	82 60       	ori	r24, 0x02	; 2
    23a0:	8c 93       	st	X, r24
	}
	else
	{
		//error
	}
	set_bit(EXTI_GICR,EXTI_INT0);
    23a2:	ab e5       	ldi	r26, 0x5B	; 91
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	eb e5       	ldi	r30, 0x5B	; 91
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	80 64       	ori	r24, 0x40	; 64
    23ae:	8c 93       	st	X, r24

}
    23b0:	0f 90       	pop	r0
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <EXTI_voidInitINT1>:

void EXTI_voidInitINT1(u8 sense)
{
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	0f 92       	push	r0
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	79 f4       	brne	.+30     	; 0x23e8 <EXTI_voidInitINT1+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    23ca:	a5 e5       	ldi	r26, 0x55	; 85
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e5 e5       	ldi	r30, 0x55	; 85
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	8b 7f       	andi	r24, 0xFB	; 251
    23d6:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    23d8:	a5 e5       	ldi	r26, 0x55	; 85
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	e5 e5       	ldi	r30, 0x55	; 85
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	87 7f       	andi	r24, 0xF7	; 247
    23e4:	8c 93       	st	X, r24
    23e6:	35 c0       	rjmp	.+106    	; 0x2452 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==AnyCahnge)
    23e8:	89 81       	ldd	r24, Y+1	; 0x01
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	79 f4       	brne	.+30     	; 0x240c <EXTI_voidInitINT1+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    23ee:	a5 e5       	ldi	r26, 0x55	; 85
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	e5 e5       	ldi	r30, 0x55	; 85
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	80 81       	ld	r24, Z
    23f8:	84 60       	ori	r24, 0x04	; 4
    23fa:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    23fc:	a5 e5       	ldi	r26, 0x55	; 85
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e5 e5       	ldi	r30, 0x55	; 85
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	87 7f       	andi	r24, 0xF7	; 247
    2408:	8c 93       	st	X, r24
    240a:	23 c0       	rjmp	.+70     	; 0x2452 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Falling)
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	83 30       	cpi	r24, 0x03	; 3
    2410:	79 f4       	brne	.+30     	; 0x2430 <EXTI_voidInitINT1+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    2412:	a5 e5       	ldi	r26, 0x55	; 85
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e5 e5       	ldi	r30, 0x55	; 85
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8b 7f       	andi	r24, 0xFB	; 251
    241e:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    2420:	a5 e5       	ldi	r26, 0x55	; 85
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e5 e5       	ldi	r30, 0x55	; 85
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	88 60       	ori	r24, 0x08	; 8
    242c:	8c 93       	st	X, r24
    242e:	11 c0       	rjmp	.+34     	; 0x2452 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Rising)
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	84 30       	cpi	r24, 0x04	; 4
    2434:	a9 f4       	brne	.+42     	; 0x2460 <EXTI_voidInitINT1+0xa8>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    2436:	a5 e5       	ldi	r26, 0x55	; 85
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e5       	ldi	r30, 0x55	; 85
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	84 60       	ori	r24, 0x04	; 4
    2442:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    2444:	a5 e5       	ldi	r26, 0x55	; 85
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e5 e5       	ldi	r30, 0x55	; 85
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	80 81       	ld	r24, Z
    244e:	88 60       	ori	r24, 0x08	; 8
    2450:	8c 93       	st	X, r24
	}
	else
	{
		return;
	}
	set_bit(EXTI_GICR,EXTI_INT1);
    2452:	ab e5       	ldi	r26, 0x5B	; 91
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	eb e5       	ldi	r30, 0x5B	; 91
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	80 68       	ori	r24, 0x80	; 128
    245e:	8c 93       	st	X, r24
}
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <EXTI_voidInitINT2>:

void EXTI_voidInitINT2(u8 sense)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	0f 92       	push	r0
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	89 83       	std	Y+1, r24	; 0x01
	if(sense==Rising)
    2474:	89 81       	ldd	r24, Y+1	; 0x01
    2476:	84 30       	cpi	r24, 0x04	; 4
    2478:	41 f4       	brne	.+16     	; 0x248a <EXTI_voidInitINT2+0x22>
	{
		set_bit(EXTI_MCUCSR,EXTI_ISC2);
    247a:	a4 e5       	ldi	r26, 0x54	; 84
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e4 e5       	ldi	r30, 0x54	; 84
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 64       	ori	r24, 0x40	; 64
    2486:	8c 93       	st	X, r24
    2488:	0a c0       	rjmp	.+20     	; 0x249e <EXTI_voidInitINT2+0x36>
	}
	else if (sense==Rising)
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	39 f4       	brne	.+14     	; 0x249e <EXTI_voidInitINT2+0x36>
	{
		clear_bit(EXTI_MCUCSR,EXTI_ISC2);
    2490:	a4 e5       	ldi	r26, 0x54	; 84
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e4 e5       	ldi	r30, 0x54	; 84
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	8f 7b       	andi	r24, 0xBF	; 191
    249c:	8c 93       	st	X, r24
	}
	else
	{

	}
	set_bit(EXTI_GICR,EXTI_INT2);
    249e:	ab e5       	ldi	r26, 0x5B	; 91
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	eb e5       	ldi	r30, 0x5B	; 91
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	80 62       	ori	r24, 0x20	; 32
    24aa:	8c 93       	st	X, r24
}
    24ac:	0f 90       	pop	r0
    24ae:	cf 91       	pop	r28
    24b0:	df 91       	pop	r29
    24b2:	08 95       	ret

000024b4 <EXTI0_CallBack>:

void EXTI0_CallBack (void (*ptr)(void))
{
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <EXTI0_CallBack+0x6>
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_ISR = ptr;
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	9a 81       	ldd	r25, Y+2	; 0x02
    24c6:	90 93 a5 01 	sts	0x01A5, r25
    24ca:	80 93 a4 01 	sts	0x01A4, r24
}
    24ce:	0f 90       	pop	r0
    24d0:	0f 90       	pop	r0
    24d2:	cf 91       	pop	r28
    24d4:	df 91       	pop	r29
    24d6:	08 95       	ret

000024d8 <__vector_1>:
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    24d8:	1f 92       	push	r1
    24da:	0f 92       	push	r0
    24dc:	0f b6       	in	r0, 0x3f	; 63
    24de:	0f 92       	push	r0
    24e0:	11 24       	eor	r1, r1
    24e2:	2f 93       	push	r18
    24e4:	3f 93       	push	r19
    24e6:	4f 93       	push	r20
    24e8:	5f 93       	push	r21
    24ea:	6f 93       	push	r22
    24ec:	7f 93       	push	r23
    24ee:	8f 93       	push	r24
    24f0:	9f 93       	push	r25
    24f2:	af 93       	push	r26
    24f4:	bf 93       	push	r27
    24f6:	ef 93       	push	r30
    24f8:	ff 93       	push	r31
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_ISR!=NULL)
    2502:	80 91 a4 01 	lds	r24, 0x01A4
    2506:	90 91 a5 01 	lds	r25, 0x01A5
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	29 f0       	breq	.+10     	; 0x2518 <__vector_1+0x40>
	{
		EXTI0_ISR();
    250e:	e0 91 a4 01 	lds	r30, 0x01A4
    2512:	f0 91 a5 01 	lds	r31, 0x01A5
    2516:	09 95       	icall
	}
}
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	ff 91       	pop	r31
    251e:	ef 91       	pop	r30
    2520:	bf 91       	pop	r27
    2522:	af 91       	pop	r26
    2524:	9f 91       	pop	r25
    2526:	8f 91       	pop	r24
    2528:	7f 91       	pop	r23
    252a:	6f 91       	pop	r22
    252c:	5f 91       	pop	r21
    252e:	4f 91       	pop	r20
    2530:	3f 91       	pop	r19
    2532:	2f 91       	pop	r18
    2534:	0f 90       	pop	r0
    2536:	0f be       	out	0x3f, r0	; 63
    2538:	0f 90       	pop	r0
    253a:	1f 90       	pop	r1
    253c:	18 95       	reti

0000253e <EXTI1_CallBack>:

void EXTI1_CallBack (void (*ptr)(void))
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	00 d0       	rcall	.+0      	; 0x2544 <EXTI1_CallBack+0x6>
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	9a 83       	std	Y+2, r25	; 0x02
    254a:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_ISR = ptr;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	9a 81       	ldd	r25, Y+2	; 0x02
    2550:	90 93 a3 01 	sts	0x01A3, r25
    2554:	80 93 a2 01 	sts	0x01A2, r24
}
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_ISR!=NULL)
    258c:	80 91 a2 01 	lds	r24, 0x01A2
    2590:	90 91 a3 01 	lds	r25, 0x01A3
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	29 f0       	breq	.+10     	; 0x25a2 <__vector_2+0x40>
	{
		EXTI1_ISR();
    2598:	e0 91 a2 01 	lds	r30, 0x01A2
    259c:	f0 91 a3 01 	lds	r31, 0x01A3
    25a0:	09 95       	icall
	}
}
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	ff 91       	pop	r31
    25a8:	ef 91       	pop	r30
    25aa:	bf 91       	pop	r27
    25ac:	af 91       	pop	r26
    25ae:	9f 91       	pop	r25
    25b0:	8f 91       	pop	r24
    25b2:	7f 91       	pop	r23
    25b4:	6f 91       	pop	r22
    25b6:	5f 91       	pop	r21
    25b8:	4f 91       	pop	r20
    25ba:	3f 91       	pop	r19
    25bc:	2f 91       	pop	r18
    25be:	0f 90       	pop	r0
    25c0:	0f be       	out	0x3f, r0	; 63
    25c2:	0f 90       	pop	r0
    25c4:	1f 90       	pop	r1
    25c6:	18 95       	reti

000025c8 <EXTI2_CallBack>:
void EXTI2_CallBack (void (*ptr)(void))
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <EXTI2_CallBack+0x6>
    25ce:	cd b7       	in	r28, 0x3d	; 61
    25d0:	de b7       	in	r29, 0x3e	; 62
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
    EXTI2_ISR = ptr;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	90 93 a1 01 	sts	0x01A1, r25
    25de:	80 93 a0 01 	sts	0x01A0, r24
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    25ec:	1f 92       	push	r1
    25ee:	0f 92       	push	r0
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	0f 92       	push	r0
    25f4:	11 24       	eor	r1, r1
    25f6:	2f 93       	push	r18
    25f8:	3f 93       	push	r19
    25fa:	4f 93       	push	r20
    25fc:	5f 93       	push	r21
    25fe:	6f 93       	push	r22
    2600:	7f 93       	push	r23
    2602:	8f 93       	push	r24
    2604:	9f 93       	push	r25
    2606:	af 93       	push	r26
    2608:	bf 93       	push	r27
    260a:	ef 93       	push	r30
    260c:	ff 93       	push	r31
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_ISR!=NULL)
    2616:	80 91 a0 01 	lds	r24, 0x01A0
    261a:	90 91 a1 01 	lds	r25, 0x01A1
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	29 f0       	breq	.+10     	; 0x262c <__vector_3+0x40>
	{
		EXTI2_ISR();
    2622:	e0 91 a0 01 	lds	r30, 0x01A0
    2626:	f0 91 a1 01 	lds	r31, 0x01A1
    262a:	09 95       	icall
	}
}
    262c:	cf 91       	pop	r28
    262e:	df 91       	pop	r29
    2630:	ff 91       	pop	r31
    2632:	ef 91       	pop	r30
    2634:	bf 91       	pop	r27
    2636:	af 91       	pop	r26
    2638:	9f 91       	pop	r25
    263a:	8f 91       	pop	r24
    263c:	7f 91       	pop	r23
    263e:	6f 91       	pop	r22
    2640:	5f 91       	pop	r21
    2642:	4f 91       	pop	r20
    2644:	3f 91       	pop	r19
    2646:	2f 91       	pop	r18
    2648:	0f 90       	pop	r0
    264a:	0f be       	out	0x3f, r0	; 63
    264c:	0f 90       	pop	r0
    264e:	1f 90       	pop	r1
    2650:	18 95       	reti

00002652 <EEPROM_voidWriteByte>:
 */

#include "EEPROM_Interface.h"

void EEPROM_voidWriteByte( u8 Address , u8 data)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	00 d0       	rcall	.+0      	; 0x2658 <EEPROM_voidWriteByte+0x6>
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    2660:	ec e3       	ldi	r30, 0x3C	; 60
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	86 95       	lsr	r24
    2668:	88 2f       	mov	r24, r24
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	81 70       	andi	r24, 0x01	; 1
    266e:	90 70       	andi	r25, 0x00	; 0
    2670:	88 23       	and	r24, r24
    2672:	b1 f7       	brne	.-20     	; 0x2660 <EEPROM_voidWriteByte+0xe>
	EE_EEARL = Address ;
    2674:	ee e3       	ldi	r30, 0x3E	; 62
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	80 83       	st	Z, r24
	EE_EEDR  = data ;
    267c:	ed e3       	ldi	r30, 0x3D	; 61
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EEMWE);
    2684:	ac e3       	ldi	r26, 0x3C	; 60
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	ec e3       	ldi	r30, 0x3C	; 60
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	84 60       	ori	r24, 0x04	; 4
    2690:	8c 93       	st	X, r24
	set_bit(EE_EECR,EE_EECR_EEWE);
    2692:	ac e3       	ldi	r26, 0x3C	; 60
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	ec e3       	ldi	r30, 0x3C	; 60
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	8c 93       	st	X, r24
}
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <EEPROM_voidReadByte>:
void EEPROM_voidReadByte( u8 Address , u8* data)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	00 d0       	rcall	.+0      	; 0x26b0 <EEPROM_voidReadByte+0x6>
    26b0:	0f 92       	push	r0
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
    26b6:	89 83       	std	Y+1, r24	; 0x01
    26b8:	7b 83       	std	Y+3, r23	; 0x03
    26ba:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    26bc:	ec e3       	ldi	r30, 0x3C	; 60
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	86 95       	lsr	r24
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	81 70       	andi	r24, 0x01	; 1
    26ca:	90 70       	andi	r25, 0x00	; 0
    26cc:	88 23       	and	r24, r24
    26ce:	b1 f7       	brne	.-20     	; 0x26bc <EEPROM_voidReadByte+0x12>
	EE_EEARL = Address ;
    26d0:	ee e3       	ldi	r30, 0x3E	; 62
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EERE);
    26d8:	ac e3       	ldi	r26, 0x3C	; 60
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ec e3       	ldi	r30, 0x3C	; 60
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	81 60       	ori	r24, 0x01	; 1
    26e4:	8c 93       	st	X, r24
	*data = EE_EEDR ;
    26e6:	ed e3       	ldi	r30, 0x3D	; 61
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	ea 81       	ldd	r30, Y+2	; 0x02
    26ee:	fb 81       	ldd	r31, Y+3	; 0x03
    26f0:	80 83       	st	Z, r24
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <EEPROM_voidEraseAll>:

void EEPROM_voidEraseAll(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	00 d0       	rcall	.+0      	; 0x2704 <EEPROM_voidEraseAll+0x6>
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    2708:	1a 82       	std	Y+2, r1	; 0x02
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	09 c0       	rjmp	.+18     	; 0x2720 <EEPROM_voidEraseAll+0x22>
	{
		EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_voidWriteByte>
}

void EEPROM_voidEraseAll(void)
{
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	24 e0       	ldi	r18, 0x04	; 4
    2726:	80 30       	cpi	r24, 0x00	; 0
    2728:	92 07       	cpc	r25, r18
    272a:	88 f3       	brcs	.-30     	; 0x270e <EEPROM_voidEraseAll+0x10>
	{
		EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
	}
}
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <EEPROM_voidEraseByte>:

void EEPROM_voidEraseByte(u8 Address)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	0f 92       	push	r0
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	89 83       	std	Y+1, r24	; 0x01
	EEPROM_voidWriteByte( Address , 0x00 );
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	60 e0       	ldi	r22, 0x00	; 0
    2746:	0e 94 29 13 	call	0x2652	; 0x2652 <EEPROM_voidWriteByte>
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <DIO_voidSetPinDir>:
#include "DIO_Praivte.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	27 97       	sbiw	r28, 0x07	; 7
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	6a 83       	std	Y+2, r22	; 0x02
    276a:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	88 23       	and	r24, r24
    2770:	09 f4       	brne	.+2      	; 0x2774 <DIO_voidSetPinDir+0x22>
    2772:	f4 c0       	rjmp	.+488    	; 0x295c <DIO_voidSetPinDir+0x20a>
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	85 30       	cpi	r24, 0x05	; 5
    2778:	08 f0       	brcs	.+2      	; 0x277c <DIO_voidSetPinDir+0x2a>
    277a:	f0 c0       	rjmp	.+480    	; 0x295c <DIO_voidSetPinDir+0x20a>
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	88 30       	cpi	r24, 0x08	; 8
    2780:	08 f0       	brcs	.+2      	; 0x2784 <DIO_voidSetPinDir+0x32>
    2782:	ec c0       	rjmp	.+472    	; 0x295c <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	88 23       	and	r24, r24
    2788:	09 f0       	breq	.+2      	; 0x278c <DIO_voidSetPinDir+0x3a>
    278a:	75 c0       	rjmp	.+234    	; 0x2876 <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	3f 83       	std	Y+7, r19	; 0x07
    2794:	2e 83       	std	Y+6, r18	; 0x06
    2796:	8e 81       	ldd	r24, Y+6	; 0x06
    2798:	9f 81       	ldd	r25, Y+7	; 0x07
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	91 05       	cpc	r25, r1
    279e:	61 f1       	breq	.+88     	; 0x27f8 <DIO_voidSetPinDir+0xa6>
    27a0:	2e 81       	ldd	r18, Y+6	; 0x06
    27a2:	3f 81       	ldd	r19, Y+7	; 0x07
    27a4:	23 30       	cpi	r18, 0x03	; 3
    27a6:	31 05       	cpc	r19, r1
    27a8:	34 f4       	brge	.+12     	; 0x27b6 <DIO_voidSetPinDir+0x64>
    27aa:	8e 81       	ldd	r24, Y+6	; 0x06
    27ac:	9f 81       	ldd	r25, Y+7	; 0x07
    27ae:	81 30       	cpi	r24, 0x01	; 1
    27b0:	91 05       	cpc	r25, r1
    27b2:	69 f0       	breq	.+26     	; 0x27ce <DIO_voidSetPinDir+0x7c>
    27b4:	d3 c0       	rjmp	.+422    	; 0x295c <DIO_voidSetPinDir+0x20a>
    27b6:	2e 81       	ldd	r18, Y+6	; 0x06
    27b8:	3f 81       	ldd	r19, Y+7	; 0x07
    27ba:	23 30       	cpi	r18, 0x03	; 3
    27bc:	31 05       	cpc	r19, r1
    27be:	89 f1       	breq	.+98     	; 0x2822 <DIO_voidSetPinDir+0xd0>
    27c0:	8e 81       	ldd	r24, Y+6	; 0x06
    27c2:	9f 81       	ldd	r25, Y+7	; 0x07
    27c4:	84 30       	cpi	r24, 0x04	; 4
    27c6:	91 05       	cpc	r25, r1
    27c8:	09 f4       	brne	.+2      	; 0x27cc <DIO_voidSetPinDir+0x7a>
    27ca:	40 c0       	rjmp	.+128    	; 0x284c <DIO_voidSetPinDir+0xfa>
    27cc:	c7 c0       	rjmp	.+398    	; 0x295c <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
    27ce:	aa e3       	ldi	r26, 0x3A	; 58
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ea e3       	ldi	r30, 0x3A	; 58
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	48 2f       	mov	r20, r24
    27da:	8a 81       	ldd	r24, Y+2	; 0x02
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	02 2e       	mov	r0, r18
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <DIO_voidSetPinDir+0x9a>
    27e8:	88 0f       	add	r24, r24
    27ea:	99 1f       	adc	r25, r25
    27ec:	0a 94       	dec	r0
    27ee:	e2 f7       	brpl	.-8      	; 0x27e8 <DIO_voidSetPinDir+0x96>
    27f0:	80 95       	com	r24
    27f2:	84 23       	and	r24, r20
    27f4:	8c 93       	st	X, r24
    27f6:	b2 c0       	rjmp	.+356    	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
    27f8:	a7 e3       	ldi	r26, 0x37	; 55
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e7 e3       	ldi	r30, 0x37	; 55
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	48 2f       	mov	r20, r24
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	02 2e       	mov	r0, r18
    2810:	02 c0       	rjmp	.+4      	; 0x2816 <DIO_voidSetPinDir+0xc4>
    2812:	88 0f       	add	r24, r24
    2814:	99 1f       	adc	r25, r25
    2816:	0a 94       	dec	r0
    2818:	e2 f7       	brpl	.-8      	; 0x2812 <DIO_voidSetPinDir+0xc0>
    281a:	80 95       	com	r24
    281c:	84 23       	and	r24, r20
    281e:	8c 93       	st	X, r24
    2820:	9d c0       	rjmp	.+314    	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
    2822:	a4 e3       	ldi	r26, 0x34	; 52
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e4 e3       	ldi	r30, 0x34	; 52
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	48 2f       	mov	r20, r24
    282e:	8a 81       	ldd	r24, Y+2	; 0x02
    2830:	28 2f       	mov	r18, r24
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	02 2e       	mov	r0, r18
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <DIO_voidSetPinDir+0xee>
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	0a 94       	dec	r0
    2842:	e2 f7       	brpl	.-8      	; 0x283c <DIO_voidSetPinDir+0xea>
    2844:	80 95       	com	r24
    2846:	84 23       	and	r24, r20
    2848:	8c 93       	st	X, r24
    284a:	88 c0       	rjmp	.+272    	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
    284c:	a1 e3       	ldi	r26, 0x31	; 49
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e1 e3       	ldi	r30, 0x31	; 49
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	48 2f       	mov	r20, r24
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	02 2e       	mov	r0, r18
    2864:	02 c0       	rjmp	.+4      	; 0x286a <DIO_voidSetPinDir+0x118>
    2866:	88 0f       	add	r24, r24
    2868:	99 1f       	adc	r25, r25
    286a:	0a 94       	dec	r0
    286c:	e2 f7       	brpl	.-8      	; 0x2866 <DIO_voidSetPinDir+0x114>
    286e:	80 95       	com	r24
    2870:	84 23       	and	r24, r20
    2872:	8c 93       	st	X, r24
    2874:	73 c0       	rjmp	.+230    	; 0x295c <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	81 30       	cpi	r24, 0x01	; 1
    287a:	09 f0       	breq	.+2      	; 0x287e <DIO_voidSetPinDir+0x12c>
    287c:	6f c0       	rjmp	.+222    	; 0x295c <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	3d 83       	std	Y+5, r19	; 0x05
    2886:	2c 83       	std	Y+4, r18	; 0x04
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	91 05       	cpc	r25, r1
    2890:	51 f1       	breq	.+84     	; 0x28e6 <DIO_voidSetPinDir+0x194>
    2892:	2c 81       	ldd	r18, Y+4	; 0x04
    2894:	3d 81       	ldd	r19, Y+5	; 0x05
    2896:	23 30       	cpi	r18, 0x03	; 3
    2898:	31 05       	cpc	r19, r1
    289a:	34 f4       	brge	.+12     	; 0x28a8 <DIO_voidSetPinDir+0x156>
    289c:	8c 81       	ldd	r24, Y+4	; 0x04
    289e:	9d 81       	ldd	r25, Y+5	; 0x05
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	91 05       	cpc	r25, r1
    28a4:	61 f0       	breq	.+24     	; 0x28be <DIO_voidSetPinDir+0x16c>
    28a6:	5a c0       	rjmp	.+180    	; 0x295c <DIO_voidSetPinDir+0x20a>
    28a8:	2c 81       	ldd	r18, Y+4	; 0x04
    28aa:	3d 81       	ldd	r19, Y+5	; 0x05
    28ac:	23 30       	cpi	r18, 0x03	; 3
    28ae:	31 05       	cpc	r19, r1
    28b0:	71 f1       	breq	.+92     	; 0x290e <DIO_voidSetPinDir+0x1bc>
    28b2:	8c 81       	ldd	r24, Y+4	; 0x04
    28b4:	9d 81       	ldd	r25, Y+5	; 0x05
    28b6:	84 30       	cpi	r24, 0x04	; 4
    28b8:	91 05       	cpc	r25, r1
    28ba:	e9 f1       	breq	.+122    	; 0x2936 <DIO_voidSetPinDir+0x1e4>
    28bc:	4f c0       	rjmp	.+158    	; 0x295c <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
    28be:	aa e3       	ldi	r26, 0x3A	; 58
    28c0:	b0 e0       	ldi	r27, 0x00	; 0
    28c2:	ea e3       	ldi	r30, 0x3A	; 58
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	80 81       	ld	r24, Z
    28c8:	48 2f       	mov	r20, r24
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	02 2e       	mov	r0, r18
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <DIO_voidSetPinDir+0x18a>
    28d8:	88 0f       	add	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	0a 94       	dec	r0
    28de:	e2 f7       	brpl	.-8      	; 0x28d8 <DIO_voidSetPinDir+0x186>
    28e0:	84 2b       	or	r24, r20
    28e2:	8c 93       	st	X, r24
    28e4:	3b c0       	rjmp	.+118    	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
    28e6:	a7 e3       	ldi	r26, 0x37	; 55
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e7 e3       	ldi	r30, 0x37	; 55
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	48 2f       	mov	r20, r24
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	02 2e       	mov	r0, r18
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <DIO_voidSetPinDir+0x1b2>
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	0a 94       	dec	r0
    2906:	e2 f7       	brpl	.-8      	; 0x2900 <DIO_voidSetPinDir+0x1ae>
    2908:	84 2b       	or	r24, r20
    290a:	8c 93       	st	X, r24
    290c:	27 c0       	rjmp	.+78     	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
    290e:	a4 e3       	ldi	r26, 0x34	; 52
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e4 e3       	ldi	r30, 0x34	; 52
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	48 2f       	mov	r20, r24
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	02 2e       	mov	r0, r18
    2926:	02 c0       	rjmp	.+4      	; 0x292c <DIO_voidSetPinDir+0x1da>
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	0a 94       	dec	r0
    292e:	e2 f7       	brpl	.-8      	; 0x2928 <DIO_voidSetPinDir+0x1d6>
    2930:	84 2b       	or	r24, r20
    2932:	8c 93       	st	X, r24
    2934:	13 c0       	rjmp	.+38     	; 0x295c <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
    2936:	a1 e3       	ldi	r26, 0x31	; 49
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e1 e3       	ldi	r30, 0x31	; 49
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	48 2f       	mov	r20, r24
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	28 2f       	mov	r18, r24
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	02 2e       	mov	r0, r18
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <DIO_voidSetPinDir+0x202>
    2950:	88 0f       	add	r24, r24
    2952:	99 1f       	adc	r25, r25
    2954:	0a 94       	dec	r0
    2956:	e2 f7       	brpl	.-8      	; 0x2950 <DIO_voidSetPinDir+0x1fe>
    2958:	84 2b       	or	r24, r20
    295a:	8c 93       	st	X, r24
			}
		}
	}


}
    295c:	27 96       	adiw	r28, 0x07	; 7
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	27 97       	sbiw	r28, 0x07	; 7
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	6a 83       	std	Y+2, r22	; 0x02
    2986:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	88 23       	and	r24, r24
    298c:	09 f4       	brne	.+2      	; 0x2990 <DIO_voidSetPinValue+0x22>
    298e:	f4 c0       	rjmp	.+488    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	85 30       	cpi	r24, 0x05	; 5
    2994:	08 f0       	brcs	.+2      	; 0x2998 <DIO_voidSetPinValue+0x2a>
    2996:	f0 c0       	rjmp	.+480    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	88 30       	cpi	r24, 0x08	; 8
    299c:	08 f0       	brcs	.+2      	; 0x29a0 <DIO_voidSetPinValue+0x32>
    299e:	ec c0       	rjmp	.+472    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	88 23       	and	r24, r24
    29a4:	09 f0       	breq	.+2      	; 0x29a8 <DIO_voidSetPinValue+0x3a>
    29a6:	75 c0       	rjmp	.+234    	; 0x2a92 <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	3f 83       	std	Y+7, r19	; 0x07
    29b0:	2e 83       	std	Y+6, r18	; 0x06
    29b2:	8e 81       	ldd	r24, Y+6	; 0x06
    29b4:	9f 81       	ldd	r25, Y+7	; 0x07
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	91 05       	cpc	r25, r1
    29ba:	61 f1       	breq	.+88     	; 0x2a14 <DIO_voidSetPinValue+0xa6>
    29bc:	2e 81       	ldd	r18, Y+6	; 0x06
    29be:	3f 81       	ldd	r19, Y+7	; 0x07
    29c0:	23 30       	cpi	r18, 0x03	; 3
    29c2:	31 05       	cpc	r19, r1
    29c4:	34 f4       	brge	.+12     	; 0x29d2 <DIO_voidSetPinValue+0x64>
    29c6:	8e 81       	ldd	r24, Y+6	; 0x06
    29c8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	91 05       	cpc	r25, r1
    29ce:	69 f0       	breq	.+26     	; 0x29ea <DIO_voidSetPinValue+0x7c>
    29d0:	d3 c0       	rjmp	.+422    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
    29d2:	2e 81       	ldd	r18, Y+6	; 0x06
    29d4:	3f 81       	ldd	r19, Y+7	; 0x07
    29d6:	23 30       	cpi	r18, 0x03	; 3
    29d8:	31 05       	cpc	r19, r1
    29da:	89 f1       	breq	.+98     	; 0x2a3e <DIO_voidSetPinValue+0xd0>
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	84 30       	cpi	r24, 0x04	; 4
    29e2:	91 05       	cpc	r25, r1
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <DIO_voidSetPinValue+0x7a>
    29e6:	40 c0       	rjmp	.+128    	; 0x2a68 <DIO_voidSetPinValue+0xfa>
    29e8:	c7 c0       	rjmp	.+398    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
    29ea:	ab e3       	ldi	r26, 0x3B	; 59
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	eb e3       	ldi	r30, 0x3B	; 59
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	48 2f       	mov	r20, r24
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	28 2f       	mov	r18, r24
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	02 2e       	mov	r0, r18
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <DIO_voidSetPinValue+0x9a>
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	0a 94       	dec	r0
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <DIO_voidSetPinValue+0x96>
    2a0c:	80 95       	com	r24
    2a0e:	84 23       	and	r24, r20
    2a10:	8c 93       	st	X, r24
    2a12:	b2 c0       	rjmp	.+356    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
    2a14:	a8 e3       	ldi	r26, 0x38	; 56
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	e8 e3       	ldi	r30, 0x38	; 56
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	48 2f       	mov	r20, r24
    2a20:	8a 81       	ldd	r24, Y+2	; 0x02
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 2e       	mov	r0, r18
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <DIO_voidSetPinValue+0xc4>
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	0a 94       	dec	r0
    2a34:	e2 f7       	brpl	.-8      	; 0x2a2e <DIO_voidSetPinValue+0xc0>
    2a36:	80 95       	com	r24
    2a38:	84 23       	and	r24, r20
    2a3a:	8c 93       	st	X, r24
    2a3c:	9d c0       	rjmp	.+314    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
    2a3e:	a5 e3       	ldi	r26, 0x35	; 53
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e5 e3       	ldi	r30, 0x35	; 53
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	48 2f       	mov	r20, r24
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	28 2f       	mov	r18, r24
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	02 2e       	mov	r0, r18
    2a56:	02 c0       	rjmp	.+4      	; 0x2a5c <DIO_voidSetPinValue+0xee>
    2a58:	88 0f       	add	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	0a 94       	dec	r0
    2a5e:	e2 f7       	brpl	.-8      	; 0x2a58 <DIO_voidSetPinValue+0xea>
    2a60:	80 95       	com	r24
    2a62:	84 23       	and	r24, r20
    2a64:	8c 93       	st	X, r24
    2a66:	88 c0       	rjmp	.+272    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
    2a68:	a2 e3       	ldi	r26, 0x32	; 50
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	e2 e3       	ldi	r30, 0x32	; 50
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	48 2f       	mov	r20, r24
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	28 2f       	mov	r18, r24
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	02 2e       	mov	r0, r18
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <DIO_voidSetPinValue+0x118>
    2a82:	88 0f       	add	r24, r24
    2a84:	99 1f       	adc	r25, r25
    2a86:	0a 94       	dec	r0
    2a88:	e2 f7       	brpl	.-8      	; 0x2a82 <DIO_voidSetPinValue+0x114>
    2a8a:	80 95       	com	r24
    2a8c:	84 23       	and	r24, r20
    2a8e:	8c 93       	st	X, r24
    2a90:	73 c0       	rjmp	.+230    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <DIO_voidSetPinValue+0x12c>
    2a98:	6f c0       	rjmp	.+222    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	28 2f       	mov	r18, r24
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	3d 83       	std	Y+5, r19	; 0x05
    2aa2:	2c 83       	std	Y+4, r18	; 0x04
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	91 05       	cpc	r25, r1
    2aac:	51 f1       	breq	.+84     	; 0x2b02 <DIO_voidSetPinValue+0x194>
    2aae:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab2:	23 30       	cpi	r18, 0x03	; 3
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	34 f4       	brge	.+12     	; 0x2ac4 <DIO_voidSetPinValue+0x156>
    2ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    2aba:	9d 81       	ldd	r25, Y+5	; 0x05
    2abc:	81 30       	cpi	r24, 0x01	; 1
    2abe:	91 05       	cpc	r25, r1
    2ac0:	61 f0       	breq	.+24     	; 0x2ada <DIO_voidSetPinValue+0x16c>
    2ac2:	5a c0       	rjmp	.+180    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
    2ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ac8:	23 30       	cpi	r18, 0x03	; 3
    2aca:	31 05       	cpc	r19, r1
    2acc:	71 f1       	breq	.+92     	; 0x2b2a <DIO_voidSetPinValue+0x1bc>
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ad2:	84 30       	cpi	r24, 0x04	; 4
    2ad4:	91 05       	cpc	r25, r1
    2ad6:	e9 f1       	breq	.+122    	; 0x2b52 <DIO_voidSetPinValue+0x1e4>
    2ad8:	4f c0       	rjmp	.+158    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    2ada:	ab e3       	ldi	r26, 0x3B	; 59
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	eb e3       	ldi	r30, 0x3B	; 59
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	48 2f       	mov	r20, r24
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	02 2e       	mov	r0, r18
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DIO_voidSetPinValue+0x18a>
    2af4:	88 0f       	add	r24, r24
    2af6:	99 1f       	adc	r25, r25
    2af8:	0a 94       	dec	r0
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <DIO_voidSetPinValue+0x186>
    2afc:	84 2b       	or	r24, r20
    2afe:	8c 93       	st	X, r24
    2b00:	3b c0       	rjmp	.+118    	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    2b02:	a8 e3       	ldi	r26, 0x38	; 56
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e8 e3       	ldi	r30, 0x38	; 56
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	48 2f       	mov	r20, r24
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 2e       	mov	r0, r18
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <DIO_voidSetPinValue+0x1b2>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	0a 94       	dec	r0
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <DIO_voidSetPinValue+0x1ae>
    2b24:	84 2b       	or	r24, r20
    2b26:	8c 93       	st	X, r24
    2b28:	27 c0       	rjmp	.+78     	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    2b2a:	a5 e3       	ldi	r26, 0x35	; 53
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	e5 e3       	ldi	r30, 0x35	; 53
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	48 2f       	mov	r20, r24
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	02 2e       	mov	r0, r18
    2b42:	02 c0       	rjmp	.+4      	; 0x2b48 <DIO_voidSetPinValue+0x1da>
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	0a 94       	dec	r0
    2b4a:	e2 f7       	brpl	.-8      	; 0x2b44 <DIO_voidSetPinValue+0x1d6>
    2b4c:	84 2b       	or	r24, r20
    2b4e:	8c 93       	st	X, r24
    2b50:	13 c0       	rjmp	.+38     	; 0x2b78 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    2b52:	a2 e3       	ldi	r26, 0x32	; 50
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	e2 e3       	ldi	r30, 0x32	; 50
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	48 2f       	mov	r20, r24
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	28 2f       	mov	r18, r24
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	02 2e       	mov	r0, r18
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <DIO_voidSetPinValue+0x202>
    2b6c:	88 0f       	add	r24, r24
    2b6e:	99 1f       	adc	r25, r25
    2b70:	0a 94       	dec	r0
    2b72:	e2 f7       	brpl	.-8      	; 0x2b6c <DIO_voidSetPinValue+0x1fe>
    2b74:	84 2b       	or	r24, r20
    2b76:	8c 93       	st	X, r24
			}
		}
	}
}
    2b78:	27 96       	adiw	r28, 0x07	; 7
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <DIO_u8ReadPinValue>:
u8 DIO_u8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	00 d0       	rcall	.+0      	; 0x2b90 <DIO_u8ReadPinValue+0x6>
    2b90:	00 d0       	rcall	.+0      	; 0x2b92 <DIO_u8ReadPinValue+0x8>
    2b92:	0f 92       	push	r0
    2b94:	cd b7       	in	r28, 0x3d	; 61
    2b96:	de b7       	in	r29, 0x3e	; 62
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	88 23       	and	r24, r24
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <DIO_u8ReadPinValue+0x1a>
    2ba2:	5e c1       	rjmp	.+700    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	85 30       	cpi	r24, 0x05	; 5
    2ba8:	08 f0       	brcs	.+2      	; 0x2bac <DIO_u8ReadPinValue+0x22>
    2baa:	5a c1       	rjmp	.+692    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	88 30       	cpi	r24, 0x08	; 8
    2bb0:	08 f0       	brcs	.+2      	; 0x2bb4 <DIO_u8ReadPinValue+0x2a>
    2bb2:	56 c1       	rjmp	.+684    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	3d 83       	std	Y+5, r19	; 0x05
    2bbc:	2c 83       	std	Y+4, r18	; 0x04
    2bbe:	4c 81       	ldd	r20, Y+4	; 0x04
    2bc0:	5d 81       	ldd	r21, Y+5	; 0x05
    2bc2:	42 30       	cpi	r20, 0x02	; 2
    2bc4:	51 05       	cpc	r21, r1
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <DIO_u8ReadPinValue+0x40>
    2bc8:	65 c0       	rjmp	.+202    	; 0x2c94 <DIO_u8ReadPinValue+0x10a>
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bce:	83 30       	cpi	r24, 0x03	; 3
    2bd0:	91 05       	cpc	r25, r1
    2bd2:	34 f4       	brge	.+12     	; 0x2be0 <DIO_u8ReadPinValue+0x56>
    2bd4:	2c 81       	ldd	r18, Y+4	; 0x04
    2bd6:	3d 81       	ldd	r19, Y+5	; 0x05
    2bd8:	21 30       	cpi	r18, 0x01	; 1
    2bda:	31 05       	cpc	r19, r1
    2bdc:	71 f0       	breq	.+28     	; 0x2bfa <DIO_u8ReadPinValue+0x70>
    2bde:	40 c1       	rjmp	.+640    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
    2be0:	4c 81       	ldd	r20, Y+4	; 0x04
    2be2:	5d 81       	ldd	r21, Y+5	; 0x05
    2be4:	43 30       	cpi	r20, 0x03	; 3
    2be6:	51 05       	cpc	r21, r1
    2be8:	09 f4       	brne	.+2      	; 0x2bec <DIO_u8ReadPinValue+0x62>
    2bea:	a1 c0       	rjmp	.+322    	; 0x2d2e <DIO_u8ReadPinValue+0x1a4>
    2bec:	8c 81       	ldd	r24, Y+4	; 0x04
    2bee:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf0:	84 30       	cpi	r24, 0x04	; 4
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <DIO_u8ReadPinValue+0x6e>
    2bf6:	e8 c0       	rjmp	.+464    	; 0x2dc8 <DIO_u8ReadPinValue+0x23e>
    2bf8:	33 c1       	rjmp	.+614    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
		{
		case DIO_GroupA:
			if(get_bit(DIO_DDRA,Pin_No)==Input)
    2bfa:	ea e3       	ldi	r30, 0x3A	; 58
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	28 2f       	mov	r18, r24
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	a9 01       	movw	r20, r18
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <DIO_u8ReadPinValue+0x88>
    2c0e:	55 95       	asr	r21
    2c10:	47 95       	ror	r20
    2c12:	8a 95       	dec	r24
    2c14:	e2 f7       	brpl	.-8      	; 0x2c0e <DIO_u8ReadPinValue+0x84>
    2c16:	ca 01       	movw	r24, r20
    2c18:	81 70       	andi	r24, 0x01	; 1
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	99 f4       	brne	.+38     	; 0x2c46 <DIO_u8ReadPinValue+0xbc>
			{
				return((DIO_PINA>>Pin_No)&1);
    2c20:	e9 e3       	ldi	r30, 0x39	; 57
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	28 2f       	mov	r18, r24
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a9 01       	movw	r20, r18
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <DIO_u8ReadPinValue+0xae>
    2c34:	55 95       	asr	r21
    2c36:	47 95       	ror	r20
    2c38:	8a 95       	dec	r24
    2c3a:	e2 f7       	brpl	.-8      	; 0x2c34 <DIO_u8ReadPinValue+0xaa>
    2c3c:	ca 01       	movw	r24, r20
    2c3e:	58 2f       	mov	r21, r24
    2c40:	51 70       	andi	r21, 0x01	; 1
    2c42:	5b 83       	std	Y+3, r21	; 0x03
    2c44:	0f c1       	rjmp	.+542    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRA,Pin_No)==Output)
    2c46:	ea e3       	ldi	r30, 0x3A	; 58
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	28 2f       	mov	r18, r24
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	88 2f       	mov	r24, r24
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a9 01       	movw	r20, r18
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <DIO_u8ReadPinValue+0xd4>
    2c5a:	55 95       	asr	r21
    2c5c:	47 95       	ror	r20
    2c5e:	8a 95       	dec	r24
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <DIO_u8ReadPinValue+0xd0>
    2c62:	ca 01       	movw	r24, r20
    2c64:	81 70       	andi	r24, 0x01	; 1
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	88 23       	and	r24, r24
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <DIO_u8ReadPinValue+0xe4>
    2c6c:	f9 c0       	rjmp	.+498    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTA>>Pin_No)&1);
    2c6e:	eb e3       	ldi	r30, 0x3B	; 59
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	28 2f       	mov	r18, r24
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	a9 01       	movw	r20, r18
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <DIO_u8ReadPinValue+0xfc>
    2c82:	55 95       	asr	r21
    2c84:	47 95       	ror	r20
    2c86:	8a 95       	dec	r24
    2c88:	e2 f7       	brpl	.-8      	; 0x2c82 <DIO_u8ReadPinValue+0xf8>
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	58 2f       	mov	r21, r24
    2c8e:	51 70       	andi	r21, 0x01	; 1
    2c90:	5b 83       	std	Y+3, r21	; 0x03
    2c92:	e8 c0       	rjmp	.+464    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupB:
			if(get_bit(DIO_DDRB,Pin_No)==Input)
    2c94:	e7 e3       	ldi	r30, 0x37	; 55
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 81       	ld	r24, Z
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	88 2f       	mov	r24, r24
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	a9 01       	movw	r20, r18
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <DIO_u8ReadPinValue+0x122>
    2ca8:	55 95       	asr	r21
    2caa:	47 95       	ror	r20
    2cac:	8a 95       	dec	r24
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <DIO_u8ReadPinValue+0x11e>
    2cb0:	ca 01       	movw	r24, r20
    2cb2:	81 70       	andi	r24, 0x01	; 1
    2cb4:	90 70       	andi	r25, 0x00	; 0
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	99 f4       	brne	.+38     	; 0x2ce0 <DIO_u8ReadPinValue+0x156>
			{
				return((DIO_PINB>>Pin_No)&1);
    2cba:	e6 e3       	ldi	r30, 0x36	; 54
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	88 2f       	mov	r24, r24
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a9 01       	movw	r20, r18
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <DIO_u8ReadPinValue+0x148>
    2cce:	55 95       	asr	r21
    2cd0:	47 95       	ror	r20
    2cd2:	8a 95       	dec	r24
    2cd4:	e2 f7       	brpl	.-8      	; 0x2cce <DIO_u8ReadPinValue+0x144>
    2cd6:	ca 01       	movw	r24, r20
    2cd8:	58 2f       	mov	r21, r24
    2cda:	51 70       	andi	r21, 0x01	; 1
    2cdc:	5b 83       	std	Y+3, r21	; 0x03
    2cde:	c2 c0       	rjmp	.+388    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRB,Pin_No)==Output)
    2ce0:	e7 e3       	ldi	r30, 0x37	; 55
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	88 2f       	mov	r24, r24
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a9 01       	movw	r20, r18
    2cf2:	02 c0       	rjmp	.+4      	; 0x2cf8 <DIO_u8ReadPinValue+0x16e>
    2cf4:	55 95       	asr	r21
    2cf6:	47 95       	ror	r20
    2cf8:	8a 95       	dec	r24
    2cfa:	e2 f7       	brpl	.-8      	; 0x2cf4 <DIO_u8ReadPinValue+0x16a>
    2cfc:	ca 01       	movw	r24, r20
    2cfe:	81 70       	andi	r24, 0x01	; 1
    2d00:	90 70       	andi	r25, 0x00	; 0
    2d02:	88 23       	and	r24, r24
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <DIO_u8ReadPinValue+0x17e>
    2d06:	ac c0       	rjmp	.+344    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTB>>Pin_No)&1);
    2d08:	e8 e3       	ldi	r30, 0x38	; 56
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	28 2f       	mov	r18, r24
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	a9 01       	movw	r20, r18
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <DIO_u8ReadPinValue+0x196>
    2d1c:	55 95       	asr	r21
    2d1e:	47 95       	ror	r20
    2d20:	8a 95       	dec	r24
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <DIO_u8ReadPinValue+0x192>
    2d24:	ca 01       	movw	r24, r20
    2d26:	58 2f       	mov	r21, r24
    2d28:	51 70       	andi	r21, 0x01	; 1
    2d2a:	5b 83       	std	Y+3, r21	; 0x03
    2d2c:	9b c0       	rjmp	.+310    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupC:
			if(get_bit(DIO_DDRC,Pin_No)==Input)
    2d2e:	e4 e3       	ldi	r30, 0x34	; 52
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	a9 01       	movw	r20, r18
    2d40:	02 c0       	rjmp	.+4      	; 0x2d46 <DIO_u8ReadPinValue+0x1bc>
    2d42:	55 95       	asr	r21
    2d44:	47 95       	ror	r20
    2d46:	8a 95       	dec	r24
    2d48:	e2 f7       	brpl	.-8      	; 0x2d42 <DIO_u8ReadPinValue+0x1b8>
    2d4a:	ca 01       	movw	r24, r20
    2d4c:	81 70       	andi	r24, 0x01	; 1
    2d4e:	90 70       	andi	r25, 0x00	; 0
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	99 f4       	brne	.+38     	; 0x2d7a <DIO_u8ReadPinValue+0x1f0>
			{
				return((DIO_PINC>>Pin_No)&1);
    2d54:	e3 e3       	ldi	r30, 0x33	; 51
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a9 01       	movw	r20, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <DIO_u8ReadPinValue+0x1e2>
    2d68:	55 95       	asr	r21
    2d6a:	47 95       	ror	r20
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <DIO_u8ReadPinValue+0x1de>
    2d70:	ca 01       	movw	r24, r20
    2d72:	58 2f       	mov	r21, r24
    2d74:	51 70       	andi	r21, 0x01	; 1
    2d76:	5b 83       	std	Y+3, r21	; 0x03
    2d78:	75 c0       	rjmp	.+234    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRC,Pin_No)==Output)
    2d7a:	e4 e3       	ldi	r30, 0x34	; 52
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	8a 81       	ldd	r24, Y+2	; 0x02
    2d86:	88 2f       	mov	r24, r24
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	a9 01       	movw	r20, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <DIO_u8ReadPinValue+0x208>
    2d8e:	55 95       	asr	r21
    2d90:	47 95       	ror	r20
    2d92:	8a 95       	dec	r24
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <DIO_u8ReadPinValue+0x204>
    2d96:	ca 01       	movw	r24, r20
    2d98:	81 70       	andi	r24, 0x01	; 1
    2d9a:	90 70       	andi	r25, 0x00	; 0
    2d9c:	88 23       	and	r24, r24
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <DIO_u8ReadPinValue+0x218>
    2da0:	5f c0       	rjmp	.+190    	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTC>>Pin_No)&1);
    2da2:	e5 e3       	ldi	r30, 0x35	; 53
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	28 2f       	mov	r18, r24
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	8a 81       	ldd	r24, Y+2	; 0x02
    2dae:	88 2f       	mov	r24, r24
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a9 01       	movw	r20, r18
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <DIO_u8ReadPinValue+0x230>
    2db6:	55 95       	asr	r21
    2db8:	47 95       	ror	r20
    2dba:	8a 95       	dec	r24
    2dbc:	e2 f7       	brpl	.-8      	; 0x2db6 <DIO_u8ReadPinValue+0x22c>
    2dbe:	ca 01       	movw	r24, r20
    2dc0:	58 2f       	mov	r21, r24
    2dc2:	51 70       	andi	r21, 0x01	; 1
    2dc4:	5b 83       	std	Y+3, r21	; 0x03
    2dc6:	4e c0       	rjmp	.+156    	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupD:
			if(get_bit(DIO_DDRD,Pin_No)==Input)
    2dc8:	e1 e3       	ldi	r30, 0x31	; 49
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	28 2f       	mov	r18, r24
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	a9 01       	movw	r20, r18
    2dda:	02 c0       	rjmp	.+4      	; 0x2de0 <DIO_u8ReadPinValue+0x256>
    2ddc:	55 95       	asr	r21
    2dde:	47 95       	ror	r20
    2de0:	8a 95       	dec	r24
    2de2:	e2 f7       	brpl	.-8      	; 0x2ddc <DIO_u8ReadPinValue+0x252>
    2de4:	ca 01       	movw	r24, r20
    2de6:	81 70       	andi	r24, 0x01	; 1
    2de8:	90 70       	andi	r25, 0x00	; 0
    2dea:	00 97       	sbiw	r24, 0x00	; 0
    2dec:	99 f4       	brne	.+38     	; 0x2e14 <DIO_u8ReadPinValue+0x28a>
			{
				return((DIO_PIND>>Pin_No)&1);
    2dee:	e0 e3       	ldi	r30, 0x30	; 48
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	88 2f       	mov	r24, r24
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	a9 01       	movw	r20, r18
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <DIO_u8ReadPinValue+0x27c>
    2e02:	55 95       	asr	r21
    2e04:	47 95       	ror	r20
    2e06:	8a 95       	dec	r24
    2e08:	e2 f7       	brpl	.-8      	; 0x2e02 <DIO_u8ReadPinValue+0x278>
    2e0a:	ca 01       	movw	r24, r20
    2e0c:	58 2f       	mov	r21, r24
    2e0e:	51 70       	andi	r21, 0x01	; 1
    2e10:	5b 83       	std	Y+3, r21	; 0x03
    2e12:	28 c0       	rjmp	.+80     	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRD,Pin_No)==Output)
    2e14:	e1 e3       	ldi	r30, 0x31	; 49
    2e16:	f0 e0       	ldi	r31, 0x00	; 0
    2e18:	80 81       	ld	r24, Z
    2e1a:	28 2f       	mov	r18, r24
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a9 01       	movw	r20, r18
    2e26:	02 c0       	rjmp	.+4      	; 0x2e2c <DIO_u8ReadPinValue+0x2a2>
    2e28:	55 95       	asr	r21
    2e2a:	47 95       	ror	r20
    2e2c:	8a 95       	dec	r24
    2e2e:	e2 f7       	brpl	.-8      	; 0x2e28 <DIO_u8ReadPinValue+0x29e>
    2e30:	ca 01       	movw	r24, r20
    2e32:	81 70       	andi	r24, 0x01	; 1
    2e34:	90 70       	andi	r25, 0x00	; 0
    2e36:	88 23       	and	r24, r24
    2e38:	99 f0       	breq	.+38     	; 0x2e60 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTD>>Pin_No)&1);
    2e3a:	e2 e3       	ldi	r30, 0x32	; 50
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	88 2f       	mov	r24, r24
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a9 01       	movw	r20, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <DIO_u8ReadPinValue+0x2c8>
    2e4e:	55 95       	asr	r21
    2e50:	47 95       	ror	r20
    2e52:	8a 95       	dec	r24
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <DIO_u8ReadPinValue+0x2c4>
    2e56:	ca 01       	movw	r24, r20
    2e58:	58 2f       	mov	r21, r24
    2e5a:	51 70       	andi	r21, 0x01	; 1
    2e5c:	5b 83       	std	Y+3, r21	; 0x03
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		}
	}
	return -1;
    2e60:	8f ef       	ldi	r24, 0xFF	; 255
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e66:	0f 90       	pop	r0
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	08 95       	ret

00002e76 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    2e76:	df 93       	push	r29
    2e78:	cf 93       	push	r28
    2e7a:	00 d0       	rcall	.+0      	; 0x2e7c <DIO_voidSetPortDir+0x6>
    2e7c:	00 d0       	rcall	.+0      	; 0x2e7e <DIO_voidSetPortDir+0x8>
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	88 23       	and	r24, r24
    2e8a:	b1 f1       	breq	.+108    	; 0x2ef8 <DIO_voidSetPortDir+0x82>
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	85 30       	cpi	r24, 0x05	; 5
    2e90:	98 f5       	brcc	.+102    	; 0x2ef8 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	3c 83       	std	Y+4, r19	; 0x04
    2e9a:	2b 83       	std	Y+3, r18	; 0x03
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea0:	82 30       	cpi	r24, 0x02	; 2
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	d9 f0       	breq	.+54     	; 0x2edc <DIO_voidSetPortDir+0x66>
    2ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    2eaa:	23 30       	cpi	r18, 0x03	; 3
    2eac:	31 05       	cpc	r19, r1
    2eae:	34 f4       	brge	.+12     	; 0x2ebc <DIO_voidSetPortDir+0x46>
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	91 05       	cpc	r25, r1
    2eb8:	61 f0       	breq	.+24     	; 0x2ed2 <DIO_voidSetPortDir+0x5c>
    2eba:	1e c0       	rjmp	.+60     	; 0x2ef8 <DIO_voidSetPortDir+0x82>
    2ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    2ec0:	23 30       	cpi	r18, 0x03	; 3
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	81 f0       	breq	.+32     	; 0x2ee6 <DIO_voidSetPortDir+0x70>
    2ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eca:	84 30       	cpi	r24, 0x04	; 4
    2ecc:	91 05       	cpc	r25, r1
    2ece:	81 f0       	breq	.+32     	; 0x2ef0 <DIO_voidSetPortDir+0x7a>
    2ed0:	13 c0       	rjmp	.+38     	; 0x2ef8 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    2ed2:	ea e3       	ldi	r30, 0x3A	; 58
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed8:	80 83       	st	Z, r24
    2eda:	0e c0       	rjmp	.+28     	; 0x2ef8 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    2edc:	e7 e3       	ldi	r30, 0x37	; 55
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	80 83       	st	Z, r24
    2ee4:	09 c0       	rjmp	.+18     	; 0x2ef8 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    2ee6:	e4 e3       	ldi	r30, 0x34	; 52
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	80 83       	st	Z, r24
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    2ef0:	e1 e3       	ldi	r30, 0x31	; 49
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	80 83       	st	Z, r24
		}
	}

}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <DIO_voidSetPortValue+0x6>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <DIO_voidSetPortValue+0x8>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	88 23       	and	r24, r24
    2f1a:	b1 f1       	breq	.+108    	; 0x2f88 <DIO_voidSetPortValue+0x82>
    2f1c:	89 81       	ldd	r24, Y+1	; 0x01
    2f1e:	85 30       	cpi	r24, 0x05	; 5
    2f20:	98 f5       	brcc	.+102    	; 0x2f88 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	3c 83       	std	Y+4, r19	; 0x04
    2f2a:	2b 83       	std	Y+3, r18	; 0x03
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	82 30       	cpi	r24, 0x02	; 2
    2f32:	91 05       	cpc	r25, r1
    2f34:	d9 f0       	breq	.+54     	; 0x2f6c <DIO_voidSetPortValue+0x66>
    2f36:	2b 81       	ldd	r18, Y+3	; 0x03
    2f38:	3c 81       	ldd	r19, Y+4	; 0x04
    2f3a:	23 30       	cpi	r18, 0x03	; 3
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	34 f4       	brge	.+12     	; 0x2f4c <DIO_voidSetPortValue+0x46>
    2f40:	8b 81       	ldd	r24, Y+3	; 0x03
    2f42:	9c 81       	ldd	r25, Y+4	; 0x04
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	91 05       	cpc	r25, r1
    2f48:	61 f0       	breq	.+24     	; 0x2f62 <DIO_voidSetPortValue+0x5c>
    2f4a:	1e c0       	rjmp	.+60     	; 0x2f88 <DIO_voidSetPortValue+0x82>
    2f4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f50:	23 30       	cpi	r18, 0x03	; 3
    2f52:	31 05       	cpc	r19, r1
    2f54:	81 f0       	breq	.+32     	; 0x2f76 <DIO_voidSetPortValue+0x70>
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	84 30       	cpi	r24, 0x04	; 4
    2f5c:	91 05       	cpc	r25, r1
    2f5e:	81 f0       	breq	.+32     	; 0x2f80 <DIO_voidSetPortValue+0x7a>
    2f60:	13 c0       	rjmp	.+38     	; 0x2f88 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    2f62:	eb e3       	ldi	r30, 0x3B	; 59
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	80 83       	st	Z, r24
    2f6a:	0e c0       	rjmp	.+28     	; 0x2f88 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    2f6c:	e8 e3       	ldi	r30, 0x38	; 56
    2f6e:	f0 e0       	ldi	r31, 0x00	; 0
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	80 83       	st	Z, r24
    2f74:	09 c0       	rjmp	.+18     	; 0x2f88 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    2f76:	e5 e3       	ldi	r30, 0x35	; 53
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	80 83       	st	Z, r24
    2f7e:	04 c0       	rjmp	.+8      	; 0x2f88 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    2f80:	e2 e3       	ldi	r30, 0x32	; 50
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	8a 81       	ldd	r24, Y+2	; 0x02
    2f86:	80 83       	st	Z, r24
		}
	}

}
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <DIO_U8ReadPortValue+0x6>
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <DIO_U8ReadPortValue+0x8>
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	88 23       	and	r24, r24
    2fa8:	b9 f1       	breq	.+110    	; 0x3018 <DIO_U8ReadPortValue+0x82>
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	85 30       	cpi	r24, 0x05	; 5
    2fae:	a0 f5       	brcc	.+104    	; 0x3018 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	3c 83       	std	Y+4, r19	; 0x04
    2fb8:	2b 83       	std	Y+3, r18	; 0x03
    2fba:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	91 05       	cpc	r25, r1
    2fc2:	d9 f0       	breq	.+54     	; 0x2ffa <DIO_U8ReadPortValue+0x64>
    2fc4:	2b 81       	ldd	r18, Y+3	; 0x03
    2fc6:	3c 81       	ldd	r19, Y+4	; 0x04
    2fc8:	23 30       	cpi	r18, 0x03	; 3
    2fca:	31 05       	cpc	r19, r1
    2fcc:	34 f4       	brge	.+12     	; 0x2fda <DIO_U8ReadPortValue+0x44>
    2fce:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd2:	81 30       	cpi	r24, 0x01	; 1
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	61 f0       	breq	.+24     	; 0x2ff0 <DIO_U8ReadPortValue+0x5a>
    2fd8:	1f c0       	rjmp	.+62     	; 0x3018 <DIO_U8ReadPortValue+0x82>
    2fda:	2b 81       	ldd	r18, Y+3	; 0x03
    2fdc:	3c 81       	ldd	r19, Y+4	; 0x04
    2fde:	23 30       	cpi	r18, 0x03	; 3
    2fe0:	31 05       	cpc	r19, r1
    2fe2:	81 f0       	breq	.+32     	; 0x3004 <DIO_U8ReadPortValue+0x6e>
    2fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe8:	84 30       	cpi	r24, 0x04	; 4
    2fea:	91 05       	cpc	r25, r1
    2fec:	81 f0       	breq	.+32     	; 0x300e <DIO_U8ReadPortValue+0x78>
    2fee:	14 c0       	rjmp	.+40     	; 0x3018 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    2ff0:	e9 e3       	ldi	r30, 0x39	; 57
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	90 81       	ld	r25, Z
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	11 c0       	rjmp	.+34     	; 0x301c <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    2ffa:	e6 e3       	ldi	r30, 0x36	; 54
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	20 81       	ld	r18, Z
    3000:	2a 83       	std	Y+2, r18	; 0x02
    3002:	0c c0       	rjmp	.+24     	; 0x301c <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    3004:	e3 e3       	ldi	r30, 0x33	; 51
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	30 81       	ld	r19, Z
    300a:	3a 83       	std	Y+2, r19	; 0x02
    300c:	07 c0       	rjmp	.+14     	; 0x301c <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    300e:	e0 e3       	ldi	r30, 0x30	; 48
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	8a 83       	std	Y+2, r24	; 0x02
    3016:	02 c0       	rjmp	.+4      	; 0x301c <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    3018:	9f ef       	ldi	r25, 0xFF	; 255
    301a:	9a 83       	std	Y+2, r25	; 0x02
    301c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <DIO_voidControlPullupPin>:

void DIO_voidControlPullupPin(u8 Group_Type,u8 Pin_No , u8 PullUp_Status)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	00 d0       	rcall	.+0      	; 0x3032 <DIO_voidControlPullupPin+0x6>
    3032:	0f 92       	push	r0
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	6a 83       	std	Y+2, r22	; 0x02
    303c:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPinDir(Group_Type,Pin_No,Input);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	6a 81       	ldd	r22, Y+2	; 0x02
    3042:	40 e0       	ldi	r20, 0x00	; 0
    3044:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(Group_Type,Pin_No,PullUp_Status);
    3048:	89 81       	ldd	r24, Y+1	; 0x01
    304a:	6a 81       	ldd	r22, Y+2	; 0x02
    304c:	4b 81       	ldd	r20, Y+3	; 0x03
    304e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    3052:	0f 90       	pop	r0
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <ADC_voidInitPolling>:
 *      Author: salma
 */
#include "ADC_Interface.h"
static u16 InterruptData ;  //static??
void ADC_voidInitPolling(ADCInformation ADCInfo)
{
    305e:	df 93       	push	r29
    3060:	cf 93       	push	r28
    3062:	00 d0       	rcall	.+0      	; 0x3064 <ADC_voidInitPolling+0x6>
    3064:	0f 92       	push	r0
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	69 83       	std	Y+1, r22	; 0x01
    306c:	7a 83       	std	Y+2, r23	; 0x02
    306e:	8b 83       	std	Y+3, r24	; 0x03
	/*Voltage Reference Selections*/
#if ReferenceSelect==ADCOff
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    3070:	a7 e2       	ldi	r26, 0x27	; 39
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	e7 e2       	ldi	r30, 0x27	; 39
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	8f 77       	andi	r24, 0x7F	; 127
    307c:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    307e:	a7 e2       	ldi	r26, 0x27	; 39
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	e7 e2       	ldi	r30, 0x27	; 39
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	80 81       	ld	r24, Z
    3088:	80 64       	ori	r24, 0x40	; 64
    308a:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    308c:	a7 e2       	ldi	r26, 0x27	; 39
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	e7 e2       	ldi	r30, 0x27	; 39
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7d       	andi	r24, 0xDF	; 223
    3098:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    309a:	a6 e2       	ldi	r26, 0x26	; 38
    309c:	b0 e0       	ldi	r27, 0x00	; 0
    309e:	e6 e2       	ldi	r30, 0x26	; 38
    30a0:	f0 e0       	ldi	r31, 0x00	; 0
    30a2:	80 81       	ld	r24, Z
    30a4:	80 68       	ori	r24, 0x80	; 128
    30a6:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	81 30       	cpi	r24, 0x01	; 1
    30ac:	d1 f4       	brne	.+52     	; 0x30e2 <ADC_voidInitPolling+0x84>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    30ae:	a6 e2       	ldi	r26, 0x26	; 38
    30b0:	b0 e0       	ldi	r27, 0x00	; 0
    30b2:	e6 e2       	ldi	r30, 0x26	; 38
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	80 62       	ori	r24, 0x20	; 32
    30ba:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	80 7e       	andi	r24, 0xE0	; 224
    30c0:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    30c2:	a0 e5       	ldi	r26, 0x50	; 80
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e0 e5       	ldi	r30, 0x50	; 80
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	8f 71       	andi	r24, 0x1F	; 31
    30ce:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    30d0:	a0 e5       	ldi	r26, 0x50	; 80
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	e0 e5       	ldi	r30, 0x50	; 80
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	90 81       	ld	r25, Z
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	89 2b       	or	r24, r25
    30de:	8c 93       	st	X, r24
    30e0:	0a c0       	rjmp	.+20     	; 0x30f6 <ADC_voidInitPolling+0x98>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    30e2:	89 81       	ldd	r24, Y+1	; 0x01
    30e4:	88 23       	and	r24, r24
    30e6:	39 f4       	brne	.+14     	; 0x30f6 <ADC_voidInitPolling+0x98>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    30e8:	a6 e2       	ldi	r26, 0x26	; 38
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e6 e2       	ldi	r30, 0x26	; 38
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	8f 7d       	andi	r24, 0xDF	; 223
    30f4:	8c 93       	st	X, r24
	}


	/*disable interrupt*/
	clear_bit(ADC_SRA,ADCSRA_ADIE);
    30f6:	a6 e2       	ldi	r26, 0x26	; 38
    30f8:	b0 e0       	ldi	r27, 0x00	; 0
    30fa:	e6 e2       	ldi	r30, 0x26	; 38
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	87 7f       	andi	r24, 0xF7	; 247
    3102:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	87 70       	andi	r24, 0x07	; 7
    3108:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    310a:	a6 e2       	ldi	r26, 0x26	; 38
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e6 e2       	ldi	r30, 0x26	; 38
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	88 7f       	andi	r24, 0xF8	; 248
    3116:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    3118:	a6 e2       	ldi	r26, 0x26	; 38
    311a:	b0 e0       	ldi	r27, 0x00	; 0
    311c:	e6 e2       	ldi	r30, 0x26	; 38
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	90 81       	ld	r25, Z
    3122:	8b 81       	ldd	r24, Y+3	; 0x03
    3124:	89 2b       	or	r24, r25
    3126:	8c 93       	st	X, r24

}
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	0f 90       	pop	r0
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <ADC_voidReadResultPolling>:


void ADC_voidReadResultPolling(u8 channel, u16 *Result)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	00 d0       	rcall	.+0      	; 0x313a <ADC_voidReadResultPolling+0x6>
    313a:	0f 92       	push	r0
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	89 83       	std	Y+1, r24	; 0x01
    3142:	7b 83       	std	Y+3, r23	; 0x03
    3144:	6a 83       	std	Y+2, r22	; 0x02
	channel&=0x1F;
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	8f 71       	andi	r24, 0x1F	; 31
    314a:	89 83       	std	Y+1, r24	; 0x01
	ADC_MUX&=0xE0;
    314c:	a7 e2       	ldi	r26, 0x27	; 39
    314e:	b0 e0       	ldi	r27, 0x00	; 0
    3150:	e7 e2       	ldi	r30, 0x27	; 39
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	80 7e       	andi	r24, 0xE0	; 224
    3158:	8c 93       	st	X, r24
	ADC_MUX|=channel; //choose the channel
    315a:	a7 e2       	ldi	r26, 0x27	; 39
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	e7 e2       	ldi	r30, 0x27	; 39
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	90 81       	ld	r25, Z
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	89 2b       	or	r24, r25
    3168:	8c 93       	st	X, r24
	set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    316a:	a6 e2       	ldi	r26, 0x26	; 38
    316c:	b0 e0       	ldi	r27, 0x00	; 0
    316e:	e6 e2       	ldi	r30, 0x26	; 38
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	80 64       	ori	r24, 0x40	; 64
    3176:	8c 93       	st	X, r24
	while(get_bit(ADC_SRA,ADCSRA_ADIF)!=ON);
    3178:	e6 e2       	ldi	r30, 0x26	; 38
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	82 95       	swap	r24
    3180:	8f 70       	andi	r24, 0x0F	; 15
    3182:	88 2f       	mov	r24, r24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	81 70       	andi	r24, 0x01	; 1
    3188:	90 70       	andi	r25, 0x00	; 0
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	a9 f3       	breq	.-22     	; 0x3178 <ADC_voidReadResultPolling+0x44>
	*Result=ADC_DATA;
    318e:	e4 e2       	ldi	r30, 0x24	; 36
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	91 81       	ldd	r25, Z+1	; 0x01
    3196:	ea 81       	ldd	r30, Y+2	; 0x02
    3198:	fb 81       	ldd	r31, Y+3	; 0x03
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
	set_bit(ADC_SRA,ADCSRA_ADIF);
    319e:	a6 e2       	ldi	r26, 0x26	; 38
    31a0:	b0 e0       	ldi	r27, 0x00	; 0
    31a2:	e6 e2       	ldi	r30, 0x26	; 38
    31a4:	f0 e0       	ldi	r31, 0x00	; 0
    31a6:	80 81       	ld	r24, Z
    31a8:	80 61       	ori	r24, 0x10	; 16
    31aa:	8c 93       	st	X, r24
}
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	08 95       	ret

000031b8 <ADC_voidInitInterrupt>:


void ADC_voidInitInterrupt(ADCInformation ADCInfo)
{
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	00 d0       	rcall	.+0      	; 0x31be <ADC_voidInitInterrupt+0x6>
    31be:	0f 92       	push	r0
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	69 83       	std	Y+1, r22	; 0x01
    31c6:	7a 83       	std	Y+2, r23	; 0x02
    31c8:	8b 83       	std	Y+3, r24	; 0x03
	ADC_MUX=0xFF; //initially to disable the channels until needed
    31ca:	e7 e2       	ldi	r30, 0x27	; 39
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	8f ef       	ldi	r24, 0xFF	; 255
    31d0:	80 83       	st	Z, r24
	/*Voltage Reference Selections*/
#if ReferenceSelect==Off
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    31d2:	a7 e2       	ldi	r26, 0x27	; 39
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	e7 e2       	ldi	r30, 0x27	; 39
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	8f 77       	andi	r24, 0x7F	; 127
    31de:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    31e0:	a7 e2       	ldi	r26, 0x27	; 39
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e7 e2       	ldi	r30, 0x27	; 39
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	80 64       	ori	r24, 0x40	; 64
    31ec:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    31ee:	a7 e2       	ldi	r26, 0x27	; 39
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e7 e2       	ldi	r30, 0x27	; 39
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	8f 7d       	andi	r24, 0xDF	; 223
    31fa:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    31fc:	a6 e2       	ldi	r26, 0x26	; 38
    31fe:	b0 e0       	ldi	r27, 0x00	; 0
    3200:	e6 e2       	ldi	r30, 0x26	; 38
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	80 81       	ld	r24, Z
    3206:	80 68       	ori	r24, 0x80	; 128
    3208:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	d1 f4       	brne	.+52     	; 0x3244 <ADC_voidInitInterrupt+0x8c>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    3210:	a6 e2       	ldi	r26, 0x26	; 38
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e6 e2       	ldi	r30, 0x26	; 38
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	80 62       	ori	r24, 0x20	; 32
    321c:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	80 7e       	andi	r24, 0xE0	; 224
    3222:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    3224:	a0 e5       	ldi	r26, 0x50	; 80
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e0 e5       	ldi	r30, 0x50	; 80
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	8f 71       	andi	r24, 0x1F	; 31
    3230:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    3232:	a0 e5       	ldi	r26, 0x50	; 80
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e0 e5       	ldi	r30, 0x50	; 80
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	90 81       	ld	r25, Z
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	89 2b       	or	r24, r25
    3240:	8c 93       	st	X, r24
    3242:	0a c0       	rjmp	.+20     	; 0x3258 <ADC_voidInitInterrupt+0xa0>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    3244:	89 81       	ldd	r24, Y+1	; 0x01
    3246:	88 23       	and	r24, r24
    3248:	39 f4       	brne	.+14     	; 0x3258 <ADC_voidInitInterrupt+0xa0>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    324a:	a6 e2       	ldi	r26, 0x26	; 38
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	e6 e2       	ldi	r30, 0x26	; 38
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	8f 7d       	andi	r24, 0xDF	; 223
    3256:	8c 93       	st	X, r24
	}


	/*enable interrupt*/
	set_bit(ADC_SRA,ADCSRA_ADIE);
    3258:	a6 e2       	ldi	r26, 0x26	; 38
    325a:	b0 e0       	ldi	r27, 0x00	; 0
    325c:	e6 e2       	ldi	r30, 0x26	; 38
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	80 81       	ld	r24, Z
    3262:	88 60       	ori	r24, 0x08	; 8
    3264:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	87 70       	andi	r24, 0x07	; 7
    326a:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    326c:	a6 e2       	ldi	r26, 0x26	; 38
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e6 e2       	ldi	r30, 0x26	; 38
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	88 7f       	andi	r24, 0xF8	; 248
    3278:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    327a:	a6 e2       	ldi	r26, 0x26	; 38
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	e6 e2       	ldi	r30, 0x26	; 38
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	90 81       	ld	r25, Z
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	89 2b       	or	r24, r25
    3288:	8c 93       	st	X, r24
}
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <ADC_voidReadResultInterrupt>:


void ADC_voidReadResultInterrupt(u8 channel)
{
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	0f 92       	push	r0
    329c:	cd b7       	in	r28, 0x3d	; 61
    329e:	de b7       	in	r29, 0x3e	; 62
    32a0:	89 83       	std	Y+1, r24	; 0x01
	channel&=0x1F;
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	8f 71       	andi	r24, 0x1F	; 31
    32a6:	89 83       	std	Y+1, r24	; 0x01
		ADC_MUX&=0xE0;
    32a8:	a7 e2       	ldi	r26, 0x27	; 39
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e7 e2       	ldi	r30, 0x27	; 39
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	80 7e       	andi	r24, 0xE0	; 224
    32b4:	8c 93       	st	X, r24
		ADC_MUX|=channel; //choose the channel
    32b6:	a7 e2       	ldi	r26, 0x27	; 39
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e7 e2       	ldi	r30, 0x27	; 39
    32bc:	f0 e0       	ldi	r31, 0x00	; 0
    32be:	90 81       	ld	r25, Z
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	89 2b       	or	r24, r25
    32c4:	8c 93       	st	X, r24
		set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    32c6:	a6 e2       	ldi	r26, 0x26	; 38
    32c8:	b0 e0       	ldi	r27, 0x00	; 0
    32ca:	e6 e2       	ldi	r30, 0x26	; 38
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	80 64       	ori	r24, 0x40	; 64
    32d2:	8c 93       	st	X, r24
}
    32d4:	0f 90       	pop	r0
    32d6:	cf 91       	pop	r28
    32d8:	df 91       	pop	r29
    32da:	08 95       	ret

000032dc <__vector_16>:

void __vector_16()
{
    32dc:	1f 92       	push	r1
    32de:	0f 92       	push	r0
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	0f 92       	push	r0
    32e4:	11 24       	eor	r1, r1
    32e6:	8f 93       	push	r24
    32e8:	9f 93       	push	r25
    32ea:	ef 93       	push	r30
    32ec:	ff 93       	push	r31
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
	InterruptData=ADC_DATA;
    32f6:	e4 e2       	ldi	r30, 0x24	; 36
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	91 81       	ldd	r25, Z+1	; 0x01
    32fe:	90 93 9f 01 	sts	0x019F, r25
    3302:	80 93 9e 01 	sts	0x019E, r24
}
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	ff 91       	pop	r31
    330c:	ef 91       	pop	r30
    330e:	9f 91       	pop	r25
    3310:	8f 91       	pop	r24
    3312:	0f 90       	pop	r0
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	0f 90       	pop	r0
    3318:	1f 90       	pop	r1
    331a:	18 95       	reti

0000331c <TouchSensor_voidInit>:
 */

#include "TouchSensor_Interface.h"

void TouchSensor_voidInit (u8 Group, u8 pin)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	00 d0       	rcall	.+0      	; 0x3322 <TouchSensor_voidInit+0x6>
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	89 83       	std	Y+1, r24	; 0x01
    3328:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,input);
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	6a 81       	ldd	r22, Y+2	; 0x02
    332e:	40 e0       	ldi	r20, 0x00	; 0
    3330:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <TouchSensor_u8GetValue>:

u8 TouchSensor_u8GetValue (u8 Group, u8 pin)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <TouchSensor_u8GetValue+0x6>
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	8a 83       	std	Y+2, r24	; 0x02
    334c:	6b 83       	std	Y+3, r22	; 0x03
	u8 TouchSensorState;
	TouchSensorState=DIO_u8ReadPinValue(Group,pin);
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	6b 81       	ldd	r22, Y+3	; 0x03
    3352:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
    3356:	89 83       	std	Y+1, r24	; 0x01
	return TouchSensorState;
    3358:	89 81       	ldd	r24, Y+1	; 0x01
}
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <SWITCH_voidInit>:
 *      Author: salma
 */

#include "Switch_Interface.h"
void SWITCH_voidInit (u8 Group, u8 pin)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	00 d0       	rcall	.+0      	; 0x336c <SWITCH_voidInit+0x6>
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,Input);
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	6a 81       	ldd	r22, Y+2	; 0x02
    3378:	40 e0       	ldi	r20, 0x00	; 0
    337a:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidControlPullupPin(Group,pin,High);
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	6a 81       	ldd	r22, Y+2	; 0x02
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 16 18 	call	0x302c	; 0x302c <DIO_voidControlPullupPin>
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <SWITCH_u8GetValue>:

u8 SWITCH_u8GetValue (u8 Group, u8 pin)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <SWITCH_u8GetValue+0x6>
    3398:	cd b7       	in	r28, 0x3d	; 61
    339a:	de b7       	in	r29, 0x3e	; 62
    339c:	89 83       	std	Y+1, r24	; 0x01
    339e:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPinValue(Group,pin);
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	6a 81       	ldd	r22, Y+2	; 0x02
    33a4:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
}
    33a8:	0f 90       	pop	r0
    33aa:	0f 90       	pop	r0
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <STEPPER_voidInit>:
 */
#include "Stepper_Interface.h"
#include <util/delay.h>

void STEPPER_voidInit ()
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(StepperGroup,StepperB1,Output);
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	41 e0       	ldi	r20, 0x01	; 1
    33c0:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB2,Output);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	61 e0       	ldi	r22, 0x01	; 1
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB3,Output);
    33ce:	81 e0       	ldi	r24, 0x01	; 1
    33d0:	62 e0       	ldi	r22, 0x02	; 2
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB4,Output);
    33d8:	81 e0       	ldi	r24, 0x01	; 1
    33da:	63 e0       	ldi	r22, 0x03	; 3
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <STEPPER_voidCW>:

void STEPPER_voidCW(u16 angle)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	c2 54       	subi	r28, 0x42	; 66
    33f2:	d0 40       	sbci	r29, 0x00	; 0
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	fe 01       	movw	r30, r28
    3400:	ef 5b       	subi	r30, 0xBF	; 191
    3402:	ff 4f       	sbci	r31, 0xFF	; 255
    3404:	91 83       	std	Z+1, r25	; 0x01
    3406:	80 83       	st	Z, r24
	u32 NOSteps =(angle/FullStepAngle);
    3408:	fe 01       	movw	r30, r28
    340a:	ef 5b       	subi	r30, 0xBF	; 191
    340c:	ff 4f       	sbci	r31, 0xFF	; 255
    340e:	80 81       	ld	r24, Z
    3410:	91 81       	ldd	r25, Z+1	; 0x01
    3412:	cc 01       	movw	r24, r24
    3414:	a0 e0       	ldi	r26, 0x00	; 0
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	bc 01       	movw	r22, r24
    341a:	cd 01       	movw	r24, r26
    341c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	2c eb       	ldi	r18, 0xBC	; 188
    342a:	3c ec       	ldi	r19, 0xCC	; 204
    342c:	40 e3       	ldi	r20, 0x30	; 48
    342e:	5e e3       	ldi	r21, 0x3E	; 62
    3430:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3434:	dc 01       	movw	r26, r24
    3436:	cb 01       	movw	r24, r22
    3438:	bc 01       	movw	r22, r24
    343a:	cd 01       	movw	r24, r26
    343c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	fe 01       	movw	r30, r28
    3446:	fd 96       	adiw	r30, 0x3d	; 61
    3448:	80 83       	st	Z, r24
    344a:	91 83       	std	Z+1, r25	; 0x01
    344c:	a2 83       	std	Z+2, r26	; 0x02
    344e:	b3 83       	std	Z+3, r27	; 0x03
	u16 NOIterations=NOSteps/FUllIteration;
    3450:	fe 01       	movw	r30, r28
    3452:	fd 96       	adiw	r30, 0x3d	; 61
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	a2 81       	ldd	r26, Z+2	; 0x02
    345a:	b3 81       	ldd	r27, Z+3	; 0x03
    345c:	b6 95       	lsr	r27
    345e:	a7 95       	ror	r26
    3460:	97 95       	ror	r25
    3462:	87 95       	ror	r24
    3464:	b6 95       	lsr	r27
    3466:	a7 95       	ror	r26
    3468:	97 95       	ror	r25
    346a:	87 95       	ror	r24
    346c:	9c af       	std	Y+60, r25	; 0x3c
    346e:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    3470:	1a ae       	std	Y+58, r1	; 0x3a
    3472:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3474:	1a ae       	std	Y+58, r1	; 0x3a
    3476:	19 ae       	std	Y+57, r1	; 0x39
    3478:	1d c2       	rjmp	.+1082   	; 0x38b4 <STEPPER_voidCW+0x4cc>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    347a:	81 e0       	ldi	r24, 0x01	; 1
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	40 e0       	ldi	r20, 0x00	; 0
    3480:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	61 e0       	ldi	r22, 0x01	; 1
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	62 e0       	ldi	r22, 0x02	; 2
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	63 e0       	ldi	r22, 0x03	; 3
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	a0 e2       	ldi	r26, 0x20	; 32
    34a8:	b1 e4       	ldi	r27, 0x41	; 65
    34aa:	8d ab       	std	Y+53, r24	; 0x35
    34ac:	9e ab       	std	Y+54, r25	; 0x36
    34ae:	af ab       	std	Y+55, r26	; 0x37
    34b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b2:	6d a9       	ldd	r22, Y+53	; 0x35
    34b4:	7e a9       	ldd	r23, Y+54	; 0x36
    34b6:	8f a9       	ldd	r24, Y+55	; 0x37
    34b8:	98 ad       	ldd	r25, Y+56	; 0x38
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a ef       	ldi	r20, 0xFA	; 250
    34c0:	54 e4       	ldi	r21, 0x44	; 68
    34c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	89 ab       	std	Y+49, r24	; 0x31
    34cc:	9a ab       	std	Y+50, r25	; 0x32
    34ce:	ab ab       	std	Y+51, r26	; 0x33
    34d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    34d2:	69 a9       	ldd	r22, Y+49	; 0x31
    34d4:	7a a9       	ldd	r23, Y+50	; 0x32
    34d6:	8b a9       	ldd	r24, Y+51	; 0x33
    34d8:	9c a9       	ldd	r25, Y+52	; 0x34
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <STEPPER_voidCW+0x10c>
		__ticks = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	98 ab       	std	Y+48, r25	; 0x30
    34f0:	8f a7       	std	Y+47, r24	; 0x2f
    34f2:	3f c0       	rjmp	.+126    	; 0x3572 <STEPPER_voidCW+0x18a>
	else if (__tmp > 65535)
    34f4:	69 a9       	ldd	r22, Y+49	; 0x31
    34f6:	7a a9       	ldd	r23, Y+50	; 0x32
    34f8:	8b a9       	ldd	r24, Y+51	; 0x33
    34fa:	9c a9       	ldd	r25, Y+52	; 0x34
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	4c f5       	brge	.+82     	; 0x355e <STEPPER_voidCW+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	6d a9       	ldd	r22, Y+53	; 0x35
    350e:	7e a9       	ldd	r23, Y+54	; 0x36
    3510:	8f a9       	ldd	r24, Y+55	; 0x37
    3512:	98 ad       	ldd	r25, Y+56	; 0x38
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e2       	ldi	r20, 0x20	; 32
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	98 ab       	std	Y+48, r25	; 0x30
    3532:	8f a7       	std	Y+47, r24	; 0x2f
    3534:	0f c0       	rjmp	.+30     	; 0x3554 <STEPPER_voidCW+0x16c>
    3536:	88 ec       	ldi	r24, 0xC8	; 200
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	9e a7       	std	Y+46, r25	; 0x2e
    353c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    353e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3540:	9e a5       	ldd	r25, Y+46	; 0x2e
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <STEPPER_voidCW+0x15a>
    3546:	9e a7       	std	Y+46, r25	; 0x2e
    3548:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	8f a5       	ldd	r24, Y+47	; 0x2f
    354c:	98 a9       	ldd	r25, Y+48	; 0x30
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	98 ab       	std	Y+48, r25	; 0x30
    3552:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	8f a5       	ldd	r24, Y+47	; 0x2f
    3556:	98 a9       	ldd	r25, Y+48	; 0x30
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f7       	brne	.-38     	; 0x3536 <STEPPER_voidCW+0x14e>
    355c:	14 c0       	rjmp	.+40     	; 0x3586 <STEPPER_voidCW+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	69 a9       	ldd	r22, Y+49	; 0x31
    3560:	7a a9       	ldd	r23, Y+50	; 0x32
    3562:	8b a9       	ldd	r24, Y+51	; 0x33
    3564:	9c a9       	ldd	r25, Y+52	; 0x34
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	98 ab       	std	Y+48, r25	; 0x30
    3570:	8f a7       	std	Y+47, r24	; 0x2f
    3572:	8f a5       	ldd	r24, Y+47	; 0x2f
    3574:	98 a9       	ldd	r25, Y+48	; 0x30
    3576:	9c a7       	std	Y+44, r25	; 0x2c
    3578:	8b a7       	std	Y+43, r24	; 0x2b
    357a:	8b a5       	ldd	r24, Y+43	; 0x2b
    357c:	9c a5       	ldd	r25, Y+44	; 0x2c
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <STEPPER_voidCW+0x196>
    3582:	9c a7       	std	Y+44, r25	; 0x2c
    3584:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	60 e0       	ldi	r22, 0x00	; 0
    358a:	41 e0       	ldi	r20, 0x01	; 1
    358c:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	40 e0       	ldi	r20, 0x00	; 0
    3596:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	62 e0       	ldi	r22, 0x02	; 2
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	63 e0       	ldi	r22, 0x03	; 3
    35a8:	41 e0       	ldi	r20, 0x01	; 1
    35aa:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a0 e2       	ldi	r26, 0x20	; 32
    35b4:	b1 e4       	ldi	r27, 0x41	; 65
    35b6:	8f a3       	std	Y+39, r24	; 0x27
    35b8:	98 a7       	std	Y+40, r25	; 0x28
    35ba:	a9 a7       	std	Y+41, r26	; 0x29
    35bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35be:	6f a1       	ldd	r22, Y+39	; 0x27
    35c0:	78 a5       	ldd	r23, Y+40	; 0x28
    35c2:	89 a5       	ldd	r24, Y+41	; 0x29
    35c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4a ef       	ldi	r20, 0xFA	; 250
    35cc:	54 e4       	ldi	r21, 0x44	; 68
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	8b a3       	std	Y+35, r24	; 0x23
    35d8:	9c a3       	std	Y+36, r25	; 0x24
    35da:	ad a3       	std	Y+37, r26	; 0x25
    35dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    35de:	6b a1       	ldd	r22, Y+35	; 0x23
    35e0:	7c a1       	ldd	r23, Y+36	; 0x24
    35e2:	8d a1       	ldd	r24, Y+37	; 0x25
    35e4:	9e a1       	ldd	r25, Y+38	; 0x26
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e8       	ldi	r20, 0x80	; 128
    35ec:	5f e3       	ldi	r21, 0x3F	; 63
    35ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f2:	88 23       	and	r24, r24
    35f4:	2c f4       	brge	.+10     	; 0x3600 <STEPPER_voidCW+0x218>
		__ticks = 1;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9a a3       	std	Y+34, r25	; 0x22
    35fc:	89 a3       	std	Y+33, r24	; 0x21
    35fe:	3f c0       	rjmp	.+126    	; 0x367e <STEPPER_voidCW+0x296>
	else if (__tmp > 65535)
    3600:	6b a1       	ldd	r22, Y+35	; 0x23
    3602:	7c a1       	ldd	r23, Y+36	; 0x24
    3604:	8d a1       	ldd	r24, Y+37	; 0x25
    3606:	9e a1       	ldd	r25, Y+38	; 0x26
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	3f ef       	ldi	r19, 0xFF	; 255
    360c:	4f e7       	ldi	r20, 0x7F	; 127
    360e:	57 e4       	ldi	r21, 0x47	; 71
    3610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3614:	18 16       	cp	r1, r24
    3616:	4c f5       	brge	.+82     	; 0x366a <STEPPER_voidCW+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3618:	6f a1       	ldd	r22, Y+39	; 0x27
    361a:	78 a5       	ldd	r23, Y+40	; 0x28
    361c:	89 a5       	ldd	r24, Y+41	; 0x29
    361e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e2       	ldi	r20, 0x20	; 32
    3626:	51 e4       	ldi	r21, 0x41	; 65
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9a a3       	std	Y+34, r25	; 0x22
    363e:	89 a3       	std	Y+33, r24	; 0x21
    3640:	0f c0       	rjmp	.+30     	; 0x3660 <STEPPER_voidCW+0x278>
    3642:	88 ec       	ldi	r24, 0xC8	; 200
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	98 a3       	std	Y+32, r25	; 0x20
    3648:	8f 8f       	std	Y+31, r24	; 0x1f
    364a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    364c:	98 a1       	ldd	r25, Y+32	; 0x20
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <STEPPER_voidCW+0x266>
    3652:	98 a3       	std	Y+32, r25	; 0x20
    3654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3656:	89 a1       	ldd	r24, Y+33	; 0x21
    3658:	9a a1       	ldd	r25, Y+34	; 0x22
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	9a a3       	std	Y+34, r25	; 0x22
    365e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3660:	89 a1       	ldd	r24, Y+33	; 0x21
    3662:	9a a1       	ldd	r25, Y+34	; 0x22
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	69 f7       	brne	.-38     	; 0x3642 <STEPPER_voidCW+0x25a>
    3668:	14 c0       	rjmp	.+40     	; 0x3692 <STEPPER_voidCW+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366a:	6b a1       	ldd	r22, Y+35	; 0x23
    366c:	7c a1       	ldd	r23, Y+36	; 0x24
    366e:	8d a1       	ldd	r24, Y+37	; 0x25
    3670:	9e a1       	ldd	r25, Y+38	; 0x26
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9a a3       	std	Y+34, r25	; 0x22
    367c:	89 a3       	std	Y+33, r24	; 0x21
    367e:	89 a1       	ldd	r24, Y+33	; 0x21
    3680:	9a a1       	ldd	r25, Y+34	; 0x22
    3682:	9e 8f       	std	Y+30, r25	; 0x1e
    3684:	8d 8f       	std	Y+29, r24	; 0x1d
    3686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <STEPPER_voidCW+0x2a2>
    368e:	9e 8f       	std	Y+30, r25	; 0x1e
    3690:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	41 e0       	ldi	r20, 0x01	; 1
    3698:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    369c:	81 e0       	ldi	r24, 0x01	; 1
    369e:	61 e0       	ldi	r22, 0x01	; 1
    36a0:	41 e0       	ldi	r20, 0x01	; 1
    36a2:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	62 e0       	ldi	r22, 0x02	; 2
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	63 e0       	ldi	r22, 0x03	; 3
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	a0 e2       	ldi	r26, 0x20	; 32
    36c0:	b1 e4       	ldi	r27, 0x41	; 65
    36c2:	89 8f       	std	Y+25, r24	; 0x19
    36c4:	9a 8f       	std	Y+26, r25	; 0x1a
    36c6:	ab 8f       	std	Y+27, r26	; 0x1b
    36c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36ca:	69 8d       	ldd	r22, Y+25	; 0x19
    36cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	4a ef       	ldi	r20, 0xFA	; 250
    36d8:	54 e4       	ldi	r21, 0x44	; 68
    36da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	8d 8b       	std	Y+21, r24	; 0x15
    36e4:	9e 8b       	std	Y+22, r25	; 0x16
    36e6:	af 8b       	std	Y+23, r26	; 0x17
    36e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    36ea:	6d 89       	ldd	r22, Y+21	; 0x15
    36ec:	7e 89       	ldd	r23, Y+22	; 0x16
    36ee:	8f 89       	ldd	r24, Y+23	; 0x17
    36f0:	98 8d       	ldd	r25, Y+24	; 0x18
    36f2:	20 e0       	ldi	r18, 0x00	; 0
    36f4:	30 e0       	ldi	r19, 0x00	; 0
    36f6:	40 e8       	ldi	r20, 0x80	; 128
    36f8:	5f e3       	ldi	r21, 0x3F	; 63
    36fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36fe:	88 23       	and	r24, r24
    3700:	2c f4       	brge	.+10     	; 0x370c <STEPPER_voidCW+0x324>
		__ticks = 1;
    3702:	81 e0       	ldi	r24, 0x01	; 1
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	9c 8b       	std	Y+20, r25	; 0x14
    3708:	8b 8b       	std	Y+19, r24	; 0x13
    370a:	3f c0       	rjmp	.+126    	; 0x378a <STEPPER_voidCW+0x3a2>
	else if (__tmp > 65535)
    370c:	6d 89       	ldd	r22, Y+21	; 0x15
    370e:	7e 89       	ldd	r23, Y+22	; 0x16
    3710:	8f 89       	ldd	r24, Y+23	; 0x17
    3712:	98 8d       	ldd	r25, Y+24	; 0x18
    3714:	20 e0       	ldi	r18, 0x00	; 0
    3716:	3f ef       	ldi	r19, 0xFF	; 255
    3718:	4f e7       	ldi	r20, 0x7F	; 127
    371a:	57 e4       	ldi	r21, 0x47	; 71
    371c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3720:	18 16       	cp	r1, r24
    3722:	4c f5       	brge	.+82     	; 0x3776 <STEPPER_voidCW+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3724:	69 8d       	ldd	r22, Y+25	; 0x19
    3726:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3728:	8b 8d       	ldd	r24, Y+27	; 0x1b
    372a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	40 e2       	ldi	r20, 0x20	; 32
    3732:	51 e4       	ldi	r21, 0x41	; 65
    3734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	bc 01       	movw	r22, r24
    373e:	cd 01       	movw	r24, r26
    3740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9c 8b       	std	Y+20, r25	; 0x14
    374a:	8b 8b       	std	Y+19, r24	; 0x13
    374c:	0f c0       	rjmp	.+30     	; 0x376c <STEPPER_voidCW+0x384>
    374e:	88 ec       	ldi	r24, 0xC8	; 200
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	9a 8b       	std	Y+18, r25	; 0x12
    3754:	89 8b       	std	Y+17, r24	; 0x11
    3756:	89 89       	ldd	r24, Y+17	; 0x11
    3758:	9a 89       	ldd	r25, Y+18	; 0x12
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <STEPPER_voidCW+0x372>
    375e:	9a 8b       	std	Y+18, r25	; 0x12
    3760:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3762:	8b 89       	ldd	r24, Y+19	; 0x13
    3764:	9c 89       	ldd	r25, Y+20	; 0x14
    3766:	01 97       	sbiw	r24, 0x01	; 1
    3768:	9c 8b       	std	Y+20, r25	; 0x14
    376a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376c:	8b 89       	ldd	r24, Y+19	; 0x13
    376e:	9c 89       	ldd	r25, Y+20	; 0x14
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	69 f7       	brne	.-38     	; 0x374e <STEPPER_voidCW+0x366>
    3774:	14 c0       	rjmp	.+40     	; 0x379e <STEPPER_voidCW+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3776:	6d 89       	ldd	r22, Y+21	; 0x15
    3778:	7e 89       	ldd	r23, Y+22	; 0x16
    377a:	8f 89       	ldd	r24, Y+23	; 0x17
    377c:	98 8d       	ldd	r25, Y+24	; 0x18
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9c 8b       	std	Y+20, r25	; 0x14
    3788:	8b 8b       	std	Y+19, r24	; 0x13
    378a:	8b 89       	ldd	r24, Y+19	; 0x13
    378c:	9c 89       	ldd	r25, Y+20	; 0x14
    378e:	98 8b       	std	Y+16, r25	; 0x10
    3790:	8f 87       	std	Y+15, r24	; 0x0f
    3792:	8f 85       	ldd	r24, Y+15	; 0x0f
    3794:	98 89       	ldd	r25, Y+16	; 0x10
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	f1 f7       	brne	.-4      	; 0x3796 <STEPPER_voidCW+0x3ae>
    379a:	98 8b       	std	Y+16, r25	; 0x10
    379c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	41 e0       	ldi	r20, 0x01	; 1
    37a4:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	61 e0       	ldi	r22, 0x01	; 1
    37ac:	41 e0       	ldi	r20, 0x01	; 1
    37ae:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	62 e0       	ldi	r22, 0x02	; 2
    37b6:	41 e0       	ldi	r20, 0x01	; 1
    37b8:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	63 e0       	ldi	r22, 0x03	; 3
    37c0:	40 e0       	ldi	r20, 0x00	; 0
    37c2:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e2       	ldi	r26, 0x20	; 32
    37cc:	b1 e4       	ldi	r27, 0x41	; 65
    37ce:	8b 87       	std	Y+11, r24	; 0x0b
    37d0:	9c 87       	std	Y+12, r25	; 0x0c
    37d2:	ad 87       	std	Y+13, r26	; 0x0d
    37d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    37d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    37da:	8d 85       	ldd	r24, Y+13	; 0x0d
    37dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8f 83       	std	Y+7, r24	; 0x07
    37f0:	98 87       	std	Y+8, r25	; 0x08
    37f2:	a9 87       	std	Y+9, r26	; 0x09
    37f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37f6:	6f 81       	ldd	r22, Y+7	; 0x07
    37f8:	78 85       	ldd	r23, Y+8	; 0x08
    37fa:	89 85       	ldd	r24, Y+9	; 0x09
    37fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <STEPPER_voidCW+0x430>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9e 83       	std	Y+6, r25	; 0x06
    3814:	8d 83       	std	Y+5, r24	; 0x05
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <STEPPER_voidCW+0x4ae>
	else if (__tmp > 65535)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <STEPPER_voidCW+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6b 85       	ldd	r22, Y+11	; 0x0b
    3832:	7c 85       	ldd	r23, Y+12	; 0x0c
    3834:	8d 85       	ldd	r24, Y+13	; 0x0d
    3836:	9e 85       	ldd	r25, Y+14	; 0x0e
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9e 83       	std	Y+6, r25	; 0x06
    3856:	8d 83       	std	Y+5, r24	; 0x05
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <STEPPER_voidCW+0x490>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	9c 83       	std	Y+4, r25	; 0x04
    3860:	8b 83       	std	Y+3, r24	; 0x03
    3862:	8b 81       	ldd	r24, Y+3	; 0x03
    3864:	9c 81       	ldd	r25, Y+4	; 0x04
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <STEPPER_voidCW+0x47e>
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	8d 81       	ldd	r24, Y+5	; 0x05
    3870:	9e 81       	ldd	r25, Y+6	; 0x06
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <STEPPER_voidCW+0x472>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <STEPPER_voidCW+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6f 81       	ldd	r22, Y+7	; 0x07
    3884:	78 85       	ldd	r23, Y+8	; 0x08
    3886:	89 85       	ldd	r24, Y+9	; 0x09
    3888:	9a 85       	ldd	r25, Y+10	; 0x0a
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9e 83       	std	Y+6, r25	; 0x06
    3894:	8d 83       	std	Y+5, r24	; 0x05
    3896:	8d 81       	ldd	r24, Y+5	; 0x05
    3898:	9e 81       	ldd	r25, Y+6	; 0x06
    389a:	9a 83       	std	Y+2, r25	; 0x02
    389c:	89 83       	std	Y+1, r24	; 0x01
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <STEPPER_voidCW+0x4ba>
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidCW(u16 angle)
{
	u32 NOSteps =(angle/FullStepAngle);
	u16 NOIterations=NOSteps/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    38aa:	89 ad       	ldd	r24, Y+57	; 0x39
    38ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    38ae:	01 96       	adiw	r24, 0x01	; 1
    38b0:	9a af       	std	Y+58, r25	; 0x3a
    38b2:	89 af       	std	Y+57, r24	; 0x39
    38b4:	29 ad       	ldd	r18, Y+57	; 0x39
    38b6:	3a ad       	ldd	r19, Y+58	; 0x3a
    38b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    38ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    38bc:	28 17       	cp	r18, r24
    38be:	39 07       	cpc	r19, r25
    38c0:	08 f4       	brcc	.+2      	; 0x38c4 <STEPPER_voidCW+0x4dc>
    38c2:	db cd       	rjmp	.-1098   	; 0x347a <STEPPER_voidCW+0x92>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
		_delay_ms(delay);
	}

}
    38c4:	ce 5b       	subi	r28, 0xBE	; 190
    38c6:	df 4f       	sbci	r29, 0xFF	; 255
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <STEPPER_voidACW>:

void STEPPER_voidACW(u16 angle)
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
    38e0:	ee 97       	sbiw	r28, 0x3e	; 62
    38e2:	0f b6       	in	r0, 0x3f	; 63
    38e4:	f8 94       	cli
    38e6:	de bf       	out	0x3e, r29	; 62
    38e8:	0f be       	out	0x3f, r0	; 63
    38ea:	cd bf       	out	0x3d, r28	; 61
    38ec:	9e af       	std	Y+62, r25	; 0x3e
    38ee:	8d af       	std	Y+61, r24	; 0x3d

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
    38f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    38f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    38f4:	cc 01       	movw	r24, r24
    38f6:	a0 e0       	ldi	r26, 0x00	; 0
    38f8:	b0 e0       	ldi	r27, 0x00	; 0
    38fa:	bc 01       	movw	r22, r24
    38fc:	cd 01       	movw	r24, r26
    38fe:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	2c eb       	ldi	r18, 0xBC	; 188
    390c:	3c ec       	ldi	r19, 0xCC	; 204
    390e:	40 e3       	ldi	r20, 0x30	; 48
    3910:	5e e3       	ldi	r21, 0x3E	; 62
    3912:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	bc 01       	movw	r22, r24
    391c:	cd 01       	movw	r24, r26
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e8       	ldi	r20, 0x80	; 128
    3924:	50 e4       	ldi	r21, 0x40	; 64
    3926:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9c af       	std	Y+60, r25	; 0x3c
    393c:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    393e:	1a ae       	std	Y+58, r1	; 0x3a
    3940:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3942:	1a ae       	std	Y+58, r1	; 0x3a
    3944:	19 ae       	std	Y+57, r1	; 0x39
    3946:	1d c2       	rjmp	.+1082   	; 0x3d82 <STEPPER_voidACW+0x4aa>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	40 e0       	ldi	r20, 0x00	; 0
    394e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	41 e0       	ldi	r20, 0x01	; 1
    3958:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	63 e0       	ldi	r22, 0x03	; 3
    396a:	41 e0       	ldi	r20, 0x01	; 1
    396c:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a0 e2       	ldi	r26, 0x20	; 32
    3976:	b1 e4       	ldi	r27, 0x41	; 65
    3978:	8d ab       	std	Y+53, r24	; 0x35
    397a:	9e ab       	std	Y+54, r25	; 0x36
    397c:	af ab       	std	Y+55, r26	; 0x37
    397e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3980:	6d a9       	ldd	r22, Y+53	; 0x35
    3982:	7e a9       	ldd	r23, Y+54	; 0x36
    3984:	8f a9       	ldd	r24, Y+55	; 0x37
    3986:	98 ad       	ldd	r25, Y+56	; 0x38
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a ef       	ldi	r20, 0xFA	; 250
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	89 ab       	std	Y+49, r24	; 0x31
    399a:	9a ab       	std	Y+50, r25	; 0x32
    399c:	ab ab       	std	Y+51, r26	; 0x33
    399e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39a0:	69 a9       	ldd	r22, Y+49	; 0x31
    39a2:	7a a9       	ldd	r23, Y+50	; 0x32
    39a4:	8b a9       	ldd	r24, Y+51	; 0x33
    39a6:	9c a9       	ldd	r25, Y+52	; 0x34
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e8       	ldi	r20, 0x80	; 128
    39ae:	5f e3       	ldi	r21, 0x3F	; 63
    39b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39b4:	88 23       	and	r24, r24
    39b6:	2c f4       	brge	.+10     	; 0x39c2 <STEPPER_voidACW+0xea>
		__ticks = 1;
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	98 ab       	std	Y+48, r25	; 0x30
    39be:	8f a7       	std	Y+47, r24	; 0x2f
    39c0:	3f c0       	rjmp	.+126    	; 0x3a40 <STEPPER_voidACW+0x168>
	else if (__tmp > 65535)
    39c2:	69 a9       	ldd	r22, Y+49	; 0x31
    39c4:	7a a9       	ldd	r23, Y+50	; 0x32
    39c6:	8b a9       	ldd	r24, Y+51	; 0x33
    39c8:	9c a9       	ldd	r25, Y+52	; 0x34
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	3f ef       	ldi	r19, 0xFF	; 255
    39ce:	4f e7       	ldi	r20, 0x7F	; 127
    39d0:	57 e4       	ldi	r21, 0x47	; 71
    39d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39d6:	18 16       	cp	r1, r24
    39d8:	4c f5       	brge	.+82     	; 0x3a2c <STEPPER_voidACW+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39da:	6d a9       	ldd	r22, Y+53	; 0x35
    39dc:	7e a9       	ldd	r23, Y+54	; 0x36
    39de:	8f a9       	ldd	r24, Y+55	; 0x37
    39e0:	98 ad       	ldd	r25, Y+56	; 0x38
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e2       	ldi	r20, 0x20	; 32
    39e8:	51 e4       	ldi	r21, 0x41	; 65
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	bc 01       	movw	r22, r24
    39f4:	cd 01       	movw	r24, r26
    39f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	98 ab       	std	Y+48, r25	; 0x30
    3a00:	8f a7       	std	Y+47, r24	; 0x2f
    3a02:	0f c0       	rjmp	.+30     	; 0x3a22 <STEPPER_voidACW+0x14a>
    3a04:	88 ec       	ldi	r24, 0xC8	; 200
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9e a7       	std	Y+46, r25	; 0x2e
    3a0a:	8d a7       	std	Y+45, r24	; 0x2d
    3a0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <STEPPER_voidACW+0x138>
    3a14:	9e a7       	std	Y+46, r25	; 0x2e
    3a16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a18:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	98 ab       	std	Y+48, r25	; 0x30
    3a20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a22:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a24:	98 a9       	ldd	r25, Y+48	; 0x30
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	69 f7       	brne	.-38     	; 0x3a04 <STEPPER_voidACW+0x12c>
    3a2a:	14 c0       	rjmp	.+40     	; 0x3a54 <STEPPER_voidACW+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a2c:	69 a9       	ldd	r22, Y+49	; 0x31
    3a2e:	7a a9       	ldd	r23, Y+50	; 0x32
    3a30:	8b a9       	ldd	r24, Y+51	; 0x33
    3a32:	9c a9       	ldd	r25, Y+52	; 0x34
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	98 ab       	std	Y+48, r25	; 0x30
    3a3e:	8f a7       	std	Y+47, r24	; 0x2f
    3a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a42:	98 a9       	ldd	r25, Y+48	; 0x30
    3a44:	9c a7       	std	Y+44, r25	; 0x2c
    3a46:	8b a7       	std	Y+43, r24	; 0x2b
    3a48:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <STEPPER_voidACW+0x174>
    3a50:	9c a7       	std	Y+44, r25	; 0x2c
    3a52:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	41 e0       	ldi	r20, 0x01	; 1
    3a5a:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	61 e0       	ldi	r22, 0x01	; 1
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	62 e0       	ldi	r22, 0x02	; 2
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	63 e0       	ldi	r22, 0x03	; 3
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    3a7c:	80 e0       	ldi	r24, 0x00	; 0
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	a0 e2       	ldi	r26, 0x20	; 32
    3a82:	b1 e4       	ldi	r27, 0x41	; 65
    3a84:	8f a3       	std	Y+39, r24	; 0x27
    3a86:	98 a7       	std	Y+40, r25	; 0x28
    3a88:	a9 a7       	std	Y+41, r26	; 0x29
    3a8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a8c:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8e:	78 a5       	ldd	r23, Y+40	; 0x28
    3a90:	89 a5       	ldd	r24, Y+41	; 0x29
    3a92:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a94:	20 e0       	ldi	r18, 0x00	; 0
    3a96:	30 e0       	ldi	r19, 0x00	; 0
    3a98:	4a ef       	ldi	r20, 0xFA	; 250
    3a9a:	54 e4       	ldi	r21, 0x44	; 68
    3a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa0:	dc 01       	movw	r26, r24
    3aa2:	cb 01       	movw	r24, r22
    3aa4:	8b a3       	std	Y+35, r24	; 0x23
    3aa6:	9c a3       	std	Y+36, r25	; 0x24
    3aa8:	ad a3       	std	Y+37, r26	; 0x25
    3aaa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aac:	6b a1       	ldd	r22, Y+35	; 0x23
    3aae:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab4:	20 e0       	ldi	r18, 0x00	; 0
    3ab6:	30 e0       	ldi	r19, 0x00	; 0
    3ab8:	40 e8       	ldi	r20, 0x80	; 128
    3aba:	5f e3       	ldi	r21, 0x3F	; 63
    3abc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ac0:	88 23       	and	r24, r24
    3ac2:	2c f4       	brge	.+10     	; 0x3ace <STEPPER_voidACW+0x1f6>
		__ticks = 1;
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	9a a3       	std	Y+34, r25	; 0x22
    3aca:	89 a3       	std	Y+33, r24	; 0x21
    3acc:	3f c0       	rjmp	.+126    	; 0x3b4c <STEPPER_voidACW+0x274>
	else if (__tmp > 65535)
    3ace:	6b a1       	ldd	r22, Y+35	; 0x23
    3ad0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ad2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad6:	20 e0       	ldi	r18, 0x00	; 0
    3ad8:	3f ef       	ldi	r19, 0xFF	; 255
    3ada:	4f e7       	ldi	r20, 0x7F	; 127
    3adc:	57 e4       	ldi	r21, 0x47	; 71
    3ade:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ae2:	18 16       	cp	r1, r24
    3ae4:	4c f5       	brge	.+82     	; 0x3b38 <STEPPER_voidACW+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae6:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae8:	78 a5       	ldd	r23, Y+40	; 0x28
    3aea:	89 a5       	ldd	r24, Y+41	; 0x29
    3aec:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aee:	20 e0       	ldi	r18, 0x00	; 0
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	40 e2       	ldi	r20, 0x20	; 32
    3af4:	51 e4       	ldi	r21, 0x41	; 65
    3af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afa:	dc 01       	movw	r26, r24
    3afc:	cb 01       	movw	r24, r22
    3afe:	bc 01       	movw	r22, r24
    3b00:	cd 01       	movw	r24, r26
    3b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	9a a3       	std	Y+34, r25	; 0x22
    3b0c:	89 a3       	std	Y+33, r24	; 0x21
    3b0e:	0f c0       	rjmp	.+30     	; 0x3b2e <STEPPER_voidACW+0x256>
    3b10:	88 ec       	ldi	r24, 0xC8	; 200
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	98 a3       	std	Y+32, r25	; 0x20
    3b16:	8f 8f       	std	Y+31, r24	; 0x1f
    3b18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b1a:	98 a1       	ldd	r25, Y+32	; 0x20
    3b1c:	01 97       	sbiw	r24, 0x01	; 1
    3b1e:	f1 f7       	brne	.-4      	; 0x3b1c <STEPPER_voidACW+0x244>
    3b20:	98 a3       	std	Y+32, r25	; 0x20
    3b22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b24:	89 a1       	ldd	r24, Y+33	; 0x21
    3b26:	9a a1       	ldd	r25, Y+34	; 0x22
    3b28:	01 97       	sbiw	r24, 0x01	; 1
    3b2a:	9a a3       	std	Y+34, r25	; 0x22
    3b2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    3b30:	9a a1       	ldd	r25, Y+34	; 0x22
    3b32:	00 97       	sbiw	r24, 0x00	; 0
    3b34:	69 f7       	brne	.-38     	; 0x3b10 <STEPPER_voidACW+0x238>
    3b36:	14 c0       	rjmp	.+40     	; 0x3b60 <STEPPER_voidACW+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b38:	6b a1       	ldd	r22, Y+35	; 0x23
    3b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    3b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    3b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    3b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
    3b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b50:	9e 8f       	std	Y+30, r25	; 0x1e
    3b52:	8d 8f       	std	Y+29, r24	; 0x1d
    3b54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b58:	01 97       	sbiw	r24, 0x01	; 1
    3b5a:	f1 f7       	brne	.-4      	; 0x3b58 <STEPPER_voidACW+0x280>
    3b5c:	9e 8f       	std	Y+30, r25	; 0x1e
    3b5e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	41 e0       	ldi	r20, 0x01	; 1
    3b66:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3b6a:	81 e0       	ldi	r24, 0x01	; 1
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	41 e0       	ldi	r20, 0x01	; 1
    3b70:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3b74:	81 e0       	ldi	r24, 0x01	; 1
    3b76:	62 e0       	ldi	r22, 0x02	; 2
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	63 e0       	ldi	r22, 0x03	; 3
    3b82:	41 e0       	ldi	r20, 0x01	; 1
    3b84:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	a0 e2       	ldi	r26, 0x20	; 32
    3b8e:	b1 e4       	ldi	r27, 0x41	; 65
    3b90:	89 8f       	std	Y+25, r24	; 0x19
    3b92:	9a 8f       	std	Y+26, r25	; 0x1a
    3b94:	ab 8f       	std	Y+27, r26	; 0x1b
    3b96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b98:	69 8d       	ldd	r22, Y+25	; 0x19
    3b9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ba0:	20 e0       	ldi	r18, 0x00	; 0
    3ba2:	30 e0       	ldi	r19, 0x00	; 0
    3ba4:	4a ef       	ldi	r20, 0xFA	; 250
    3ba6:	54 e4       	ldi	r21, 0x44	; 68
    3ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bac:	dc 01       	movw	r26, r24
    3bae:	cb 01       	movw	r24, r22
    3bb0:	8d 8b       	std	Y+21, r24	; 0x15
    3bb2:	9e 8b       	std	Y+22, r25	; 0x16
    3bb4:	af 8b       	std	Y+23, r26	; 0x17
    3bb6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bba:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	30 e0       	ldi	r19, 0x00	; 0
    3bc4:	40 e8       	ldi	r20, 0x80	; 128
    3bc6:	5f e3       	ldi	r21, 0x3F	; 63
    3bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bcc:	88 23       	and	r24, r24
    3bce:	2c f4       	brge	.+10     	; 0x3bda <STEPPER_voidACW+0x302>
		__ticks = 1;
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	9c 8b       	std	Y+20, r25	; 0x14
    3bd6:	8b 8b       	std	Y+19, r24	; 0x13
    3bd8:	3f c0       	rjmp	.+126    	; 0x3c58 <STEPPER_voidACW+0x380>
	else if (__tmp > 65535)
    3bda:	6d 89       	ldd	r22, Y+21	; 0x15
    3bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3bde:	8f 89       	ldd	r24, Y+23	; 0x17
    3be0:	98 8d       	ldd	r25, Y+24	; 0x18
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	3f ef       	ldi	r19, 0xFF	; 255
    3be6:	4f e7       	ldi	r20, 0x7F	; 127
    3be8:	57 e4       	ldi	r21, 0x47	; 71
    3bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bee:	18 16       	cp	r1, r24
    3bf0:	4c f5       	brge	.+82     	; 0x3c44 <STEPPER_voidACW+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bf2:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	40 e2       	ldi	r20, 0x20	; 32
    3c00:	51 e4       	ldi	r21, 0x41	; 65
    3c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	bc 01       	movw	r22, r24
    3c0c:	cd 01       	movw	r24, r26
    3c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	9c 8b       	std	Y+20, r25	; 0x14
    3c18:	8b 8b       	std	Y+19, r24	; 0x13
    3c1a:	0f c0       	rjmp	.+30     	; 0x3c3a <STEPPER_voidACW+0x362>
    3c1c:	88 ec       	ldi	r24, 0xC8	; 200
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	9a 8b       	std	Y+18, r25	; 0x12
    3c22:	89 8b       	std	Y+17, r24	; 0x11
    3c24:	89 89       	ldd	r24, Y+17	; 0x11
    3c26:	9a 89       	ldd	r25, Y+18	; 0x12
    3c28:	01 97       	sbiw	r24, 0x01	; 1
    3c2a:	f1 f7       	brne	.-4      	; 0x3c28 <STEPPER_voidACW+0x350>
    3c2c:	9a 8b       	std	Y+18, r25	; 0x12
    3c2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c30:	8b 89       	ldd	r24, Y+19	; 0x13
    3c32:	9c 89       	ldd	r25, Y+20	; 0x14
    3c34:	01 97       	sbiw	r24, 0x01	; 1
    3c36:	9c 8b       	std	Y+20, r25	; 0x14
    3c38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c3a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c3c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	69 f7       	brne	.-38     	; 0x3c1c <STEPPER_voidACW+0x344>
    3c42:	14 c0       	rjmp	.+40     	; 0x3c6c <STEPPER_voidACW+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c44:	6d 89       	ldd	r22, Y+21	; 0x15
    3c46:	7e 89       	ldd	r23, Y+22	; 0x16
    3c48:	8f 89       	ldd	r24, Y+23	; 0x17
    3c4a:	98 8d       	ldd	r25, Y+24	; 0x18
    3c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	9c 8b       	std	Y+20, r25	; 0x14
    3c56:	8b 8b       	std	Y+19, r24	; 0x13
    3c58:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5c:	98 8b       	std	Y+16, r25	; 0x10
    3c5e:	8f 87       	std	Y+15, r24	; 0x0f
    3c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c62:	98 89       	ldd	r25, Y+16	; 0x10
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <STEPPER_voidACW+0x38c>
    3c68:	98 8b       	std	Y+16, r25	; 0x10
    3c6a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3c6c:	81 e0       	ldi	r24, 0x01	; 1
    3c6e:	60 e0       	ldi	r22, 0x00	; 0
    3c70:	41 e0       	ldi	r20, 0x01	; 1
    3c72:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	61 e0       	ldi	r22, 0x01	; 1
    3c7a:	40 e0       	ldi	r20, 0x00	; 0
    3c7c:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	62 e0       	ldi	r22, 0x02	; 2
    3c84:	41 e0       	ldi	r20, 0x01	; 1
    3c86:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	63 e0       	ldi	r22, 0x03	; 3
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	a0 e2       	ldi	r26, 0x20	; 32
    3c9a:	b1 e4       	ldi	r27, 0x41	; 65
    3c9c:	8b 87       	std	Y+11, r24	; 0x0b
    3c9e:	9c 87       	std	Y+12, r25	; 0x0c
    3ca0:	ad 87       	std	Y+13, r26	; 0x0d
    3ca2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cac:	20 e0       	ldi	r18, 0x00	; 0
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	4a ef       	ldi	r20, 0xFA	; 250
    3cb2:	54 e4       	ldi	r21, 0x44	; 68
    3cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	8f 83       	std	Y+7, r24	; 0x07
    3cbe:	98 87       	std	Y+8, r25	; 0x08
    3cc0:	a9 87       	std	Y+9, r26	; 0x09
    3cc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc6:	78 85       	ldd	r23, Y+8	; 0x08
    3cc8:	89 85       	ldd	r24, Y+9	; 0x09
    3cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ccc:	20 e0       	ldi	r18, 0x00	; 0
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	40 e8       	ldi	r20, 0x80	; 128
    3cd2:	5f e3       	ldi	r21, 0x3F	; 63
    3cd4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cd8:	88 23       	and	r24, r24
    3cda:	2c f4       	brge	.+10     	; 0x3ce6 <STEPPER_voidACW+0x40e>
		__ticks = 1;
    3cdc:	81 e0       	ldi	r24, 0x01	; 1
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	9e 83       	std	Y+6, r25	; 0x06
    3ce2:	8d 83       	std	Y+5, r24	; 0x05
    3ce4:	3f c0       	rjmp	.+126    	; 0x3d64 <STEPPER_voidACW+0x48c>
	else if (__tmp > 65535)
    3ce6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce8:	78 85       	ldd	r23, Y+8	; 0x08
    3cea:	89 85       	ldd	r24, Y+9	; 0x09
    3cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cee:	20 e0       	ldi	r18, 0x00	; 0
    3cf0:	3f ef       	ldi	r19, 0xFF	; 255
    3cf2:	4f e7       	ldi	r20, 0x7F	; 127
    3cf4:	57 e4       	ldi	r21, 0x47	; 71
    3cf6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cfa:	18 16       	cp	r1, r24
    3cfc:	4c f5       	brge	.+82     	; 0x3d50 <STEPPER_voidACW+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	40 e2       	ldi	r20, 0x20	; 32
    3d0c:	51 e4       	ldi	r21, 0x41	; 65
    3d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d12:	dc 01       	movw	r26, r24
    3d14:	cb 01       	movw	r24, r22
    3d16:	bc 01       	movw	r22, r24
    3d18:	cd 01       	movw	r24, r26
    3d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	8d 83       	std	Y+5, r24	; 0x05
    3d26:	0f c0       	rjmp	.+30     	; 0x3d46 <STEPPER_voidACW+0x46e>
    3d28:	88 ec       	ldi	r24, 0xC8	; 200
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
    3d30:	8b 81       	ldd	r24, Y+3	; 0x03
    3d32:	9c 81       	ldd	r25, Y+4	; 0x04
    3d34:	01 97       	sbiw	r24, 0x01	; 1
    3d36:	f1 f7       	brne	.-4      	; 0x3d34 <STEPPER_voidACW+0x45c>
    3d38:	9c 83       	std	Y+4, r25	; 0x04
    3d3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d40:	01 97       	sbiw	r24, 0x01	; 1
    3d42:	9e 83       	std	Y+6, r25	; 0x06
    3d44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d46:	8d 81       	ldd	r24, Y+5	; 0x05
    3d48:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	69 f7       	brne	.-38     	; 0x3d28 <STEPPER_voidACW+0x450>
    3d4e:	14 c0       	rjmp	.+40     	; 0x3d78 <STEPPER_voidACW+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d50:	6f 81       	ldd	r22, Y+7	; 0x07
    3d52:	78 85       	ldd	r23, Y+8	; 0x08
    3d54:	89 85       	ldd	r24, Y+9	; 0x09
    3d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	9a 83       	std	Y+2, r25	; 0x02
    3d6a:	89 83       	std	Y+1, r24	; 0x01
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d70:	01 97       	sbiw	r24, 0x01	; 1
    3d72:	f1 f7       	brne	.-4      	; 0x3d70 <STEPPER_voidACW+0x498>
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidACW(u16 angle)
{

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3d78:	89 ad       	ldd	r24, Y+57	; 0x39
    3d7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d7c:	01 96       	adiw	r24, 0x01	; 1
    3d7e:	9a af       	std	Y+58, r25	; 0x3a
    3d80:	89 af       	std	Y+57, r24	; 0x39
    3d82:	29 ad       	ldd	r18, Y+57	; 0x39
    3d84:	3a ad       	ldd	r19, Y+58	; 0x3a
    3d86:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d88:	9c ad       	ldd	r25, Y+60	; 0x3c
    3d8a:	28 17       	cp	r18, r24
    3d8c:	39 07       	cpc	r19, r25
    3d8e:	08 f4       	brcc	.+2      	; 0x3d92 <STEPPER_voidACW+0x4ba>
    3d90:	db cd       	rjmp	.-1098   	; 0x3948 <STEPPER_voidACW+0x70>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
		_delay_ms(delay);
	}

}
    3d92:	ee 96       	adiw	r28, 0x3e	; 62
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	08 95       	ret

00003da4 <SEVSEG_voidInit>:
 *      Author: salma
 */
#include "SevenSeg_Interface.h"
u8 SevSegValue[10]=SEVSEGVALUE;
void SEVSEG_voidInit()
{
    3da4:	df 93       	push	r29
    3da6:	cf 93       	push	r28
    3da8:	cd b7       	in	r28, 0x3d	; 61
    3daa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SevSeg1,0xff);
    3dac:	81 e0       	ldi	r24, 0x01	; 1
    3dae:	6f ef       	ldi	r22, 0xFF	; 255
    3db0:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(SevSeg2,0xff);
    3db4:	82 e0       	ldi	r24, 0x02	; 2
    3db6:	6f ef       	ldi	r22, 0xFF	; 255
    3db8:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(SevSeg1,OFF);
    3dbc:	81 e0       	ldi	r24, 0x01	; 1
    3dbe:	6f ef       	ldi	r22, 0xFF	; 255
    3dc0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	6f ef       	ldi	r22, 0xFF	; 255
    3dc8:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
}
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	08 95       	ret

00003dd2 <SEVSEG_voidSetNum>:

void SEVSEG_voidSetNum(u8 num)
{
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	00 d0       	rcall	.+0      	; 0x3dd8 <SEVSEG_voidSetNum+0x6>
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	8a 83       	std	Y+2, r24	; 0x02

	if (num<10)
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	8a 30       	cpi	r24, 0x0A	; 10
    3de2:	80 f4       	brcc	.+32     	; 0x3e04 <SEVSEG_voidSetNum+0x32>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	fc 01       	movw	r30, r24
    3dec:	e8 59       	subi	r30, 0x98	; 152
    3dee:	fe 4f       	sbci	r31, 0xFE	; 254
    3df0:	90 81       	ld	r25, Z
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	69 2f       	mov	r22, r25
    3df6:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,OFF);
    3dfa:	82 e0       	ldi	r24, 0x02	; 2
    3dfc:	6f ef       	ldi	r22, 0xFF	; 255
    3dfe:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
    3e02:	31 c0       	rjmp	.+98     	; 0x3e66 <SEVSEG_voidSetNum+0x94>
	}
	else if (num==10)
    3e04:	8a 81       	ldd	r24, Y+2	; 0x02
    3e06:	8a 30       	cpi	r24, 0x0A	; 10
    3e08:	69 f4       	brne	.+26     	; 0x3e24 <SEVSEG_voidSetNum+0x52>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[0]);
    3e0a:	90 91 68 01 	lds	r25, 0x0168
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	69 2f       	mov	r22, r25
    3e12:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
    3e16:	90 91 69 01 	lds	r25, 0x0169
    3e1a:	82 e0       	ldi	r24, 0x02	; 2
    3e1c:	69 2f       	mov	r22, r25
    3e1e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
    3e22:	21 c0       	rjmp	.+66     	; 0x3e66 <SEVSEG_voidSetNum+0x94>
	}
	else
	{
		u8 counter = 0  ;
    3e24:	19 82       	std	Y+1, r1	; 0x01
    3e26:	06 c0       	rjmp	.+12     	; 0x3e34 <SEVSEG_voidSetNum+0x62>
		while(num>=10)
		{
			counter++;
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	8f 5f       	subi	r24, 0xFF	; 255
    3e2c:	89 83       	std	Y+1, r24	; 0x01
			num-=10;
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	8a 50       	subi	r24, 0x0A	; 10
    3e32:	8a 83       	std	Y+2, r24	; 0x02
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
	}
	else
	{
		u8 counter = 0  ;
		while(num>=10)
    3e34:	8a 81       	ldd	r24, Y+2	; 0x02
    3e36:	8a 30       	cpi	r24, 0x0A	; 10
    3e38:	b8 f7       	brcc	.-18     	; 0x3e28 <SEVSEG_voidSetNum+0x56>
		{
			counter++;
			num-=10;
		}
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3c:	88 2f       	mov	r24, r24
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	fc 01       	movw	r30, r24
    3e42:	e8 59       	subi	r30, 0x98	; 152
    3e44:	fe 4f       	sbci	r31, 0xFE	; 254
    3e46:	90 81       	ld	r25, Z
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	69 2f       	mov	r22, r25
    3e4c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[counter]);
    3e50:	89 81       	ldd	r24, Y+1	; 0x01
    3e52:	88 2f       	mov	r24, r24
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	fc 01       	movw	r30, r24
    3e58:	e8 59       	subi	r30, 0x98	; 152
    3e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e5c:	90 81       	ld	r25, Z
    3e5e:	82 e0       	ldi	r24, 0x02	; 2
    3e60:	69 2f       	mov	r22, r25
    3e62:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	}
}
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <SEVSEG_voidOff>:
void SEVSEG_voidOff ()
{
    3e70:	df 93       	push	r29
    3e72:	cf 93       	push	r28
    3e74:	cd b7       	in	r28, 0x3d	; 61
    3e76:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortValue(SevSeg1,OFF);
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	6f ef       	ldi	r22, 0xFF	; 255
    3e7c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	6f ef       	ldi	r22, 0xFF	; 255
    3e84:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	}
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <LED_voidInit>:
 */

#include "Led_Interface.h"
#include <util/delay.h>
void LED_voidInit (u8 Group, u8 pin)
{
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <LED_voidInit+0x6>
    3e94:	cd b7       	in	r28, 0x3d	; 61
    3e96:	de b7       	in	r29, 0x3e	; 62
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group, pin, Output);
    3e9c:	89 81       	ldd	r24, Y+1	; 0x01
    3e9e:	6a 81       	ldd	r22, Y+2	; 0x02
    3ea0:	41 e0       	ldi	r20, 0x01	; 1
    3ea2:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	cf 91       	pop	r28
    3eac:	df 91       	pop	r29
    3eae:	08 95       	ret

00003eb0 <LED_voidOn>:

void LED_voidOn (u8 Group, u8 pin)
{
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <LED_voidOn+0x6>
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    3eba:	89 83       	std	Y+1, r24	; 0x01
    3ebc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, High);
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	6a 81       	ldd	r22, Y+2	; 0x02
    3ec2:	41 e0       	ldi	r20, 0x01	; 1
    3ec4:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    3ec8:	0f 90       	pop	r0
    3eca:	0f 90       	pop	r0
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	08 95       	ret

00003ed2 <LED_voidOff>:

void LED_voidOff (u8 Group, u8 pin)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	00 d0       	rcall	.+0      	; 0x3ed8 <LED_voidOff+0x6>
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	89 83       	std	Y+1, r24	; 0x01
    3ede:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, Low);
    3ee0:	89 81       	ldd	r24, Y+1	; 0x01
    3ee2:	6a 81       	ldd	r22, Y+2	; 0x02
    3ee4:	40 e0       	ldi	r20, 0x00	; 0
    3ee6:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    3eea:	0f 90       	pop	r0
    3eec:	0f 90       	pop	r0
    3eee:	cf 91       	pop	r28
    3ef0:	df 91       	pop	r29
    3ef2:	08 95       	ret

00003ef4 <LED_voidToggle>:

void LED_voidToggle (u8 Group, u8 pin)
{
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <LED_voidToggle+0x6>
    3efa:	cd b7       	in	r28, 0x3d	; 61
    3efc:	de b7       	in	r29, 0x3e	; 62
    3efe:	89 83       	std	Y+1, r24	; 0x01
    3f00:	6a 83       	std	Y+2, r22	; 0x02
	if (DIO_u8ReadPinValue(Group,pin)==High)
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	6a 81       	ldd	r22, Y+2	; 0x02
    3f06:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
    3f0a:	81 30       	cpi	r24, 0x01	; 1
    3f0c:	29 f4       	brne	.+10     	; 0x3f18 <LED_voidToggle+0x24>
	{
		LED_voidOff(Group,pin);
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	6a 81       	ldd	r22, Y+2	; 0x02
    3f12:	0e 94 69 1f 	call	0x3ed2	; 0x3ed2 <LED_voidOff>
    3f16:	04 c0       	rjmp	.+8      	; 0x3f20 <LED_voidToggle+0x2c>
	}
	else
	{
		LED_voidOn(Group,pin);
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	6a 81       	ldd	r22, Y+2	; 0x02
    3f1c:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <LED_voidOn>
	}

}
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	cf 91       	pop	r28
    3f26:	df 91       	pop	r29
    3f28:	08 95       	ret

00003f2a <LCD_voidSendCommand>:
#include <util/delay.h>
#include "Lcd_Interface.h"


void LCD_voidSendCommand(u8 command)
{
    3f2a:	df 93       	push	r29
    3f2c:	cf 93       	push	r28
    3f2e:	0f 92       	push	r0
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    3f36:	81 e0       	ldi	r24, 0x01	; 1
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	61 e0       	ldi	r22, 0x01	; 1
    3f44:	40 e0       	ldi	r20, 0x00	; 0
    3f46:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	62 e0       	ldi	r22, 0x02	; 2
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//Send Command
		DIO_voidSetPortValue(Lcd_DCGroup,command);
    3f54:	83 e0       	ldi	r24, 0x03	; 3
    3f56:	69 81       	ldd	r22, Y+1	; 0x01
    3f58:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	62 e0       	ldi	r22, 0x02	; 2
    3f60:	40 e0       	ldi	r20, 0x00	; 0
    3f62:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Lcd_DCGroup,Lcd_D7,get_bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
#endif

}
    3f66:	0f 90       	pop	r0
    3f68:	cf 91       	pop	r28
    3f6a:	df 91       	pop	r29
    3f6c:	08 95       	ret

00003f6e <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    3f6e:	df 93       	push	r29
    3f70:	cf 93       	push	r28
    3f72:	0f 92       	push	r0
    3f74:	cd b7       	in	r28, 0x3d	; 61
    3f76:	de b7       	in	r29, 0x3e	; 62
    3f78:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	60 e0       	ldi	r22, 0x00	; 0
    3f7e:	41 e0       	ldi	r20, 0x01	; 1
    3f80:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3f84:	81 e0       	ldi	r24, 0x01	; 1
    3f86:	61 e0       	ldi	r22, 0x01	; 1
    3f88:	40 e0       	ldi	r20, 0x00	; 0
    3f8a:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	62 e0       	ldi	r22, 0x02	; 2
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//Send Data
		DIO_voidSetPortValue(Lcd_DCGroup,data);
    3f98:	83 e0       	ldi	r24, 0x03	; 3
    3f9a:	69 81       	ldd	r22, Y+1	; 0x01
    3f9c:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	62 e0       	ldi	r22, 0x02	; 2
    3fa4:	40 e0       	ldi	r20, 0x00	; 0
    3fa6:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);

#endif

}
    3faa:	0f 90       	pop	r0
    3fac:	cf 91       	pop	r28
    3fae:	df 91       	pop	r29
    3fb0:	08 95       	ret

00003fb2 <LCD_voidInit>:


void LCD_voidInit()
{
    3fb2:	df 93       	push	r29
    3fb4:	cf 93       	push	r28
    3fb6:	cd b7       	in	r28, 0x3d	; 61
    3fb8:	de b7       	in	r29, 0x3e	; 62
    3fba:	e8 97       	sbiw	r28, 0x38	; 56
    3fbc:	0f b6       	in	r0, 0x3f	; 63
    3fbe:	f8 94       	cli
    3fc0:	de bf       	out	0x3e, r29	; 62
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	60 e0       	ldi	r22, 0x00	; 0
    3fca:	41 e0       	ldi	r20, 0x01	; 1
    3fcc:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	61 e0       	ldi	r22, 0x01	; 1
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	62 e0       	ldi	r22, 0x02	; 2
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    3fe4:	83 e0       	ldi	r24, 0x03	; 3
    3fe6:	6f ef       	ldi	r22, 0xFF	; 255
    3fe8:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <DIO_voidSetPortDir>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	ac e0       	ldi	r26, 0x0C	; 12
    3ff2:	b2 e4       	ldi	r27, 0x42	; 66
    3ff4:	8d ab       	std	Y+53, r24	; 0x35
    3ff6:	9e ab       	std	Y+54, r25	; 0x36
    3ff8:	af ab       	std	Y+55, r26	; 0x37
    3ffa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	6d a9       	ldd	r22, Y+53	; 0x35
    3ffe:	7e a9       	ldd	r23, Y+54	; 0x36
    4000:	8f a9       	ldd	r24, Y+55	; 0x37
    4002:	98 ad       	ldd	r25, Y+56	; 0x38
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a ef       	ldi	r20, 0xFA	; 250
    400a:	54 e4       	ldi	r21, 0x44	; 68
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	89 ab       	std	Y+49, r24	; 0x31
    4016:	9a ab       	std	Y+50, r25	; 0x32
    4018:	ab ab       	std	Y+51, r26	; 0x33
    401a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    401c:	69 a9       	ldd	r22, Y+49	; 0x31
    401e:	7a a9       	ldd	r23, Y+50	; 0x32
    4020:	8b a9       	ldd	r24, Y+51	; 0x33
    4022:	9c a9       	ldd	r25, Y+52	; 0x34
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <LCD_voidInit+0x8c>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	98 ab       	std	Y+48, r25	; 0x30
    403a:	8f a7       	std	Y+47, r24	; 0x2f
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    403e:	69 a9       	ldd	r22, Y+49	; 0x31
    4040:	7a a9       	ldd	r23, Y+50	; 0x32
    4042:	8b a9       	ldd	r24, Y+51	; 0x33
    4044:	9c a9       	ldd	r25, Y+52	; 0x34
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	6d a9       	ldd	r22, Y+53	; 0x35
    4058:	7e a9       	ldd	r23, Y+54	; 0x36
    405a:	8f a9       	ldd	r24, Y+55	; 0x37
    405c:	98 ad       	ldd	r25, Y+56	; 0x38
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	98 ab       	std	Y+48, r25	; 0x30
    407c:	8f a7       	std	Y+47, r24	; 0x2f
    407e:	0f c0       	rjmp	.+30     	; 0x409e <LCD_voidInit+0xec>
    4080:	88 ec       	ldi	r24, 0xC8	; 200
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	9e a7       	std	Y+46, r25	; 0x2e
    4086:	8d a7       	std	Y+45, r24	; 0x2d
    4088:	8d a5       	ldd	r24, Y+45	; 0x2d
    408a:	9e a5       	ldd	r25, Y+46	; 0x2e
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <LCD_voidInit+0xda>
    4090:	9e a7       	std	Y+46, r25	; 0x2e
    4092:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8f a5       	ldd	r24, Y+47	; 0x2f
    4096:	98 a9       	ldd	r25, Y+48	; 0x30
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	98 ab       	std	Y+48, r25	; 0x30
    409c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8f a5       	ldd	r24, Y+47	; 0x2f
    40a0:	98 a9       	ldd	r25, Y+48	; 0x30
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <LCD_voidInit+0xce>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	69 a9       	ldd	r22, Y+49	; 0x31
    40aa:	7a a9       	ldd	r23, Y+50	; 0x32
    40ac:	8b a9       	ldd	r24, Y+51	; 0x33
    40ae:	9c a9       	ldd	r25, Y+52	; 0x34
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	98 ab       	std	Y+48, r25	; 0x30
    40ba:	8f a7       	std	Y+47, r24	; 0x2f
    40bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    40be:	98 a9       	ldd	r25, Y+48	; 0x30
    40c0:	9c a7       	std	Y+44, r25	; 0x2c
    40c2:	8b a7       	std	Y+43, r24	; 0x2b
    40c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    40c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <LCD_voidInit+0x116>
    40cc:	9c a7       	std	Y+44, r25	; 0x2c
    40ce:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    40d0:	88 e3       	ldi	r24, 0x38	; 56
    40d2:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	a0 e8       	ldi	r26, 0x80	; 128
    40dc:	bf e3       	ldi	r27, 0x3F	; 63
    40de:	8f a3       	std	Y+39, r24	; 0x27
    40e0:	98 a7       	std	Y+40, r25	; 0x28
    40e2:	a9 a7       	std	Y+41, r26	; 0x29
    40e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e6:	6f a1       	ldd	r22, Y+39	; 0x27
    40e8:	78 a5       	ldd	r23, Y+40	; 0x28
    40ea:	89 a5       	ldd	r24, Y+41	; 0x29
    40ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	4a ef       	ldi	r20, 0xFA	; 250
    40f4:	54 e4       	ldi	r21, 0x44	; 68
    40f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	8b a3       	std	Y+35, r24	; 0x23
    4100:	9c a3       	std	Y+36, r25	; 0x24
    4102:	ad a3       	std	Y+37, r26	; 0x25
    4104:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4106:	6b a1       	ldd	r22, Y+35	; 0x23
    4108:	7c a1       	ldd	r23, Y+36	; 0x24
    410a:	8d a1       	ldd	r24, Y+37	; 0x25
    410c:	9e a1       	ldd	r25, Y+38	; 0x26
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e8       	ldi	r20, 0x80	; 128
    4114:	5f e3       	ldi	r21, 0x3F	; 63
    4116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    411a:	88 23       	and	r24, r24
    411c:	2c f4       	brge	.+10     	; 0x4128 <LCD_voidInit+0x176>
		__ticks = 1;
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	9a a3       	std	Y+34, r25	; 0x22
    4124:	89 a3       	std	Y+33, r24	; 0x21
    4126:	3f c0       	rjmp	.+126    	; 0x41a6 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    4128:	6b a1       	ldd	r22, Y+35	; 0x23
    412a:	7c a1       	ldd	r23, Y+36	; 0x24
    412c:	8d a1       	ldd	r24, Y+37	; 0x25
    412e:	9e a1       	ldd	r25, Y+38	; 0x26
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	3f ef       	ldi	r19, 0xFF	; 255
    4134:	4f e7       	ldi	r20, 0x7F	; 127
    4136:	57 e4       	ldi	r21, 0x47	; 71
    4138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    413c:	18 16       	cp	r1, r24
    413e:	4c f5       	brge	.+82     	; 0x4192 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4140:	6f a1       	ldd	r22, Y+39	; 0x27
    4142:	78 a5       	ldd	r23, Y+40	; 0x28
    4144:	89 a5       	ldd	r24, Y+41	; 0x29
    4146:	9a a5       	ldd	r25, Y+42	; 0x2a
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e2       	ldi	r20, 0x20	; 32
    414e:	51 e4       	ldi	r21, 0x41	; 65
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	bc 01       	movw	r22, r24
    415a:	cd 01       	movw	r24, r26
    415c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9a a3       	std	Y+34, r25	; 0x22
    4166:	89 a3       	std	Y+33, r24	; 0x21
    4168:	0f c0       	rjmp	.+30     	; 0x4188 <LCD_voidInit+0x1d6>
    416a:	88 ec       	ldi	r24, 0xC8	; 200
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	98 a3       	std	Y+32, r25	; 0x20
    4170:	8f 8f       	std	Y+31, r24	; 0x1f
    4172:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4174:	98 a1       	ldd	r25, Y+32	; 0x20
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <LCD_voidInit+0x1c4>
    417a:	98 a3       	std	Y+32, r25	; 0x20
    417c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417e:	89 a1       	ldd	r24, Y+33	; 0x21
    4180:	9a a1       	ldd	r25, Y+34	; 0x22
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	9a a3       	std	Y+34, r25	; 0x22
    4186:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4188:	89 a1       	ldd	r24, Y+33	; 0x21
    418a:	9a a1       	ldd	r25, Y+34	; 0x22
    418c:	00 97       	sbiw	r24, 0x00	; 0
    418e:	69 f7       	brne	.-38     	; 0x416a <LCD_voidInit+0x1b8>
    4190:	14 c0       	rjmp	.+40     	; 0x41ba <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4192:	6b a1       	ldd	r22, Y+35	; 0x23
    4194:	7c a1       	ldd	r23, Y+36	; 0x24
    4196:	8d a1       	ldd	r24, Y+37	; 0x25
    4198:	9e a1       	ldd	r25, Y+38	; 0x26
    419a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	9a a3       	std	Y+34, r25	; 0x22
    41a4:	89 a3       	std	Y+33, r24	; 0x21
    41a6:	89 a1       	ldd	r24, Y+33	; 0x21
    41a8:	9a a1       	ldd	r25, Y+34	; 0x22
    41aa:	9e 8f       	std	Y+30, r25	; 0x1e
    41ac:	8d 8f       	std	Y+29, r24	; 0x1d
    41ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    41b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	f1 f7       	brne	.-4      	; 0x41b2 <LCD_voidInit+0x200>
    41b6:	9e 8f       	std	Y+30, r25	; 0x1e
    41b8:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    41ba:	8f e0       	ldi	r24, 0x0F	; 15
    41bc:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	a0 e8       	ldi	r26, 0x80	; 128
    41c6:	bf e3       	ldi	r27, 0x3F	; 63
    41c8:	89 8f       	std	Y+25, r24	; 0x19
    41ca:	9a 8f       	std	Y+26, r25	; 0x1a
    41cc:	ab 8f       	std	Y+27, r26	; 0x1b
    41ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41d0:	69 8d       	ldd	r22, Y+25	; 0x19
    41d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	4a ef       	ldi	r20, 0xFA	; 250
    41de:	54 e4       	ldi	r21, 0x44	; 68
    41e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	8d 8b       	std	Y+21, r24	; 0x15
    41ea:	9e 8b       	std	Y+22, r25	; 0x16
    41ec:	af 8b       	std	Y+23, r26	; 0x17
    41ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41f0:	6d 89       	ldd	r22, Y+21	; 0x15
    41f2:	7e 89       	ldd	r23, Y+22	; 0x16
    41f4:	8f 89       	ldd	r24, Y+23	; 0x17
    41f6:	98 8d       	ldd	r25, Y+24	; 0x18
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	40 e8       	ldi	r20, 0x80	; 128
    41fe:	5f e3       	ldi	r21, 0x3F	; 63
    4200:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4204:	88 23       	and	r24, r24
    4206:	2c f4       	brge	.+10     	; 0x4212 <LCD_voidInit+0x260>
		__ticks = 1;
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	90 e0       	ldi	r25, 0x00	; 0
    420c:	9c 8b       	std	Y+20, r25	; 0x14
    420e:	8b 8b       	std	Y+19, r24	; 0x13
    4210:	3f c0       	rjmp	.+126    	; 0x4290 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    4212:	6d 89       	ldd	r22, Y+21	; 0x15
    4214:	7e 89       	ldd	r23, Y+22	; 0x16
    4216:	8f 89       	ldd	r24, Y+23	; 0x17
    4218:	98 8d       	ldd	r25, Y+24	; 0x18
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	3f ef       	ldi	r19, 0xFF	; 255
    421e:	4f e7       	ldi	r20, 0x7F	; 127
    4220:	57 e4       	ldi	r21, 0x47	; 71
    4222:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4226:	18 16       	cp	r1, r24
    4228:	4c f5       	brge	.+82     	; 0x427c <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    422a:	69 8d       	ldd	r22, Y+25	; 0x19
    422c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    422e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	40 e2       	ldi	r20, 0x20	; 32
    4238:	51 e4       	ldi	r21, 0x41	; 65
    423a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    423e:	dc 01       	movw	r26, r24
    4240:	cb 01       	movw	r24, r22
    4242:	bc 01       	movw	r22, r24
    4244:	cd 01       	movw	r24, r26
    4246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    424a:	dc 01       	movw	r26, r24
    424c:	cb 01       	movw	r24, r22
    424e:	9c 8b       	std	Y+20, r25	; 0x14
    4250:	8b 8b       	std	Y+19, r24	; 0x13
    4252:	0f c0       	rjmp	.+30     	; 0x4272 <LCD_voidInit+0x2c0>
    4254:	88 ec       	ldi	r24, 0xC8	; 200
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	9a 8b       	std	Y+18, r25	; 0x12
    425a:	89 8b       	std	Y+17, r24	; 0x11
    425c:	89 89       	ldd	r24, Y+17	; 0x11
    425e:	9a 89       	ldd	r25, Y+18	; 0x12
    4260:	01 97       	sbiw	r24, 0x01	; 1
    4262:	f1 f7       	brne	.-4      	; 0x4260 <LCD_voidInit+0x2ae>
    4264:	9a 8b       	std	Y+18, r25	; 0x12
    4266:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4268:	8b 89       	ldd	r24, Y+19	; 0x13
    426a:	9c 89       	ldd	r25, Y+20	; 0x14
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	9c 8b       	std	Y+20, r25	; 0x14
    4270:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4272:	8b 89       	ldd	r24, Y+19	; 0x13
    4274:	9c 89       	ldd	r25, Y+20	; 0x14
    4276:	00 97       	sbiw	r24, 0x00	; 0
    4278:	69 f7       	brne	.-38     	; 0x4254 <LCD_voidInit+0x2a2>
    427a:	14 c0       	rjmp	.+40     	; 0x42a4 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    427c:	6d 89       	ldd	r22, Y+21	; 0x15
    427e:	7e 89       	ldd	r23, Y+22	; 0x16
    4280:	8f 89       	ldd	r24, Y+23	; 0x17
    4282:	98 8d       	ldd	r25, Y+24	; 0x18
    4284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	9c 8b       	std	Y+20, r25	; 0x14
    428e:	8b 8b       	std	Y+19, r24	; 0x13
    4290:	8b 89       	ldd	r24, Y+19	; 0x13
    4292:	9c 89       	ldd	r25, Y+20	; 0x14
    4294:	98 8b       	std	Y+16, r25	; 0x10
    4296:	8f 87       	std	Y+15, r24	; 0x0f
    4298:	8f 85       	ldd	r24, Y+15	; 0x0f
    429a:	98 89       	ldd	r25, Y+16	; 0x10
    429c:	01 97       	sbiw	r24, 0x01	; 1
    429e:	f1 f7       	brne	.-4      	; 0x429c <LCD_voidInit+0x2ea>
    42a0:	98 8b       	std	Y+16, r25	; 0x10
    42a2:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    42a4:	81 e0       	ldi	r24, 0x01	; 1
    42a6:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
    42aa:	80 e0       	ldi	r24, 0x00	; 0
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	a0 e0       	ldi	r26, 0x00	; 0
    42b0:	b0 e4       	ldi	r27, 0x40	; 64
    42b2:	8b 87       	std	Y+11, r24	; 0x0b
    42b4:	9c 87       	std	Y+12, r25	; 0x0c
    42b6:	ad 87       	std	Y+13, r26	; 0x0d
    42b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    42bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    42be:	8d 85       	ldd	r24, Y+13	; 0x0d
    42c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    42c2:	20 e0       	ldi	r18, 0x00	; 0
    42c4:	30 e0       	ldi	r19, 0x00	; 0
    42c6:	4a ef       	ldi	r20, 0xFA	; 250
    42c8:	54 e4       	ldi	r21, 0x44	; 68
    42ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42ce:	dc 01       	movw	r26, r24
    42d0:	cb 01       	movw	r24, r22
    42d2:	8f 83       	std	Y+7, r24	; 0x07
    42d4:	98 87       	std	Y+8, r25	; 0x08
    42d6:	a9 87       	std	Y+9, r26	; 0x09
    42d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42da:	6f 81       	ldd	r22, Y+7	; 0x07
    42dc:	78 85       	ldd	r23, Y+8	; 0x08
    42de:	89 85       	ldd	r24, Y+9	; 0x09
    42e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e2:	20 e0       	ldi	r18, 0x00	; 0
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	40 e8       	ldi	r20, 0x80	; 128
    42e8:	5f e3       	ldi	r21, 0x3F	; 63
    42ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42ee:	88 23       	and	r24, r24
    42f0:	2c f4       	brge	.+10     	; 0x42fc <LCD_voidInit+0x34a>
		__ticks = 1;
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	9e 83       	std	Y+6, r25	; 0x06
    42f8:	8d 83       	std	Y+5, r24	; 0x05
    42fa:	3f c0       	rjmp	.+126    	; 0x437a <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    42fc:	6f 81       	ldd	r22, Y+7	; 0x07
    42fe:	78 85       	ldd	r23, Y+8	; 0x08
    4300:	89 85       	ldd	r24, Y+9	; 0x09
    4302:	9a 85       	ldd	r25, Y+10	; 0x0a
    4304:	20 e0       	ldi	r18, 0x00	; 0
    4306:	3f ef       	ldi	r19, 0xFF	; 255
    4308:	4f e7       	ldi	r20, 0x7F	; 127
    430a:	57 e4       	ldi	r21, 0x47	; 71
    430c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4310:	18 16       	cp	r1, r24
    4312:	4c f5       	brge	.+82     	; 0x4366 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4314:	6b 85       	ldd	r22, Y+11	; 0x0b
    4316:	7c 85       	ldd	r23, Y+12	; 0x0c
    4318:	8d 85       	ldd	r24, Y+13	; 0x0d
    431a:	9e 85       	ldd	r25, Y+14	; 0x0e
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	30 e0       	ldi	r19, 0x00	; 0
    4320:	40 e2       	ldi	r20, 0x20	; 32
    4322:	51 e4       	ldi	r21, 0x41	; 65
    4324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4328:	dc 01       	movw	r26, r24
    432a:	cb 01       	movw	r24, r22
    432c:	bc 01       	movw	r22, r24
    432e:	cd 01       	movw	r24, r26
    4330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	9e 83       	std	Y+6, r25	; 0x06
    433a:	8d 83       	std	Y+5, r24	; 0x05
    433c:	0f c0       	rjmp	.+30     	; 0x435c <LCD_voidInit+0x3aa>
    433e:	88 ec       	ldi	r24, 0xC8	; 200
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	9c 83       	std	Y+4, r25	; 0x04
    4344:	8b 83       	std	Y+3, r24	; 0x03
    4346:	8b 81       	ldd	r24, Y+3	; 0x03
    4348:	9c 81       	ldd	r25, Y+4	; 0x04
    434a:	01 97       	sbiw	r24, 0x01	; 1
    434c:	f1 f7       	brne	.-4      	; 0x434a <LCD_voidInit+0x398>
    434e:	9c 83       	std	Y+4, r25	; 0x04
    4350:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4352:	8d 81       	ldd	r24, Y+5	; 0x05
    4354:	9e 81       	ldd	r25, Y+6	; 0x06
    4356:	01 97       	sbiw	r24, 0x01	; 1
    4358:	9e 83       	std	Y+6, r25	; 0x06
    435a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    435c:	8d 81       	ldd	r24, Y+5	; 0x05
    435e:	9e 81       	ldd	r25, Y+6	; 0x06
    4360:	00 97       	sbiw	r24, 0x00	; 0
    4362:	69 f7       	brne	.-38     	; 0x433e <LCD_voidInit+0x38c>
    4364:	14 c0       	rjmp	.+40     	; 0x438e <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4366:	6f 81       	ldd	r22, Y+7	; 0x07
    4368:	78 85       	ldd	r23, Y+8	; 0x08
    436a:	89 85       	ldd	r24, Y+9	; 0x09
    436c:	9a 85       	ldd	r25, Y+10	; 0x0a
    436e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4372:	dc 01       	movw	r26, r24
    4374:	cb 01       	movw	r24, r22
    4376:	9e 83       	std	Y+6, r25	; 0x06
    4378:	8d 83       	std	Y+5, r24	; 0x05
    437a:	8d 81       	ldd	r24, Y+5	; 0x05
    437c:	9e 81       	ldd	r25, Y+6	; 0x06
    437e:	9a 83       	std	Y+2, r25	; 0x02
    4380:	89 83       	std	Y+1, r24	; 0x01
    4382:	89 81       	ldd	r24, Y+1	; 0x01
    4384:	9a 81       	ldd	r25, Y+2	; 0x02
    4386:	01 97       	sbiw	r24, 0x01	; 1
    4388:	f1 f7       	brne	.-4      	; 0x4386 <LCD_voidInit+0x3d4>
    438a:	9a 83       	std	Y+2, r25	; 0x02
    438c:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    438e:	86 e0       	ldi	r24, 0x06	; 6
    4390:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    4394:	e8 96       	adiw	r28, 0x38	; 56
    4396:	0f b6       	in	r0, 0x3f	; 63
    4398:	f8 94       	cli
    439a:	de bf       	out	0x3e, r29	; 62
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	cf 91       	pop	r28
    43a2:	df 91       	pop	r29
    43a4:	08 95       	ret

000043a6 <LCD_voidSendString>:


void LCD_voidSendString(u8 String[])
{
    43a6:	df 93       	push	r29
    43a8:	cf 93       	push	r28
    43aa:	00 d0       	rcall	.+0      	; 0x43ac <LCD_voidSendString+0x6>
    43ac:	0f 92       	push	r0
    43ae:	cd b7       	in	r28, 0x3d	; 61
    43b0:	de b7       	in	r29, 0x3e	; 62
    43b2:	9b 83       	std	Y+3, r25	; 0x03
    43b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    43b6:	19 82       	std	Y+1, r1	; 0x01
    43b8:	0e c0       	rjmp	.+28     	; 0x43d6 <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	28 2f       	mov	r18, r24
    43be:	30 e0       	ldi	r19, 0x00	; 0
    43c0:	8a 81       	ldd	r24, Y+2	; 0x02
    43c2:	9b 81       	ldd	r25, Y+3	; 0x03
    43c4:	fc 01       	movw	r30, r24
    43c6:	e2 0f       	add	r30, r18
    43c8:	f3 1f       	adc	r31, r19
    43ca:	80 81       	ld	r24, Z
    43cc:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_voidSendData>
		i++;
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	8f 5f       	subi	r24, 0xFF	; 255
    43d4:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 String[])
{
	u8 i = 0 ;
	while(String[i]!='\0')
    43d6:	89 81       	ldd	r24, Y+1	; 0x01
    43d8:	28 2f       	mov	r18, r24
    43da:	30 e0       	ldi	r19, 0x00	; 0
    43dc:	8a 81       	ldd	r24, Y+2	; 0x02
    43de:	9b 81       	ldd	r25, Y+3	; 0x03
    43e0:	fc 01       	movw	r30, r24
    43e2:	e2 0f       	add	r30, r18
    43e4:	f3 1f       	adc	r31, r19
    43e6:	80 81       	ld	r24, Z
    43e8:	88 23       	and	r24, r24
    43ea:	39 f7       	brne	.-50     	; 0x43ba <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	00 d0       	rcall	.+0      	; 0x43fe <LCD_voidSetPos+0x6>
    43fe:	0f 92       	push	r0
    4400:	cd b7       	in	r28, 0x3d	; 61
    4402:	de b7       	in	r29, 0x3e	; 62
    4404:	8a 83       	std	Y+2, r24	; 0x02
    4406:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	88 23       	and	r24, r24
    440c:	19 f4       	brne	.+6      	; 0x4414 <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    440e:	8b 81       	ldd	r24, Y+3	; 0x03
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	06 c0       	rjmp	.+12     	; 0x4420 <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	81 30       	cpi	r24, 0x01	; 1
    4418:	19 f4       	brne	.+6      	; 0x4420 <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    441a:	8b 81       	ldd	r24, Y+3	; 0x03
    441c:	80 5c       	subi	r24, 0xC0	; 192
    441e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    4420:	89 81       	ldd	r24, Y+1	; 0x01
    4422:	80 68       	ori	r24, 0x80	; 128
    4424:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
}
    4428:	0f 90       	pop	r0
    442a:	0f 90       	pop	r0
    442c:	0f 90       	pop	r0
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	08 95       	ret

00004434 <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    4434:	df 93       	push	r29
    4436:	cf 93       	push	r28
    4438:	cd b7       	in	r28, 0x3d	; 61
    443a:	de b7       	in	r29, 0x3e	; 62
    443c:	27 97       	sbiw	r28, 0x07	; 7
    443e:	0f b6       	in	r0, 0x3f	; 63
    4440:	f8 94       	cli
    4442:	de bf       	out	0x3e, r29	; 62
    4444:	0f be       	out	0x3f, r0	; 63
    4446:	cd bf       	out	0x3d, r28	; 61
    4448:	8b 83       	std	Y+3, r24	; 0x03
    444a:	7d 83       	std	Y+5, r23	; 0x05
    444c:	6c 83       	std	Y+4, r22	; 0x04
    444e:	4e 83       	std	Y+6, r20	; 0x06
    4450:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    4452:	8b 81       	ldd	r24, Y+3	; 0x03
    4454:	88 2f       	mov	r24, r24
    4456:	90 e0       	ldi	r25, 0x00	; 0
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	88 0f       	add	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	88 0f       	add	r24, r24
    4462:	99 1f       	adc	r25, r25
    4464:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    4466:	8a 81       	ldd	r24, Y+2	; 0x02
    4468:	80 64       	ori	r24, 0x40	; 64
    446a:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    446e:	19 82       	std	Y+1, r1	; 0x01
    4470:	0e c0       	rjmp	.+28     	; 0x448e <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    4472:	89 81       	ldd	r24, Y+1	; 0x01
    4474:	28 2f       	mov	r18, r24
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	8c 81       	ldd	r24, Y+4	; 0x04
    447a:	9d 81       	ldd	r25, Y+5	; 0x05
    447c:	fc 01       	movw	r30, r24
    447e:	e2 0f       	add	r30, r18
    4480:	f3 1f       	adc	r31, r19
    4482:	80 81       	ld	r24, Z
    4484:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	8f 5f       	subi	r24, 0xFF	; 255
    448c:	89 83       	std	Y+1, r24	; 0x01
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	88 30       	cpi	r24, 0x08	; 8
    4492:	78 f3       	brcs	.-34     	; 0x4472 <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    4494:	8e 81       	ldd	r24, Y+6	; 0x06
    4496:	6f 81       	ldd	r22, Y+7	; 0x07
    4498:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <LCD_voidSendData>
}
    44a2:	27 96       	adiw	r28, 0x07	; 7
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	f8 94       	cli
    44a8:	de bf       	out	0x3e, r29	; 62
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	cd bf       	out	0x3d, r28	; 61
    44ae:	cf 91       	pop	r28
    44b0:	df 91       	pop	r29
    44b2:	08 95       	ret

000044b4 <LCD_voidClear>:

void LCD_voidClear()
{
    44b4:	df 93       	push	r29
    44b6:	cf 93       	push	r28
    44b8:	cd b7       	in	r28, 0x3d	; 61
    44ba:	de b7       	in	r29, 0x3e	; 62
    44bc:	2e 97       	sbiw	r28, 0x0e	; 14
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	de bf       	out	0x3e, r29	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    44c8:	81 e0       	ldi	r24, 0x01	; 1
    44ca:	0e 94 95 1f 	call	0x3f2a	; 0x3f2a <LCD_voidSendCommand>
    44ce:	80 e0       	ldi	r24, 0x00	; 0
    44d0:	90 e0       	ldi	r25, 0x00	; 0
    44d2:	a0 e0       	ldi	r26, 0x00	; 0
    44d4:	b0 e4       	ldi	r27, 0x40	; 64
    44d6:	8b 87       	std	Y+11, r24	; 0x0b
    44d8:	9c 87       	std	Y+12, r25	; 0x0c
    44da:	ad 87       	std	Y+13, r26	; 0x0d
    44dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44de:	6b 85       	ldd	r22, Y+11	; 0x0b
    44e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44e6:	20 e0       	ldi	r18, 0x00	; 0
    44e8:	30 e0       	ldi	r19, 0x00	; 0
    44ea:	4a ef       	ldi	r20, 0xFA	; 250
    44ec:	54 e4       	ldi	r21, 0x44	; 68
    44ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	8f 83       	std	Y+7, r24	; 0x07
    44f8:	98 87       	std	Y+8, r25	; 0x08
    44fa:	a9 87       	std	Y+9, r26	; 0x09
    44fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4500:	78 85       	ldd	r23, Y+8	; 0x08
    4502:	89 85       	ldd	r24, Y+9	; 0x09
    4504:	9a 85       	ldd	r25, Y+10	; 0x0a
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	40 e8       	ldi	r20, 0x80	; 128
    450c:	5f e3       	ldi	r21, 0x3F	; 63
    450e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4512:	88 23       	and	r24, r24
    4514:	2c f4       	brge	.+10     	; 0x4520 <LCD_voidClear+0x6c>
		__ticks = 1;
    4516:	81 e0       	ldi	r24, 0x01	; 1
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	9e 83       	std	Y+6, r25	; 0x06
    451c:	8d 83       	std	Y+5, r24	; 0x05
    451e:	3f c0       	rjmp	.+126    	; 0x459e <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    4520:	6f 81       	ldd	r22, Y+7	; 0x07
    4522:	78 85       	ldd	r23, Y+8	; 0x08
    4524:	89 85       	ldd	r24, Y+9	; 0x09
    4526:	9a 85       	ldd	r25, Y+10	; 0x0a
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	3f ef       	ldi	r19, 0xFF	; 255
    452c:	4f e7       	ldi	r20, 0x7F	; 127
    452e:	57 e4       	ldi	r21, 0x47	; 71
    4530:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4534:	18 16       	cp	r1, r24
    4536:	4c f5       	brge	.+82     	; 0x458a <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4538:	6b 85       	ldd	r22, Y+11	; 0x0b
    453a:	7c 85       	ldd	r23, Y+12	; 0x0c
    453c:	8d 85       	ldd	r24, Y+13	; 0x0d
    453e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e2       	ldi	r20, 0x20	; 32
    4546:	51 e4       	ldi	r21, 0x41	; 65
    4548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454c:	dc 01       	movw	r26, r24
    454e:	cb 01       	movw	r24, r22
    4550:	bc 01       	movw	r22, r24
    4552:	cd 01       	movw	r24, r26
    4554:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4558:	dc 01       	movw	r26, r24
    455a:	cb 01       	movw	r24, r22
    455c:	9e 83       	std	Y+6, r25	; 0x06
    455e:	8d 83       	std	Y+5, r24	; 0x05
    4560:	0f c0       	rjmp	.+30     	; 0x4580 <LCD_voidClear+0xcc>
    4562:	88 ec       	ldi	r24, 0xC8	; 200
    4564:	90 e0       	ldi	r25, 0x00	; 0
    4566:	9c 83       	std	Y+4, r25	; 0x04
    4568:	8b 83       	std	Y+3, r24	; 0x03
    456a:	8b 81       	ldd	r24, Y+3	; 0x03
    456c:	9c 81       	ldd	r25, Y+4	; 0x04
    456e:	01 97       	sbiw	r24, 0x01	; 1
    4570:	f1 f7       	brne	.-4      	; 0x456e <LCD_voidClear+0xba>
    4572:	9c 83       	std	Y+4, r25	; 0x04
    4574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4576:	8d 81       	ldd	r24, Y+5	; 0x05
    4578:	9e 81       	ldd	r25, Y+6	; 0x06
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	9e 83       	std	Y+6, r25	; 0x06
    457e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	69 f7       	brne	.-38     	; 0x4562 <LCD_voidClear+0xae>
    4588:	14 c0       	rjmp	.+40     	; 0x45b2 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    458a:	6f 81       	ldd	r22, Y+7	; 0x07
    458c:	78 85       	ldd	r23, Y+8	; 0x08
    458e:	89 85       	ldd	r24, Y+9	; 0x09
    4590:	9a 85       	ldd	r25, Y+10	; 0x0a
    4592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4596:	dc 01       	movw	r26, r24
    4598:	cb 01       	movw	r24, r22
    459a:	9e 83       	std	Y+6, r25	; 0x06
    459c:	8d 83       	std	Y+5, r24	; 0x05
    459e:	8d 81       	ldd	r24, Y+5	; 0x05
    45a0:	9e 81       	ldd	r25, Y+6	; 0x06
    45a2:	9a 83       	std	Y+2, r25	; 0x02
    45a4:	89 83       	std	Y+1, r24	; 0x01
    45a6:	89 81       	ldd	r24, Y+1	; 0x01
    45a8:	9a 81       	ldd	r25, Y+2	; 0x02
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	f1 f7       	brne	.-4      	; 0x45aa <LCD_voidClear+0xf6>
    45ae:	9a 83       	std	Y+2, r25	; 0x02
    45b0:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    45b2:	2e 96       	adiw	r28, 0x0e	; 14
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	cf 91       	pop	r28
    45c0:	df 91       	pop	r29
    45c2:	08 95       	ret

000045c4 <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    45c4:	0f 93       	push	r16
    45c6:	1f 93       	push	r17
    45c8:	df 93       	push	r29
    45ca:	cf 93       	push	r28
    45cc:	cd b7       	in	r28, 0x3d	; 61
    45ce:	de b7       	in	r29, 0x3e	; 62
    45d0:	a0 97       	sbiw	r28, 0x20	; 32
    45d2:	0f b6       	in	r0, 0x3f	; 63
    45d4:	f8 94       	cli
    45d6:	de bf       	out	0x3e, r29	; 62
    45d8:	0f be       	out	0x3f, r0	; 63
    45da:	cd bf       	out	0x3d, r28	; 61
    45dc:	6d 8f       	std	Y+29, r22	; 0x1d
    45de:	7e 8f       	std	Y+30, r23	; 0x1e
    45e0:	8f 8f       	std	Y+31, r24	; 0x1f
    45e2:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    45e4:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    45e6:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    45e8:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    45ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45ee:	af 8d       	ldd	r26, Y+31	; 0x1f
    45f0:	b8 a1       	ldd	r27, Y+32	; 0x20
    45f2:	bb 23       	and	r27, r27
    45f4:	c4 f4       	brge	.+48     	; 0x4626 <LCD_voidSendNumber+0x62>
        num = -num;
    45f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    45f8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45fa:	af 8d       	ldd	r26, Y+31	; 0x1f
    45fc:	b8 a1       	ldd	r27, Y+32	; 0x20
    45fe:	b0 95       	com	r27
    4600:	a0 95       	com	r26
    4602:	90 95       	com	r25
    4604:	81 95       	neg	r24
    4606:	9f 4f       	sbci	r25, 0xFF	; 255
    4608:	af 4f       	sbci	r26, 0xFF	; 255
    460a:	bf 4f       	sbci	r27, 0xFF	; 255
    460c:	8d 8f       	std	Y+29, r24	; 0x1d
    460e:	9e 8f       	std	Y+30, r25	; 0x1e
    4610:	af 8f       	std	Y+31, r26	; 0x1f
    4612:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    461c:	8d e2       	ldi	r24, 0x2D	; 45
    461e:	89 87       	std	Y+9, r24	; 0x09
        length++;
    4620:	8f 81       	ldd	r24, Y+7	; 0x07
    4622:	8f 5f       	subi	r24, 0xFF	; 255
    4624:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    4626:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4628:	9e 8d       	ldd	r25, Y+30	; 0x1e
    462a:	af 8d       	ldd	r26, Y+31	; 0x1f
    462c:	b8 a1       	ldd	r27, Y+32	; 0x20
    462e:	89 83       	std	Y+1, r24	; 0x01
    4630:	9a 83       	std	Y+2, r25	; 0x02
    4632:	ab 83       	std	Y+3, r26	; 0x03
    4634:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    4636:	89 81       	ldd	r24, Y+1	; 0x01
    4638:	9a 81       	ldd	r25, Y+2	; 0x02
    463a:	ab 81       	ldd	r26, Y+3	; 0x03
    463c:	bc 81       	ldd	r27, Y+4	; 0x04
    463e:	2a e0       	ldi	r18, 0x0A	; 10
    4640:	30 e0       	ldi	r19, 0x00	; 0
    4642:	40 e0       	ldi	r20, 0x00	; 0
    4644:	50 e0       	ldi	r21, 0x00	; 0
    4646:	bc 01       	movw	r22, r24
    4648:	cd 01       	movw	r24, r26
    464a:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <__udivmodsi4>
    464e:	da 01       	movw	r26, r20
    4650:	c9 01       	movw	r24, r18
    4652:	89 83       	std	Y+1, r24	; 0x01
    4654:	9a 83       	std	Y+2, r25	; 0x02
    4656:	ab 83       	std	Y+3, r26	; 0x03
    4658:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    465a:	8f 81       	ldd	r24, Y+7	; 0x07
    465c:	8f 5f       	subi	r24, 0xFF	; 255
    465e:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    4660:	89 81       	ldd	r24, Y+1	; 0x01
    4662:	9a 81       	ldd	r25, Y+2	; 0x02
    4664:	ab 81       	ldd	r26, Y+3	; 0x03
    4666:	bc 81       	ldd	r27, Y+4	; 0x04
    4668:	00 97       	sbiw	r24, 0x00	; 0
    466a:	a1 05       	cpc	r26, r1
    466c:	b1 05       	cpc	r27, r1
    466e:	19 f7       	brne	.-58     	; 0x4636 <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    4670:	8f 81       	ldd	r24, Y+7	; 0x07
    4672:	81 50       	subi	r24, 0x01	; 1
    4674:	88 87       	std	Y+8, r24	; 0x08
    4676:	30 c0       	rjmp	.+96     	; 0x46d8 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    4678:	88 85       	ldd	r24, Y+8	; 0x08
    467a:	08 2f       	mov	r16, r24
    467c:	11 27       	eor	r17, r17
    467e:	07 fd       	sbrc	r16, 7
    4680:	10 95       	com	r17
    4682:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4684:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4686:	af 8d       	ldd	r26, Y+31	; 0x1f
    4688:	b8 a1       	ldd	r27, Y+32	; 0x20
    468a:	2a e0       	ldi	r18, 0x0A	; 10
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	40 e0       	ldi	r20, 0x00	; 0
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	bc 01       	movw	r22, r24
    4694:	cd 01       	movw	r24, r26
    4696:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__divmodsi4>
    469a:	dc 01       	movw	r26, r24
    469c:	cb 01       	movw	r24, r22
    469e:	28 2f       	mov	r18, r24
    46a0:	20 5d       	subi	r18, 0xD0	; 208
    46a2:	ce 01       	movw	r24, r28
    46a4:	09 96       	adiw	r24, 0x09	; 9
    46a6:	fc 01       	movw	r30, r24
    46a8:	e0 0f       	add	r30, r16
    46aa:	f1 1f       	adc	r31, r17
    46ac:	20 83       	st	Z, r18
        num /= 10;
    46ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46b2:	af 8d       	ldd	r26, Y+31	; 0x1f
    46b4:	b8 a1       	ldd	r27, Y+32	; 0x20
    46b6:	2a e0       	ldi	r18, 0x0A	; 10
    46b8:	30 e0       	ldi	r19, 0x00	; 0
    46ba:	40 e0       	ldi	r20, 0x00	; 0
    46bc:	50 e0       	ldi	r21, 0x00	; 0
    46be:	bc 01       	movw	r22, r24
    46c0:	cd 01       	movw	r24, r26
    46c2:	0e 94 16 27 	call	0x4e2c	; 0x4e2c <__divmodsi4>
    46c6:	da 01       	movw	r26, r20
    46c8:	c9 01       	movw	r24, r18
    46ca:	8d 8f       	std	Y+29, r24	; 0x1d
    46cc:	9e 8f       	std	Y+30, r25	; 0x1e
    46ce:	af 8f       	std	Y+31, r26	; 0x1f
    46d0:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    46d2:	88 85       	ldd	r24, Y+8	; 0x08
    46d4:	81 50       	subi	r24, 0x01	; 1
    46d6:	88 87       	std	Y+8, r24	; 0x08
    46d8:	88 85       	ldd	r24, Y+8	; 0x08
    46da:	28 2f       	mov	r18, r24
    46dc:	33 27       	eor	r19, r19
    46de:	27 fd       	sbrc	r18, 7
    46e0:	30 95       	com	r19
    46e2:	8e 81       	ldd	r24, Y+6	; 0x06
    46e4:	88 2f       	mov	r24, r24
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	28 17       	cp	r18, r24
    46ea:	39 07       	cpc	r19, r25
    46ec:	2c f6       	brge	.-118    	; 0x4678 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    46ee:	8f 81       	ldd	r24, Y+7	; 0x07
    46f0:	28 2f       	mov	r18, r24
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	ce 01       	movw	r24, r28
    46f6:	09 96       	adiw	r24, 0x09	; 9
    46f8:	fc 01       	movw	r30, r24
    46fa:	e2 0f       	add	r30, r18
    46fc:	f3 1f       	adc	r31, r19
    46fe:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    4700:	ce 01       	movw	r24, r28
    4702:	09 96       	adiw	r24, 0x09	; 9
    4704:	0e 94 d3 21 	call	0x43a6	; 0x43a6 <LCD_voidSendString>
}
    4708:	a0 96       	adiw	r28, 0x20	; 32
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	de bf       	out	0x3e, r29	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	cd bf       	out	0x3d, r28	; 61
    4714:	cf 91       	pop	r28
    4716:	df 91       	pop	r29
    4718:	1f 91       	pop	r17
    471a:	0f 91       	pop	r16
    471c:	08 95       	ret

0000471e <LM35_voidInit>:
 */

#include "LM35_Interface.h"
#include <util/delay.h>
void LM35_voidInit()
{
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
    4726:	61 97       	sbiw	r28, 0x11	; 17
    4728:	0f b6       	in	r0, 0x3f	; 63
    472a:	f8 94       	cli
    472c:	de bf       	out	0x3e, r29	; 62
    472e:	0f be       	out	0x3f, r0	; 63
    4730:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDir(LM35Group,LM35Pin,Input);
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	63 e0       	ldi	r22, 0x03	; 3
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	ADCInformation ADCInformationLM35;
	ADCInformationLM35.AutoTriggerState=LM35_ADC_AutoTriggerState;
    473c:	1f 86       	std	Y+15, r1	; 0x0f
	ADCInformationLM35.TriggerSource=LM35_ADC_TriggerSource;
    473e:	18 8a       	std	Y+16, r1	; 0x10
	ADCInformationLM35.DivisionFactor=LM35_ADC_DivisionFactor;
    4740:	83 e0       	ldi	r24, 0x03	; 3
    4742:	89 8b       	std	Y+17, r24	; 0x11
#if LM35Mode==Polling
	ADC_voidInitPolling(ADCInformationLM35);
    4744:	6f 85       	ldd	r22, Y+15	; 0x0f
    4746:	78 89       	ldd	r23, Y+16	; 0x10
    4748:	89 89       	ldd	r24, Y+17	; 0x11
    474a:	0e 94 2f 18 	call	0x305e	; 0x305e <ADC_voidInitPolling>
    474e:	80 e0       	ldi	r24, 0x00	; 0
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	a6 e9       	ldi	r26, 0x96	; 150
    4754:	b3 e4       	ldi	r27, 0x43	; 67
    4756:	8b 87       	std	Y+11, r24	; 0x0b
    4758:	9c 87       	std	Y+12, r25	; 0x0c
    475a:	ad 87       	std	Y+13, r26	; 0x0d
    475c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    475e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4760:	7c 85       	ldd	r23, Y+12	; 0x0c
    4762:	8d 85       	ldd	r24, Y+13	; 0x0d
    4764:	9e 85       	ldd	r25, Y+14	; 0x0e
    4766:	20 e0       	ldi	r18, 0x00	; 0
    4768:	30 e0       	ldi	r19, 0x00	; 0
    476a:	4a ef       	ldi	r20, 0xFA	; 250
    476c:	54 e4       	ldi	r21, 0x44	; 68
    476e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4772:	dc 01       	movw	r26, r24
    4774:	cb 01       	movw	r24, r22
    4776:	8f 83       	std	Y+7, r24	; 0x07
    4778:	98 87       	std	Y+8, r25	; 0x08
    477a:	a9 87       	std	Y+9, r26	; 0x09
    477c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    477e:	6f 81       	ldd	r22, Y+7	; 0x07
    4780:	78 85       	ldd	r23, Y+8	; 0x08
    4782:	89 85       	ldd	r24, Y+9	; 0x09
    4784:	9a 85       	ldd	r25, Y+10	; 0x0a
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	40 e8       	ldi	r20, 0x80	; 128
    478c:	5f e3       	ldi	r21, 0x3F	; 63
    478e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4792:	88 23       	and	r24, r24
    4794:	2c f4       	brge	.+10     	; 0x47a0 <LM35_voidInit+0x82>
		__ticks = 1;
    4796:	81 e0       	ldi	r24, 0x01	; 1
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	9e 83       	std	Y+6, r25	; 0x06
    479c:	8d 83       	std	Y+5, r24	; 0x05
    479e:	3f c0       	rjmp	.+126    	; 0x481e <LM35_voidInit+0x100>
	else if (__tmp > 65535)
    47a0:	6f 81       	ldd	r22, Y+7	; 0x07
    47a2:	78 85       	ldd	r23, Y+8	; 0x08
    47a4:	89 85       	ldd	r24, Y+9	; 0x09
    47a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	3f ef       	ldi	r19, 0xFF	; 255
    47ac:	4f e7       	ldi	r20, 0x7F	; 127
    47ae:	57 e4       	ldi	r21, 0x47	; 71
    47b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47b4:	18 16       	cp	r1, r24
    47b6:	4c f5       	brge	.+82     	; 0x480a <LM35_voidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    47ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    47bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    47be:	9e 85       	ldd	r25, Y+14	; 0x0e
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e2       	ldi	r20, 0x20	; 32
    47c6:	51 e4       	ldi	r21, 0x41	; 65
    47c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47cc:	dc 01       	movw	r26, r24
    47ce:	cb 01       	movw	r24, r22
    47d0:	bc 01       	movw	r22, r24
    47d2:	cd 01       	movw	r24, r26
    47d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	9e 83       	std	Y+6, r25	; 0x06
    47de:	8d 83       	std	Y+5, r24	; 0x05
    47e0:	0f c0       	rjmp	.+30     	; 0x4800 <LM35_voidInit+0xe2>
    47e2:	88 ec       	ldi	r24, 0xC8	; 200
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	9c 83       	std	Y+4, r25	; 0x04
    47e8:	8b 83       	std	Y+3, r24	; 0x03
    47ea:	8b 81       	ldd	r24, Y+3	; 0x03
    47ec:	9c 81       	ldd	r25, Y+4	; 0x04
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <LM35_voidInit+0xd0>
    47f2:	9c 83       	std	Y+4, r25	; 0x04
    47f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47f6:	8d 81       	ldd	r24, Y+5	; 0x05
    47f8:	9e 81       	ldd	r25, Y+6	; 0x06
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	9e 83       	std	Y+6, r25	; 0x06
    47fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4800:	8d 81       	ldd	r24, Y+5	; 0x05
    4802:	9e 81       	ldd	r25, Y+6	; 0x06
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	69 f7       	brne	.-38     	; 0x47e2 <LM35_voidInit+0xc4>
    4808:	14 c0       	rjmp	.+40     	; 0x4832 <LM35_voidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    480a:	6f 81       	ldd	r22, Y+7	; 0x07
    480c:	78 85       	ldd	r23, Y+8	; 0x08
    480e:	89 85       	ldd	r24, Y+9	; 0x09
    4810:	9a 85       	ldd	r25, Y+10	; 0x0a
    4812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4816:	dc 01       	movw	r26, r24
    4818:	cb 01       	movw	r24, r22
    481a:	9e 83       	std	Y+6, r25	; 0x06
    481c:	8d 83       	std	Y+5, r24	; 0x05
    481e:	8d 81       	ldd	r24, Y+5	; 0x05
    4820:	9e 81       	ldd	r25, Y+6	; 0x06
    4822:	9a 83       	std	Y+2, r25	; 0x02
    4824:	89 83       	std	Y+1, r24	; 0x01
    4826:	89 81       	ldd	r24, Y+1	; 0x01
    4828:	9a 81       	ldd	r25, Y+2	; 0x02
    482a:	01 97       	sbiw	r24, 0x01	; 1
    482c:	f1 f7       	brne	.-4      	; 0x482a <LM35_voidInit+0x10c>
    482e:	9a 83       	std	Y+2, r25	; 0x02
    4830:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
#elif LM35Mode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    4832:	61 96       	adiw	r28, 0x11	; 17
    4834:	0f b6       	in	r0, 0x3f	; 63
    4836:	f8 94       	cli
    4838:	de bf       	out	0x3e, r29	; 62
    483a:	0f be       	out	0x3f, r0	; 63
    483c:	cd bf       	out	0x3d, r28	; 61
    483e:	cf 91       	pop	r28
    4840:	df 91       	pop	r29
    4842:	08 95       	ret

00004844 <LM35_voidRead>:

void LM35_voidRead(u16 *temp)
{
    4844:	df 93       	push	r29
    4846:	cf 93       	push	r28
    4848:	00 d0       	rcall	.+0      	; 0x484a <LM35_voidRead+0x6>
    484a:	cd b7       	in	r28, 0x3d	; 61
    484c:	de b7       	in	r29, 0x3e	; 62
    484e:	9a 83       	std	Y+2, r25	; 0x02
    4850:	89 83       	std	Y+1, r24	; 0x01
#if LM35Mode==Polling
	ADC_voidReadResultPolling(LM35Pin,temp);
    4852:	29 81       	ldd	r18, Y+1	; 0x01
    4854:	3a 81       	ldd	r19, Y+2	; 0x02
    4856:	83 e0       	ldi	r24, 0x03	; 3
    4858:	b9 01       	movw	r22, r18
    485a:	0e 94 9a 18 	call	0x3134	; 0x3134 <ADC_voidReadResultPolling>
	*temp=((u32)(*temp)*ADCRefmV)/DACRes; //convert ot equevilant mV
    485e:	e9 81       	ldd	r30, Y+1	; 0x01
    4860:	fa 81       	ldd	r31, Y+2	; 0x02
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	cc 01       	movw	r24, r24
    4868:	a0 e0       	ldi	r26, 0x00	; 0
    486a:	b0 e0       	ldi	r27, 0x00	; 0
    486c:	28 e8       	ldi	r18, 0x88	; 136
    486e:	33 e1       	ldi	r19, 0x13	; 19
    4870:	40 e0       	ldi	r20, 0x00	; 0
    4872:	50 e0       	ldi	r21, 0x00	; 0
    4874:	bc 01       	movw	r22, r24
    4876:	cd 01       	movw	r24, r26
    4878:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulsi3>
    487c:	dc 01       	movw	r26, r24
    487e:	cb 01       	movw	r24, r22
    4880:	07 2e       	mov	r0, r23
    4882:	7a e0       	ldi	r23, 0x0A	; 10
    4884:	b6 95       	lsr	r27
    4886:	a7 95       	ror	r26
    4888:	97 95       	ror	r25
    488a:	87 95       	ror	r24
    488c:	7a 95       	dec	r23
    488e:	d1 f7       	brne	.-12     	; 0x4884 <LM35_voidRead+0x40>
    4890:	70 2d       	mov	r23, r0
    4892:	e9 81       	ldd	r30, Y+1	; 0x01
    4894:	fa 81       	ldd	r31, Y+2	; 0x02
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	80 83       	st	Z, r24
	*temp= (*temp)/10.00;
    489a:	e9 81       	ldd	r30, Y+1	; 0x01
    489c:	fa 81       	ldd	r31, Y+2	; 0x02
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	cc 01       	movw	r24, r24
    48a4:	a0 e0       	ldi	r26, 0x00	; 0
    48a6:	b0 e0       	ldi	r27, 0x00	; 0
    48a8:	bc 01       	movw	r22, r24
    48aa:	cd 01       	movw	r24, r26
    48ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    48b0:	dc 01       	movw	r26, r24
    48b2:	cb 01       	movw	r24, r22
    48b4:	bc 01       	movw	r22, r24
    48b6:	cd 01       	movw	r24, r26
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	40 e2       	ldi	r20, 0x20	; 32
    48be:	51 e4       	ldi	r21, 0x41	; 65
    48c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	bc 01       	movw	r22, r24
    48ca:	cd 01       	movw	r24, r26
    48cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d0:	dc 01       	movw	r26, r24
    48d2:	cb 01       	movw	r24, r22
    48d4:	e9 81       	ldd	r30, Y+1	; 0x01
    48d6:	fa 81       	ldd	r31, Y+2	; 0x02
    48d8:	91 83       	std	Z+1, r25	; 0x01
    48da:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    48dc:	0f 90       	pop	r0
    48de:	0f 90       	pop	r0
    48e0:	cf 91       	pop	r28
    48e2:	df 91       	pop	r29
    48e4:	08 95       	ret

000048e6 <LDR_voidInit>:
 */

#include "LDR_Interface.h"

void LDR_voidInit()
{
    48e6:	df 93       	push	r29
    48e8:	cf 93       	push	r28
    48ea:	00 d0       	rcall	.+0      	; 0x48ec <LDR_voidInit+0x6>
    48ec:	0f 92       	push	r0
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LDRGroup,LDRPin,Input);
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	64 e0       	ldi	r22, 0x04	; 4
    48f6:	40 e0       	ldi	r20, 0x00	; 0
    48f8:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	ADCInformation ADCInformationLDR;
	ADCInformationLDR.AutoTriggerState=LDR_ADC_AutoTriggerState;
    48fc:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationLDR.TriggerSource=LDR_ADC_TriggerSource;
    48fe:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationLDR.DivisionFactor=LDR_ADC_DivisionFactor;
    4900:	83 e0       	ldi	r24, 0x03	; 3
    4902:	8b 83       	std	Y+3, r24	; 0x03
#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
    4904:	69 81       	ldd	r22, Y+1	; 0x01
    4906:	7a 81       	ldd	r23, Y+2	; 0x02
    4908:	8b 81       	ldd	r24, Y+3	; 0x03
    490a:	0e 94 2f 18 	call	0x305e	; 0x305e <ADC_voidInitPolling>
#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    490e:	0f 90       	pop	r0
    4910:	0f 90       	pop	r0
    4912:	0f 90       	pop	r0
    4914:	cf 91       	pop	r28
    4916:	df 91       	pop	r29
    4918:	08 95       	ret

0000491a <LDR_voidRead>:

void LDR_voidRead(u16 *Light)
{
    491a:	df 93       	push	r29
    491c:	cf 93       	push	r28
    491e:	00 d0       	rcall	.+0      	; 0x4920 <LDR_voidRead+0x6>
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	9a 83       	std	Y+2, r25	; 0x02
    4926:	89 83       	std	Y+1, r24	; 0x01
#if LDRMode==Polling
	ADC_voidReadResultPolling(LDRPin,Light);
    4928:	29 81       	ldd	r18, Y+1	; 0x01
    492a:	3a 81       	ldd	r19, Y+2	; 0x02
    492c:	84 e0       	ldi	r24, 0x04	; 4
    492e:	b9 01       	movw	r22, r18
    4930:	0e 94 9a 18 	call	0x3134	; 0x3134 <ADC_voidReadResultPolling>
	*Light=((u32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV
    4934:	e9 81       	ldd	r30, Y+1	; 0x01
    4936:	fa 81       	ldd	r31, Y+2	; 0x02
    4938:	80 81       	ld	r24, Z
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	cc 01       	movw	r24, r24
    493e:	a0 e0       	ldi	r26, 0x00	; 0
    4940:	b0 e0       	ldi	r27, 0x00	; 0
    4942:	28 e8       	ldi	r18, 0x88	; 136
    4944:	33 e1       	ldi	r19, 0x13	; 19
    4946:	40 e0       	ldi	r20, 0x00	; 0
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	bc 01       	movw	r22, r24
    494c:	cd 01       	movw	r24, r26
    494e:	0e 94 c2 26 	call	0x4d84	; 0x4d84 <__mulsi3>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	07 2e       	mov	r0, r23
    4958:	7a e0       	ldi	r23, 0x0A	; 10
    495a:	b6 95       	lsr	r27
    495c:	a7 95       	ror	r26
    495e:	97 95       	ror	r25
    4960:	87 95       	ror	r24
    4962:	7a 95       	dec	r23
    4964:	d1 f7       	brne	.-12     	; 0x495a <LDR_voidRead+0x40>
    4966:	70 2d       	mov	r23, r0
    4968:	e9 81       	ldd	r30, Y+1	; 0x01
    496a:	fa 81       	ldd	r31, Y+2	; 0x02
    496c:	91 83       	std	Z+1, r25	; 0x01
    496e:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	cf 91       	pop	r28
    4976:	df 91       	pop	r29
    4978:	08 95       	ret

0000497a <KEYPAD_voidInit>:
#include "Keypad_Interface.h"
#include "../../Common/definition.h"
u8 keypad_value1[Row][Column]= KEYPAD_ARR1;
u8 keypad_value2[Row][Column]=KEYPAD_ARR2;
void KEYPAD_voidInit()
{
    497a:	df 93       	push	r29
    497c:	cf 93       	push	r28
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(KeypadGroup,0xF0);
    4982:	84 e0       	ldi	r24, 0x04	; 4
    4984:	60 ef       	ldi	r22, 0xF0	; 240
    4986:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(KeypadGroup,0xFF);
    498a:	84 e0       	ldi	r24, 0x04	; 4
    498c:	6f ef       	ldi	r22, 0xFF	; 255
    498e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
}
    4992:	cf 91       	pop	r28
    4994:	df 91       	pop	r29
    4996:	08 95       	ret

00004998 <KEYPAD_u8GetValue1>:

u8 KEYPAD_u8GetValue1()
{
    4998:	df 93       	push	r29
    499a:	cf 93       	push	r28
    499c:	00 d0       	rcall	.+0      	; 0x499e <KEYPAD_u8GetValue1+0x6>
    499e:	0f 92       	push	r0
    49a0:	cd b7       	in	r28, 0x3d	; 61
    49a2:	de b7       	in	r29, 0x3e	; 62
	u8 C , R ;
	for(C=0;C<Column;C++)
    49a4:	1a 82       	std	Y+2, r1	; 0x02
    49a6:	38 c0       	rjmp	.+112    	; 0x4a18 <KEYPAD_u8GetValue1+0x80>
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
    49a8:	84 e0       	ldi	r24, 0x04	; 4
    49aa:	6f ef       	ldi	r22, 0xFF	; 255
    49ac:	0e 94 83 17 	call	0x2f06	; 0x2f06 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    49b0:	8a 81       	ldd	r24, Y+2	; 0x02
    49b2:	98 2f       	mov	r25, r24
    49b4:	9c 5f       	subi	r25, 0xFC	; 252
    49b6:	84 e0       	ldi	r24, 0x04	; 4
    49b8:	69 2f       	mov	r22, r25
    49ba:	40 e0       	ldi	r20, 0x00	; 0
    49bc:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    49c0:	19 82       	std	Y+1, r1	; 0x01
    49c2:	1c c0       	rjmp	.+56     	; 0x49fc <KEYPAD_u8GetValue1+0x64>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    49c4:	84 e0       	ldi	r24, 0x04	; 4
    49c6:	69 81       	ldd	r22, Y+1	; 0x01
    49c8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
    49cc:	88 23       	and	r24, r24
    49ce:	99 f4       	brne	.+38     	; 0x49f6 <KEYPAD_u8GetValue1+0x5e>
			{
				return keypad_value1[R][C];
    49d0:	89 81       	ldd	r24, Y+1	; 0x01
    49d2:	48 2f       	mov	r20, r24
    49d4:	50 e0       	ldi	r21, 0x00	; 0
    49d6:	8a 81       	ldd	r24, Y+2	; 0x02
    49d8:	28 2f       	mov	r18, r24
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	ca 01       	movw	r24, r20
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	88 0f       	add	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	82 0f       	add	r24, r18
    49e8:	93 1f       	adc	r25, r19
    49ea:	fc 01       	movw	r30, r24
    49ec:	ee 58       	subi	r30, 0x8E	; 142
    49ee:	fe 4f       	sbci	r31, 0xFE	; 254
    49f0:	80 81       	ld	r24, Z
    49f2:	8b 83       	std	Y+3, r24	; 0x03
    49f4:	16 c0       	rjmp	.+44     	; 0x4a22 <KEYPAD_u8GetValue1+0x8a>
	u8 C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    49f6:	89 81       	ldd	r24, Y+1	; 0x01
    49f8:	8f 5f       	subi	r24, 0xFF	; 255
    49fa:	89 83       	std	Y+1, r24	; 0x01
    49fc:	89 81       	ldd	r24, Y+1	; 0x01
    49fe:	84 30       	cpi	r24, 0x04	; 4
    4a00:	08 f3       	brcs	.-62     	; 0x49c4 <KEYPAD_u8GetValue1+0x2c>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
    4a02:	8a 81       	ldd	r24, Y+2	; 0x02
    4a04:	98 2f       	mov	r25, r24
    4a06:	9c 5f       	subi	r25, 0xFC	; 252
    4a08:	84 e0       	ldi	r24, 0x04	; 4
    4a0a:	69 2f       	mov	r22, r25
    4a0c:	41 e0       	ldi	r20, 0x01	; 1
    4a0e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}

u8 KEYPAD_u8GetValue1()
{
	u8 C , R ;
	for(C=0;C<Column;C++)
    4a12:	8a 81       	ldd	r24, Y+2	; 0x02
    4a14:	8f 5f       	subi	r24, 0xFF	; 255
    4a16:	8a 83       	std	Y+2, r24	; 0x02
    4a18:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1a:	84 30       	cpi	r24, 0x04	; 4
    4a1c:	28 f2       	brcs	.-118    	; 0x49a8 <KEYPAD_u8GetValue1+0x10>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
	}
	return Unpressed ;
    4a1e:	8f ef       	ldi	r24, 0xFF	; 255
    4a20:	8b 83       	std	Y+3, r24	; 0x03
    4a22:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4a24:	0f 90       	pop	r0
    4a26:	0f 90       	pop	r0
    4a28:	0f 90       	pop	r0
    4a2a:	cf 91       	pop	r28
    4a2c:	df 91       	pop	r29
    4a2e:	08 95       	ret

00004a30 <KEYPAD_charGetValue2>:

char KEYPAD_charGetValue2()
{
    4a30:	df 93       	push	r29
    4a32:	cf 93       	push	r28
    4a34:	00 d0       	rcall	.+0      	; 0x4a36 <KEYPAD_charGetValue2+0x6>
    4a36:	00 d0       	rcall	.+0      	; 0x4a38 <KEYPAD_charGetValue2+0x8>
    4a38:	0f 92       	push	r0
    4a3a:	cd b7       	in	r28, 0x3d	; 61
    4a3c:	de b7       	in	r29, 0x3e	; 62
	int C , R ;
	for(C=0;C<Column;C++)
    4a3e:	1c 82       	std	Y+4, r1	; 0x04
    4a40:	1b 82       	std	Y+3, r1	; 0x03
    4a42:	39 c0       	rjmp	.+114    	; 0x4ab6 <KEYPAD_charGetValue2+0x86>
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    4a44:	8b 81       	ldd	r24, Y+3	; 0x03
    4a46:	98 2f       	mov	r25, r24
    4a48:	9c 5f       	subi	r25, 0xFC	; 252
    4a4a:	84 e0       	ldi	r24, 0x04	; 4
    4a4c:	69 2f       	mov	r22, r25
    4a4e:	40 e0       	ldi	r20, 0x00	; 0
    4a50:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    4a54:	1a 82       	std	Y+2, r1	; 0x02
    4a56:	19 82       	std	Y+1, r1	; 0x01
    4a58:	1c c0       	rjmp	.+56     	; 0x4a92 <KEYPAD_charGetValue2+0x62>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    4a5a:	99 81       	ldd	r25, Y+1	; 0x01
    4a5c:	84 e0       	ldi	r24, 0x04	; 4
    4a5e:	69 2f       	mov	r22, r25
    4a60:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
    4a64:	88 23       	and	r24, r24
    4a66:	81 f4       	brne	.+32     	; 0x4a88 <KEYPAD_charGetValue2+0x58>
			{
				return keypad_value1[R][C];
    4a68:	89 81       	ldd	r24, Y+1	; 0x01
    4a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    4a70:	88 0f       	add	r24, r24
    4a72:	99 1f       	adc	r25, r25
    4a74:	88 0f       	add	r24, r24
    4a76:	99 1f       	adc	r25, r25
    4a78:	82 0f       	add	r24, r18
    4a7a:	93 1f       	adc	r25, r19
    4a7c:	fc 01       	movw	r30, r24
    4a7e:	ee 58       	subi	r30, 0x8E	; 142
    4a80:	fe 4f       	sbci	r31, 0xFE	; 254
    4a82:	80 81       	ld	r24, Z
    4a84:	8d 83       	std	Y+5, r24	; 0x05
    4a86:	1e c0       	rjmp	.+60     	; 0x4ac4 <KEYPAD_charGetValue2+0x94>
{
	int C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    4a88:	89 81       	ldd	r24, Y+1	; 0x01
    4a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4a8c:	01 96       	adiw	r24, 0x01	; 1
    4a8e:	9a 83       	std	Y+2, r25	; 0x02
    4a90:	89 83       	std	Y+1, r24	; 0x01
    4a92:	89 81       	ldd	r24, Y+1	; 0x01
    4a94:	9a 81       	ldd	r25, Y+2	; 0x02
    4a96:	84 30       	cpi	r24, 0x04	; 4
    4a98:	91 05       	cpc	r25, r1
    4a9a:	fc f2       	brlt	.-66     	; 0x4a5a <KEYPAD_charGetValue2+0x2a>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    4a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4a9e:	98 2f       	mov	r25, r24
    4aa0:	9c 5f       	subi	r25, 0xFC	; 252
    4aa2:	84 e0       	ldi	r24, 0x04	; 4
    4aa4:	69 2f       	mov	r22, r25
    4aa6:	40 e0       	ldi	r20, 0x00	; 0
    4aa8:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}

char KEYPAD_charGetValue2()
{
	int C , R ;
	for(C=0;C<Column;C++)
    4aac:	8b 81       	ldd	r24, Y+3	; 0x03
    4aae:	9c 81       	ldd	r25, Y+4	; 0x04
    4ab0:	01 96       	adiw	r24, 0x01	; 1
    4ab2:	9c 83       	std	Y+4, r25	; 0x04
    4ab4:	8b 83       	std	Y+3, r24	; 0x03
    4ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aba:	84 30       	cpi	r24, 0x04	; 4
    4abc:	91 05       	cpc	r25, r1
    4abe:	14 f2       	brlt	.-124    	; 0x4a44 <KEYPAD_charGetValue2+0x14>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
	}
	return Unpressed ;
    4ac0:	8f ef       	ldi	r24, 0xFF	; 255
    4ac2:	8d 83       	std	Y+5, r24	; 0x05
    4ac4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4ac6:	0f 90       	pop	r0
    4ac8:	0f 90       	pop	r0
    4aca:	0f 90       	pop	r0
    4acc:	0f 90       	pop	r0
    4ace:	0f 90       	pop	r0
    4ad0:	cf 91       	pop	r28
    4ad2:	df 91       	pop	r29
    4ad4:	08 95       	ret

00004ad6 <GasSensor_voidAnalogInit>:
 */

#include "GasSensor_Interface.h"

void GasSensor_voidAnalogInit()
{
    4ad6:	df 93       	push	r29
    4ad8:	cf 93       	push	r28
    4ada:	00 d0       	rcall	.+0      	; 0x4adc <GasSensor_voidAnalogInit+0x6>
    4adc:	0f 92       	push	r0
    4ade:	cd b7       	in	r28, 0x3d	; 61
    4ae0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	65 e0       	ldi	r22, 0x05	; 5
    4ae6:	40 e0       	ldi	r20, 0x00	; 0
    4ae8:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	ADCInformation ADCInformationGasSensor;
	ADCInformationGasSensor.AutoTriggerState=GasSensor_ADC_AutoTriggerState;
    4aec:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationGasSensor.TriggerSource=GasSensor_ADC_TriggerSource;
    4aee:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationGasSensor.DivisionFactor=GasSensor_ADC_DivisionFactor;
    4af0:	83 e0       	ldi	r24, 0x03	; 3
    4af2:	8b 83       	std	Y+3, r24	; 0x03
#if GasSensorMode==Polling
	ADC_voidInitPolling(ADCInformationGasSensor);
    4af4:	69 81       	ldd	r22, Y+1	; 0x01
    4af6:	7a 81       	ldd	r23, Y+2	; 0x02
    4af8:	8b 81       	ldd	r24, Y+3	; 0x03
    4afa:	0e 94 2f 18 	call	0x305e	; 0x305e <ADC_voidInitPolling>
#elif GasSensorMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    4afe:	0f 90       	pop	r0
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	cf 91       	pop	r28
    4b06:	df 91       	pop	r29
    4b08:	08 95       	ret

00004b0a <GasSensor_voidDigitalInit>:

void GasSensor_voidDigitalInit()
{
    4b0a:	df 93       	push	r29
    4b0c:	cf 93       	push	r28
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	65 e0       	ldi	r22, 0x05	; 5
    4b16:	40 e0       	ldi	r20, 0x00	; 0
    4b18:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    4b1c:	cf 91       	pop	r28
    4b1e:	df 91       	pop	r29
    4b20:	08 95       	ret

00004b22 <GasSensor_f32ReadAnalog>:

void GasSensor_f32ReadAnalog(u16 read)
{
    4b22:	df 93       	push	r29
    4b24:	cf 93       	push	r28
    4b26:	00 d0       	rcall	.+0      	; 0x4b28 <GasSensor_f32ReadAnalog+0x6>
    4b28:	cd b7       	in	r28, 0x3d	; 61
    4b2a:	de b7       	in	r29, 0x3e	; 62
    4b2c:	9a 83       	std	Y+2, r25	; 0x02
    4b2e:	89 83       	std	Y+1, r24	; 0x01


}
    4b30:	0f 90       	pop	r0
    4b32:	0f 90       	pop	r0
    4b34:	cf 91       	pop	r28
    4b36:	df 91       	pop	r29
    4b38:	08 95       	ret

00004b3a <GasSensor_u8DigitalState>:

u8 GasSensor_u8DigitalState()
{
    4b3a:	df 93       	push	r29
    4b3c:	cf 93       	push	r28
    4b3e:	cd b7       	in	r28, 0x3d	; 61
    4b40:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8ReadPinValue(GasSensorGroup,GasSensorPin);
    4b42:	81 e0       	ldi	r24, 0x01	; 1
    4b44:	65 e0       	ldi	r22, 0x05	; 5
    4b46:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
}
    4b4a:	cf 91       	pop	r28
    4b4c:	df 91       	pop	r29
    4b4e:	08 95       	ret

00004b50 <DCMotor_voidInit>:

#include "DCMotor_Interface.h"


void DCMotor_voidInit()
{
    4b50:	df 93       	push	r29
    4b52:	cf 93       	push	r28
    4b54:	cd b7       	in	r28, 0x3d	; 61
    4b56:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB1,Output);
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	60 e0       	ldi	r22, 0x00	; 0
    4b5c:	41 e0       	ldi	r20, 0x01	; 1
    4b5e:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB2,Output);
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	61 e0       	ldi	r22, 0x01	; 1
    4b66:	41 e0       	ldi	r20, 0x01	; 1
    4b68:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB3,Output);
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	62 e0       	ldi	r22, 0x02	; 2
    4b70:	41 e0       	ldi	r20, 0x01	; 1
    4b72:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB4,Output);
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	63 e0       	ldi	r22, 0x03	; 3
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    4b80:	cf 91       	pop	r28
    4b82:	df 91       	pop	r29
    4b84:	08 95       	ret

00004b86 <DCMotor_voidOnMaxSpeed>:

void DCMotor_voidOnMaxSpeed(u8 Dir)
{
    4b86:	df 93       	push	r29
    4b88:	cf 93       	push	r28
    4b8a:	0f 92       	push	r0
    4b8c:	cd b7       	in	r28, 0x3d	; 61
    4b8e:	de b7       	in	r29, 0x3e	; 62
    4b90:	89 83       	std	Y+1, r24	; 0x01
	if (Dir==clock_wise)
    4b92:	89 81       	ldd	r24, Y+1	; 0x01
    4b94:	88 23       	and	r24, r24
    4b96:	a9 f4       	brne	.+42     	; 0x4bc2 <DCMotor_voidOnMaxSpeed+0x3c>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,High);
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	60 e0       	ldi	r22, 0x00	; 0
    4b9c:	41 e0       	ldi	r20, 0x01	; 1
    4b9e:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,High);
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	63 e0       	ldi	r22, 0x03	; 3
    4ba6:	41 e0       	ldi	r20, 0x01	; 1
    4ba8:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    4bac:	81 e0       	ldi	r24, 0x01	; 1
    4bae:	61 e0       	ldi	r22, 0x01	; 1
    4bb0:	40 e0       	ldi	r20, 0x00	; 0
    4bb2:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    4bb6:	81 e0       	ldi	r24, 0x01	; 1
    4bb8:	62 e0       	ldi	r22, 0x02	; 2
    4bba:	40 e0       	ldi	r20, 0x00	; 0
    4bbc:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
    4bc0:	17 c0       	rjmp	.+46     	; 0x4bf0 <DCMotor_voidOnMaxSpeed+0x6a>
	}
	else if(Dir==anti_clock_wise)
    4bc2:	89 81       	ldd	r24, Y+1	; 0x01
    4bc4:	81 30       	cpi	r24, 0x01	; 1
    4bc6:	a1 f4       	brne	.+40     	; 0x4bf0 <DCMotor_voidOnMaxSpeed+0x6a>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	60 e0       	ldi	r22, 0x00	; 0
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	63 e0       	ldi	r22, 0x03	; 3
    4bd6:	40 e0       	ldi	r20, 0x00	; 0
    4bd8:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,High);
    4bdc:	81 e0       	ldi	r24, 0x01	; 1
    4bde:	61 e0       	ldi	r22, 0x01	; 1
    4be0:	41 e0       	ldi	r20, 0x01	; 1
    4be2:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,High);
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	62 e0       	ldi	r22, 0x02	; 2
    4bea:	41 e0       	ldi	r20, 0x01	; 1
    4bec:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	}
}
    4bf0:	0f 90       	pop	r0
    4bf2:	cf 91       	pop	r28
    4bf4:	df 91       	pop	r29
    4bf6:	08 95       	ret

00004bf8 <DCMotor_voidOff>:

void DCMotor_voidOff()
{
    4bf8:	df 93       	push	r29
    4bfa:	cf 93       	push	r28
    4bfc:	cd b7       	in	r28, 0x3d	; 61
    4bfe:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	63 e0       	ldi	r22, 0x03	; 3
    4c0e:	40 e0       	ldi	r20, 0x00	; 0
    4c10:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    4c14:	81 e0       	ldi	r24, 0x01	; 1
    4c16:	61 e0       	ldi	r22, 0x01	; 1
    4c18:	40 e0       	ldi	r20, 0x00	; 0
    4c1a:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    4c1e:	81 e0       	ldi	r24, 0x01	; 1
    4c20:	62 e0       	ldi	r22, 0x02	; 2
    4c22:	40 e0       	ldi	r20, 0x00	; 0
    4c24:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    4c28:	cf 91       	pop	r28
    4c2a:	df 91       	pop	r29
    4c2c:	08 95       	ret

00004c2e <BUZZER_voidInit>:
 *      Author: salma
 */
#include "Buzzer_Interface.h"
#include <util/delay.h>
void BUZZER_voidInit ()
{
    4c2e:	df 93       	push	r29
    4c30:	cf 93       	push	r28
    4c32:	cd b7       	in	r28, 0x3d	; 61
    4c34:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(BuzzerGruop,BuzzerPin,Output);
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	61 e0       	ldi	r22, 0x01	; 1
    4c3a:	41 e0       	ldi	r20, 0x01	; 1
    4c3c:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
}
    4c40:	cf 91       	pop	r28
    4c42:	df 91       	pop	r29
    4c44:	08 95       	ret

00004c46 <BUZZER_voidOn>:

void BUZZER_voidOn ()
{
    4c46:	df 93       	push	r29
    4c48:	cf 93       	push	r28
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,High);
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	61 e0       	ldi	r22, 0x01	; 1
    4c52:	41 e0       	ldi	r20, 0x01	; 1
    4c54:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    4c58:	cf 91       	pop	r28
    4c5a:	df 91       	pop	r29
    4c5c:	08 95       	ret

00004c5e <BUZZER_voidOff>:

void BUZZER_voidOff ()
{
    4c5e:	df 93       	push	r29
    4c60:	cf 93       	push	r28
    4c62:	cd b7       	in	r28, 0x3d	; 61
    4c64:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,Low);
    4c66:	81 e0       	ldi	r24, 0x01	; 1
    4c68:	61 e0       	ldi	r22, 0x01	; 1
    4c6a:	40 e0       	ldi	r20, 0x00	; 0
    4c6c:	0e 94 b7 14 	call	0x296e	; 0x296e <DIO_voidSetPinValue>
}
    4c70:	cf 91       	pop	r28
    4c72:	df 91       	pop	r29
    4c74:	08 95       	ret

00004c76 <BUZZER_voidToggle>:

void BUZZER_voidToggle ()
{
    4c76:	df 93       	push	r29
    4c78:	cf 93       	push	r28
    4c7a:	cd b7       	in	r28, 0x3d	; 61
    4c7c:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8ReadPinValue(BuzzerGruop,BuzzerPin)==High)
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	61 e0       	ldi	r22, 0x01	; 1
    4c82:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <DIO_u8ReadPinValue>
    4c86:	81 30       	cpi	r24, 0x01	; 1
    4c88:	19 f4       	brne	.+6      	; 0x4c90 <BUZZER_voidToggle+0x1a>
	{
		BUZZER_voidOff();
    4c8a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <BUZZER_voidOff>
    4c8e:	02 c0       	rjmp	.+4      	; 0x4c94 <BUZZER_voidToggle+0x1e>
	}
	else
	{
		BUZZER_voidOn();
    4c90:	0e 94 23 26 	call	0x4c46	; 0x4c46 <BUZZER_voidOn>
	}
}
    4c94:	cf 91       	pop	r28
    4c96:	df 91       	pop	r29
    4c98:	08 95       	ret

00004c9a <BluetoothModule_voidInit>:
 */

#include "BluetoothModule_Interface.h"

void BluetoothModule_voidInit()
{
    4c9a:	df 93       	push	r29
    4c9c:	cf 93       	push	r28
    4c9e:	cd b7       	in	r28, 0x3d	; 61
    4ca0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(UARTGroup,TX,output);
    4ca2:	84 e0       	ldi	r24, 0x04	; 4
    4ca4:	61 e0       	ldi	r22, 0x01	; 1
    4ca6:	41 e0       	ldi	r20, 0x01	; 1
    4ca8:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(UARTGroup,RX,input);
    4cac:	84 e0       	ldi	r24, 0x04	; 4
    4cae:	60 e0       	ldi	r22, 0x00	; 0
    4cb0:	40 e0       	ldi	r20, 0x00	; 0
    4cb2:	0e 94 a9 13 	call	0x2752	; 0x2752 <DIO_voidSetPinDir>
	UART_voidInit(9600);
    4cb6:	60 e8       	ldi	r22, 0x80	; 128
    4cb8:	75 e2       	ldi	r23, 0x25	; 37
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	90 e0       	ldi	r25, 0x00	; 0
    4cbe:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
}
    4cc2:	cf 91       	pop	r28
    4cc4:	df 91       	pop	r29
    4cc6:	08 95       	ret

00004cc8 <BluetoothModule_u8RecieveData>:

u8 BluetoothModule_u8RecieveData()
{
    4cc8:	df 93       	push	r29
    4cca:	cf 93       	push	r28
    4ccc:	cd b7       	in	r28, 0x3d	; 61
    4cce:	de b7       	in	r29, 0x3e	; 62
	return UART_u8RecieveData();
    4cd0:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_u8RecieveData>
}
    4cd4:	cf 91       	pop	r28
    4cd6:	df 91       	pop	r29
    4cd8:	08 95       	ret

00004cda <main>:
void led0 (void);
void led1 (void);
void led2 (void);

void main()
{
    4cda:	df 93       	push	r29
    4cdc:	cf 93       	push	r28
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62

	EXTI_voidInitINT0(Falling);
    4ce2:	83 e0       	ldi	r24, 0x03	; 3
    4ce4:	0e 94 84 11 	call	0x2308	; 0x2308 <EXTI_voidInitINT0>
	EXTI_voidInitINT1(Falling);
    4ce8:	83 e0       	ldi	r24, 0x03	; 3
    4cea:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <EXTI_voidInitINT1>
	EXTI_voidInitINT2(Falling);
    4cee:	83 e0       	ldi	r24, 0x03	; 3
    4cf0:	0e 94 34 12 	call	0x2468	; 0x2468 <EXTI_voidInitINT2>
	GIE_voidEnable();
    4cf4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <GIE_voidEnable>
	LED_voidInit(DIO_GroupA,DIO_Pin0);
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	60 e0       	ldi	r22, 0x00	; 0
    4cfc:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LED_voidInit>
	LED_voidInit(DIO_GroupA,DIO_Pin1);
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	61 e0       	ldi	r22, 0x01	; 1
    4d04:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LED_voidInit>
	LED_voidInit(DIO_GroupA,DIO_Pin2);
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	62 e0       	ldi	r22, 0x02	; 2
    4d0c:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LED_voidInit>
	SWITCH_voidInit(DIO_GroupD,DIO_Pin2);
    4d10:	84 e0       	ldi	r24, 0x04	; 4
    4d12:	62 e0       	ldi	r22, 0x02	; 2
    4d14:	0e 94 b3 19 	call	0x3366	; 0x3366 <SWITCH_voidInit>
	SWITCH_voidInit(DIO_GroupD,DIO_Pin3);
    4d18:	84 e0       	ldi	r24, 0x04	; 4
    4d1a:	63 e0       	ldi	r22, 0x03	; 3
    4d1c:	0e 94 b3 19 	call	0x3366	; 0x3366 <SWITCH_voidInit>
	SWITCH_voidInit(DIO_GroupB,DIO_Pin2);
    4d20:	82 e0       	ldi	r24, 0x02	; 2
    4d22:	62 e0       	ldi	r22, 0x02	; 2
    4d24:	0e 94 b3 19 	call	0x3366	; 0x3366 <SWITCH_voidInit>

	EXTI0_CallBack(led0);
    4d28:	81 ea       	ldi	r24, 0xA1	; 161
    4d2a:	96 e2       	ldi	r25, 0x26	; 38
    4d2c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <EXTI0_CallBack>
	EXTI1_CallBack(led1);
    4d30:	8c ea       	ldi	r24, 0xAC	; 172
    4d32:	96 e2       	ldi	r25, 0x26	; 38
    4d34:	0e 94 9f 12 	call	0x253e	; 0x253e <EXTI1_CallBack>
	EXTI2_CallBack(led2);
    4d38:	87 eb       	ldi	r24, 0xB7	; 183
    4d3a:	96 e2       	ldi	r25, 0x26	; 38
    4d3c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <EXTI2_CallBack>
    4d40:	ff cf       	rjmp	.-2      	; 0x4d40 <main+0x66>

00004d42 <led0>:


}

void led0 (void)
{
    4d42:	df 93       	push	r29
    4d44:	cf 93       	push	r28
    4d46:	cd b7       	in	r28, 0x3d	; 61
    4d48:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(DIO_GroupA,DIO_Pin0);
    4d4a:	81 e0       	ldi	r24, 0x01	; 1
    4d4c:	60 e0       	ldi	r22, 0x00	; 0
    4d4e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <LED_voidToggle>
}
    4d52:	cf 91       	pop	r28
    4d54:	df 91       	pop	r29
    4d56:	08 95       	ret

00004d58 <led1>:

void led1 (void)
{
    4d58:	df 93       	push	r29
    4d5a:	cf 93       	push	r28
    4d5c:	cd b7       	in	r28, 0x3d	; 61
    4d5e:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(DIO_GroupA,DIO_Pin1);
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	61 e0       	ldi	r22, 0x01	; 1
    4d64:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <LED_voidToggle>
}
    4d68:	cf 91       	pop	r28
    4d6a:	df 91       	pop	r29
    4d6c:	08 95       	ret

00004d6e <led2>:

void led2 (void)
{
    4d6e:	df 93       	push	r29
    4d70:	cf 93       	push	r28
    4d72:	cd b7       	in	r28, 0x3d	; 61
    4d74:	de b7       	in	r29, 0x3e	; 62
	LED_voidToggle(DIO_GroupA,DIO_Pin2);
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	62 e0       	ldi	r22, 0x02	; 2
    4d7a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <LED_voidToggle>
}
    4d7e:	cf 91       	pop	r28
    4d80:	df 91       	pop	r29
    4d82:	08 95       	ret

00004d84 <__mulsi3>:
    4d84:	62 9f       	mul	r22, r18
    4d86:	d0 01       	movw	r26, r0
    4d88:	73 9f       	mul	r23, r19
    4d8a:	f0 01       	movw	r30, r0
    4d8c:	82 9f       	mul	r24, r18
    4d8e:	e0 0d       	add	r30, r0
    4d90:	f1 1d       	adc	r31, r1
    4d92:	64 9f       	mul	r22, r20
    4d94:	e0 0d       	add	r30, r0
    4d96:	f1 1d       	adc	r31, r1
    4d98:	92 9f       	mul	r25, r18
    4d9a:	f0 0d       	add	r31, r0
    4d9c:	83 9f       	mul	r24, r19
    4d9e:	f0 0d       	add	r31, r0
    4da0:	74 9f       	mul	r23, r20
    4da2:	f0 0d       	add	r31, r0
    4da4:	65 9f       	mul	r22, r21
    4da6:	f0 0d       	add	r31, r0
    4da8:	99 27       	eor	r25, r25
    4daa:	72 9f       	mul	r23, r18
    4dac:	b0 0d       	add	r27, r0
    4dae:	e1 1d       	adc	r30, r1
    4db0:	f9 1f       	adc	r31, r25
    4db2:	63 9f       	mul	r22, r19
    4db4:	b0 0d       	add	r27, r0
    4db6:	e1 1d       	adc	r30, r1
    4db8:	f9 1f       	adc	r31, r25
    4dba:	bd 01       	movw	r22, r26
    4dbc:	cf 01       	movw	r24, r30
    4dbe:	11 24       	eor	r1, r1
    4dc0:	08 95       	ret

00004dc2 <__divmodhi4>:
    4dc2:	97 fb       	bst	r25, 7
    4dc4:	09 2e       	mov	r0, r25
    4dc6:	07 26       	eor	r0, r23
    4dc8:	0a d0       	rcall	.+20     	; 0x4dde <__divmodhi4_neg1>
    4dca:	77 fd       	sbrc	r23, 7
    4dcc:	04 d0       	rcall	.+8      	; 0x4dd6 <__divmodhi4_neg2>
    4dce:	49 d0       	rcall	.+146    	; 0x4e62 <__udivmodhi4>
    4dd0:	06 d0       	rcall	.+12     	; 0x4dde <__divmodhi4_neg1>
    4dd2:	00 20       	and	r0, r0
    4dd4:	1a f4       	brpl	.+6      	; 0x4ddc <__divmodhi4_exit>

00004dd6 <__divmodhi4_neg2>:
    4dd6:	70 95       	com	r23
    4dd8:	61 95       	neg	r22
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255

00004ddc <__divmodhi4_exit>:
    4ddc:	08 95       	ret

00004dde <__divmodhi4_neg1>:
    4dde:	f6 f7       	brtc	.-4      	; 0x4ddc <__divmodhi4_exit>
    4de0:	90 95       	com	r25
    4de2:	81 95       	neg	r24
    4de4:	9f 4f       	sbci	r25, 0xFF	; 255
    4de6:	08 95       	ret

00004de8 <__udivmodsi4>:
    4de8:	a1 e2       	ldi	r26, 0x21	; 33
    4dea:	1a 2e       	mov	r1, r26
    4dec:	aa 1b       	sub	r26, r26
    4dee:	bb 1b       	sub	r27, r27
    4df0:	fd 01       	movw	r30, r26
    4df2:	0d c0       	rjmp	.+26     	; 0x4e0e <__udivmodsi4_ep>

00004df4 <__udivmodsi4_loop>:
    4df4:	aa 1f       	adc	r26, r26
    4df6:	bb 1f       	adc	r27, r27
    4df8:	ee 1f       	adc	r30, r30
    4dfa:	ff 1f       	adc	r31, r31
    4dfc:	a2 17       	cp	r26, r18
    4dfe:	b3 07       	cpc	r27, r19
    4e00:	e4 07       	cpc	r30, r20
    4e02:	f5 07       	cpc	r31, r21
    4e04:	20 f0       	brcs	.+8      	; 0x4e0e <__udivmodsi4_ep>
    4e06:	a2 1b       	sub	r26, r18
    4e08:	b3 0b       	sbc	r27, r19
    4e0a:	e4 0b       	sbc	r30, r20
    4e0c:	f5 0b       	sbc	r31, r21

00004e0e <__udivmodsi4_ep>:
    4e0e:	66 1f       	adc	r22, r22
    4e10:	77 1f       	adc	r23, r23
    4e12:	88 1f       	adc	r24, r24
    4e14:	99 1f       	adc	r25, r25
    4e16:	1a 94       	dec	r1
    4e18:	69 f7       	brne	.-38     	; 0x4df4 <__udivmodsi4_loop>
    4e1a:	60 95       	com	r22
    4e1c:	70 95       	com	r23
    4e1e:	80 95       	com	r24
    4e20:	90 95       	com	r25
    4e22:	9b 01       	movw	r18, r22
    4e24:	ac 01       	movw	r20, r24
    4e26:	bd 01       	movw	r22, r26
    4e28:	cf 01       	movw	r24, r30
    4e2a:	08 95       	ret

00004e2c <__divmodsi4>:
    4e2c:	97 fb       	bst	r25, 7
    4e2e:	09 2e       	mov	r0, r25
    4e30:	05 26       	eor	r0, r21
    4e32:	0e d0       	rcall	.+28     	; 0x4e50 <__divmodsi4_neg1>
    4e34:	57 fd       	sbrc	r21, 7
    4e36:	04 d0       	rcall	.+8      	; 0x4e40 <__divmodsi4_neg2>
    4e38:	d7 df       	rcall	.-82     	; 0x4de8 <__udivmodsi4>
    4e3a:	0a d0       	rcall	.+20     	; 0x4e50 <__divmodsi4_neg1>
    4e3c:	00 1c       	adc	r0, r0
    4e3e:	38 f4       	brcc	.+14     	; 0x4e4e <__divmodsi4_exit>

00004e40 <__divmodsi4_neg2>:
    4e40:	50 95       	com	r21
    4e42:	40 95       	com	r20
    4e44:	30 95       	com	r19
    4e46:	21 95       	neg	r18
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	4f 4f       	sbci	r20, 0xFF	; 255
    4e4c:	5f 4f       	sbci	r21, 0xFF	; 255

00004e4e <__divmodsi4_exit>:
    4e4e:	08 95       	ret

00004e50 <__divmodsi4_neg1>:
    4e50:	f6 f7       	brtc	.-4      	; 0x4e4e <__divmodsi4_exit>
    4e52:	90 95       	com	r25
    4e54:	80 95       	com	r24
    4e56:	70 95       	com	r23
    4e58:	61 95       	neg	r22
    4e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4e60:	08 95       	ret

00004e62 <__udivmodhi4>:
    4e62:	aa 1b       	sub	r26, r26
    4e64:	bb 1b       	sub	r27, r27
    4e66:	51 e1       	ldi	r21, 0x11	; 17
    4e68:	07 c0       	rjmp	.+14     	; 0x4e78 <__udivmodhi4_ep>

00004e6a <__udivmodhi4_loop>:
    4e6a:	aa 1f       	adc	r26, r26
    4e6c:	bb 1f       	adc	r27, r27
    4e6e:	a6 17       	cp	r26, r22
    4e70:	b7 07       	cpc	r27, r23
    4e72:	10 f0       	brcs	.+4      	; 0x4e78 <__udivmodhi4_ep>
    4e74:	a6 1b       	sub	r26, r22
    4e76:	b7 0b       	sbc	r27, r23

00004e78 <__udivmodhi4_ep>:
    4e78:	88 1f       	adc	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	5a 95       	dec	r21
    4e7e:	a9 f7       	brne	.-22     	; 0x4e6a <__udivmodhi4_loop>
    4e80:	80 95       	com	r24
    4e82:	90 95       	com	r25
    4e84:	bc 01       	movw	r22, r24
    4e86:	cd 01       	movw	r24, r26
    4e88:	08 95       	ret

00004e8a <__prologue_saves__>:
    4e8a:	2f 92       	push	r2
    4e8c:	3f 92       	push	r3
    4e8e:	4f 92       	push	r4
    4e90:	5f 92       	push	r5
    4e92:	6f 92       	push	r6
    4e94:	7f 92       	push	r7
    4e96:	8f 92       	push	r8
    4e98:	9f 92       	push	r9
    4e9a:	af 92       	push	r10
    4e9c:	bf 92       	push	r11
    4e9e:	cf 92       	push	r12
    4ea0:	df 92       	push	r13
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	cd b7       	in	r28, 0x3d	; 61
    4eb0:	de b7       	in	r29, 0x3e	; 62
    4eb2:	ca 1b       	sub	r28, r26
    4eb4:	db 0b       	sbc	r29, r27
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	09 94       	ijmp

00004ec2 <__epilogue_restores__>:
    4ec2:	2a 88       	ldd	r2, Y+18	; 0x12
    4ec4:	39 88       	ldd	r3, Y+17	; 0x11
    4ec6:	48 88       	ldd	r4, Y+16	; 0x10
    4ec8:	5f 84       	ldd	r5, Y+15	; 0x0f
    4eca:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ecc:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ece:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ed0:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ed2:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ed4:	b9 84       	ldd	r11, Y+9	; 0x09
    4ed6:	c8 84       	ldd	r12, Y+8	; 0x08
    4ed8:	df 80       	ldd	r13, Y+7	; 0x07
    4eda:	ee 80       	ldd	r14, Y+6	; 0x06
    4edc:	fd 80       	ldd	r15, Y+5	; 0x05
    4ede:	0c 81       	ldd	r16, Y+4	; 0x04
    4ee0:	1b 81       	ldd	r17, Y+3	; 0x03
    4ee2:	aa 81       	ldd	r26, Y+2	; 0x02
    4ee4:	b9 81       	ldd	r27, Y+1	; 0x01
    4ee6:	ce 0f       	add	r28, r30
    4ee8:	d1 1d       	adc	r29, r1
    4eea:	0f b6       	in	r0, 0x3f	; 63
    4eec:	f8 94       	cli
    4eee:	de bf       	out	0x3e, r29	; 62
    4ef0:	0f be       	out	0x3f, r0	; 63
    4ef2:	cd bf       	out	0x3d, r28	; 61
    4ef4:	ed 01       	movw	r28, r26
    4ef6:	08 95       	ret

00004ef8 <_exit>:
    4ef8:	f8 94       	cli

00004efa <__stop_program>:
    4efa:	ff cf       	rjmp	.-2      	; 0x4efa <__stop_program>
