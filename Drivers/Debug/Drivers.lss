
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005794  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00005794  00005828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800192  00800192  0000595a  2**0
                  ALLOC
  3 .stab         00008ee0  00000000  00000000  0000595c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000040b2  00000000  00000000  0000e83c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000128ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00012a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00012c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001508b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00016411  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000175e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000177a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00017a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001840c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 44 14 	jmp	0x2888	; 0x2888 <__vector_1>
       8:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__vector_2>
       c:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__vector_3>
      10:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_4>
      14:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_5>
      18:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_6>
      1c:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_7>
      20:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_8>
      24:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_9>
      28:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_10>
      2c:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <main>
      8a:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 2b 	jmp	0x5722	; 0x5722 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 2b 	jmp	0x5722	; 0x5722 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 2b 	jmp	0x575a	; 0x575a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 2b 	jmp	0x5732	; 0x5732 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9d 2b 	jmp	0x573a	; 0x573a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b9 2b 	jmp	0x5772	; 0x5772 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a1 2b 	jmp	0x5742	; 0x5742 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bd 2b 	jmp	0x577a	; 0x577a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 99 2b 	jmp	0x5732	; 0x5732 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 b5 2b 	jmp	0x576a	; 0x576a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
 */

#include "UART_Interface.h"

void UART_voidInit(u32 BoudRate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_voidInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
	/*Set boud rate*/
	clear_bit(UART_UBRRH,UBRRH_URSEL);
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
	UART_UBRRH=0;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
	UART_UBRRL=BoudRate;
     e56:	e9 e2       	ldi	r30, 0x29	; 41
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24

	/*Interrupts*/
#if TXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
#elif TXIEState==enable
	set_bit(UART_UCSRB,UCSRB_TXCIE);
#endif

#if RXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_RXCIE);
     e6c:	aa e2       	ldi	r26, 0x2A	; 42
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e2       	ldi	r30, 0x2A	; 42
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	8c 93       	st	X, r24
#elif RXIEState==enable
	set_bit(UART_UCSRB,UCSRB_RXCIE);
#endif

#if UDIEState==disable
	clear_bit(UART_UCSRB,UCSRB_UDRIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
#elif UDIEState==enable
	set_bit(UART_UCSRB,UCSRB_UDRIE);
#endif

	/*Async*/
	set_bit(UART_UCSRC,UCSRC_URSEL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UMSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24

	/*parity*/
#if ParityEnable==enable
#if Parity==odd
	set_bit(UART_UCSRC,UCSRC_UPM0);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UPM1);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UPM1);
#endif

	/*Stop bits*/
#if NoStopBits==1
	clear_bit(UART_UCSRC,UCSRC_USBS);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24
#elif DataSize==7
	clear_bit(UART_UCSRC,UCSRC_UCSZ0);
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
#elif DataSize==8
	set_bit(UART_UCSRC,UCSRC_UCSZ0);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	set_bit(UART_UCSRB,UCSRB_UCSZ2);
#else
#error "Invalid Option"
#endif
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_voidSendData>:

void UART_voidSendData(u8 Data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	a1 f3       	breq	.-24     	; 0xf12 <UART_voidSendData+0xc>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f2a:	ab e2       	ldi	r26, 0x2B	; 43
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e2       	ldi	r30, 0x2B	; 43
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
	UART_UDR=Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
	set_bit(UART_UCSRB,UCSRB_TXEN);
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24

}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_u8RecieveData>:

u8 UART_u8RecieveData()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u8 RecievedData;
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_u8RecieveData+0xa>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
	set_bit(UART_UCSRB,UCSRB_RXEN);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	while (get_bit(UART_UCSRA,UCSRA_RXC)==Low);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <UART_u8RecieveData+0x3e>
	set_bit(UART_UCSRA,UCSRA_RXC);
     f9e:	ab e2       	ldi	r26, 0x2B	; 43
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	RecievedData=UART_UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return RecievedData;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <T2_voidNormalModeInit>:



/**********************Normal Mode functions**********************************/
void T2_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <T2_voidNormalModeInit+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T2_TCCR2,T2_TCCR2_WGM20);
     fd0:	a5 e4       	ldi	r26, 0x45	; 69
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e4       	ldi	r30, 0x45	; 69
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7b       	andi	r24, 0xBF	; 191
     fdc:	8c 93       	st	X, r24
	clear_bit(T2_TCCR2,T2_TCCR2_WGM21);
     fde:	a5 e4       	ldi	r26, 0x45	; 69
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e4       	ldi	r30, 0x45	; 69
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	87 70       	andi	r24, 0x07	; 7
     ff0:	89 83       	std	Y+1, r24	; 0x01
	T2_TCCR2&=0xF8;
     ff2:	a5 e4       	ldi	r26, 0x45	; 69
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 7f       	andi	r24, 0xF8	; 248
     ffe:	8c 93       	st	X, r24
	T2_TCCR2|=Prescaller;
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	90 81       	ld	r25, Z
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	89 2b       	or	r24, r25
    100e:	8c 93       	st	X, r24
	T2_TCNT2=PreloadValue;
    1010:	e4 e4       	ldi	r30, 0x44	; 68
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 83       	st	Z, r24
	//Interrupt State
	if(InterruptState ==enable)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	41 f4       	brne	.+16     	; 0x102e <T2_voidNormalModeInit+0x70>
	{
		set_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    101e:	a9 e5       	ldi	r26, 0x59	; 89
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e9 e5       	ldi	r30, 0x59	; 89
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 64       	ori	r24, 0x40	; 64
    102a:	8c 93       	st	X, r24
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <T2_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	39 f4       	brne	.+14     	; 0x1042 <T2_voidNormalModeInit+0x84>
	{
		clear_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	8c 93       	st	X, r24
	}

}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <T2_voidCallBackFuncNormalMode>:


void T2_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <T2_voidCallBackFuncNormalMode+0x6>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	31 f0       	breq	.+12     	; 0x1070 <T2_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	90 93 93 01 	sts	0x0193, r25
    106c:	80 93 92 01 	sts	0x0192, r24
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <__vector_5>:

void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    10a4:	80 91 92 01 	lds	r24, 0x0192
    10a8:	90 91 93 01 	lds	r25, 0x0193
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <__vector_5+0x40>
	{
		GlobalOVPF();
    10b0:	e0 91 92 01 	lds	r30, 0x0192
    10b4:	f0 91 93 01 	lds	r31, 0x0193
    10b8:	09 95       	icall
	}
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <T2_voidCTCModeInit>:



/**************************************CTC*****************************************/
void T2_voidCTCModeInit(u8 OC2State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <T2_voidCTCModeInit+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <T2_voidCTCModeInit+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
    10f0:	4b 83       	std	Y+3, r20	; 0x03
    10f2:	2c 83       	std	Y+4, r18	; 0x04
	//select CTC Mode
	clear_bit(T2_TCCR2,T2_TCCR2_WGM20);
    10f4:	a5 e4       	ldi	r26, 0x45	; 69
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e4       	ldi	r30, 0x45	; 69
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 7b       	andi	r24, 0xBF	; 191
    1100:	8c 93       	st	X, r24
	set_bit(T2_TCCR2,T2_TCCR2_WGM21);
    1102:	a5 e4       	ldi	r26, 0x45	; 69
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e4       	ldi	r30, 0x45	; 69
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24

	//OC2 State
	if(OC2State==CTC_OC2_Disconnect)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	79 f4       	brne	.+30     	; 0x1134 <T2_voidCTCModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    1116:	a5 e4       	ldi	r26, 0x45	; 69
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e4       	ldi	r30, 0x45	; 69
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7e       	andi	r24, 0xEF	; 239
    1122:	8c 93       	st	X, r24
		clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1124:	a5 e4       	ldi	r26, 0x45	; 69
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e4       	ldi	r30, 0x45	; 69
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7d       	andi	r24, 0xDF	; 223
    1130:	8c 93       	st	X, r24
    1132:	35 c0       	rjmp	.+106    	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_Tog)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	79 f4       	brne	.+30     	; 0x1158 <T2_voidCTCModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T2_TCCR2,T2_TCCR2_COM20);
    113a:	a5 e4       	ldi	r26, 0x45	; 69
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e4       	ldi	r30, 0x45	; 69
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 61       	ori	r24, 0x10	; 16
    1146:	8c 93       	st	X, r24
		clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1148:	a5 e4       	ldi	r26, 0x45	; 69
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e4       	ldi	r30, 0x45	; 69
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7d       	andi	r24, 0xDF	; 223
    1154:	8c 93       	st	X, r24
    1156:	23 c0       	rjmp	.+70     	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_CLr)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	79 f4       	brne	.+30     	; 0x117c <T2_voidCTCModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    115e:	a5 e4       	ldi	r26, 0x45	; 69
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e4       	ldi	r30, 0x45	; 69
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8f 7e       	andi	r24, 0xEF	; 239
    116a:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_COM21);
    116c:	a5 e4       	ldi	r26, 0x45	; 69
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e4       	ldi	r30, 0x45	; 69
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	80 62       	ori	r24, 0x20	; 32
    1178:	8c 93       	st	X, r24
    117a:	11 c0       	rjmp	.+34     	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_Set)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	71 f4       	brne	.+28     	; 0x119e <T2_voidCTCModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T2_TCCR2,T2_TCCR2_COM20);
    1182:	a5 e4       	ldi	r26, 0x45	; 69
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e4       	ldi	r30, 0x45	; 69
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1190:	a5 e4       	ldi	r26, 0x45	; 69
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e4       	ldi	r30, 0x45	; 69
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 62       	ori	r24, 0x20	; 32
    119c:	8c 93       	st	X, r24
	}

	//Prescaller
	Prescaller&=0x07;
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	87 70       	andi	r24, 0x07	; 7
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	T2_TCCR2&=0xF8;
    11a4:	a5 e4       	ldi	r26, 0x45	; 69
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e4       	ldi	r30, 0x45	; 69
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 7f       	andi	r24, 0xF8	; 248
    11b0:	8c 93       	st	X, r24
	T2_TCCR2|=Prescaller;
    11b2:	a5 e4       	ldi	r26, 0x45	; 69
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e4       	ldi	r30, 0x45	; 69
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	90 81       	ld	r25, Z
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	89 2b       	or	r24, r25
    11c0:	8c 93       	st	X, r24
	//Output compare
	T2_OCR2 = CompareValue;
    11c2:	e3 e4       	ldi	r30, 0x43	; 67
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	80 83       	st	Z, r24

	if(InterruptState ==enable)
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	41 f4       	brne	.+16     	; 0x11e0 <T2_voidCTCModeInit+0x100>
	{
		set_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    11d0:	a9 e5       	ldi	r26, 0x59	; 89
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e9 e5       	ldi	r30, 0x59	; 89
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	8c 93       	st	X, r24
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <T2_voidCTCModeInit+0x114>
	}
	else if(InterruptState ==disable)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	39 f4       	brne	.+14     	; 0x11f4 <T2_voidCTCModeInit+0x114>
	{
		clear_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    11e6:	a9 e5       	ldi	r26, 0x59	; 89
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 e5       	ldi	r30, 0x59	; 89
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
	}
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <T2_voidCallBackFuncCTCMode>:

void T2_voidCallBackFuncCTCMode(void (*CTCpf)(void))
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <T2_voidCallBackFuncCTCMode+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	31 f0       	breq	.+12     	; 0x1224 <T2_voidCallBackFuncCTCMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	90 93 95 01 	sts	0x0195, r25
    1220:	80 93 94 01 	sts	0x0194, r24
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <__vector_4>:

void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    1258:	80 91 94 01 	lds	r24, 0x0194
    125c:	90 91 95 01 	lds	r25, 0x0195
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	29 f0       	breq	.+10     	; 0x126e <__vector_4+0x40>
	{
		GlobalCTCPF();
    1264:	e0 91 94 01 	lds	r30, 0x0194
    1268:	f0 91 95 01 	lds	r31, 0x0195
    126c:	09 95       	icall
	}
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <T2_voidPWMModeInit>:
/*************************************************************************************/

/**************************************PWM**************************************/
void T2_voidPWMModeInit(u8 PWMType, u8 OC2State ,u8 Prescaller, u8 DutyCycle)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <T2_voidPWMModeInit+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <T2_voidPWMModeInit+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
    12a4:	4b 83       	std	Y+3, r20	; 0x03
    12a6:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <T2_voidPWMModeInit+0x1c>
    12ae:	68 c0       	rjmp	.+208    	; 0x1380 <T2_voidPWMModeInit+0xec>
	{
		//fast PWM
		set_bit(T2_TCCR2,T2_TCCR2_WGM20);
    12b0:	a5 e4       	ldi	r26, 0x45	; 69
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e4       	ldi	r30, 0x45	; 69
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 64       	ori	r24, 0x40	; 64
    12bc:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_WGM21);
    12be:	a5 e4       	ldi	r26, 0x45	; 69
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e5 e4       	ldi	r30, 0x45	; 69
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	8c 93       	st	X, r24
		//OC2 State
			if(OC2State==CTC_OC2_Disconnect)
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	79 f4       	brne	.+30     	; 0x12f0 <T2_voidPWMModeInit+0x5c>
			{//disconnect  pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    12d2:	a5 e4       	ldi	r26, 0x45	; 69
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e4       	ldi	r30, 0x45	; 69
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7e       	andi	r24, 0xEF	; 239
    12de:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    12e0:	a5 e4       	ldi	r26, 0x45	; 69
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e4       	ldi	r30, 0x45	; 69
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 7d       	andi	r24, 0xDF	; 223
    12ec:	8c 93       	st	X, r24
    12ee:	35 c0       	rjmp	.+106    	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_Tog)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	79 f4       	brne	.+30     	; 0x1314 <T2_voidPWMModeInit+0x80>
			{	//Tog Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    12f6:	a5 e4       	ldi	r26, 0x45	; 69
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e4       	ldi	r30, 0x45	; 69
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1304:	a5 e4       	ldi	r26, 0x45	; 69
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e4       	ldi	r30, 0x45	; 69
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7d       	andi	r24, 0xDF	; 223
    1310:	8c 93       	st	X, r24
    1312:	23 c0       	rjmp	.+70     	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_CLr)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	79 f4       	brne	.+30     	; 0x1338 <T2_voidPWMModeInit+0xa4>
			{
				//clr Pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    131a:	a5 e4       	ldi	r26, 0x45	; 69
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e4       	ldi	r30, 0x45	; 69
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 7e       	andi	r24, 0xEF	; 239
    1326:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1328:	a5 e4       	ldi	r26, 0x45	; 69
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e4       	ldi	r30, 0x45	; 69
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 62       	ori	r24, 0x20	; 32
    1334:	8c 93       	st	X, r24
    1336:	11 c0       	rjmp	.+34     	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_Set)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	71 f4       	brne	.+28     	; 0x135a <T2_voidPWMModeInit+0xc6>
			{
				//set Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    133e:	a5 e4       	ldi	r26, 0x45	; 69
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e4       	ldi	r30, 0x45	; 69
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 61       	ori	r24, 0x10	; 16
    134a:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    134c:	a5 e4       	ldi	r26, 0x45	; 69
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e4       	ldi	r30, 0x45	; 69
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	8c 93       	st	X, r24
			}


		//Prescaller
		Prescaller&=0x07;
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	87 70       	andi	r24, 0x07	; 7
    135e:	8b 83       	std	Y+3, r24	; 0x03
		T2_TCCR2&=0xF8;
    1360:	a5 e4       	ldi	r26, 0x45	; 69
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e5 e4       	ldi	r30, 0x45	; 69
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	88 7f       	andi	r24, 0xF8	; 248
    136c:	8c 93       	st	X, r24
		T2_TCCR2|=Prescaller;
    136e:	a5 e4       	ldi	r26, 0x45	; 69
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e4       	ldi	r30, 0x45	; 69
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	90 81       	ld	r25, Z
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	89 2b       	or	r24, r25
    137c:	8c 93       	st	X, r24
    137e:	5d c0       	rjmp	.+186    	; 0x143a <T2_voidPWMModeInit+0x1a6>
	}
	else if (PWMType==PhaseCorrectPWM)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	09 f0       	breq	.+2      	; 0x1388 <T2_voidPWMModeInit+0xf4>
    1386:	59 c0       	rjmp	.+178    	; 0x143a <T2_voidPWMModeInit+0x1a6>
	{
		//OC2 State
			if(OC2State==CTC_OC2_Disconnect)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	79 f4       	brne	.+30     	; 0x13ac <T2_voidPWMModeInit+0x118>
			{//disconnect  pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    138e:	a5 e4       	ldi	r26, 0x45	; 69
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e4       	ldi	r30, 0x45	; 69
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8f 7e       	andi	r24, 0xEF	; 239
    139a:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    139c:	a5 e4       	ldi	r26, 0x45	; 69
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e4       	ldi	r30, 0x45	; 69
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	8c 93       	st	X, r24
    13aa:	35 c0       	rjmp	.+106    	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_Tog)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	79 f4       	brne	.+30     	; 0x13d0 <T2_voidPWMModeInit+0x13c>
			{	//Tog Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    13b2:	a5 e4       	ldi	r26, 0x45	; 69
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e4       	ldi	r30, 0x45	; 69
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 61       	ori	r24, 0x10	; 16
    13be:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    13c0:	a5 e4       	ldi	r26, 0x45	; 69
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e4       	ldi	r30, 0x45	; 69
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7d       	andi	r24, 0xDF	; 223
    13cc:	8c 93       	st	X, r24
    13ce:	23 c0       	rjmp	.+70     	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_CLr)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	79 f4       	brne	.+30     	; 0x13f4 <T2_voidPWMModeInit+0x160>
			{
				//clr Pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    13d6:	a5 e4       	ldi	r26, 0x45	; 69
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e4       	ldi	r30, 0x45	; 69
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    13e4:	a5 e4       	ldi	r26, 0x45	; 69
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e4       	ldi	r30, 0x45	; 69
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 62       	ori	r24, 0x20	; 32
    13f0:	8c 93       	st	X, r24
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_Set)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	71 f4       	brne	.+28     	; 0x1416 <T2_voidPWMModeInit+0x182>
			{
				//set Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    13fa:	a5 e4       	ldi	r26, 0x45	; 69
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e4       	ldi	r30, 0x45	; 69
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 61       	ori	r24, 0x10	; 16
    1406:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1408:	a5 e4       	ldi	r26, 0x45	; 69
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e4       	ldi	r30, 0x45	; 69
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	8c 93       	st	X, r24
			}

			//Prescaller
			Prescaller&=0x07;
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	87 70       	andi	r24, 0x07	; 7
    141a:	8b 83       	std	Y+3, r24	; 0x03
			T2_TCCR2&=0xF8;
    141c:	a5 e4       	ldi	r26, 0x45	; 69
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e4       	ldi	r30, 0x45	; 69
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 7f       	andi	r24, 0xF8	; 248
    1428:	8c 93       	st	X, r24
			T2_TCCR2|=Prescaller;
    142a:	a5 e4       	ldi	r26, 0x45	; 69
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e4       	ldi	r30, 0x45	; 69
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	90 81       	ld	r25, Z
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	89 2b       	or	r24, r25
    1438:	8c 93       	st	X, r24
	}
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <T1_voidNormalModeInit>:



/*******************************Normal Mode Functions*******************************************/
void T1_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <T1_voidNormalModeInit+0x6>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02
    1458:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    145a:	af e4       	ldi	r26, 0x4F	; 79
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ef e4       	ldi	r30, 0x4F	; 79
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8e 7f       	andi	r24, 0xFE	; 254
    1466:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1468:	af e4       	ldi	r26, 0x4F	; 79
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ef e4       	ldi	r30, 0x4F	; 79
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8d 7f       	andi	r24, 0xFD	; 253
    1474:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1476:	ae e4       	ldi	r26, 0x4E	; 78
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ee e4       	ldi	r30, 0x4E	; 78
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1484:	ae e4       	ldi	r26, 0x4E	; 78
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ee e4       	ldi	r30, 0x4E	; 78
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7e       	andi	r24, 0xEF	; 239
    1490:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	87 70       	andi	r24, 0x07	; 7
    1496:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1498:	ae e4       	ldi	r26, 0x4E	; 78
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ee e4       	ldi	r30, 0x4E	; 78
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 7f       	andi	r24, 0xF8	; 248
    14a4:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    14a6:	ae e4       	ldi	r26, 0x4E	; 78
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ee e4       	ldi	r30, 0x4E	; 78
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	90 81       	ld	r25, Z
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
	T1_TCNT1=PreloadValue;
    14b6:	ec e4       	ldi	r30, 0x4C	; 76
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	41 f4       	brne	.+16     	; 0x14da <T1_voidNormalModeInit+0x92>
	{
		set_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	8c 93       	st	X, r24
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <T1_voidNormalModeInit+0xa6>
	}
	else if(InterruptState ==disable)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	39 f4       	brne	.+14     	; 0x14ee <T1_voidNormalModeInit+0xa6>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    14e0:	a9 e5       	ldi	r26, 0x59	; 89
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e9 e5       	ldi	r30, 0x59	; 89
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8b 7f       	andi	r24, 0xFB	; 251
    14ec:	8c 93       	st	X, r24
	}

}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <T1_voidCallBackFuncNormalMode>:


void T1_voidCallBackFuncNormalMode(void (*Normalpf)(void))
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <T1_voidCallBackFuncNormalMode+0x6>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	if(Normalpf!=NULL)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	31 f0       	breq	.+12     	; 0x151c <T1_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPf=Normalpf;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	90 93 99 01 	sts	0x0199, r25
    1518:	80 93 98 01 	sts	0x0198, r24
	}
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <__vector_9>:


void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOVPf!=NULL)
    1550:	80 91 98 01 	lds	r24, 0x0198
    1554:	90 91 99 01 	lds	r25, 0x0199
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	29 f0       	breq	.+10     	; 0x1566 <__vector_9+0x40>
	{
		GlobalOVPf();
    155c:	e0 91 98 01 	lds	r30, 0x0198
    1560:	f0 91 99 01 	lds	r31, 0x0199
    1564:	09 95       	icall
	}

}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <T1_voidCTCModeInit>:



/********************************CTC Functions****************************************************/
void T1_voidCTCModeInit(u8 Prescaller,u16 CompareValue,u8 Interruptstate,u8 OC1AState)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <T1_voidCTCModeInit+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <T1_voidCTCModeInit+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	7b 83       	std	Y+3, r23	; 0x03
    159e:	6a 83       	std	Y+2, r22	; 0x02
    15a0:	4c 83       	std	Y+4, r20	; 0x04
    15a2:	2d 83       	std	Y+5, r18	; 0x05
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
    15b0:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	8c 93       	st	X, r24
	T1_ICR1=CompareValue;
    15dc:	e6 e4       	ldi	r30, 0x46	; 70
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
	if (Interruptstate==enable)
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	41 f4       	brne	.+16     	; 0x15fe <T1_voidCTCModeInit+0x72>
	{
		set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    15ee:	a9 e5       	ldi	r26, 0x59	; 89
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e9 e5       	ldi	r30, 0x59	; 89
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	8c 93       	st	X, r24
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <T1_voidCTCModeInit+0x86>
	}
	else if (Interruptstate==disable)
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	39 f4       	brne	.+14     	; 0x1612 <T1_voidCTCModeInit+0x86>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1604:	a9 e5       	ldi	r26, 0x59	; 89
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e9 e5       	ldi	r30, 0x59	; 89
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7e       	andi	r24, 0xEF	; 239
    1610:	8c 93       	st	X, r24
	}
	if(OC1AState==CTC_OC1A_Disconnect)
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	79 f4       	brne	.+30     	; 0x1636 <T1_voidCTCModeInit+0xaa>
	{//disconnect  pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1618:	af e4       	ldi	r26, 0x4F	; 79
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ef e4       	ldi	r30, 0x4F	; 79
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 7b       	andi	r24, 0xBF	; 191
    1624:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1626:	af e4       	ldi	r26, 0x4F	; 79
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ef e4       	ldi	r30, 0x4F	; 79
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	8c 93       	st	X, r24
    1634:	35 c0       	rjmp	.+106    	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Tog)
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	79 f4       	brne	.+30     	; 0x165a <T1_voidCTCModeInit+0xce>
	{	//Tog Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    163c:	af e4       	ldi	r26, 0x4F	; 79
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ef e4       	ldi	r30, 0x4F	; 79
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 64       	ori	r24, 0x40	; 64
    1648:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    164a:	af e4       	ldi	r26, 0x4F	; 79
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ef e4       	ldi	r30, 0x4F	; 79
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	8c 93       	st	X, r24
    1658:	23 c0       	rjmp	.+70     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_CLr)
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	79 f4       	brne	.+30     	; 0x167e <T1_voidCTCModeInit+0xf2>
	{
		//clr Pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1660:	af e4       	ldi	r26, 0x4F	; 79
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ef e4       	ldi	r30, 0x4F	; 79
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    166e:	af e4       	ldi	r26, 0x4F	; 79
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e4       	ldi	r30, 0x4F	; 79
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 68       	ori	r24, 0x80	; 128
    167a:	8c 93       	st	X, r24
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Set)
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	71 f4       	brne	.+28     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	{
		//set Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1684:	af e4       	ldi	r26, 0x4F	; 79
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ef e4       	ldi	r30, 0x4F	; 79
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1692:	af e4       	ldi	r26, 0x4F	; 79
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 68       	ori	r24, 0x80	; 128
    169e:	8c 93       	st	X, r24
	}
	Prescaller&=0x07;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	87 70       	andi	r24, 0x07	; 7
    16a4:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    16a6:	ae e4       	ldi	r26, 0x4E	; 78
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ee e4       	ldi	r30, 0x4E	; 78
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	88 7f       	andi	r24, 0xF8	; 248
    16b2:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    16b4:	ae e4       	ldi	r26, 0x4E	; 78
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ee e4       	ldi	r30, 0x4E	; 78
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	89 2b       	or	r24, r25
    16c2:	8c 93       	st	X, r24
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <T1_voidCallBackFuncOCA>:


void T1_voidCallBackFuncOCA(void (*CTCApf)(void))
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <T1_voidCallBackFuncOCA+0x6>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
	if(CTCApf!=NULL)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	31 f0       	breq	.+12     	; 0x16f6 <T1_voidCallBackFuncOCA+0x22>
	{
		GlobalOCAPf=CTCApf;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	90 93 9b 01 	sts	0x019B, r25
    16f2:	80 93 9a 01 	sts	0x019A, r24
	}
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <__vector_7>:


void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOCAPf!=NULL)
    172a:	80 91 9a 01 	lds	r24, 0x019A
    172e:	90 91 9b 01 	lds	r25, 0x019B
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	29 f0       	breq	.+10     	; 0x1740 <__vector_7+0x40>
	{
		GlobalOCAPf();
    1736:	e0 91 9a 01 	lds	r30, 0x019A
    173a:	f0 91 9b 01 	lds	r31, 0x019B
    173e:	09 95       	icall
	}
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <T1_voidCallBackFuncOCB>:


void T1_voidCallBackFuncOCB(void (*CTCBpf)(void))
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <T1_voidCallBackFuncOCB+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	if(CTCBpf!=NULL)
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <T1_voidCallBackFuncOCB+0x22>
	{
		GlobalOCBPf=CTCBpf;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	90 93 9d 01 	sts	0x019D, r25
    1784:	80 93 9c 01 	sts	0x019C, r24
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <__vector_8>:


void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOCBPf!=NULL)
    17bc:	80 91 9c 01 	lds	r24, 0x019C
    17c0:	90 91 9d 01 	lds	r25, 0x019D
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <__vector_8+0x40>
	{
		GlobalOCBPf();
    17c8:	e0 91 9c 01 	lds	r30, 0x019C
    17cc:	f0 91 9d 01 	lds	r31, 0x019D
    17d0:	09 95       	icall
	}
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <T1_voidFastPWMFixedTop>:



/*******************************Fast PWM*********************************/
void T1_voidFastPWMFixedTop(u8 Type,u8 PreScaller ,u8 PWMMode , u8 DutyCycle)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <T1_voidFastPWMFixedTop+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <T1_voidFastPWMFixedTop+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	6a 83       	std	Y+2, r22	; 0x02
    1808:	4b 83       	std	Y+3, r20	; 0x03
    180a:	2c 83       	std	Y+4, r18	; 0x04
	//prescaller
	PreScaller&=0x07;
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	87 70       	andi	r24, 0x07	; 7
    1810:	8a 83       	std	Y+2, r24	; 0x02
	T1_TCCR1B&=0xF8;
    1812:	ae e4       	ldi	r26, 0x4E	; 78
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ee e4       	ldi	r30, 0x4E	; 78
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	88 7f       	andi	r24, 0xF8	; 248
    181e:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1820:	ae e4       	ldi	r26, 0x4E	; 78
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ee e4       	ldi	r30, 0x4E	; 78
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	90 81       	ld	r25, Z
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	89 2b       	or	r24, r25
    182e:	8c 93       	st	X, r24
	//select mode
	if (PWMMode==NonInverting)
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	79 f4       	brne	.+30     	; 0x1854 <T1_voidFastPWMFixedTop+0x5c>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1836:	af e4       	ldi	r26, 0x4F	; 79
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	ef e4       	ldi	r30, 0x4F	; 79
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1844:	af e4       	ldi	r26, 0x4F	; 79
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	ef e4       	ldi	r30, 0x4F	; 79
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	80 68       	ori	r24, 0x80	; 128
    1850:	8c 93       	st	X, r24
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <T1_voidFastPWMFixedTop+0x7e>
	}
	else if (PWMMode==Inverting)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	71 f4       	brne	.+28     	; 0x1876 <T1_voidFastPWMFixedTop+0x7e>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    185a:	af e4       	ldi	r26, 0x4F	; 79
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 61       	ori	r24, 0x10	; 16
    1866:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1868:	af e4       	ldi	r26, 0x4F	; 79
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ef e4       	ldi	r30, 0x4F	; 79
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	8c 93       	st	X, r24
	}
	//select Type & set duty cycle
	if (Type==FastPWM_8Bit)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	88 23       	and	r24, r24
    187a:	09 f0       	breq	.+2      	; 0x187e <T1_voidFastPWMFixedTop+0x86>
    187c:	5f c0       	rjmp	.+190    	; 0x193c <T1_voidFastPWMFixedTop+0x144>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    188c:	af e4       	ldi	r26, 0x4F	; 79
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ef e4       	ldi	r30, 0x4F	; 79
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    189a:	ae e4       	ldi	r26, 0x4E	; 78
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    18a8:	ae e4       	ldi	r26, 0x4E	; 78
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ee e4       	ldi	r30, 0x4E	; 78
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7e       	andi	r24, 0xEF	; 239
    18b4:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	01 f5       	brne	.+64     	; 0x18fc <T1_voidFastPWMFixedTop+0x104>
		{
			T1_OCR1A = (FastPWM_8BitTopValue*(100-DutyCycle))/100;
    18bc:	ea e4       	ldi	r30, 0x4A	; 74
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	84 e6       	ldi	r24, 0x64	; 100
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	ac 01       	movw	r20, r24
    18cc:	42 1b       	sub	r20, r18
    18ce:	53 0b       	sbc	r21, r19
    18d0:	ca 01       	movw	r24, r20
    18d2:	9c 01       	movw	r18, r24
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	c9 01       	movw	r24, r18
    18da:	96 95       	lsr	r25
    18dc:	98 2f       	mov	r25, r24
    18de:	88 27       	eor	r24, r24
    18e0:	97 95       	ror	r25
    18e2:	87 95       	ror	r24
    18e4:	82 1b       	sub	r24, r18
    18e6:	93 0b       	sbc	r25, r19
    18e8:	84 0f       	add	r24, r20
    18ea:	95 1f       	adc	r25, r21
    18ec:	24 e6       	ldi	r18, 0x64	; 100
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	b9 01       	movw	r22, r18
    18f2:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    18f6:	cb 01       	movw	r24, r22
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	09 f0       	breq	.+2      	; 0x1904 <T1_voidFastPWMFixedTop+0x10c>
    1902:	d2 c0       	rjmp	.+420    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_8BitTopValue*DutyCycle)/100;
    1904:	ea e4       	ldi	r30, 0x4A	; 74
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ca 01       	movw	r24, r20
    1910:	9c 01       	movw	r18, r24
    1912:	22 0f       	add	r18, r18
    1914:	33 1f       	adc	r19, r19
    1916:	c9 01       	movw	r24, r18
    1918:	96 95       	lsr	r25
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
    191e:	97 95       	ror	r25
    1920:	87 95       	ror	r24
    1922:	82 1b       	sub	r24, r18
    1924:	93 0b       	sbc	r25, r19
    1926:	84 0f       	add	r24, r20
    1928:	95 1f       	adc	r25, r21
    192a:	24 e6       	ldi	r18, 0x64	; 100
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    1934:	cb 01       	movw	r24, r22
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	b6 c0       	rjmp	.+364    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		}
	}
	else if (Type==FastPWM_9Bit)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	09 f0       	breq	.+2      	; 0x1944 <T1_voidFastPWMFixedTop+0x14c>
    1942:	58 c0       	rjmp	.+176    	; 0x19f4 <T1_voidFastPWMFixedTop+0x1fc>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7e       	andi	r24, 0xEF	; 239
    197a:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	e9 f4       	brne	.+58     	; 0x19bc <T1_voidFastPWMFixedTop+0x1c4>
		{
			T1_OCR1A = (FastPWM_9BitTopValue*(100-DutyCycle))/100;
    1982:	ea e4       	ldi	r30, 0x4A	; 74
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	84 e6       	ldi	r24, 0x64	; 100
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	ac 01       	movw	r20, r24
    1992:	42 1b       	sub	r20, r18
    1994:	53 0b       	sbc	r21, r19
    1996:	9a 01       	movw	r18, r20
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	ac 01       	movw	r20, r24
    199e:	24 9f       	mul	r18, r20
    19a0:	c0 01       	movw	r24, r0
    19a2:	25 9f       	mul	r18, r21
    19a4:	90 0d       	add	r25, r0
    19a6:	34 9f       	mul	r19, r20
    19a8:	90 0d       	add	r25, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	24 e6       	ldi	r18, 0x64	; 100
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    19b6:	cb 01       	movw	r24, r22
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <T1_voidFastPWMFixedTop+0x1cc>
    19c2:	72 c0       	rjmp	.+228    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_9BitTopValue*DutyCycle)/100;
    19c4:	ea e4       	ldi	r30, 0x4A	; 74
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	ac 01       	movw	r20, r24
    19d4:	24 9f       	mul	r18, r20
    19d6:	c0 01       	movw	r24, r0
    19d8:	25 9f       	mul	r18, r21
    19da:	90 0d       	add	r25, r0
    19dc:	34 9f       	mul	r19, r20
    19de:	90 0d       	add	r25, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	24 e6       	ldi	r18, 0x64	; 100
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	b9 01       	movw	r22, r18
    19e8:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    19ec:	cb 01       	movw	r24, r22
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	5a c0       	rjmp	.+180    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		}
	}
	else if (Type==FastPWM_10Bit)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	09 f0       	breq	.+2      	; 0x19fc <T1_voidFastPWMFixedTop+0x204>
    19fa:	56 c0       	rjmp	.+172    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1a0a:	af e4       	ldi	r26, 0x4F	; 79
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ef e4       	ldi	r30, 0x4F	; 79
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1a18:	ae e4       	ldi	r26, 0x4E	; 78
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ee e4       	ldi	r30, 0x4E	; 78
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	88 60       	ori	r24, 0x08	; 8
    1a24:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1a26:	ae e4       	ldi	r26, 0x4E	; 78
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ee e4       	ldi	r30, 0x4E	; 78
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 7e       	andi	r24, 0xEF	; 239
    1a32:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	e9 f4       	brne	.+58     	; 0x1a74 <T1_voidFastPWMFixedTop+0x27c>
		{
			T1_OCR1A = (FastPWM_10BitTopValue*(100-DutyCycle))/100;
    1a3a:	ea e4       	ldi	r30, 0x4A	; 74
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	84 e6       	ldi	r24, 0x64	; 100
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	ac 01       	movw	r20, r24
    1a4a:	42 1b       	sub	r20, r18
    1a4c:	53 0b       	sbc	r21, r19
    1a4e:	9a 01       	movw	r18, r20
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	93 e0       	ldi	r25, 0x03	; 3
    1a54:	ac 01       	movw	r20, r24
    1a56:	24 9f       	mul	r18, r20
    1a58:	c0 01       	movw	r24, r0
    1a5a:	25 9f       	mul	r18, r21
    1a5c:	90 0d       	add	r25, r0
    1a5e:	34 9f       	mul	r19, r20
    1a60:	90 0d       	add	r25, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	24 e6       	ldi	r18, 0x64	; 100
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	b9 01       	movw	r22, r18
    1a6a:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    1a6e:	cb 01       	movw	r24, r22
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	b9 f4       	brne	.+46     	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_10BitTopValue*DutyCycle)/100;
    1a7a:	ea e4       	ldi	r30, 0x4A	; 74
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	ac 01       	movw	r20, r24
    1a8a:	24 9f       	mul	r18, r20
    1a8c:	c0 01       	movw	r24, r0
    1a8e:	25 9f       	mul	r18, r21
    1a90:	90 0d       	add	r25, r0
    1a92:	34 9f       	mul	r19, r20
    1a94:	90 0d       	add	r25, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	24 e6       	ldi	r18, 0x64	; 100
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
		}
	}

}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <T1_voidFastPWMSetTop>:


void T1_voidFastPWMSetTop(u8 Type,u8 PreScaller ,u8 PWMMode ,u16 TopValue, u8 DutyCycle)
{
    1ab6:	0f 93       	push	r16
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <T1_voidFastPWMSetTop+0x8>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <T1_voidFastPWMSetTop+0xa>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <T1_voidFastPWMSetTop+0xc>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
    1aca:	4b 83       	std	Y+3, r20	; 0x03
    1acc:	3d 83       	std	Y+5, r19	; 0x05
    1ace:	2c 83       	std	Y+4, r18	; 0x04
    1ad0:	0e 83       	std	Y+6, r16	; 0x06
	//prescaller
		PreScaller&=0x07;
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	87 70       	andi	r24, 0x07	; 7
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
		T1_TCCR1B&=0xF8;
    1ad8:	ae e4       	ldi	r26, 0x4E	; 78
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ee e4       	ldi	r30, 0x4E	; 78
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 7f       	andi	r24, 0xF8	; 248
    1ae4:	8c 93       	st	X, r24
		T1_TCCR1B|=PreScaller;
    1ae6:	ae e4       	ldi	r26, 0x4E	; 78
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ee e4       	ldi	r30, 0x4E	; 78
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	90 81       	ld	r25, Z
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
		//select mode
		if (PWMMode==NonInverting)
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	79 f4       	brne	.+30     	; 0x1b1a <T1_voidFastPWMSetTop+0x64>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1afc:	af e4       	ldi	r26, 0x4F	; 79
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ef e4       	ldi	r30, 0x4F	; 79
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 7b       	andi	r24, 0xBF	; 191
    1b08:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1b0a:	af e4       	ldi	r26, 0x4F	; 79
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ef e4       	ldi	r30, 0x4F	; 79
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 68       	ori	r24, 0x80	; 128
    1b16:	8c 93       	st	X, r24
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <T1_voidFastPWMSetTop+0x86>
		}
		else if (PWMMode==Inverting)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	71 f4       	brne	.+28     	; 0x1b3c <T1_voidFastPWMSetTop+0x86>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1b20:	af e4       	ldi	r26, 0x4F	; 79
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ef e4       	ldi	r30, 0x4F	; 79
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 61       	ori	r24, 0x10	; 16
    1b2c:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1b2e:	af e4       	ldi	r26, 0x4F	; 79
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ef e4       	ldi	r30, 0x4F	; 79
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 62       	ori	r24, 0x20	; 32
    1b3a:	8c 93       	st	X, r24
		}

		//select Type & set duty cycle & Set top value
		if (Type==FastPWM_ICR1)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <T1_voidFastPWMSetTop+0x8e>
    1b42:	5e c0       	rjmp	.+188    	; 0x1c00 <T1_voidFastPWMSetTop+0x14a>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1b44:	af e4       	ldi	r26, 0x4F	; 79
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ef e4       	ldi	r30, 0x4F	; 79
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1b52:	af e4       	ldi	r26, 0x4F	; 79
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	ef e4       	ldi	r30, 0x4F	; 79
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	82 60       	ori	r24, 0x02	; 2
    1b5e:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1b60:	ae e4       	ldi	r26, 0x4E	; 78
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ee e4       	ldi	r30, 0x4E	; 78
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 60       	ori	r24, 0x08	; 8
    1b6c:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1b6e:	ae e4       	ldi	r26, 0x4E	; 78
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ee e4       	ldi	r30, 0x4E	; 78
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 61       	ori	r24, 0x10	; 16
    1b7a:	8c 93       	st	X, r24
			T1_ICR1=TopValue;
    1b7c:	e6 e4       	ldi	r30, 0x46	; 70
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
			if (PWMMode==Inverting)
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	e9 f4       	brne	.+58     	; 0x1bc8 <T1_voidFastPWMSetTop+0x112>
			{
				T1_OCR1A = (TopValue*(100-DutyCycle))/100;
    1b8e:	ea e4       	ldi	r30, 0x4A	; 74
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	84 e6       	ldi	r24, 0x64	; 100
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 1b       	sub	r24, r18
    1b9e:	93 0b       	sbc	r25, r19
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	24 9f       	mul	r18, r20
    1baa:	c0 01       	movw	r24, r0
    1bac:	25 9f       	mul	r18, r21
    1bae:	90 0d       	add	r25, r0
    1bb0:	34 9f       	mul	r19, r20
    1bb2:	90 0d       	add	r25, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	24 e6       	ldi	r18, 0x64	; 100
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	b9 01       	movw	r22, r18
    1bbc:	0e 94 2d 2b 	call	0x565a	; 0x565a <__udivmodhi4>
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	7c c0       	rjmp	.+248    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
			else if (PWMMode==NonInverting)
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <T1_voidFastPWMSetTop+0x11a>
    1bce:	78 c0       	rjmp	.+240    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			{
				T1_OCR1A = (TopValue*DutyCycle)/100;
    1bd0:	ea e4       	ldi	r30, 0x4A	; 74
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	ac 01       	movw	r20, r24
    1be0:	24 9f       	mul	r18, r20
    1be2:	c0 01       	movw	r24, r0
    1be4:	25 9f       	mul	r18, r21
    1be6:	90 0d       	add	r25, r0
    1be8:	34 9f       	mul	r19, r20
    1bea:	90 0d       	add	r25, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	24 e6       	ldi	r18, 0x64	; 100
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	0e 94 2d 2b 	call	0x565a	; 0x565a <__udivmodhi4>
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	60 c0       	rjmp	.+192    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
		}
		else if (Type==FastPWM_OCR1A)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <T1_voidFastPWMSetTop+0x152>
    1c06:	5c c0       	rjmp	.+184    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1c08:	af e4       	ldi	r26, 0x4F	; 79
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ef e4       	ldi	r30, 0x4F	; 79
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	81 60       	ori	r24, 0x01	; 1
    1c14:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1c16:	af e4       	ldi	r26, 0x4F	; 79
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ef e4       	ldi	r30, 0x4F	; 79
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	82 60       	ori	r24, 0x02	; 2
    1c22:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1c24:	ae e4       	ldi	r26, 0x4E	; 78
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ee e4       	ldi	r30, 0x4E	; 78
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 60       	ori	r24, 0x08	; 8
    1c30:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1c32:	ae e4       	ldi	r26, 0x4E	; 78
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ee e4       	ldi	r30, 0x4E	; 78
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	8c 93       	st	X, r24
			T1_OCR1A=TopValue;
    1c40:	ea e4       	ldi	r30, 0x4A	; 74
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
			if (PWMMode==Inverting)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	e9 f4       	brne	.+58     	; 0x1c8c <T1_voidFastPWMSetTop+0x1d6>
			{
				T1_OCR1B = (TopValue*(100-DutyCycle))/100;
    1c52:	e8 e4       	ldi	r30, 0x48	; 72
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8e 81       	ldd	r24, Y+6	; 0x06
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	84 e6       	ldi	r24, 0x64	; 100
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	82 1b       	sub	r24, r18
    1c62:	93 0b       	sbc	r25, r19
    1c64:	9c 01       	movw	r18, r24
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	24 9f       	mul	r18, r20
    1c6e:	c0 01       	movw	r24, r0
    1c70:	25 9f       	mul	r18, r21
    1c72:	90 0d       	add	r25, r0
    1c74:	34 9f       	mul	r19, r20
    1c76:	90 0d       	add	r25, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	24 e6       	ldi	r18, 0x64	; 100
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 2d 2b 	call	0x565a	; 0x565a <__udivmodhi4>
    1c84:	cb 01       	movw	r24, r22
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	1a c0       	rjmp	.+52     	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
			else if (PWMMode==NonInverting)
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	b9 f4       	brne	.+46     	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			{
				T1_OCR1B = (TopValue*DutyCycle)/100;
    1c92:	e8 e4       	ldi	r30, 0x48	; 72
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	24 9f       	mul	r18, r20
    1ca4:	c0 01       	movw	r24, r0
    1ca6:	25 9f       	mul	r18, r21
    1ca8:	90 0d       	add	r25, r0
    1caa:	34 9f       	mul	r19, r20
    1cac:	90 0d       	add	r25, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	24 e6       	ldi	r18, 0x64	; 100
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	0e 94 2d 2b 	call	0x565a	; 0x565a <__udivmodhi4>
    1cba:	cb 01       	movw	r24, r22
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
			}
		}
}
    1cc0:	26 96       	adiw	r28, 0x06	; 6
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <T1_voidFastPWMServoInit>:



/****************************Servo Functions*************************/
void T1_voidFastPWMServoInit()
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1cde:	af e4       	ldi	r26, 0x4F	; 79
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ef e4       	ldi	r30, 0x4F	; 79
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7b       	andi	r24, 0xBF	; 191
    1cea:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1cec:	af e4       	ldi	r26, 0x4F	; 79
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ef e4       	ldi	r30, 0x4F	; 79
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	8c 93       	st	X, r24

	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1cfa:	ae e4       	ldi	r26, 0x4E	; 78
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	ee e4       	ldi	r30, 0x4E	; 78
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 61       	ori	r24, 0x10	; 16
    1d06:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1d08:	ae e4       	ldi	r26, 0x4E	; 78
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ee e4       	ldi	r30, 0x4E	; 78
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 60       	ori	r24, 0x08	; 8
    1d14:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1d16:	af e4       	ldi	r26, 0x4F	; 79
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ef e4       	ldi	r30, 0x4F	; 79
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	82 60       	ori	r24, 0x02	; 2
    1d22:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1d24:	af e4       	ldi	r26, 0x4F	; 79
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	ef e4       	ldi	r30, 0x4F	; 79
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8e 7f       	andi	r24, 0xFE	; 254
    1d30:	8c 93       	st	X, r24

	//PreScaller
	u8 PreScaller=prescaler8;
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	89 83       	std	Y+1, r24	; 0x01
	PreScaller&=0x07;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	87 70       	andi	r24, 0x07	; 7
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1d3c:	ae e4       	ldi	r26, 0x4E	; 78
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	88 7f       	andi	r24, 0xF8	; 248
    1d48:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1d4a:	ae e4       	ldi	r26, 0x4E	; 78
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ee e4       	ldi	r30, 0x4E	; 78
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	90 81       	ld	r25, Z
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	89 2b       	or	r24, r25
    1d58:	8c 93       	st	X, r24


	T1_ICR1=Servo_value;
    1d5a:	e6 e4       	ldi	r30, 0x46	; 70
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8f e1       	ldi	r24, 0x1F	; 31
    1d60:	9e e4       	ldi	r25, 0x4E	; 78
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24


}
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <T1_voidFastPWMServoSetAngle>:

void T1_voidFastPWMServoSetAngle(u16 angle)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <T1_voidFastPWMServoSetAngle+0x6>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	T1_OCR1A=angle;
    1d7c:	ea e4       	ldi	r30, 0x4A	; 74
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
	}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <T1_voidICUInit>:



/***********************ICU functions*******************************/
void T1_voidICUInit(void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	u8 Prescaller=prescaler8;
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	89 83       	std	Y+1, r24	; 0x01
	//NormalMode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1da0:	af e4       	ldi	r26, 0x4F	; 79
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e4       	ldi	r30, 0x4F	; 79
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8e 7f       	andi	r24, 0xFE	; 254
    1dac:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1dae:	af e4       	ldi	r26, 0x4F	; 79
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ef e4       	ldi	r30, 0x4F	; 79
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	8d 7f       	andi	r24, 0xFD	; 253
    1dba:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1dbc:	ae e4       	ldi	r26, 0x4E	; 78
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ee e4       	ldi	r30, 0x4E	; 78
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	87 7f       	andi	r24, 0xF7	; 247
    1dc8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1dca:	ae e4       	ldi	r26, 0x4E	; 78
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ee e4       	ldi	r30, 0x4E	; 78
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
    1dd6:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	87 70       	andi	r24, 0x07	; 7
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1dde:	ae e4       	ldi	r26, 0x4E	; 78
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	ee e4       	ldi	r30, 0x4E	; 78
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 7f       	andi	r24, 0xF8	; 248
    1dea:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1dec:	ae e4       	ldi	r26, 0x4E	; 78
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	ee e4       	ldi	r30, 0x4E	; 78
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	90 81       	ld	r25, Z
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	89 2b       	or	r24, r25
    1dfa:	8c 93       	st	X, r24
	//Set ICU Bit to Rising
	set_bit(T1_TCCR1B,T1_TCCR1B_ICES1);
    1dfc:	ae e4       	ldi	r26, 0x4E	; 78
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ee e4       	ldi	r30, 0x4E	; 78
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
	//Enable ICU Interrupt
	set_bit(T1_TIMSK,T1_TIMSK_TICIE1);
    1e0a:	a9 e5       	ldi	r26, 0x59	; 89
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e9 e5       	ldi	r30, 0x59	; 89
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	8c 93       	st	X, r24
	}
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <T1_voidCallBackFuncICUMode>:


void T1_voidCallBackFuncICUMode(void (*ICUpf)(void))
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <T1_voidCallBackFuncICUMode+0x6>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	if(ICUpf!=NULL)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <T1_voidCallBackFuncICUMode+0x22>
	{
		GlobalICUPf=ICUpf;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	90 93 97 01 	sts	0x0197, r25
    1e3e:	80 93 96 01 	sts	0x0196, r24
	}
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <__vector_6>:


void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62

	if (GlobalICUPf!=NULL)
    1e76:	80 91 96 01 	lds	r24, 0x0196
    1e7a:	90 91 97 01 	lds	r25, 0x0197
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <__vector_6+0x40>
	{
		GlobalICUPf();
    1e82:	e0 91 96 01 	lds	r30, 0x0196
    1e86:	f0 91 97 01 	lds	r31, 0x0197
    1e8a:	09 95       	icall
	}

}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	ff 91       	pop	r31
    1e92:	ef 91       	pop	r30
    1e94:	bf 91       	pop	r27
    1e96:	af 91       	pop	r26
    1e98:	9f 91       	pop	r25
    1e9a:	8f 91       	pop	r24
    1e9c:	7f 91       	pop	r23
    1e9e:	6f 91       	pop	r22
    1ea0:	5f 91       	pop	r21
    1ea2:	4f 91       	pop	r20
    1ea4:	3f 91       	pop	r19
    1ea6:	2f 91       	pop	r18
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <T0_voidNormalModeInit>:



/*************************************Normal Mode functions***************************/
void T0_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <T0_voidNormalModeInit+0x6>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
    1ec2:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1ec4:	a3 e5       	ldi	r26, 0x53	; 83
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e3 e5       	ldi	r30, 0x53	; 83
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 7b       	andi	r24, 0xBF	; 191
    1ed0:	8c 93       	st	X, r24
	clear_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	87 7f       	andi	r24, 0xF7	; 247
    1ede:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	87 70       	andi	r24, 0x07	; 7
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	T0_TCCR0&=0xF8;
    1ee6:	a3 e5       	ldi	r26, 0x53	; 83
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e3 e5       	ldi	r30, 0x53	; 83
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 7f       	andi	r24, 0xF8	; 248
    1ef2:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1ef4:	a3 e5       	ldi	r26, 0x53	; 83
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e5       	ldi	r30, 0x53	; 83
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	90 81       	ld	r25, Z
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	89 2b       	or	r24, r25
    1f02:	8c 93       	st	X, r24
	T0_TCNT0=PreloadValue;
    1f04:	e2 e5       	ldi	r30, 0x52	; 82
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	41 f4       	brne	.+16     	; 0x1f22 <T0_voidNormalModeInit+0x70>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1f12:	a9 e5       	ldi	r26, 0x59	; 89
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e9 e5       	ldi	r30, 0x59	; 89
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	81 60       	ori	r24, 0x01	; 1
    1f1e:	8c 93       	st	X, r24
    1f20:	0a c0       	rjmp	.+20     	; 0x1f36 <T0_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	39 f4       	brne	.+14     	; 0x1f36 <T0_voidNormalModeInit+0x84>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1f28:	a9 e5       	ldi	r26, 0x59	; 89
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e9 e5       	ldi	r30, 0x59	; 89
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8e 7f       	andi	r24, 0xFE	; 254
    1f34:	8c 93       	st	X, r24
	}

}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <T0_voidCallBackFuncNormalMode>:


void T0_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <T0_voidCallBackFuncNormalMode+0x6>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	31 f0       	breq	.+12     	; 0x1f64 <T0_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	90 93 9f 01 	sts	0x019F, r25
    1f60:	80 93 9e 01 	sts	0x019E, r24
	}
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <__vector_11>:


void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	5f 93       	push	r21
    1f80:	6f 93       	push	r22
    1f82:	7f 93       	push	r23
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	af 93       	push	r26
    1f8a:	bf 93       	push	r27
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    1f98:	80 91 9e 01 	lds	r24, 0x019E
    1f9c:	90 91 9f 01 	lds	r25, 0x019F
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	29 f0       	breq	.+10     	; 0x1fae <__vector_11+0x40>
	{
		GlobalOVPF();
    1fa4:	e0 91 9e 01 	lds	r30, 0x019E
    1fa8:	f0 91 9f 01 	lds	r31, 0x019F
    1fac:	09 95       	icall
	}
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti

00001fd4 <T0_voidCTCModeInit>:



/**************************************CTC*****************************************/
void T0_voidCTCModeInit(u8 OC0State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <T0_voidCTCModeInit+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <T0_voidCTCModeInit+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	6a 83       	std	Y+2, r22	; 0x02
    1fe4:	4b 83       	std	Y+3, r20	; 0x03
    1fe6:	2c 83       	std	Y+4, r18	; 0x04
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 7b       	andi	r24, 0xBF	; 191
    1ff4:	8c 93       	st	X, r24
	set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1ff6:	a3 e5       	ldi	r26, 0x53	; 83
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e3 e5       	ldi	r30, 0x53	; 83
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 60       	ori	r24, 0x08	; 8
    2002:	8c 93       	st	X, r24
	if(OC0State==CTC_OC0_Disconnect)
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	79 f4       	brne	.+30     	; 0x2028 <T0_voidCTCModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    200a:	a3 e5       	ldi	r26, 0x53	; 83
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e3 e5       	ldi	r30, 0x53	; 83
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 7e       	andi	r24, 0xEF	; 239
    2016:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    2018:	a3 e5       	ldi	r26, 0x53	; 83
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e3 e5       	ldi	r30, 0x53	; 83
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8f 7d       	andi	r24, 0xDF	; 223
    2024:	8c 93       	st	X, r24
    2026:	35 c0       	rjmp	.+106    	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Tog)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	79 f4       	brne	.+30     	; 0x204c <T0_voidCTCModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    202e:	a3 e5       	ldi	r26, 0x53	; 83
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e3 e5       	ldi	r30, 0x53	; 83
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 61       	ori	r24, 0x10	; 16
    203a:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    203c:	a3 e5       	ldi	r26, 0x53	; 83
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e3 e5       	ldi	r30, 0x53	; 83
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7d       	andi	r24, 0xDF	; 223
    2048:	8c 93       	st	X, r24
    204a:	23 c0       	rjmp	.+70     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_CLr)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	79 f4       	brne	.+30     	; 0x2070 <T0_voidCTCModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    2052:	a3 e5       	ldi	r26, 0x53	; 83
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e3 e5       	ldi	r30, 0x53	; 83
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 7e       	andi	r24, 0xEF	; 239
    205e:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 62       	ori	r24, 0x20	; 32
    206c:	8c 93       	st	X, r24
    206e:	11 c0       	rjmp	.+34     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Set)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	71 f4       	brne	.+28     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    2076:	a3 e5       	ldi	r26, 0x53	; 83
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	80 61       	ori	r24, 0x10	; 16
    2082:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2084:	a3 e5       	ldi	r26, 0x53	; 83
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e3 e5       	ldi	r30, 0x53	; 83
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 62       	ori	r24, 0x20	; 32
    2090:	8c 93       	st	X, r24
	}
	//Prescaller
	Prescaller&=0x07;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	87 70       	andi	r24, 0x07	; 7
    2096:	8a 83       	std	Y+2, r24	; 0x02
	T0_TCCR0&=0xF8;
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 7f       	andi	r24, 0xF8	; 248
    20a4:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    20a6:	a3 e5       	ldi	r26, 0x53	; 83
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e3 e5       	ldi	r30, 0x53	; 83
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	90 81       	ld	r25, Z
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	89 2b       	or	r24, r25
    20b4:	8c 93       	st	X, r24
	//Output compare
	T0_OCR0 = CompareValue;
    20b6:	ec e5       	ldi	r30, 0x5C	; 92
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	41 f4       	brne	.+16     	; 0x20d4 <T0_voidCTCModeInit+0x100>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    20c4:	a9 e5       	ldi	r26, 0x59	; 89
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e9 e5       	ldi	r30, 0x59	; 89
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	8c 93       	st	X, r24
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <T0_voidCTCModeInit+0x114>
	}
	else if(InterruptState ==disable)
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	39 f4       	brne	.+14     	; 0x20e8 <T0_voidCTCModeInit+0x114>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    20da:	a9 e5       	ldi	r26, 0x59	; 89
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e9 e5       	ldi	r30, 0x59	; 89
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8e 7f       	andi	r24, 0xFE	; 254
    20e6:	8c 93       	st	X, r24
	}

}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <T0_voidCallBackFuncCTCMode>:


void T0_voidCallBackFuncCTCMode(void (*CTCpf)(void))
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <T0_voidCallBackFuncCTCMode+0x6>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	31 f0       	breq	.+12     	; 0x2118 <T0_voidCallBackFuncCTCMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	90 93 a1 01 	sts	0x01A1, r25
    2114:	80 93 a0 01 	sts	0x01A0, r24
	}
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <__vector_10>:



void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    214c:	80 91 a0 01 	lds	r24, 0x01A0
    2150:	90 91 a1 01 	lds	r25, 0x01A1
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	29 f0       	breq	.+10     	; 0x2162 <__vector_10+0x40>
	{
		GlobalCTCPF();
    2158:	e0 91 a0 01 	lds	r30, 0x01A0
    215c:	f0 91 a1 01 	lds	r31, 0x01A1
    2160:	09 95       	icall
	}
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	ff 91       	pop	r31
    2168:	ef 91       	pop	r30
    216a:	bf 91       	pop	r27
    216c:	af 91       	pop	r26
    216e:	9f 91       	pop	r25
    2170:	8f 91       	pop	r24
    2172:	7f 91       	pop	r23
    2174:	6f 91       	pop	r22
    2176:	5f 91       	pop	r21
    2178:	4f 91       	pop	r20
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <T0_voidPWMModeInit>:



/**************************************PWM**************************************/
void T0_voidPWMModeInit(u8 PWMType, u8 OC0State ,u8 Prescaller, u8 DutyCycle)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <T0_voidPWMModeInit+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <T0_voidPWMModeInit+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
    2198:	4b 83       	std	Y+3, r20	; 0x03
    219a:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <T0_voidPWMModeInit+0x1c>
    21a2:	8f c0       	rjmp	.+286    	; 0x22c2 <T0_voidPWMModeInit+0x13a>
	{
		//fast PWM
		set_bit(T0_TCCR0,T0_TCCR0_WGM00);
    21a4:	a3 e5       	ldi	r26, 0x53	; 83
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e3 e5       	ldi	r30, 0x53	; 83
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	80 64       	ori	r24, 0x40	; 64
    21b0:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    21b2:	a3 e5       	ldi	r26, 0x53	; 83
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e3 e5       	ldi	r30, 0x53	; 83
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 60       	ori	r24, 0x08	; 8
    21be:	8c 93       	st	X, r24
		if (OC0State==PWM_OC0_Disconnect)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	79 f4       	brne	.+30     	; 0x21e4 <T0_voidPWMModeInit+0x5c>
		{
			//disconnect  pin OC0
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8f 7e       	andi	r24, 0xEF	; 239
    21d2:	8c 93       	st	X, r24
			clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    21d4:	a3 e5       	ldi	r26, 0x53	; 83
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e3 e5       	ldi	r30, 0x53	; 83
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8f 7d       	andi	r24, 0xDF	; 223
    21e0:	8c 93       	st	X, r24
    21e2:	5c c0       	rjmp	.+184    	; 0x229c <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_nonInverting)
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	49 f5       	brne	.+82     	; 0x223c <T0_voidPWMModeInit+0xb4>
		{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 7e       	andi	r24, 0xEF	; 239
    21f6:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 62       	ori	r24, 0x20	; 32
    2204:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    2206:	ec e5       	ldi	r30, 0x5C	; 92
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	48 2f       	mov	r20, r24
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	ca 01       	movw	r24, r20
    2212:	9c 01       	movw	r18, r24
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	c9 01       	movw	r24, r18
    221a:	96 95       	lsr	r25
    221c:	98 2f       	mov	r25, r24
    221e:	88 27       	eor	r24, r24
    2220:	97 95       	ror	r25
    2222:	87 95       	ror	r24
    2224:	82 1b       	sub	r24, r18
    2226:	93 0b       	sbc	r25, r19
    2228:	84 0f       	add	r24, r20
    222a:	95 1f       	adc	r25, r21
    222c:	24 e6       	ldi	r18, 0x64	; 100
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	b9 01       	movw	r22, r18
    2232:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    2236:	cb 01       	movw	r24, r22
    2238:	80 83       	st	Z, r24
    223a:	30 c0       	rjmp	.+96     	; 0x229c <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_Inverting)
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	69 f5       	brne	.+90     	; 0x229c <T0_voidPWMModeInit+0x114>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    2242:	a3 e5       	ldi	r26, 0x53	; 83
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e3 e5       	ldi	r30, 0x53	; 83
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	80 61       	ori	r24, 0x10	; 16
    224e:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 62       	ori	r24, 0x20	; 32
    225c:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    225e:	ec e5       	ldi	r30, 0x5C	; 92
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	24 e6       	ldi	r18, 0x64	; 100
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	b9 01       	movw	r22, r18
    2276:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    227a:	cb 01       	movw	r24, r22
    227c:	ac 01       	movw	r20, r24
    227e:	ca 01       	movw	r24, r20
    2280:	9c 01       	movw	r18, r24
    2282:	22 0f       	add	r18, r18
    2284:	33 1f       	adc	r19, r19
    2286:	c9 01       	movw	r24, r18
    2288:	96 95       	lsr	r25
    228a:	98 2f       	mov	r25, r24
    228c:	88 27       	eor	r24, r24
    228e:	97 95       	ror	r25
    2290:	87 95       	ror	r24
    2292:	82 1b       	sub	r24, r18
    2294:	93 0b       	sbc	r25, r19
    2296:	84 0f       	add	r24, r20
    2298:	95 1f       	adc	r25, r21
    229a:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	87 70       	andi	r24, 0x07	; 7
    22a0:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    22a2:	a3 e5       	ldi	r26, 0x53	; 83
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e3 e5       	ldi	r30, 0x53	; 83
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 7f       	andi	r24, 0xF8	; 248
    22ae:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    22b0:	a3 e5       	ldi	r26, 0x53	; 83
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e3 e5       	ldi	r30, 0x53	; 83
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	90 81       	ld	r25, Z
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	89 2b       	or	r24, r25
    22be:	8c 93       	st	X, r24
    22c0:	84 c0       	rjmp	.+264    	; 0x23ca <T0_voidPWMModeInit+0x242>
	}
	else if (PWMType==PhaseCorrectPWM)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	09 f0       	breq	.+2      	; 0x22ca <T0_voidPWMModeInit+0x142>
    22c8:	80 c0       	rjmp	.+256    	; 0x23ca <T0_voidPWMModeInit+0x242>
	{
		if (OC0State==PWM_OC0_Disconnect)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	79 f4       	brne	.+30     	; 0x22ee <T0_voidPWMModeInit+0x166>
			{
				//disconnect  pin OC0
				clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    22d0:	a3 e5       	ldi	r26, 0x53	; 83
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e3 e5       	ldi	r30, 0x53	; 83
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7e       	andi	r24, 0xEF	; 239
    22dc:	8c 93       	st	X, r24
				clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    22de:	a3 e5       	ldi	r26, 0x53	; 83
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e3 e5       	ldi	r30, 0x53	; 83
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8f 7d       	andi	r24, 0xDF	; 223
    22ea:	8c 93       	st	X, r24
    22ec:	5c c0       	rjmp	.+184    	; 0x23a6 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_nonInverting)
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	82 30       	cpi	r24, 0x02	; 2
    22f2:	49 f5       	brne	.+82     	; 0x2346 <T0_voidPWMModeInit+0x1be>
			{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    22f4:	a3 e5       	ldi	r26, 0x53	; 83
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e3 e5       	ldi	r30, 0x53	; 83
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8f 7e       	andi	r24, 0xEF	; 239
    2300:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2302:	a3 e5       	ldi	r26, 0x53	; 83
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e3 e5       	ldi	r30, 0x53	; 83
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 62       	ori	r24, 0x20	; 32
    230e:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    2310:	ec e5       	ldi	r30, 0x5C	; 92
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	48 2f       	mov	r20, r24
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	ca 01       	movw	r24, r20
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	c9 01       	movw	r24, r18
    2324:	96 95       	lsr	r25
    2326:	98 2f       	mov	r25, r24
    2328:	88 27       	eor	r24, r24
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	82 1b       	sub	r24, r18
    2330:	93 0b       	sbc	r25, r19
    2332:	84 0f       	add	r24, r20
    2334:	95 1f       	adc	r25, r21
    2336:	24 e6       	ldi	r18, 0x64	; 100
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	b9 01       	movw	r22, r18
    233c:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    2340:	cb 01       	movw	r24, r22
    2342:	80 83       	st	Z, r24
    2344:	30 c0       	rjmp	.+96     	; 0x23a6 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_Inverting)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	69 f5       	brne	.+90     	; 0x23a6 <T0_voidPWMModeInit+0x21e>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    234c:	a3 e5       	ldi	r26, 0x53	; 83
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e3 e5       	ldi	r30, 0x53	; 83
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 61       	ori	r24, 0x10	; 16
    2358:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    235a:	a3 e5       	ldi	r26, 0x53	; 83
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e3 e5       	ldi	r30, 0x53	; 83
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	80 62       	ori	r24, 0x20	; 32
    2366:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    2368:	ec e5       	ldi	r30, 0x5C	; 92
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	82 1b       	sub	r24, r18
    2378:	93 0b       	sbc	r25, r19
    237a:	24 e6       	ldi	r18, 0x64	; 100
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 41 2b 	call	0x5682	; 0x5682 <__divmodhi4>
    2384:	cb 01       	movw	r24, r22
    2386:	ac 01       	movw	r20, r24
    2388:	ca 01       	movw	r24, r20
    238a:	9c 01       	movw	r18, r24
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	c9 01       	movw	r24, r18
    2392:	96 95       	lsr	r25
    2394:	98 2f       	mov	r25, r24
    2396:	88 27       	eor	r24, r24
    2398:	97 95       	ror	r25
    239a:	87 95       	ror	r24
    239c:	82 1b       	sub	r24, r18
    239e:	93 0b       	sbc	r25, r19
    23a0:	84 0f       	add	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	87 70       	andi	r24, 0x07	; 7
    23aa:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	88 7f       	andi	r24, 0xF8	; 248
    23b8:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    23ba:	a3 e5       	ldi	r26, 0x53	; 83
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 e5       	ldi	r30, 0x53	; 83
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	90 81       	ld	r25, Z
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	89 2b       	or	r24, r25
    23c8:	8c 93       	st	X, r24
	}

}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <TWI_init>:
#include "twi.h"
#include "../../Common/Bit_Math.h"


void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	00 d0       	rcall	.+0      	; 0x23de <TWI_init+0x6>
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	9a 83       	std	Y+2, r25	; 0x02
    23e4:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWI_TWBR = Config_Ptr->bit_rate;
    23e6:	a0 e2       	ldi	r26, 0x20	; 32
    23e8:	b0 e0       	ldi	r27, 0x00	; 0
    23ea:	e9 81       	ldd	r30, Y+1	; 0x01
    23ec:	fa 81       	ldd	r31, Y+2	; 0x02
    23ee:	81 81       	ldd	r24, Z+1	; 0x01
    23f0:	8c 93       	st	X, r24
	TWI_TWSR = 0x00;
    23f2:	e1 e2       	ldi	r30, 0x21	; 33
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWI_TWAR = ((Config_Ptr->address)<<1);
    23f8:	a2 e2       	ldi	r26, 0x22	; 34
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	80 81       	ld	r24, Z
    2402:	88 0f       	add	r24, r24
    2404:	8c 93       	st	X, r24
	
    TWI_TWCR = (1<<TWI_TWCR_TWEN); /* enable TWI */
    2406:	e6 e5       	ldi	r30, 0x56	; 86
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	84 e0       	ldi	r24, 0x04	; 4
    240c:	80 83       	st	Z, r24
}
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	cf 91       	pop	r28
    2414:	df 91       	pop	r29
    2416:	08 95       	ret

00002418 <TWI_start>:

void TWI_start(void)
{
    2418:	df 93       	push	r29
    241a:	cf 93       	push	r28
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWI_TWCR = (1 << TWI_TWCR_TWINT) | (1 << TWI_TWCR_TWSTA) | (1 << TWI_TWCR_TWEN);
    2420:	e6 e5       	ldi	r30, 0x56	; 86
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	84 ea       	ldi	r24, 0xA4	; 164
    2426:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    2428:	e6 e5       	ldi	r30, 0x56	; 86
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	88 23       	and	r24, r24
    2430:	dc f7       	brge	.-10     	; 0x2428 <TWI_start+0x10>
}
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <TWI_stop>:

void TWI_stop(void)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWI_TWCR = (1 << TWI_TWCR_TWINT) | (1 << TWI_TWCR_TWSTO) | (1 << TWI_TWCR_TWEN);
    2440:	e6 e5       	ldi	r30, 0x56	; 86
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	84 e9       	ldi	r24, 0x94	; 148
    2446:	80 83       	st	Z, r24
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	08 95       	ret

0000244e <TWI_writeByte>:

void TWI_writeByte(u8 data)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWI_TWDR = data;
    245a:	e3 e2       	ldi	r30, 0x23	; 35
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI_TWCR = (1 << TWI_TWCR_TWINT) | (1 << TWI_TWCR_TWEN);
    2462:	e6 e5       	ldi	r30, 0x56	; 86
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	84 e8       	ldi	r24, 0x84	; 132
    2468:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    246a:	e6 e5       	ldi	r30, 0x56	; 86
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	88 23       	and	r24, r24
    2472:	dc f7       	brge	.-10     	; 0x246a <TWI_writeByte+0x1c>
}
    2474:	0f 90       	pop	r0
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <TWI_readByteWithACK>:

u8 TWI_readByteWithACK(void)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWI_TWCR = (1 << TWI_TWCR_TWINT) | (1 << TWI_TWCR_TWEN) | (1 << TWI_TWCR_TWEA);
    2484:	e6 e5       	ldi	r30, 0x56	; 86
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	84 ec       	ldi	r24, 0xC4	; 196
    248a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    248c:	e6 e5       	ldi	r30, 0x56	; 86
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	88 23       	and	r24, r24
    2494:	dc f7       	brge	.-10     	; 0x248c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWI_TWDR;
    2496:	e3 e2       	ldi	r30, 0x23	; 35
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
}
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <TWI_readByteWithNACK>:

u8 TWI_readByteWithNACK(void)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWI_TWCR = (1 << TWI_TWCR_TWINT) | (1 << TWI_TWCR_TWEN);
    24aa:	e6 e5       	ldi	r30, 0x56	; 86
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	84 e8       	ldi	r24, 0x84	; 132
    24b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    24b2:	e6 e5       	ldi	r30, 0x56	; 86
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	88 23       	and	r24, r24
    24ba:	dc f7       	brge	.-10     	; 0x24b2 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWI_TWDR;
    24bc:	e3 e2       	ldi	r30, 0x23	; 35
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWI_TWSR & 0xF8;
    24d2:	e1 e2       	ldi	r30, 0x21	; 33
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	88 7f       	andi	r24, 0xF8	; 248
    24da:	89 83       	std	Y+1, r24	; 0x01
    return status;
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    24de:	0f 90       	pop	r0
    24e0:	cf 91       	pop	r28
    24e2:	df 91       	pop	r29
    24e4:	08 95       	ret

000024e6 <SPI_voidinit>:
#include "SPI_Interface.h"



void SPI_voidinit(void)
{
    24e6:	df 93       	push	r29
    24e8:	cf 93       	push	r28
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
#if SPI_InterrptE==disable
	clear_bit(SPI_SPCR,SPCR_SPIE);
    24ee:	ad e2       	ldi	r26, 0x2D	; 45
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	ed e2       	ldi	r30, 0x2D	; 45
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	8f 77       	andi	r24, 0x7F	; 127
    24fa:	8c 93       	st	X, r24
#endif

#if SPI_DataOrder==DataorderLSB
	set_bit(SPI_SPCR,SPCR_DORD);
#elif SPI_DataOrder==DataorderMSB
	clear_bit(SPI_SPCR,SPCR_DORD);
    24fc:	ad e2       	ldi	r26, 0x2D	; 45
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	ed e2       	ldi	r30, 0x2D	; 45
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	8c 93       	st	X, r24
#endif


	set_bit(SPI_SPCR,SPCR_SPE);
    250a:	ad e2       	ldi	r26, 0x2D	; 45
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	ed e2       	ldi	r30, 0x2D	; 45
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 64       	ori	r24, 0x40	; 64
    2516:	8c 93       	st	X, r24
#if SPI_State==Master
	set_bit(SPI_SPCR,SPCR_MSTR);
    2518:	ad e2       	ldi	r26, 0x2D	; 45
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	ed e2       	ldi	r30, 0x2D	; 45
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	80 61       	ori	r24, 0x10	; 16
    2524:	8c 93       	st	X, r24
#elif SPI_State==Slave
	clear_bit(SPI_SPCR,SPCR_MSTR);
#endif

#if SPI_ClkPolarity==Rising
	clear_bit(SPI_SPCR,SPCR_CPOL);
    2526:	ad e2       	ldi	r26, 0x2D	; 45
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	ed e2       	ldi	r30, 0x2D	; 45
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	87 7f       	andi	r24, 0xF7	; 247
    2532:	8c 93       	st	X, r24
#elif SPI_ClkPolarity==Falling
	set_bit(SPI_SPCR,SPCR_CPOL);
#endif

#if SPI_ClkPhase==TxRx
	clear_bit(SPI_SPCR,SPCR_CPHA);
    2534:	ad e2       	ldi	r26, 0x2D	; 45
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	ed e2       	ldi	r30, 0x2D	; 45
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	8b 7f       	andi	r24, 0xFB	; 251
    2540:	8c 93       	st	X, r24
	set_bit(SPI_SPCR,SPCR_CPHA);
#endif


#if SPI_Frequency==F4
	clear_bit(SPI_SPSR,SPSR_SPI2X);
    2542:	ae e2       	ldi	r26, 0x2E	; 46
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	ee e2       	ldi	r30, 0x2E	; 46
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8e 7f       	andi	r24, 0xFE	; 254
    254e:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR0);
    2550:	ad e2       	ldi	r26, 0x2D	; 45
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	ed e2       	ldi	r30, 0x2D	; 45
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8e 7f       	andi	r24, 0xFE	; 254
    255c:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR1);
    255e:	ad e2       	ldi	r26, 0x2D	; 45
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	ed e2       	ldi	r30, 0x2D	; 45
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8d 7f       	andi	r24, 0xFD	; 253
    256a:	8c 93       	st	X, r24
	set_bit(SPI_SPSR,SPSR_SPI2X);
	clear_bit(SPI_SPCR,SPCR_SPR0);
	set_bit(SPI_SPCR,SPCR_SPR1);
#endif

}
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <SPI_u8sendReceiveByte>:




u8 SPI_u8sendReceiveByte(u8 data)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPI_SPDR = data;
    257e:	ef e2       	ldi	r30, 0x2F	; 47
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(!get_bit(SPI_SPSR,SPSR_SPIF)){}
    2586:	ee e2       	ldi	r30, 0x2E	; 46
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 23       	and	r24, r24
    258e:	dc f7       	brge	.-10     	; 0x2586 <SPI_u8sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPI_SPDR;
    2590:	ef e2       	ldi	r30, 0x2F	; 47
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
}
    2596:	0f 90       	pop	r0
    2598:	cf 91       	pop	r28
    259a:	df 91       	pop	r29
    259c:	08 95       	ret

0000259e <SPI_voidsendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_voidsendString(const u8 *str)
{
    259e:	df 93       	push	r29
    25a0:	cf 93       	push	r28
    25a2:	00 d0       	rcall	.+0      	; 0x25a4 <SPI_voidsendString+0x6>
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <SPI_voidsendString+0x8>
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    25ae:	1a 82       	std	Y+2, r1	; 0x02
	u8 received_data = 0;
    25b0:	19 82       	std	Y+1, r1	; 0x01
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <SPI_voidsendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	8b 81       	ldd	r24, Y+3	; 0x03
    25bc:	9c 81       	ldd	r25, Y+4	; 0x04
    25be:	fc 01       	movw	r30, r24
    25c0:	e2 0f       	add	r30, r18
    25c2:	f3 1f       	adc	r31, r19
    25c4:	80 81       	ld	r24, Z
    25c6:	0e 94 b9 12 	call	0x2572	; 0x2572 <SPI_u8sendReceiveByte>
    25ca:	89 83       	std	Y+1, r24	; 0x01
		i++;
    25cc:	8a 81       	ldd	r24, Y+2	; 0x02
    25ce:	8f 5f       	subi	r24, 0xFF	; 255
    25d0:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	fc 01       	movw	r30, r24
    25de:	e2 0f       	add	r30, r18
    25e0:	f3 1f       	adc	r31, r19
    25e2:	80 81       	ld	r24, Z
    25e4:	88 23       	and	r24, r24
    25e6:	31 f7       	brne	.-52     	; 0x25b4 <SPI_voidsendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
		i++;
	}
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <SPI_voidreceiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_voidreceiveString(u8 *str)
{
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <SPI_voidreceiveString+0xa>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9b 83       	std	Y+3, r25	; 0x03
    2608:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    260a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	9b 81       	ldd	r25, Y+3	; 0x03
    2616:	8c 01       	movw	r16, r24
    2618:	02 0f       	add	r16, r18
    261a:	13 1f       	adc	r17, r19
    261c:	8f ef       	ldi	r24, 0xFF	; 255
    261e:	0e 94 b9 12 	call	0x2572	; 0x2572 <SPI_u8sendReceiveByte>
    2622:	f8 01       	movw	r30, r16
    2624:	80 83       	st	Z, r24
    2626:	10 c0       	rjmp	.+32     	; 0x2648 <SPI_voidreceiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	8a 81       	ldd	r24, Y+2	; 0x02
    2636:	9b 81       	ldd	r25, Y+3	; 0x03
    2638:	8c 01       	movw	r16, r24
    263a:	02 0f       	add	r16, r18
    263c:	13 1f       	adc	r17, r19
    263e:	8f ef       	ldi	r24, 0xFF	; 255
    2640:	0e 94 b9 12 	call	0x2572	; 0x2572 <SPI_u8sendReceiveByte>
    2644:	f8 01       	movw	r30, r16
    2646:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	9b 81       	ldd	r25, Y+3	; 0x03
    2652:	fc 01       	movw	r30, r24
    2654:	e2 0f       	add	r30, r18
    2656:	f3 1f       	adc	r31, r19
    2658:	80 81       	ld	r24, Z
    265a:	83 32       	cpi	r24, 0x23	; 35
    265c:	29 f7       	brne	.-54     	; 0x2628 <SPI_voidreceiveString+0x32>
		i++;
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	9b 81       	ldd	r25, Y+3	; 0x03
    2668:	fc 01       	movw	r30, r24
    266a:	e2 0f       	add	r30, r18
    266c:	f3 1f       	adc	r31, r19
    266e:	10 82       	st	Z, r1
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	08 95       	ret

00002680 <GIE_voidEnable>:
#define GIE_SREG    *((volatile u8*)0x5F)
#define GIE_I       7


void GIE_voidEnable()
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	set_bit(GIE_SREG,GIE_I);
    2688:	af e5       	ldi	r26, 0x5F	; 95
    268a:	b0 e0       	ldi	r27, 0x00	; 0
    268c:	ef e5       	ldi	r30, 0x5F	; 95
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	80 81       	ld	r24, Z
    2692:	80 68       	ori	r24, 0x80	; 128
    2694:	8c 93       	st	X, r24
}
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <GIE_voidDisable>:

void GIE_voidDisable()
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GIE_SREG,GIE_I);
    26a4:	af e5       	ldi	r26, 0x5F	; 95
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	ef e5       	ldi	r30, 0x5F	; 95
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8f 77       	andi	r24, 0x7F	; 127
    26b0:	8c 93       	st	X, r24
}
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <EXTI_voidInitINT0>:
#include "EXTI_Interface.h"
void (*EXTI0_ISR)();
void (*EXTI1_ISR)();
void (*EXTI2_ISR)();
void EXTI_voidInitINT0(u8 sense)
{
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	79 f4       	brne	.+30     	; 0x26e8 <EXTI_voidInitINT0+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    26ca:	a5 e5       	ldi	r26, 0x55	; 85
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e5 e5       	ldi	r30, 0x55	; 85
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8e 7f       	andi	r24, 0xFE	; 254
    26d6:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    26d8:	a5 e5       	ldi	r26, 0x55	; 85
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e5 e5       	ldi	r30, 0x55	; 85
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	8d 7f       	andi	r24, 0xFD	; 253
    26e4:	8c 93       	st	X, r24
    26e6:	35 c0       	rjmp	.+106    	; 0x2752 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==AnyCahnge)
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	79 f4       	brne	.+30     	; 0x270c <EXTI_voidInitINT0+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    26ee:	a5 e5       	ldi	r26, 0x55	; 85
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e5 e5       	ldi	r30, 0x55	; 85
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	81 60       	ori	r24, 0x01	; 1
    26fa:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    26fc:	a5 e5       	ldi	r26, 0x55	; 85
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e5 e5       	ldi	r30, 0x55	; 85
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	8d 7f       	andi	r24, 0xFD	; 253
    2708:	8c 93       	st	X, r24
    270a:	23 c0       	rjmp	.+70     	; 0x2752 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Falling)
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	83 30       	cpi	r24, 0x03	; 3
    2710:	79 f4       	brne	.+30     	; 0x2730 <EXTI_voidInitINT0+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    2712:	a5 e5       	ldi	r26, 0x55	; 85
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e5 e5       	ldi	r30, 0x55	; 85
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8e 7f       	andi	r24, 0xFE	; 254
    271e:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2720:	a5 e5       	ldi	r26, 0x55	; 85
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	e5 e5       	ldi	r30, 0x55	; 85
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	82 60       	ori	r24, 0x02	; 2
    272c:	8c 93       	st	X, r24
    272e:	11 c0       	rjmp	.+34     	; 0x2752 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Rising)
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	84 30       	cpi	r24, 0x04	; 4
    2734:	71 f4       	brne	.+28     	; 0x2752 <EXTI_voidInitINT0+0x9a>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    2736:	a5 e5       	ldi	r26, 0x55	; 85
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e5 e5       	ldi	r30, 0x55	; 85
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	81 60       	ori	r24, 0x01	; 1
    2742:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2744:	a5 e5       	ldi	r26, 0x55	; 85
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e5 e5       	ldi	r30, 0x55	; 85
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	82 60       	ori	r24, 0x02	; 2
    2750:	8c 93       	st	X, r24
	}
	else
	{
		//error
	}
	set_bit(EXTI_GICR,EXTI_INT0);
    2752:	ab e5       	ldi	r26, 0x5B	; 91
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	eb e5       	ldi	r30, 0x5B	; 91
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 64       	ori	r24, 0x40	; 64
    275e:	8c 93       	st	X, r24

}
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <EXTI_voidInitINT1>:

void EXTI_voidInitINT1(u8 sense)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	79 f4       	brne	.+30     	; 0x2798 <EXTI_voidInitINT1+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    277a:	a5 e5       	ldi	r26, 0x55	; 85
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e5 e5       	ldi	r30, 0x55	; 85
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	80 81       	ld	r24, Z
    2784:	8b 7f       	andi	r24, 0xFB	; 251
    2786:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    2788:	a5 e5       	ldi	r26, 0x55	; 85
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e5 e5       	ldi	r30, 0x55	; 85
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	87 7f       	andi	r24, 0xF7	; 247
    2794:	8c 93       	st	X, r24
    2796:	35 c0       	rjmp	.+106    	; 0x2802 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==AnyCahnge)
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	79 f4       	brne	.+30     	; 0x27bc <EXTI_voidInitINT1+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    279e:	a5 e5       	ldi	r26, 0x55	; 85
    27a0:	b0 e0       	ldi	r27, 0x00	; 0
    27a2:	e5 e5       	ldi	r30, 0x55	; 85
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	84 60       	ori	r24, 0x04	; 4
    27aa:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    27ac:	a5 e5       	ldi	r26, 0x55	; 85
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	e5 e5       	ldi	r30, 0x55	; 85
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	87 7f       	andi	r24, 0xF7	; 247
    27b8:	8c 93       	st	X, r24
    27ba:	23 c0       	rjmp	.+70     	; 0x2802 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Falling)
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	83 30       	cpi	r24, 0x03	; 3
    27c0:	79 f4       	brne	.+30     	; 0x27e0 <EXTI_voidInitINT1+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    27c2:	a5 e5       	ldi	r26, 0x55	; 85
    27c4:	b0 e0       	ldi	r27, 0x00	; 0
    27c6:	e5 e5       	ldi	r30, 0x55	; 85
    27c8:	f0 e0       	ldi	r31, 0x00	; 0
    27ca:	80 81       	ld	r24, Z
    27cc:	8b 7f       	andi	r24, 0xFB	; 251
    27ce:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    27d0:	a5 e5       	ldi	r26, 0x55	; 85
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	e5 e5       	ldi	r30, 0x55	; 85
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 60       	ori	r24, 0x08	; 8
    27dc:	8c 93       	st	X, r24
    27de:	11 c0       	rjmp	.+34     	; 0x2802 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Rising)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	a9 f4       	brne	.+42     	; 0x2810 <EXTI_voidInitINT1+0xa8>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    27e6:	a5 e5       	ldi	r26, 0x55	; 85
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e5 e5       	ldi	r30, 0x55	; 85
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	84 60       	ori	r24, 0x04	; 4
    27f2:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    27f4:	a5 e5       	ldi	r26, 0x55	; 85
    27f6:	b0 e0       	ldi	r27, 0x00	; 0
    27f8:	e5 e5       	ldi	r30, 0x55	; 85
    27fa:	f0 e0       	ldi	r31, 0x00	; 0
    27fc:	80 81       	ld	r24, Z
    27fe:	88 60       	ori	r24, 0x08	; 8
    2800:	8c 93       	st	X, r24
	}
	else
	{
		return;
	}
	set_bit(EXTI_GICR,EXTI_INT1);
    2802:	ab e5       	ldi	r26, 0x5B	; 91
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	eb e5       	ldi	r30, 0x5B	; 91
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	80 68       	ori	r24, 0x80	; 128
    280e:	8c 93       	st	X, r24
}
    2810:	0f 90       	pop	r0
    2812:	cf 91       	pop	r28
    2814:	df 91       	pop	r29
    2816:	08 95       	ret

00002818 <EXTI_voidInitINT2>:

void EXTI_voidInitINT2(u8 sense)
{
    2818:	df 93       	push	r29
    281a:	cf 93       	push	r28
    281c:	0f 92       	push	r0
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	89 83       	std	Y+1, r24	; 0x01
	if(sense==Rising)
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	84 30       	cpi	r24, 0x04	; 4
    2828:	41 f4       	brne	.+16     	; 0x283a <EXTI_voidInitINT2+0x22>
	{
		set_bit(EXTI_MCUCSR,EXTI_ISC2);
    282a:	a4 e5       	ldi	r26, 0x54	; 84
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e4 e5       	ldi	r30, 0x54	; 84
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	80 64       	ori	r24, 0x40	; 64
    2836:	8c 93       	st	X, r24
    2838:	0a c0       	rjmp	.+20     	; 0x284e <EXTI_voidInitINT2+0x36>
	}
	else if (sense==Rising)
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	84 30       	cpi	r24, 0x04	; 4
    283e:	39 f4       	brne	.+14     	; 0x284e <EXTI_voidInitINT2+0x36>
	{
		clear_bit(EXTI_MCUCSR,EXTI_ISC2);
    2840:	a4 e5       	ldi	r26, 0x54	; 84
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e4 e5       	ldi	r30, 0x54	; 84
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	8f 7b       	andi	r24, 0xBF	; 191
    284c:	8c 93       	st	X, r24
	}
	else
	{

	}
	set_bit(EXTI_GICR,EXTI_INT2);
    284e:	ab e5       	ldi	r26, 0x5B	; 91
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	eb e5       	ldi	r30, 0x5B	; 91
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	80 81       	ld	r24, Z
    2858:	80 62       	ori	r24, 0x20	; 32
    285a:	8c 93       	st	X, r24
}
    285c:	0f 90       	pop	r0
    285e:	cf 91       	pop	r28
    2860:	df 91       	pop	r29
    2862:	08 95       	ret

00002864 <EXTI0_CallBack>:

void EXTI0_CallBack (void (*ptr)(void))
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	00 d0       	rcall	.+0      	; 0x286a <EXTI0_CallBack+0x6>
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_ISR = ptr;
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	90 93 a9 01 	sts	0x01A9, r25
    287a:	80 93 a8 01 	sts	0x01A8, r24
}
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <__vector_1>:
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    2888:	1f 92       	push	r1
    288a:	0f 92       	push	r0
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	0f 92       	push	r0
    2890:	11 24       	eor	r1, r1
    2892:	2f 93       	push	r18
    2894:	3f 93       	push	r19
    2896:	4f 93       	push	r20
    2898:	5f 93       	push	r21
    289a:	6f 93       	push	r22
    289c:	7f 93       	push	r23
    289e:	8f 93       	push	r24
    28a0:	9f 93       	push	r25
    28a2:	af 93       	push	r26
    28a4:	bf 93       	push	r27
    28a6:	ef 93       	push	r30
    28a8:	ff 93       	push	r31
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_ISR!=NULL)
    28b2:	80 91 a8 01 	lds	r24, 0x01A8
    28b6:	90 91 a9 01 	lds	r25, 0x01A9
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	29 f0       	breq	.+10     	; 0x28c8 <__vector_1+0x40>
	{
		EXTI0_ISR();
    28be:	e0 91 a8 01 	lds	r30, 0x01A8
    28c2:	f0 91 a9 01 	lds	r31, 0x01A9
    28c6:	09 95       	icall
	}
}
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	ff 91       	pop	r31
    28ce:	ef 91       	pop	r30
    28d0:	bf 91       	pop	r27
    28d2:	af 91       	pop	r26
    28d4:	9f 91       	pop	r25
    28d6:	8f 91       	pop	r24
    28d8:	7f 91       	pop	r23
    28da:	6f 91       	pop	r22
    28dc:	5f 91       	pop	r21
    28de:	4f 91       	pop	r20
    28e0:	3f 91       	pop	r19
    28e2:	2f 91       	pop	r18
    28e4:	0f 90       	pop	r0
    28e6:	0f be       	out	0x3f, r0	; 63
    28e8:	0f 90       	pop	r0
    28ea:	1f 90       	pop	r1
    28ec:	18 95       	reti

000028ee <EXTI1_CallBack>:

void EXTI1_CallBack (void (*ptr)(void))
{
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <EXTI1_CallBack+0x6>
    28f4:	cd b7       	in	r28, 0x3d	; 61
    28f6:	de b7       	in	r29, 0x3e	; 62
    28f8:	9a 83       	std	Y+2, r25	; 0x02
    28fa:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_ISR = ptr;
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2900:	90 93 a7 01 	sts	0x01A7, r25
    2904:	80 93 a6 01 	sts	0x01A6, r24
}
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    2912:	1f 92       	push	r1
    2914:	0f 92       	push	r0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	0f 92       	push	r0
    291a:	11 24       	eor	r1, r1
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_ISR!=NULL)
    293c:	80 91 a6 01 	lds	r24, 0x01A6
    2940:	90 91 a7 01 	lds	r25, 0x01A7
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	29 f0       	breq	.+10     	; 0x2952 <__vector_2+0x40>
	{
		EXTI1_ISR();
    2948:	e0 91 a6 01 	lds	r30, 0x01A6
    294c:	f0 91 a7 01 	lds	r31, 0x01A7
    2950:	09 95       	icall
	}
}
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	ff 91       	pop	r31
    2958:	ef 91       	pop	r30
    295a:	bf 91       	pop	r27
    295c:	af 91       	pop	r26
    295e:	9f 91       	pop	r25
    2960:	8f 91       	pop	r24
    2962:	7f 91       	pop	r23
    2964:	6f 91       	pop	r22
    2966:	5f 91       	pop	r21
    2968:	4f 91       	pop	r20
    296a:	3f 91       	pop	r19
    296c:	2f 91       	pop	r18
    296e:	0f 90       	pop	r0
    2970:	0f be       	out	0x3f, r0	; 63
    2972:	0f 90       	pop	r0
    2974:	1f 90       	pop	r1
    2976:	18 95       	reti

00002978 <EXTI2_CallBack>:
void EXTI2_CallBack (void (*ptr)(void))
{
    2978:	df 93       	push	r29
    297a:	cf 93       	push	r28
    297c:	00 d0       	rcall	.+0      	; 0x297e <EXTI2_CallBack+0x6>
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	9a 83       	std	Y+2, r25	; 0x02
    2984:	89 83       	std	Y+1, r24	; 0x01
    EXTI2_ISR = ptr;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	9a 81       	ldd	r25, Y+2	; 0x02
    298a:	90 93 a5 01 	sts	0x01A5, r25
    298e:	80 93 a4 01 	sts	0x01A4, r24
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    299c:	1f 92       	push	r1
    299e:	0f 92       	push	r0
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	0f 92       	push	r0
    29a4:	11 24       	eor	r1, r1
    29a6:	2f 93       	push	r18
    29a8:	3f 93       	push	r19
    29aa:	4f 93       	push	r20
    29ac:	5f 93       	push	r21
    29ae:	6f 93       	push	r22
    29b0:	7f 93       	push	r23
    29b2:	8f 93       	push	r24
    29b4:	9f 93       	push	r25
    29b6:	af 93       	push	r26
    29b8:	bf 93       	push	r27
    29ba:	ef 93       	push	r30
    29bc:	ff 93       	push	r31
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_ISR!=NULL)
    29c6:	80 91 a4 01 	lds	r24, 0x01A4
    29ca:	90 91 a5 01 	lds	r25, 0x01A5
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	29 f0       	breq	.+10     	; 0x29dc <__vector_3+0x40>
	{
		EXTI2_ISR();
    29d2:	e0 91 a4 01 	lds	r30, 0x01A4
    29d6:	f0 91 a5 01 	lds	r31, 0x01A5
    29da:	09 95       	icall
	}
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	ff 91       	pop	r31
    29e2:	ef 91       	pop	r30
    29e4:	bf 91       	pop	r27
    29e6:	af 91       	pop	r26
    29e8:	9f 91       	pop	r25
    29ea:	8f 91       	pop	r24
    29ec:	7f 91       	pop	r23
    29ee:	6f 91       	pop	r22
    29f0:	5f 91       	pop	r21
    29f2:	4f 91       	pop	r20
    29f4:	3f 91       	pop	r19
    29f6:	2f 91       	pop	r18
    29f8:	0f 90       	pop	r0
    29fa:	0f be       	out	0x3f, r0	; 63
    29fc:	0f 90       	pop	r0
    29fe:	1f 90       	pop	r1
    2a00:	18 95       	reti

00002a02 <EEPROM_Write>:
 */
#include "EEPROM_Interface.h"
#include "../../Common/Bit_Math.h"

void EEPROM_Write(unsigned short address,unsigned char data)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <EEPROM_Write+0x6>
    2a08:	0f 92       	push	r0
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	6b 83       	std	Y+3, r22	; 0x03
	//set up EEPROM address
	EE_EEARL=(u8)address;
    2a14:	ee e3       	ldi	r30, 0x3E	; 62
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	80 83       	st	Z, r24
	EE_EEARH=(u8)(address>>8);  //address is 10 bit
    2a1c:	ef e3       	ldi	r30, 0x3F	; 63
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	89 2f       	mov	r24, r25
    2a26:	99 27       	eor	r25, r25
    2a28:	80 83       	st	Z, r24
	//set up data register
	EE_EEDR=data;
    2a2a:	ed e3       	ldi	r30, 0x3D	; 61
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	80 83       	st	Z, r24
	//enable write operation
	set_bit(EE_EECR,EE_EECR_EEMWE);
    2a32:	ac e3       	ldi	r26, 0x3C	; 60
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	ec e3       	ldi	r30, 0x3C	; 60
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	84 60       	ori	r24, 0x04	; 4
    2a3e:	8c 93       	st	X, r24
	set_bit(EE_EECR,EE_EECR_EEWE);
    2a40:	ac e3       	ldi	r26, 0x3C	; 60
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	ec e3       	ldi	r30, 0x3C	; 60
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	82 60       	ori	r24, 0x02	; 2
    2a4c:	8c 93       	st	X, r24
	//wait until write operation is complete
	while(get_bit(EE_EECR,EE_EECR_EEWE)==0);
    2a4e:	ec e3       	ldi	r30, 0x3C	; 60
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	86 95       	lsr	r24
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	81 70       	andi	r24, 0x01	; 1
    2a5c:	90 70       	andi	r25, 0x00	; 0
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	b1 f3       	breq	.-20     	; 0x2a4e <EEPROM_Write+0x4c>
}
    2a62:	0f 90       	pop	r0
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <EEPROM_Read>:

unsigned char EEPROM_Read(unsigned short address)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	00 d0       	rcall	.+0      	; 0x2a74 <EEPROM_Read+0x6>
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9a 83       	std	Y+2, r25	; 0x02
    2a7a:	89 83       	std	Y+1, r24	; 0x01
	//set up EEPROM address
	EE_EEARL=(u8)address;
    2a7c:	ee e3       	ldi	r30, 0x3E	; 62
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	80 83       	st	Z, r24
	EE_EEARH=(u8)(address>>8);  //address is 10 bit
    2a84:	ef e3       	ldi	r30, 0x3F	; 63
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8c:	89 2f       	mov	r24, r25
    2a8e:	99 27       	eor	r25, r25
    2a90:	80 83       	st	Z, r24
	//enable read operation
	set_bit(EE_EECR,EE_EECR_EERE);
    2a92:	ac e3       	ldi	r26, 0x3C	; 60
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	ec e3       	ldi	r30, 0x3C	; 60
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	81 60       	ori	r24, 0x01	; 1
    2a9e:	8c 93       	st	X, r24
	return EE_EEDR;
    2aa0:	ed e3       	ldi	r30, 0x3D	; 61
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
}
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <DIO_voidSetPinDir>:
#include "DIO_Praivte.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	27 97       	sbiw	r28, 0x07	; 7
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	6a 83       	std	Y+2, r22	; 0x02
    2ac8:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	88 23       	and	r24, r24
    2ace:	09 f4       	brne	.+2      	; 0x2ad2 <DIO_voidSetPinDir+0x22>
    2ad0:	f4 c0       	rjmp	.+488    	; 0x2cba <DIO_voidSetPinDir+0x20a>
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	85 30       	cpi	r24, 0x05	; 5
    2ad6:	08 f0       	brcs	.+2      	; 0x2ada <DIO_voidSetPinDir+0x2a>
    2ad8:	f0 c0       	rjmp	.+480    	; 0x2cba <DIO_voidSetPinDir+0x20a>
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	88 30       	cpi	r24, 0x08	; 8
    2ade:	08 f0       	brcs	.+2      	; 0x2ae2 <DIO_voidSetPinDir+0x32>
    2ae0:	ec c0       	rjmp	.+472    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	88 23       	and	r24, r24
    2ae6:	09 f0       	breq	.+2      	; 0x2aea <DIO_voidSetPinDir+0x3a>
    2ae8:	75 c0       	rjmp	.+234    	; 0x2bd4 <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	3f 83       	std	Y+7, r19	; 0x07
    2af2:	2e 83       	std	Y+6, r18	; 0x06
    2af4:	8e 81       	ldd	r24, Y+6	; 0x06
    2af6:	9f 81       	ldd	r25, Y+7	; 0x07
    2af8:	82 30       	cpi	r24, 0x02	; 2
    2afa:	91 05       	cpc	r25, r1
    2afc:	61 f1       	breq	.+88     	; 0x2b56 <DIO_voidSetPinDir+0xa6>
    2afe:	2e 81       	ldd	r18, Y+6	; 0x06
    2b00:	3f 81       	ldd	r19, Y+7	; 0x07
    2b02:	23 30       	cpi	r18, 0x03	; 3
    2b04:	31 05       	cpc	r19, r1
    2b06:	34 f4       	brge	.+12     	; 0x2b14 <DIO_voidSetPinDir+0x64>
    2b08:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0c:	81 30       	cpi	r24, 0x01	; 1
    2b0e:	91 05       	cpc	r25, r1
    2b10:	69 f0       	breq	.+26     	; 0x2b2c <DIO_voidSetPinDir+0x7c>
    2b12:	d3 c0       	rjmp	.+422    	; 0x2cba <DIO_voidSetPinDir+0x20a>
    2b14:	2e 81       	ldd	r18, Y+6	; 0x06
    2b16:	3f 81       	ldd	r19, Y+7	; 0x07
    2b18:	23 30       	cpi	r18, 0x03	; 3
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	89 f1       	breq	.+98     	; 0x2b80 <DIO_voidSetPinDir+0xd0>
    2b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b20:	9f 81       	ldd	r25, Y+7	; 0x07
    2b22:	84 30       	cpi	r24, 0x04	; 4
    2b24:	91 05       	cpc	r25, r1
    2b26:	09 f4       	brne	.+2      	; 0x2b2a <DIO_voidSetPinDir+0x7a>
    2b28:	40 c0       	rjmp	.+128    	; 0x2baa <DIO_voidSetPinDir+0xfa>
    2b2a:	c7 c0       	rjmp	.+398    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
    2b2c:	aa e3       	ldi	r26, 0x3A	; 58
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ea e3       	ldi	r30, 0x3A	; 58
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	48 2f       	mov	r20, r24
    2b38:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	02 2e       	mov	r0, r18
    2b44:	02 c0       	rjmp	.+4      	; 0x2b4a <DIO_voidSetPinDir+0x9a>
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	0a 94       	dec	r0
    2b4c:	e2 f7       	brpl	.-8      	; 0x2b46 <DIO_voidSetPinDir+0x96>
    2b4e:	80 95       	com	r24
    2b50:	84 23       	and	r24, r20
    2b52:	8c 93       	st	X, r24
    2b54:	b2 c0       	rjmp	.+356    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
    2b56:	a7 e3       	ldi	r26, 0x37	; 55
    2b58:	b0 e0       	ldi	r27, 0x00	; 0
    2b5a:	e7 e3       	ldi	r30, 0x37	; 55
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	80 81       	ld	r24, Z
    2b60:	48 2f       	mov	r20, r24
    2b62:	8a 81       	ldd	r24, Y+2	; 0x02
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	02 2e       	mov	r0, r18
    2b6e:	02 c0       	rjmp	.+4      	; 0x2b74 <DIO_voidSetPinDir+0xc4>
    2b70:	88 0f       	add	r24, r24
    2b72:	99 1f       	adc	r25, r25
    2b74:	0a 94       	dec	r0
    2b76:	e2 f7       	brpl	.-8      	; 0x2b70 <DIO_voidSetPinDir+0xc0>
    2b78:	80 95       	com	r24
    2b7a:	84 23       	and	r24, r20
    2b7c:	8c 93       	st	X, r24
    2b7e:	9d c0       	rjmp	.+314    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
    2b80:	a4 e3       	ldi	r26, 0x34	; 52
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e4 e3       	ldi	r30, 0x34	; 52
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	48 2f       	mov	r20, r24
    2b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	02 2e       	mov	r0, r18
    2b98:	02 c0       	rjmp	.+4      	; 0x2b9e <DIO_voidSetPinDir+0xee>
    2b9a:	88 0f       	add	r24, r24
    2b9c:	99 1f       	adc	r25, r25
    2b9e:	0a 94       	dec	r0
    2ba0:	e2 f7       	brpl	.-8      	; 0x2b9a <DIO_voidSetPinDir+0xea>
    2ba2:	80 95       	com	r24
    2ba4:	84 23       	and	r24, r20
    2ba6:	8c 93       	st	X, r24
    2ba8:	88 c0       	rjmp	.+272    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
    2baa:	a1 e3       	ldi	r26, 0x31	; 49
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	e1 e3       	ldi	r30, 0x31	; 49
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	48 2f       	mov	r20, r24
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	28 2f       	mov	r18, r24
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	02 2e       	mov	r0, r18
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <DIO_voidSetPinDir+0x118>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	0a 94       	dec	r0
    2bca:	e2 f7       	brpl	.-8      	; 0x2bc4 <DIO_voidSetPinDir+0x114>
    2bcc:	80 95       	com	r24
    2bce:	84 23       	and	r24, r20
    2bd0:	8c 93       	st	X, r24
    2bd2:	73 c0       	rjmp	.+230    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
    2bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd6:	81 30       	cpi	r24, 0x01	; 1
    2bd8:	09 f0       	breq	.+2      	; 0x2bdc <DIO_voidSetPinDir+0x12c>
    2bda:	6f c0       	rjmp	.+222    	; 0x2cba <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	3d 83       	std	Y+5, r19	; 0x05
    2be4:	2c 83       	std	Y+4, r18	; 0x04
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bea:	82 30       	cpi	r24, 0x02	; 2
    2bec:	91 05       	cpc	r25, r1
    2bee:	51 f1       	breq	.+84     	; 0x2c44 <DIO_voidSetPinDir+0x194>
    2bf0:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf2:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf4:	23 30       	cpi	r18, 0x03	; 3
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	34 f4       	brge	.+12     	; 0x2c06 <DIO_voidSetPinDir+0x156>
    2bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2bfc:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfe:	81 30       	cpi	r24, 0x01	; 1
    2c00:	91 05       	cpc	r25, r1
    2c02:	61 f0       	breq	.+24     	; 0x2c1c <DIO_voidSetPinDir+0x16c>
    2c04:	5a c0       	rjmp	.+180    	; 0x2cba <DIO_voidSetPinDir+0x20a>
    2c06:	2c 81       	ldd	r18, Y+4	; 0x04
    2c08:	3d 81       	ldd	r19, Y+5	; 0x05
    2c0a:	23 30       	cpi	r18, 0x03	; 3
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	71 f1       	breq	.+92     	; 0x2c6c <DIO_voidSetPinDir+0x1bc>
    2c10:	8c 81       	ldd	r24, Y+4	; 0x04
    2c12:	9d 81       	ldd	r25, Y+5	; 0x05
    2c14:	84 30       	cpi	r24, 0x04	; 4
    2c16:	91 05       	cpc	r25, r1
    2c18:	e9 f1       	breq	.+122    	; 0x2c94 <DIO_voidSetPinDir+0x1e4>
    2c1a:	4f c0       	rjmp	.+158    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
    2c1c:	aa e3       	ldi	r26, 0x3A	; 58
    2c1e:	b0 e0       	ldi	r27, 0x00	; 0
    2c20:	ea e3       	ldi	r30, 0x3A	; 58
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	80 81       	ld	r24, Z
    2c26:	48 2f       	mov	r20, r24
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	02 2e       	mov	r0, r18
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <DIO_voidSetPinDir+0x18a>
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	0a 94       	dec	r0
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <DIO_voidSetPinDir+0x186>
    2c3e:	84 2b       	or	r24, r20
    2c40:	8c 93       	st	X, r24
    2c42:	3b c0       	rjmp	.+118    	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
    2c44:	a7 e3       	ldi	r26, 0x37	; 55
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e7 e3       	ldi	r30, 0x37	; 55
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	48 2f       	mov	r20, r24
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 2e       	mov	r0, r18
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <DIO_voidSetPinDir+0x1b2>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0a 94       	dec	r0
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e <DIO_voidSetPinDir+0x1ae>
    2c66:	84 2b       	or	r24, r20
    2c68:	8c 93       	st	X, r24
    2c6a:	27 c0       	rjmp	.+78     	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
    2c6c:	a4 e3       	ldi	r26, 0x34	; 52
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	e4 e3       	ldi	r30, 0x34	; 52
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	48 2f       	mov	r20, r24
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	28 2f       	mov	r18, r24
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	02 2e       	mov	r0, r18
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <DIO_voidSetPinDir+0x1da>
    2c86:	88 0f       	add	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	0a 94       	dec	r0
    2c8c:	e2 f7       	brpl	.-8      	; 0x2c86 <DIO_voidSetPinDir+0x1d6>
    2c8e:	84 2b       	or	r24, r20
    2c90:	8c 93       	st	X, r24
    2c92:	13 c0       	rjmp	.+38     	; 0x2cba <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
    2c94:	a1 e3       	ldi	r26, 0x31	; 49
    2c96:	b0 e0       	ldi	r27, 0x00	; 0
    2c98:	e1 e3       	ldi	r30, 0x31	; 49
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	80 81       	ld	r24, Z
    2c9e:	48 2f       	mov	r20, r24
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	02 2e       	mov	r0, r18
    2cac:	02 c0       	rjmp	.+4      	; 0x2cb2 <DIO_voidSetPinDir+0x202>
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	0a 94       	dec	r0
    2cb4:	e2 f7       	brpl	.-8      	; 0x2cae <DIO_voidSetPinDir+0x1fe>
    2cb6:	84 2b       	or	r24, r20
    2cb8:	8c 93       	st	X, r24
			}
		}
	}


}
    2cba:	27 96       	adiw	r28, 0x07	; 7
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	27 97       	sbiw	r28, 0x07	; 7
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	6a 83       	std	Y+2, r22	; 0x02
    2ce4:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	88 23       	and	r24, r24
    2cea:	09 f4       	brne	.+2      	; 0x2cee <DIO_voidSetPinValue+0x22>
    2cec:	f4 c0       	rjmp	.+488    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	85 30       	cpi	r24, 0x05	; 5
    2cf2:	08 f0       	brcs	.+2      	; 0x2cf6 <DIO_voidSetPinValue+0x2a>
    2cf4:	f0 c0       	rjmp	.+480    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
    2cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf8:	88 30       	cpi	r24, 0x08	; 8
    2cfa:	08 f0       	brcs	.+2      	; 0x2cfe <DIO_voidSetPinValue+0x32>
    2cfc:	ec c0       	rjmp	.+472    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
    2cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2d00:	88 23       	and	r24, r24
    2d02:	09 f0       	breq	.+2      	; 0x2d06 <DIO_voidSetPinValue+0x3a>
    2d04:	75 c0       	rjmp	.+234    	; 0x2df0 <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	3f 83       	std	Y+7, r19	; 0x07
    2d0e:	2e 83       	std	Y+6, r18	; 0x06
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	82 30       	cpi	r24, 0x02	; 2
    2d16:	91 05       	cpc	r25, r1
    2d18:	61 f1       	breq	.+88     	; 0x2d72 <DIO_voidSetPinValue+0xa6>
    2d1a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d1c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d1e:	23 30       	cpi	r18, 0x03	; 3
    2d20:	31 05       	cpc	r19, r1
    2d22:	34 f4       	brge	.+12     	; 0x2d30 <DIO_voidSetPinValue+0x64>
    2d24:	8e 81       	ldd	r24, Y+6	; 0x06
    2d26:	9f 81       	ldd	r25, Y+7	; 0x07
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	69 f0       	breq	.+26     	; 0x2d48 <DIO_voidSetPinValue+0x7c>
    2d2e:	d3 c0       	rjmp	.+422    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
    2d30:	2e 81       	ldd	r18, Y+6	; 0x06
    2d32:	3f 81       	ldd	r19, Y+7	; 0x07
    2d34:	23 30       	cpi	r18, 0x03	; 3
    2d36:	31 05       	cpc	r19, r1
    2d38:	89 f1       	breq	.+98     	; 0x2d9c <DIO_voidSetPinValue+0xd0>
    2d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3e:	84 30       	cpi	r24, 0x04	; 4
    2d40:	91 05       	cpc	r25, r1
    2d42:	09 f4       	brne	.+2      	; 0x2d46 <DIO_voidSetPinValue+0x7a>
    2d44:	40 c0       	rjmp	.+128    	; 0x2dc6 <DIO_voidSetPinValue+0xfa>
    2d46:	c7 c0       	rjmp	.+398    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
    2d48:	ab e3       	ldi	r26, 0x3B	; 59
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	eb e3       	ldi	r30, 0x3B	; 59
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	48 2f       	mov	r20, r24
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	02 2e       	mov	r0, r18
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <DIO_voidSetPinValue+0x9a>
    2d62:	88 0f       	add	r24, r24
    2d64:	99 1f       	adc	r25, r25
    2d66:	0a 94       	dec	r0
    2d68:	e2 f7       	brpl	.-8      	; 0x2d62 <DIO_voidSetPinValue+0x96>
    2d6a:	80 95       	com	r24
    2d6c:	84 23       	and	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	b2 c0       	rjmp	.+356    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
    2d72:	a8 e3       	ldi	r26, 0x38	; 56
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e8 e3       	ldi	r30, 0x38	; 56
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	02 2e       	mov	r0, r18
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <DIO_voidSetPinValue+0xc4>
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	0a 94       	dec	r0
    2d92:	e2 f7       	brpl	.-8      	; 0x2d8c <DIO_voidSetPinValue+0xc0>
    2d94:	80 95       	com	r24
    2d96:	84 23       	and	r24, r20
    2d98:	8c 93       	st	X, r24
    2d9a:	9d c0       	rjmp	.+314    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
    2d9c:	a5 e3       	ldi	r26, 0x35	; 53
    2d9e:	b0 e0       	ldi	r27, 0x00	; 0
    2da0:	e5 e3       	ldi	r30, 0x35	; 53
    2da2:	f0 e0       	ldi	r31, 0x00	; 0
    2da4:	80 81       	ld	r24, Z
    2da6:	48 2f       	mov	r20, r24
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	28 2f       	mov	r18, r24
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	02 2e       	mov	r0, r18
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <DIO_voidSetPinValue+0xee>
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	0a 94       	dec	r0
    2dbc:	e2 f7       	brpl	.-8      	; 0x2db6 <DIO_voidSetPinValue+0xea>
    2dbe:	80 95       	com	r24
    2dc0:	84 23       	and	r24, r20
    2dc2:	8c 93       	st	X, r24
    2dc4:	88 c0       	rjmp	.+272    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
    2dc6:	a2 e3       	ldi	r26, 0x32	; 50
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e2 e3       	ldi	r30, 0x32	; 50
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	48 2f       	mov	r20, r24
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	02 2e       	mov	r0, r18
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <DIO_voidSetPinValue+0x118>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	0a 94       	dec	r0
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <DIO_voidSetPinValue+0x114>
    2de8:	80 95       	com	r24
    2dea:	84 23       	and	r24, r20
    2dec:	8c 93       	st	X, r24
    2dee:	73 c0       	rjmp	.+230    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <DIO_voidSetPinValue+0x12c>
    2df6:	6f c0       	rjmp	.+222    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    2df8:	89 81       	ldd	r24, Y+1	; 0x01
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	3d 83       	std	Y+5, r19	; 0x05
    2e00:	2c 83       	std	Y+4, r18	; 0x04
    2e02:	8c 81       	ldd	r24, Y+4	; 0x04
    2e04:	9d 81       	ldd	r25, Y+5	; 0x05
    2e06:	82 30       	cpi	r24, 0x02	; 2
    2e08:	91 05       	cpc	r25, r1
    2e0a:	51 f1       	breq	.+84     	; 0x2e60 <DIO_voidSetPinValue+0x194>
    2e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    2e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    2e10:	23 30       	cpi	r18, 0x03	; 3
    2e12:	31 05       	cpc	r19, r1
    2e14:	34 f4       	brge	.+12     	; 0x2e22 <DIO_voidSetPinValue+0x156>
    2e16:	8c 81       	ldd	r24, Y+4	; 0x04
    2e18:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1a:	81 30       	cpi	r24, 0x01	; 1
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	61 f0       	breq	.+24     	; 0x2e38 <DIO_voidSetPinValue+0x16c>
    2e20:	5a c0       	rjmp	.+180    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
    2e22:	2c 81       	ldd	r18, Y+4	; 0x04
    2e24:	3d 81       	ldd	r19, Y+5	; 0x05
    2e26:	23 30       	cpi	r18, 0x03	; 3
    2e28:	31 05       	cpc	r19, r1
    2e2a:	71 f1       	breq	.+92     	; 0x2e88 <DIO_voidSetPinValue+0x1bc>
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e30:	84 30       	cpi	r24, 0x04	; 4
    2e32:	91 05       	cpc	r25, r1
    2e34:	e9 f1       	breq	.+122    	; 0x2eb0 <DIO_voidSetPinValue+0x1e4>
    2e36:	4f c0       	rjmp	.+158    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    2e38:	ab e3       	ldi	r26, 0x3B	; 59
    2e3a:	b0 e0       	ldi	r27, 0x00	; 0
    2e3c:	eb e3       	ldi	r30, 0x3B	; 59
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	80 81       	ld	r24, Z
    2e42:	48 2f       	mov	r20, r24
    2e44:	8a 81       	ldd	r24, Y+2	; 0x02
    2e46:	28 2f       	mov	r18, r24
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	81 e0       	ldi	r24, 0x01	; 1
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	02 2e       	mov	r0, r18
    2e50:	02 c0       	rjmp	.+4      	; 0x2e56 <DIO_voidSetPinValue+0x18a>
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	0a 94       	dec	r0
    2e58:	e2 f7       	brpl	.-8      	; 0x2e52 <DIO_voidSetPinValue+0x186>
    2e5a:	84 2b       	or	r24, r20
    2e5c:	8c 93       	st	X, r24
    2e5e:	3b c0       	rjmp	.+118    	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    2e60:	a8 e3       	ldi	r26, 0x38	; 56
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e8 e3       	ldi	r30, 0x38	; 56
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	48 2f       	mov	r20, r24
    2e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6e:	28 2f       	mov	r18, r24
    2e70:	30 e0       	ldi	r19, 0x00	; 0
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	02 2e       	mov	r0, r18
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <DIO_voidSetPinValue+0x1b2>
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	0a 94       	dec	r0
    2e80:	e2 f7       	brpl	.-8      	; 0x2e7a <DIO_voidSetPinValue+0x1ae>
    2e82:	84 2b       	or	r24, r20
    2e84:	8c 93       	st	X, r24
    2e86:	27 c0       	rjmp	.+78     	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    2e88:	a5 e3       	ldi	r26, 0x35	; 53
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e5 e3       	ldi	r30, 0x35	; 53
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	48 2f       	mov	r20, r24
    2e94:	8a 81       	ldd	r24, Y+2	; 0x02
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	02 2e       	mov	r0, r18
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <DIO_voidSetPinValue+0x1da>
    2ea2:	88 0f       	add	r24, r24
    2ea4:	99 1f       	adc	r25, r25
    2ea6:	0a 94       	dec	r0
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <DIO_voidSetPinValue+0x1d6>
    2eaa:	84 2b       	or	r24, r20
    2eac:	8c 93       	st	X, r24
    2eae:	13 c0       	rjmp	.+38     	; 0x2ed6 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    2eb0:	a2 e3       	ldi	r26, 0x32	; 50
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	e2 e3       	ldi	r30, 0x32	; 50
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	80 81       	ld	r24, Z
    2eba:	48 2f       	mov	r20, r24
    2ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	81 e0       	ldi	r24, 0x01	; 1
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	02 2e       	mov	r0, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <DIO_voidSetPinValue+0x202>
    2eca:	88 0f       	add	r24, r24
    2ecc:	99 1f       	adc	r25, r25
    2ece:	0a 94       	dec	r0
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <DIO_voidSetPinValue+0x1fe>
    2ed2:	84 2b       	or	r24, r20
    2ed4:	8c 93       	st	X, r24
			}
		}
	}
}
    2ed6:	27 96       	adiw	r28, 0x07	; 7
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	08 95       	ret

00002ee8 <DIO_u8ReadPinValue>:
u8 DIO_u8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    2ee8:	df 93       	push	r29
    2eea:	cf 93       	push	r28
    2eec:	00 d0       	rcall	.+0      	; 0x2eee <DIO_u8ReadPinValue+0x6>
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <DIO_u8ReadPinValue+0x8>
    2ef0:	0f 92       	push	r0
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	88 23       	and	r24, r24
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <DIO_u8ReadPinValue+0x1a>
    2f00:	5e c1       	rjmp	.+700    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	85 30       	cpi	r24, 0x05	; 5
    2f06:	08 f0       	brcs	.+2      	; 0x2f0a <DIO_u8ReadPinValue+0x22>
    2f08:	5a c1       	rjmp	.+692    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
    2f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0c:	88 30       	cpi	r24, 0x08	; 8
    2f0e:	08 f0       	brcs	.+2      	; 0x2f12 <DIO_u8ReadPinValue+0x2a>
    2f10:	56 c1       	rjmp	.+684    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	3d 83       	std	Y+5, r19	; 0x05
    2f1a:	2c 83       	std	Y+4, r18	; 0x04
    2f1c:	4c 81       	ldd	r20, Y+4	; 0x04
    2f1e:	5d 81       	ldd	r21, Y+5	; 0x05
    2f20:	42 30       	cpi	r20, 0x02	; 2
    2f22:	51 05       	cpc	r21, r1
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <DIO_u8ReadPinValue+0x40>
    2f26:	65 c0       	rjmp	.+202    	; 0x2ff2 <DIO_u8ReadPinValue+0x10a>
    2f28:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f2c:	83 30       	cpi	r24, 0x03	; 3
    2f2e:	91 05       	cpc	r25, r1
    2f30:	34 f4       	brge	.+12     	; 0x2f3e <DIO_u8ReadPinValue+0x56>
    2f32:	2c 81       	ldd	r18, Y+4	; 0x04
    2f34:	3d 81       	ldd	r19, Y+5	; 0x05
    2f36:	21 30       	cpi	r18, 0x01	; 1
    2f38:	31 05       	cpc	r19, r1
    2f3a:	71 f0       	breq	.+28     	; 0x2f58 <DIO_u8ReadPinValue+0x70>
    2f3c:	40 c1       	rjmp	.+640    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
    2f3e:	4c 81       	ldd	r20, Y+4	; 0x04
    2f40:	5d 81       	ldd	r21, Y+5	; 0x05
    2f42:	43 30       	cpi	r20, 0x03	; 3
    2f44:	51 05       	cpc	r21, r1
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <DIO_u8ReadPinValue+0x62>
    2f48:	a1 c0       	rjmp	.+322    	; 0x308c <DIO_u8ReadPinValue+0x1a4>
    2f4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4e:	84 30       	cpi	r24, 0x04	; 4
    2f50:	91 05       	cpc	r25, r1
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <DIO_u8ReadPinValue+0x6e>
    2f54:	e8 c0       	rjmp	.+464    	; 0x3126 <DIO_u8ReadPinValue+0x23e>
    2f56:	33 c1       	rjmp	.+614    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
		{
		case DIO_GroupA:
			if(get_bit(DIO_DDRA,Pin_No)==Input)
    2f58:	ea e3       	ldi	r30, 0x3A	; 58
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	28 2f       	mov	r18, r24
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	88 2f       	mov	r24, r24
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	a9 01       	movw	r20, r18
    2f6a:	02 c0       	rjmp	.+4      	; 0x2f70 <DIO_u8ReadPinValue+0x88>
    2f6c:	55 95       	asr	r21
    2f6e:	47 95       	ror	r20
    2f70:	8a 95       	dec	r24
    2f72:	e2 f7       	brpl	.-8      	; 0x2f6c <DIO_u8ReadPinValue+0x84>
    2f74:	ca 01       	movw	r24, r20
    2f76:	81 70       	andi	r24, 0x01	; 1
    2f78:	90 70       	andi	r25, 0x00	; 0
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	99 f4       	brne	.+38     	; 0x2fa4 <DIO_u8ReadPinValue+0xbc>
			{
				return((DIO_PINA>>Pin_No)&1);
    2f7e:	e9 e3       	ldi	r30, 0x39	; 57
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	88 2f       	mov	r24, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a9 01       	movw	r20, r18
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <DIO_u8ReadPinValue+0xae>
    2f92:	55 95       	asr	r21
    2f94:	47 95       	ror	r20
    2f96:	8a 95       	dec	r24
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <DIO_u8ReadPinValue+0xaa>
    2f9a:	ca 01       	movw	r24, r20
    2f9c:	58 2f       	mov	r21, r24
    2f9e:	51 70       	andi	r21, 0x01	; 1
    2fa0:	5b 83       	std	Y+3, r21	; 0x03
    2fa2:	0f c1       	rjmp	.+542    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRA,Pin_No)==Output)
    2fa4:	ea e3       	ldi	r30, 0x3A	; 58
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	88 2f       	mov	r24, r24
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a9 01       	movw	r20, r18
    2fb6:	02 c0       	rjmp	.+4      	; 0x2fbc <DIO_u8ReadPinValue+0xd4>
    2fb8:	55 95       	asr	r21
    2fba:	47 95       	ror	r20
    2fbc:	8a 95       	dec	r24
    2fbe:	e2 f7       	brpl	.-8      	; 0x2fb8 <DIO_u8ReadPinValue+0xd0>
    2fc0:	ca 01       	movw	r24, r20
    2fc2:	81 70       	andi	r24, 0x01	; 1
    2fc4:	90 70       	andi	r25, 0x00	; 0
    2fc6:	88 23       	and	r24, r24
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <DIO_u8ReadPinValue+0xe4>
    2fca:	f9 c0       	rjmp	.+498    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTA>>Pin_No)&1);
    2fcc:	eb e3       	ldi	r30, 0x3B	; 59
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	88 2f       	mov	r24, r24
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a9 01       	movw	r20, r18
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <DIO_u8ReadPinValue+0xfc>
    2fe0:	55 95       	asr	r21
    2fe2:	47 95       	ror	r20
    2fe4:	8a 95       	dec	r24
    2fe6:	e2 f7       	brpl	.-8      	; 0x2fe0 <DIO_u8ReadPinValue+0xf8>
    2fe8:	ca 01       	movw	r24, r20
    2fea:	58 2f       	mov	r21, r24
    2fec:	51 70       	andi	r21, 0x01	; 1
    2fee:	5b 83       	std	Y+3, r21	; 0x03
    2ff0:	e8 c0       	rjmp	.+464    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupB:
			if(get_bit(DIO_DDRB,Pin_No)==Input)
    2ff2:	e7 e3       	ldi	r30, 0x37	; 55
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	28 2f       	mov	r18, r24
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	88 2f       	mov	r24, r24
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	a9 01       	movw	r20, r18
    3004:	02 c0       	rjmp	.+4      	; 0x300a <DIO_u8ReadPinValue+0x122>
    3006:	55 95       	asr	r21
    3008:	47 95       	ror	r20
    300a:	8a 95       	dec	r24
    300c:	e2 f7       	brpl	.-8      	; 0x3006 <DIO_u8ReadPinValue+0x11e>
    300e:	ca 01       	movw	r24, r20
    3010:	81 70       	andi	r24, 0x01	; 1
    3012:	90 70       	andi	r25, 0x00	; 0
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	99 f4       	brne	.+38     	; 0x303e <DIO_u8ReadPinValue+0x156>
			{
				return((DIO_PINB>>Pin_No)&1);
    3018:	e6 e3       	ldi	r30, 0x36	; 54
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	8a 81       	ldd	r24, Y+2	; 0x02
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	a9 01       	movw	r20, r18
    302a:	02 c0       	rjmp	.+4      	; 0x3030 <DIO_u8ReadPinValue+0x148>
    302c:	55 95       	asr	r21
    302e:	47 95       	ror	r20
    3030:	8a 95       	dec	r24
    3032:	e2 f7       	brpl	.-8      	; 0x302c <DIO_u8ReadPinValue+0x144>
    3034:	ca 01       	movw	r24, r20
    3036:	58 2f       	mov	r21, r24
    3038:	51 70       	andi	r21, 0x01	; 1
    303a:	5b 83       	std	Y+3, r21	; 0x03
    303c:	c2 c0       	rjmp	.+388    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRB,Pin_No)==Output)
    303e:	e7 e3       	ldi	r30, 0x37	; 55
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	88 2f       	mov	r24, r24
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a9 01       	movw	r20, r18
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <DIO_u8ReadPinValue+0x16e>
    3052:	55 95       	asr	r21
    3054:	47 95       	ror	r20
    3056:	8a 95       	dec	r24
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <DIO_u8ReadPinValue+0x16a>
    305a:	ca 01       	movw	r24, r20
    305c:	81 70       	andi	r24, 0x01	; 1
    305e:	90 70       	andi	r25, 0x00	; 0
    3060:	88 23       	and	r24, r24
    3062:	09 f4       	brne	.+2      	; 0x3066 <DIO_u8ReadPinValue+0x17e>
    3064:	ac c0       	rjmp	.+344    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTB>>Pin_No)&1);
    3066:	e8 e3       	ldi	r30, 0x38	; 56
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	88 2f       	mov	r24, r24
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	a9 01       	movw	r20, r18
    3078:	02 c0       	rjmp	.+4      	; 0x307e <DIO_u8ReadPinValue+0x196>
    307a:	55 95       	asr	r21
    307c:	47 95       	ror	r20
    307e:	8a 95       	dec	r24
    3080:	e2 f7       	brpl	.-8      	; 0x307a <DIO_u8ReadPinValue+0x192>
    3082:	ca 01       	movw	r24, r20
    3084:	58 2f       	mov	r21, r24
    3086:	51 70       	andi	r21, 0x01	; 1
    3088:	5b 83       	std	Y+3, r21	; 0x03
    308a:	9b c0       	rjmp	.+310    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupC:
			if(get_bit(DIO_DDRC,Pin_No)==Input)
    308c:	e4 e3       	ldi	r30, 0x34	; 52
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	80 81       	ld	r24, Z
    3092:	28 2f       	mov	r18, r24
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	88 2f       	mov	r24, r24
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	a9 01       	movw	r20, r18
    309e:	02 c0       	rjmp	.+4      	; 0x30a4 <DIO_u8ReadPinValue+0x1bc>
    30a0:	55 95       	asr	r21
    30a2:	47 95       	ror	r20
    30a4:	8a 95       	dec	r24
    30a6:	e2 f7       	brpl	.-8      	; 0x30a0 <DIO_u8ReadPinValue+0x1b8>
    30a8:	ca 01       	movw	r24, r20
    30aa:	81 70       	andi	r24, 0x01	; 1
    30ac:	90 70       	andi	r25, 0x00	; 0
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	99 f4       	brne	.+38     	; 0x30d8 <DIO_u8ReadPinValue+0x1f0>
			{
				return((DIO_PINC>>Pin_No)&1);
    30b2:	e3 e3       	ldi	r30, 0x33	; 51
    30b4:	f0 e0       	ldi	r31, 0x00	; 0
    30b6:	80 81       	ld	r24, Z
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	88 2f       	mov	r24, r24
    30c0:	90 e0       	ldi	r25, 0x00	; 0
    30c2:	a9 01       	movw	r20, r18
    30c4:	02 c0       	rjmp	.+4      	; 0x30ca <DIO_u8ReadPinValue+0x1e2>
    30c6:	55 95       	asr	r21
    30c8:	47 95       	ror	r20
    30ca:	8a 95       	dec	r24
    30cc:	e2 f7       	brpl	.-8      	; 0x30c6 <DIO_u8ReadPinValue+0x1de>
    30ce:	ca 01       	movw	r24, r20
    30d0:	58 2f       	mov	r21, r24
    30d2:	51 70       	andi	r21, 0x01	; 1
    30d4:	5b 83       	std	Y+3, r21	; 0x03
    30d6:	75 c0       	rjmp	.+234    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRC,Pin_No)==Output)
    30d8:	e4 e3       	ldi	r30, 0x34	; 52
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	28 2f       	mov	r18, r24
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	88 2f       	mov	r24, r24
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a9 01       	movw	r20, r18
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <DIO_u8ReadPinValue+0x208>
    30ec:	55 95       	asr	r21
    30ee:	47 95       	ror	r20
    30f0:	8a 95       	dec	r24
    30f2:	e2 f7       	brpl	.-8      	; 0x30ec <DIO_u8ReadPinValue+0x204>
    30f4:	ca 01       	movw	r24, r20
    30f6:	81 70       	andi	r24, 0x01	; 1
    30f8:	90 70       	andi	r25, 0x00	; 0
    30fa:	88 23       	and	r24, r24
    30fc:	09 f4       	brne	.+2      	; 0x3100 <DIO_u8ReadPinValue+0x218>
    30fe:	5f c0       	rjmp	.+190    	; 0x31be <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTC>>Pin_No)&1);
    3100:	e5 e3       	ldi	r30, 0x35	; 53
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	88 2f       	mov	r24, r24
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	a9 01       	movw	r20, r18
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <DIO_u8ReadPinValue+0x230>
    3114:	55 95       	asr	r21
    3116:	47 95       	ror	r20
    3118:	8a 95       	dec	r24
    311a:	e2 f7       	brpl	.-8      	; 0x3114 <DIO_u8ReadPinValue+0x22c>
    311c:	ca 01       	movw	r24, r20
    311e:	58 2f       	mov	r21, r24
    3120:	51 70       	andi	r21, 0x01	; 1
    3122:	5b 83       	std	Y+3, r21	; 0x03
    3124:	4e c0       	rjmp	.+156    	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupD:
			if(get_bit(DIO_DDRD,Pin_No)==Input)
    3126:	e1 e3       	ldi	r30, 0x31	; 49
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	28 2f       	mov	r18, r24
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	88 2f       	mov	r24, r24
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a9 01       	movw	r20, r18
    3138:	02 c0       	rjmp	.+4      	; 0x313e <DIO_u8ReadPinValue+0x256>
    313a:	55 95       	asr	r21
    313c:	47 95       	ror	r20
    313e:	8a 95       	dec	r24
    3140:	e2 f7       	brpl	.-8      	; 0x313a <DIO_u8ReadPinValue+0x252>
    3142:	ca 01       	movw	r24, r20
    3144:	81 70       	andi	r24, 0x01	; 1
    3146:	90 70       	andi	r25, 0x00	; 0
    3148:	00 97       	sbiw	r24, 0x00	; 0
    314a:	99 f4       	brne	.+38     	; 0x3172 <DIO_u8ReadPinValue+0x28a>
			{
				return((DIO_PIND>>Pin_No)&1);
    314c:	e0 e3       	ldi	r30, 0x30	; 48
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	28 2f       	mov	r18, r24
    3154:	30 e0       	ldi	r19, 0x00	; 0
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	a9 01       	movw	r20, r18
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <DIO_u8ReadPinValue+0x27c>
    3160:	55 95       	asr	r21
    3162:	47 95       	ror	r20
    3164:	8a 95       	dec	r24
    3166:	e2 f7       	brpl	.-8      	; 0x3160 <DIO_u8ReadPinValue+0x278>
    3168:	ca 01       	movw	r24, r20
    316a:	58 2f       	mov	r21, r24
    316c:	51 70       	andi	r21, 0x01	; 1
    316e:	5b 83       	std	Y+3, r21	; 0x03
    3170:	28 c0       	rjmp	.+80     	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRD,Pin_No)==Output)
    3172:	e1 e3       	ldi	r30, 0x31	; 49
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	28 2f       	mov	r18, r24
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	88 2f       	mov	r24, r24
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	a9 01       	movw	r20, r18
    3184:	02 c0       	rjmp	.+4      	; 0x318a <DIO_u8ReadPinValue+0x2a2>
    3186:	55 95       	asr	r21
    3188:	47 95       	ror	r20
    318a:	8a 95       	dec	r24
    318c:	e2 f7       	brpl	.-8      	; 0x3186 <DIO_u8ReadPinValue+0x29e>
    318e:	ca 01       	movw	r24, r20
    3190:	81 70       	andi	r24, 0x01	; 1
    3192:	90 70       	andi	r25, 0x00	; 0
    3194:	88 23       	and	r24, r24
    3196:	99 f0       	breq	.+38     	; 0x31be <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTD>>Pin_No)&1);
    3198:	e2 e3       	ldi	r30, 0x32	; 50
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	28 2f       	mov	r18, r24
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	88 2f       	mov	r24, r24
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	a9 01       	movw	r20, r18
    31aa:	02 c0       	rjmp	.+4      	; 0x31b0 <DIO_u8ReadPinValue+0x2c8>
    31ac:	55 95       	asr	r21
    31ae:	47 95       	ror	r20
    31b0:	8a 95       	dec	r24
    31b2:	e2 f7       	brpl	.-8      	; 0x31ac <DIO_u8ReadPinValue+0x2c4>
    31b4:	ca 01       	movw	r24, r20
    31b6:	58 2f       	mov	r21, r24
    31b8:	51 70       	andi	r21, 0x01	; 1
    31ba:	5b 83       	std	Y+3, r21	; 0x03
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <DIO_u8ReadPinValue+0x2da>
			}
			break;
		}
	}
	return -1;
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	8b 83       	std	Y+3, r24	; 0x03
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	cf 91       	pop	r28
    31d0:	df 91       	pop	r29
    31d2:	08 95       	ret

000031d4 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    31d4:	df 93       	push	r29
    31d6:	cf 93       	push	r28
    31d8:	00 d0       	rcall	.+0      	; 0x31da <DIO_voidSetPortDir+0x6>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <DIO_voidSetPortDir+0x8>
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	88 23       	and	r24, r24
    31e8:	b1 f1       	breq	.+108    	; 0x3256 <DIO_voidSetPortDir+0x82>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	85 30       	cpi	r24, 0x05	; 5
    31ee:	98 f5       	brcc	.+102    	; 0x3256 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	3c 83       	std	Y+4, r19	; 0x04
    31f8:	2b 83       	std	Y+3, r18	; 0x03
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	82 30       	cpi	r24, 0x02	; 2
    3200:	91 05       	cpc	r25, r1
    3202:	d9 f0       	breq	.+54     	; 0x323a <DIO_voidSetPortDir+0x66>
    3204:	2b 81       	ldd	r18, Y+3	; 0x03
    3206:	3c 81       	ldd	r19, Y+4	; 0x04
    3208:	23 30       	cpi	r18, 0x03	; 3
    320a:	31 05       	cpc	r19, r1
    320c:	34 f4       	brge	.+12     	; 0x321a <DIO_voidSetPortDir+0x46>
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	81 30       	cpi	r24, 0x01	; 1
    3214:	91 05       	cpc	r25, r1
    3216:	61 f0       	breq	.+24     	; 0x3230 <DIO_voidSetPortDir+0x5c>
    3218:	1e c0       	rjmp	.+60     	; 0x3256 <DIO_voidSetPortDir+0x82>
    321a:	2b 81       	ldd	r18, Y+3	; 0x03
    321c:	3c 81       	ldd	r19, Y+4	; 0x04
    321e:	23 30       	cpi	r18, 0x03	; 3
    3220:	31 05       	cpc	r19, r1
    3222:	81 f0       	breq	.+32     	; 0x3244 <DIO_voidSetPortDir+0x70>
    3224:	8b 81       	ldd	r24, Y+3	; 0x03
    3226:	9c 81       	ldd	r25, Y+4	; 0x04
    3228:	84 30       	cpi	r24, 0x04	; 4
    322a:	91 05       	cpc	r25, r1
    322c:	81 f0       	breq	.+32     	; 0x324e <DIO_voidSetPortDir+0x7a>
    322e:	13 c0       	rjmp	.+38     	; 0x3256 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    3230:	ea e3       	ldi	r30, 0x3A	; 58
    3232:	f0 e0       	ldi	r31, 0x00	; 0
    3234:	8a 81       	ldd	r24, Y+2	; 0x02
    3236:	80 83       	st	Z, r24
    3238:	0e c0       	rjmp	.+28     	; 0x3256 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    323a:	e7 e3       	ldi	r30, 0x37	; 55
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	80 83       	st	Z, r24
    3242:	09 c0       	rjmp	.+18     	; 0x3256 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    3244:	e4 e3       	ldi	r30, 0x34	; 52
    3246:	f0 e0       	ldi	r31, 0x00	; 0
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	80 83       	st	Z, r24
    324c:	04 c0       	rjmp	.+8      	; 0x3256 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    324e:	e1 e3       	ldi	r30, 0x31	; 49
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	8a 81       	ldd	r24, Y+2	; 0x02
    3254:	80 83       	st	Z, r24
		}
	}

}
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	00 d0       	rcall	.+0      	; 0x326a <DIO_voidSetPortValue+0x6>
    326a:	00 d0       	rcall	.+0      	; 0x326c <DIO_voidSetPortValue+0x8>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	88 23       	and	r24, r24
    3278:	b1 f1       	breq	.+108    	; 0x32e6 <DIO_voidSetPortValue+0x82>
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	85 30       	cpi	r24, 0x05	; 5
    327e:	98 f5       	brcc	.+102    	; 0x32e6 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	3c 83       	std	Y+4, r19	; 0x04
    3288:	2b 83       	std	Y+3, r18	; 0x03
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	9c 81       	ldd	r25, Y+4	; 0x04
    328e:	82 30       	cpi	r24, 0x02	; 2
    3290:	91 05       	cpc	r25, r1
    3292:	d9 f0       	breq	.+54     	; 0x32ca <DIO_voidSetPortValue+0x66>
    3294:	2b 81       	ldd	r18, Y+3	; 0x03
    3296:	3c 81       	ldd	r19, Y+4	; 0x04
    3298:	23 30       	cpi	r18, 0x03	; 3
    329a:	31 05       	cpc	r19, r1
    329c:	34 f4       	brge	.+12     	; 0x32aa <DIO_voidSetPortValue+0x46>
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	81 30       	cpi	r24, 0x01	; 1
    32a4:	91 05       	cpc	r25, r1
    32a6:	61 f0       	breq	.+24     	; 0x32c0 <DIO_voidSetPortValue+0x5c>
    32a8:	1e c0       	rjmp	.+60     	; 0x32e6 <DIO_voidSetPortValue+0x82>
    32aa:	2b 81       	ldd	r18, Y+3	; 0x03
    32ac:	3c 81       	ldd	r19, Y+4	; 0x04
    32ae:	23 30       	cpi	r18, 0x03	; 3
    32b0:	31 05       	cpc	r19, r1
    32b2:	81 f0       	breq	.+32     	; 0x32d4 <DIO_voidSetPortValue+0x70>
    32b4:	8b 81       	ldd	r24, Y+3	; 0x03
    32b6:	9c 81       	ldd	r25, Y+4	; 0x04
    32b8:	84 30       	cpi	r24, 0x04	; 4
    32ba:	91 05       	cpc	r25, r1
    32bc:	81 f0       	breq	.+32     	; 0x32de <DIO_voidSetPortValue+0x7a>
    32be:	13 c0       	rjmp	.+38     	; 0x32e6 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    32c0:	eb e3       	ldi	r30, 0x3B	; 59
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	80 83       	st	Z, r24
    32c8:	0e c0       	rjmp	.+28     	; 0x32e6 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    32ca:	e8 e3       	ldi	r30, 0x38	; 56
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	80 83       	st	Z, r24
    32d2:	09 c0       	rjmp	.+18     	; 0x32e6 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    32d4:	e5 e3       	ldi	r30, 0x35	; 53
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	8a 81       	ldd	r24, Y+2	; 0x02
    32da:	80 83       	st	Z, r24
    32dc:	04 c0       	rjmp	.+8      	; 0x32e6 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    32de:	e2 e3       	ldi	r30, 0x32	; 50
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	80 83       	st	Z, r24
		}
	}

}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	cf 91       	pop	r28
    32f0:	df 91       	pop	r29
    32f2:	08 95       	ret

000032f4 <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <DIO_U8ReadPortValue+0x6>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <DIO_U8ReadPortValue+0x8>
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	88 23       	and	r24, r24
    3306:	b9 f1       	breq	.+110    	; 0x3376 <DIO_U8ReadPortValue+0x82>
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	85 30       	cpi	r24, 0x05	; 5
    330c:	a0 f5       	brcc	.+104    	; 0x3376 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	28 2f       	mov	r18, r24
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	3c 83       	std	Y+4, r19	; 0x04
    3316:	2b 83       	std	Y+3, r18	; 0x03
    3318:	8b 81       	ldd	r24, Y+3	; 0x03
    331a:	9c 81       	ldd	r25, Y+4	; 0x04
    331c:	82 30       	cpi	r24, 0x02	; 2
    331e:	91 05       	cpc	r25, r1
    3320:	d9 f0       	breq	.+54     	; 0x3358 <DIO_U8ReadPortValue+0x64>
    3322:	2b 81       	ldd	r18, Y+3	; 0x03
    3324:	3c 81       	ldd	r19, Y+4	; 0x04
    3326:	23 30       	cpi	r18, 0x03	; 3
    3328:	31 05       	cpc	r19, r1
    332a:	34 f4       	brge	.+12     	; 0x3338 <DIO_U8ReadPortValue+0x44>
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	81 30       	cpi	r24, 0x01	; 1
    3332:	91 05       	cpc	r25, r1
    3334:	61 f0       	breq	.+24     	; 0x334e <DIO_U8ReadPortValue+0x5a>
    3336:	1f c0       	rjmp	.+62     	; 0x3376 <DIO_U8ReadPortValue+0x82>
    3338:	2b 81       	ldd	r18, Y+3	; 0x03
    333a:	3c 81       	ldd	r19, Y+4	; 0x04
    333c:	23 30       	cpi	r18, 0x03	; 3
    333e:	31 05       	cpc	r19, r1
    3340:	81 f0       	breq	.+32     	; 0x3362 <DIO_U8ReadPortValue+0x6e>
    3342:	8b 81       	ldd	r24, Y+3	; 0x03
    3344:	9c 81       	ldd	r25, Y+4	; 0x04
    3346:	84 30       	cpi	r24, 0x04	; 4
    3348:	91 05       	cpc	r25, r1
    334a:	81 f0       	breq	.+32     	; 0x336c <DIO_U8ReadPortValue+0x78>
    334c:	14 c0       	rjmp	.+40     	; 0x3376 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    334e:	e9 e3       	ldi	r30, 0x39	; 57
    3350:	f0 e0       	ldi	r31, 0x00	; 0
    3352:	90 81       	ld	r25, Z
    3354:	9a 83       	std	Y+2, r25	; 0x02
    3356:	11 c0       	rjmp	.+34     	; 0x337a <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    3358:	e6 e3       	ldi	r30, 0x36	; 54
    335a:	f0 e0       	ldi	r31, 0x00	; 0
    335c:	20 81       	ld	r18, Z
    335e:	2a 83       	std	Y+2, r18	; 0x02
    3360:	0c c0       	rjmp	.+24     	; 0x337a <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    3362:	e3 e3       	ldi	r30, 0x33	; 51
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	30 81       	ld	r19, Z
    3368:	3a 83       	std	Y+2, r19	; 0x02
    336a:	07 c0       	rjmp	.+14     	; 0x337a <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    336c:	e0 e3       	ldi	r30, 0x30	; 48
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8a 83       	std	Y+2, r24	; 0x02
    3374:	02 c0       	rjmp	.+4      	; 0x337a <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    3376:	9f ef       	ldi	r25, 0xFF	; 255
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <DIO_voidControlPullupPin>:

void DIO_voidControlPullupPin(u8 Group_Type,u8 Pin_No , u8 PullUp_Status)
{
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <DIO_voidControlPullupPin+0x6>
    3390:	0f 92       	push	r0
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	6a 83       	std	Y+2, r22	; 0x02
    339a:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPinDir(Group_Type,Pin_No,Input);
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	6a 81       	ldd	r22, Y+2	; 0x02
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinValue(Group_Type,Pin_No,PullUp_Status);
    33a6:	89 81       	ldd	r24, Y+1	; 0x01
    33a8:	6a 81       	ldd	r22, Y+2	; 0x02
    33aa:	4b 81       	ldd	r20, Y+3	; 0x03
    33ac:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <ADC_voidInit>:
 */
#include "ADC_Interface.h"
static u16 InterruptData ;  //static??

void ADC_voidInit()
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <ADC_voidInit+0x6>
    33c2:	0f 92       	push	r0
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
	ADCInformation ADCInformationSet ;
	ADCInformationSet.AutoTriggerState=ADC_AutoTriggerState;
    33c8:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationSet.DivisionFactor=ADC_DivisionFactor;
    33ca:	83 e0       	ldi	r24, 0x03	; 3
    33cc:	8b 83       	std	Y+3, r24	; 0x03
	ADCInformationSet.TriggerSource=ADC_TriggerSource;
    33ce:	1a 82       	std	Y+2, r1	; 0x02
#if ADC_Mode==Polling
	ADC_voidInitPolling(ADCInformationSet);
    33d0:	69 81       	ldd	r22, Y+1	; 0x01
    33d2:	7a 81       	ldd	r23, Y+2	; 0x02
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <ADC_voidInitPolling>
#elif
	ADC_voidInitInterrupt(ADCInformationSet);
#endif
}
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <ADC_voidInitPolling>:
void ADC_voidInitPolling(ADCInformation ADCInfo)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <ADC_voidInitPolling+0x6>
    33ec:	0f 92       	push	r0
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	69 83       	std	Y+1, r22	; 0x01
    33f4:	7a 83       	std	Y+2, r23	; 0x02
    33f6:	8b 83       	std	Y+3, r24	; 0x03
	/*Voltage Reference Selections*/
#if ReferenceSelect==ADCOff
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    33f8:	a7 e2       	ldi	r26, 0x27	; 39
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	e7 e2       	ldi	r30, 0x27	; 39
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	8f 77       	andi	r24, 0x7F	; 127
    3404:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    3406:	a7 e2       	ldi	r26, 0x27	; 39
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	e7 e2       	ldi	r30, 0x27	; 39
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	80 81       	ld	r24, Z
    3410:	80 64       	ori	r24, 0x40	; 64
    3412:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    3414:	a7 e2       	ldi	r26, 0x27	; 39
    3416:	b0 e0       	ldi	r27, 0x00	; 0
    3418:	e7 e2       	ldi	r30, 0x27	; 39
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	80 81       	ld	r24, Z
    341e:	8f 7d       	andi	r24, 0xDF	; 223
    3420:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    3422:	a6 e2       	ldi	r26, 0x26	; 38
    3424:	b0 e0       	ldi	r27, 0x00	; 0
    3426:	e6 e2       	ldi	r30, 0x26	; 38
    3428:	f0 e0       	ldi	r31, 0x00	; 0
    342a:	80 81       	ld	r24, Z
    342c:	80 68       	ori	r24, 0x80	; 128
    342e:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	d1 f4       	brne	.+52     	; 0x346a <ADC_voidInitPolling+0x84>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    3436:	a6 e2       	ldi	r26, 0x26	; 38
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e6 e2       	ldi	r30, 0x26	; 38
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	80 62       	ori	r24, 0x20	; 32
    3442:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    3444:	8a 81       	ldd	r24, Y+2	; 0x02
    3446:	80 7e       	andi	r24, 0xE0	; 224
    3448:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    344a:	a0 e5       	ldi	r26, 0x50	; 80
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e0 e5       	ldi	r30, 0x50	; 80
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	8f 71       	andi	r24, 0x1F	; 31
    3456:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    3458:	a0 e5       	ldi	r26, 0x50	; 80
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e0 e5       	ldi	r30, 0x50	; 80
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	90 81       	ld	r25, Z
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	89 2b       	or	r24, r25
    3466:	8c 93       	st	X, r24
    3468:	0a c0       	rjmp	.+20     	; 0x347e <ADC_voidInitPolling+0x98>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	88 23       	and	r24, r24
    346e:	39 f4       	brne	.+14     	; 0x347e <ADC_voidInitPolling+0x98>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    3470:	a6 e2       	ldi	r26, 0x26	; 38
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	e6 e2       	ldi	r30, 0x26	; 38
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	80 81       	ld	r24, Z
    347a:	8f 7d       	andi	r24, 0xDF	; 223
    347c:	8c 93       	st	X, r24
	}


	/*disable interrupt*/
	clear_bit(ADC_SRA,ADCSRA_ADIE);
    347e:	a6 e2       	ldi	r26, 0x26	; 38
    3480:	b0 e0       	ldi	r27, 0x00	; 0
    3482:	e6 e2       	ldi	r30, 0x26	; 38
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	87 7f       	andi	r24, 0xF7	; 247
    348a:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	87 70       	andi	r24, 0x07	; 7
    3490:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    3492:	a6 e2       	ldi	r26, 0x26	; 38
    3494:	b0 e0       	ldi	r27, 0x00	; 0
    3496:	e6 e2       	ldi	r30, 0x26	; 38
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	88 7f       	andi	r24, 0xF8	; 248
    349e:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    34a0:	a6 e2       	ldi	r26, 0x26	; 38
    34a2:	b0 e0       	ldi	r27, 0x00	; 0
    34a4:	e6 e2       	ldi	r30, 0x26	; 38
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	90 81       	ld	r25, Z
    34aa:	8b 81       	ldd	r24, Y+3	; 0x03
    34ac:	89 2b       	or	r24, r25
    34ae:	8c 93       	st	X, r24

}
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	08 95       	ret

000034bc <ADC_voidReadResultPolling>:


void ADC_voidReadResultPolling(u8 channel, u16 *Result)
{
    34bc:	df 93       	push	r29
    34be:	cf 93       	push	r28
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <ADC_voidReadResultPolling+0x6>
    34c2:	0f 92       	push	r0
    34c4:	cd b7       	in	r28, 0x3d	; 61
    34c6:	de b7       	in	r29, 0x3e	; 62
    34c8:	89 83       	std	Y+1, r24	; 0x01
    34ca:	7b 83       	std	Y+3, r23	; 0x03
    34cc:	6a 83       	std	Y+2, r22	; 0x02
	channel&=0x1F;
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	8f 71       	andi	r24, 0x1F	; 31
    34d2:	89 83       	std	Y+1, r24	; 0x01
	ADC_MUX&=0xE0;
    34d4:	a7 e2       	ldi	r26, 0x27	; 39
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	e7 e2       	ldi	r30, 0x27	; 39
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	80 81       	ld	r24, Z
    34de:	80 7e       	andi	r24, 0xE0	; 224
    34e0:	8c 93       	st	X, r24
	ADC_MUX|=channel; //choose the channel
    34e2:	a7 e2       	ldi	r26, 0x27	; 39
    34e4:	b0 e0       	ldi	r27, 0x00	; 0
    34e6:	e7 e2       	ldi	r30, 0x27	; 39
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	90 81       	ld	r25, Z
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	89 2b       	or	r24, r25
    34f0:	8c 93       	st	X, r24
	set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    34f2:	a6 e2       	ldi	r26, 0x26	; 38
    34f4:	b0 e0       	ldi	r27, 0x00	; 0
    34f6:	e6 e2       	ldi	r30, 0x26	; 38
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	80 64       	ori	r24, 0x40	; 64
    34fe:	8c 93       	st	X, r24
	while(get_bit(ADC_SRA,ADCSRA_ADIF)!=ON);
    3500:	e6 e2       	ldi	r30, 0x26	; 38
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	82 95       	swap	r24
    3508:	8f 70       	andi	r24, 0x0F	; 15
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	81 70       	andi	r24, 0x01	; 1
    3510:	90 70       	andi	r25, 0x00	; 0
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	a9 f3       	breq	.-22     	; 0x3500 <ADC_voidReadResultPolling+0x44>
	*Result=ADC_DATA;
    3516:	e4 e2       	ldi	r30, 0x24	; 36
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	91 81       	ldd	r25, Z+1	; 0x01
    351e:	ea 81       	ldd	r30, Y+2	; 0x02
    3520:	fb 81       	ldd	r31, Y+3	; 0x03
    3522:	91 83       	std	Z+1, r25	; 0x01
    3524:	80 83       	st	Z, r24
	set_bit(ADC_SRA,ADCSRA_ADIF);
    3526:	a6 e2       	ldi	r26, 0x26	; 38
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e6 e2       	ldi	r30, 0x26	; 38
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	80 61       	ori	r24, 0x10	; 16
    3532:	8c 93       	st	X, r24
}
    3534:	0f 90       	pop	r0
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <ADC_voidInitInterrupt>:


void ADC_voidInitInterrupt(ADCInformation ADCInfo)
{
    3540:	df 93       	push	r29
    3542:	cf 93       	push	r28
    3544:	00 d0       	rcall	.+0      	; 0x3546 <ADC_voidInitInterrupt+0x6>
    3546:	0f 92       	push	r0
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	69 83       	std	Y+1, r22	; 0x01
    354e:	7a 83       	std	Y+2, r23	; 0x02
    3550:	8b 83       	std	Y+3, r24	; 0x03
	ADC_MUX=0xFF; //initially to disable the channels until needed
    3552:	e7 e2       	ldi	r30, 0x27	; 39
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	8f ef       	ldi	r24, 0xFF	; 255
    3558:	80 83       	st	Z, r24
	/*Voltage Reference Selections*/
#if ReferenceSelect==Off
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    355a:	a7 e2       	ldi	r26, 0x27	; 39
    355c:	b0 e0       	ldi	r27, 0x00	; 0
    355e:	e7 e2       	ldi	r30, 0x27	; 39
    3560:	f0 e0       	ldi	r31, 0x00	; 0
    3562:	80 81       	ld	r24, Z
    3564:	8f 77       	andi	r24, 0x7F	; 127
    3566:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    3568:	a7 e2       	ldi	r26, 0x27	; 39
    356a:	b0 e0       	ldi	r27, 0x00	; 0
    356c:	e7 e2       	ldi	r30, 0x27	; 39
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	80 81       	ld	r24, Z
    3572:	80 64       	ori	r24, 0x40	; 64
    3574:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    3576:	a7 e2       	ldi	r26, 0x27	; 39
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	e7 e2       	ldi	r30, 0x27	; 39
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	8f 7d       	andi	r24, 0xDF	; 223
    3582:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    3584:	a6 e2       	ldi	r26, 0x26	; 38
    3586:	b0 e0       	ldi	r27, 0x00	; 0
    3588:	e6 e2       	ldi	r30, 0x26	; 38
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	80 68       	ori	r24, 0x80	; 128
    3590:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	81 30       	cpi	r24, 0x01	; 1
    3596:	d1 f4       	brne	.+52     	; 0x35cc <ADC_voidInitInterrupt+0x8c>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    3598:	a6 e2       	ldi	r26, 0x26	; 38
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	e6 e2       	ldi	r30, 0x26	; 38
    359e:	f0 e0       	ldi	r31, 0x00	; 0
    35a0:	80 81       	ld	r24, Z
    35a2:	80 62       	ori	r24, 0x20	; 32
    35a4:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    35a6:	8a 81       	ldd	r24, Y+2	; 0x02
    35a8:	80 7e       	andi	r24, 0xE0	; 224
    35aa:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    35ac:	a0 e5       	ldi	r26, 0x50	; 80
    35ae:	b0 e0       	ldi	r27, 0x00	; 0
    35b0:	e0 e5       	ldi	r30, 0x50	; 80
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	8f 71       	andi	r24, 0x1F	; 31
    35b8:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    35ba:	a0 e5       	ldi	r26, 0x50	; 80
    35bc:	b0 e0       	ldi	r27, 0x00	; 0
    35be:	e0 e5       	ldi	r30, 0x50	; 80
    35c0:	f0 e0       	ldi	r31, 0x00	; 0
    35c2:	90 81       	ld	r25, Z
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	89 2b       	or	r24, r25
    35c8:	8c 93       	st	X, r24
    35ca:	0a c0       	rjmp	.+20     	; 0x35e0 <ADC_voidInitInterrupt+0xa0>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	88 23       	and	r24, r24
    35d0:	39 f4       	brne	.+14     	; 0x35e0 <ADC_voidInitInterrupt+0xa0>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    35d2:	a6 e2       	ldi	r26, 0x26	; 38
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	e6 e2       	ldi	r30, 0x26	; 38
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	8f 7d       	andi	r24, 0xDF	; 223
    35de:	8c 93       	st	X, r24
	}


	/*enable interrupt*/
	set_bit(ADC_SRA,ADCSRA_ADIE);
    35e0:	a6 e2       	ldi	r26, 0x26	; 38
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e6 e2       	ldi	r30, 0x26	; 38
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	88 60       	ori	r24, 0x08	; 8
    35ec:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    35ee:	8b 81       	ldd	r24, Y+3	; 0x03
    35f0:	87 70       	andi	r24, 0x07	; 7
    35f2:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    35f4:	a6 e2       	ldi	r26, 0x26	; 38
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	e6 e2       	ldi	r30, 0x26	; 38
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	88 7f       	andi	r24, 0xF8	; 248
    3600:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    3602:	a6 e2       	ldi	r26, 0x26	; 38
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e6 e2       	ldi	r30, 0x26	; 38
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	90 81       	ld	r25, Z
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	89 2b       	or	r24, r25
    3610:	8c 93       	st	X, r24
}
    3612:	0f 90       	pop	r0
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <ADC_voidReadResultInterrupt>:


void ADC_voidReadResultInterrupt(u8 channel)
{
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	0f 92       	push	r0
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	89 83       	std	Y+1, r24	; 0x01
	channel&=0x1F;
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	8f 71       	andi	r24, 0x1F	; 31
    362e:	89 83       	std	Y+1, r24	; 0x01
		ADC_MUX&=0xE0;
    3630:	a7 e2       	ldi	r26, 0x27	; 39
    3632:	b0 e0       	ldi	r27, 0x00	; 0
    3634:	e7 e2       	ldi	r30, 0x27	; 39
    3636:	f0 e0       	ldi	r31, 0x00	; 0
    3638:	80 81       	ld	r24, Z
    363a:	80 7e       	andi	r24, 0xE0	; 224
    363c:	8c 93       	st	X, r24
		ADC_MUX|=channel; //choose the channel
    363e:	a7 e2       	ldi	r26, 0x27	; 39
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e7 e2       	ldi	r30, 0x27	; 39
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	90 81       	ld	r25, Z
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	89 2b       	or	r24, r25
    364c:	8c 93       	st	X, r24
		set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    364e:	a6 e2       	ldi	r26, 0x26	; 38
    3650:	b0 e0       	ldi	r27, 0x00	; 0
    3652:	e6 e2       	ldi	r30, 0x26	; 38
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	80 64       	ori	r24, 0x40	; 64
    365a:	8c 93       	st	X, r24
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <__vector_16>:

void __vector_16()
{
    3664:	1f 92       	push	r1
    3666:	0f 92       	push	r0
    3668:	0f b6       	in	r0, 0x3f	; 63
    366a:	0f 92       	push	r0
    366c:	11 24       	eor	r1, r1
    366e:	8f 93       	push	r24
    3670:	9f 93       	push	r25
    3672:	ef 93       	push	r30
    3674:	ff 93       	push	r31
    3676:	df 93       	push	r29
    3678:	cf 93       	push	r28
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
	InterruptData=ADC_DATA;
    367e:	e4 e2       	ldi	r30, 0x24	; 36
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	80 81       	ld	r24, Z
    3684:	91 81       	ldd	r25, Z+1	; 0x01
    3686:	90 93 a3 01 	sts	0x01A3, r25
    368a:	80 93 a2 01 	sts	0x01A2, r24
}
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	ff 91       	pop	r31
    3694:	ef 91       	pop	r30
    3696:	9f 91       	pop	r25
    3698:	8f 91       	pop	r24
    369a:	0f 90       	pop	r0
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	0f 90       	pop	r0
    36a0:	1f 90       	pop	r1
    36a2:	18 95       	reti

000036a4 <WaterSensor_voidInit>:
 *      Author: salma
 */

#include "WaterSensor_Interface.h"
void WaterSensor_voidInit()
{
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	cd b7       	in	r28, 0x3d	; 61
    36aa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(WaterSensorGroup,WaterSensorPin,Input);
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	67 e0       	ldi	r22, 0x07	; 7
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	08 95       	ret

000036bc <WaterSensor_voidRead>:
void WaterSensor_voidRead(u16 *WaterRead)
{
    36bc:	df 93       	push	r29
    36be:	cf 93       	push	r28
    36c0:	00 d0       	rcall	.+0      	; 0x36c2 <WaterSensor_voidRead+0x6>
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(WaterSensorPin,WaterRead);
    36ca:	29 81       	ldd	r18, Y+1	; 0x01
    36cc:	3a 81       	ldd	r19, Y+2	; 0x02
    36ce:	87 e0       	ldi	r24, 0x07	; 7
    36d0:	b9 01       	movw	r22, r18
    36d2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <ADC_voidReadResultPolling>
	*WaterRead=((u32)(*WaterRead)*ADCRefmV)/DACRes; //convert out equivalent mV
    36d6:	e9 81       	ldd	r30, Y+1	; 0x01
    36d8:	fa 81       	ldd	r31, Y+2	; 0x02
    36da:	80 81       	ld	r24, Z
    36dc:	91 81       	ldd	r25, Z+1	; 0x01
    36de:	cc 01       	movw	r24, r24
    36e0:	a0 e0       	ldi	r26, 0x00	; 0
    36e2:	b0 e0       	ldi	r27, 0x00	; 0
    36e4:	28 e8       	ldi	r18, 0x88	; 136
    36e6:	33 e1       	ldi	r19, 0x13	; 19
    36e8:	40 e0       	ldi	r20, 0x00	; 0
    36ea:	50 e0       	ldi	r21, 0x00	; 0
    36ec:	bc 01       	movw	r22, r24
    36ee:	cd 01       	movw	r24, r26
    36f0:	0e 94 0e 2b 	call	0x561c	; 0x561c <__mulsi3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	07 2e       	mov	r0, r23
    36fa:	7a e0       	ldi	r23, 0x0A	; 10
    36fc:	b6 95       	lsr	r27
    36fe:	a7 95       	ror	r26
    3700:	97 95       	ror	r25
    3702:	87 95       	ror	r24
    3704:	7a 95       	dec	r23
    3706:	d1 f7       	brne	.-12     	; 0x36fc <WaterSensor_voidRead+0x40>
    3708:	70 2d       	mov	r23, r0
    370a:	e9 81       	ldd	r30, Y+1	; 0x01
    370c:	fa 81       	ldd	r31, Y+2	; 0x02
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	80 83       	st	Z, r24
	*WaterRead= (*WaterRead)/10.00;
    3712:	e9 81       	ldd	r30, Y+1	; 0x01
    3714:	fa 81       	ldd	r31, Y+2	; 0x02
    3716:	80 81       	ld	r24, Z
    3718:	91 81       	ldd	r25, Z+1	; 0x01
    371a:	cc 01       	movw	r24, r24
    371c:	a0 e0       	ldi	r26, 0x00	; 0
    371e:	b0 e0       	ldi	r27, 0x00	; 0
    3720:	bc 01       	movw	r22, r24
    3722:	cd 01       	movw	r24, r26
    3724:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e2       	ldi	r20, 0x20	; 32
    3736:	51 e4       	ldi	r21, 0x41	; 65
    3738:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    373c:	dc 01       	movw	r26, r24
    373e:	cb 01       	movw	r24, r22
    3740:	bc 01       	movw	r22, r24
    3742:	cd 01       	movw	r24, r26
    3744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3748:	dc 01       	movw	r26, r24
    374a:	cb 01       	movw	r24, r22
    374c:	e9 81       	ldd	r30, Y+1	; 0x01
    374e:	fa 81       	ldd	r31, Y+2	; 0x02
    3750:	91 83       	std	Z+1, r25	; 0x01
    3752:	80 83       	st	Z, r24
	}
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <TouchSensor_voidInit>:
 */

#include "TouchSensor_Interface.h"

void TouchSensor_voidInit (u8 Group, u8 pin)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <TouchSensor_voidInit+0x6>
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	89 83       	std	Y+1, r24	; 0x01
    376a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,input);
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	6a 81       	ldd	r22, Y+2	; 0x02
    3770:	40 e0       	ldi	r20, 0x00	; 0
    3772:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    3776:	0f 90       	pop	r0
    3778:	0f 90       	pop	r0
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <TouchSensor_u8GetValue>:

u8 TouchSensor_u8GetValue (u8 Group, u8 pin)
{
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	00 d0       	rcall	.+0      	; 0x3786 <TouchSensor_u8GetValue+0x6>
    3786:	0f 92       	push	r0
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	8a 83       	std	Y+2, r24	; 0x02
    378e:	6b 83       	std	Y+3, r22	; 0x03
	u8 TouchSensorState;
	TouchSensorState=DIO_u8ReadPinValue(Group,pin);
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	6b 81       	ldd	r22, Y+3	; 0x03
    3794:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
    3798:	89 83       	std	Y+1, r24	; 0x01
	return TouchSensorState;
    379a:	89 81       	ldd	r24, Y+1	; 0x01
}
    379c:	0f 90       	pop	r0
    379e:	0f 90       	pop	r0
    37a0:	0f 90       	pop	r0
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	08 95       	ret

000037a8 <SWITCH_voidInit>:
 *      Author: salma
 */

#include "Switch_Interface.h"
void SWITCH_voidInit (u8 Group, u8 pin)
{
    37a8:	df 93       	push	r29
    37aa:	cf 93       	push	r28
    37ac:	00 d0       	rcall	.+0      	; 0x37ae <SWITCH_voidInit+0x6>
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	89 83       	std	Y+1, r24	; 0x01
    37b4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,Input);
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	6a 81       	ldd	r22, Y+2	; 0x02
    37ba:	40 e0       	ldi	r20, 0x00	; 0
    37bc:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidControlPullupPin(Group,pin,High);
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	6a 81       	ldd	r22, Y+2	; 0x02
    37c4:	41 e0       	ldi	r20, 0x01	; 1
    37c6:	0e 94 c5 19 	call	0x338a	; 0x338a <DIO_voidControlPullupPin>
}
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	08 95       	ret

000037d4 <SWITCH_u8GetValue>:

u8 SWITCH_u8GetValue (u8 Group, u8 pin)
{
    37d4:	df 93       	push	r29
    37d6:	cf 93       	push	r28
    37d8:	00 d0       	rcall	.+0      	; 0x37da <SWITCH_u8GetValue+0x6>
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	89 83       	std	Y+1, r24	; 0x01
    37e0:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPinValue(Group,pin);
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	6a 81       	ldd	r22, Y+2	; 0x02
    37e6:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
}
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	08 95       	ret

000037f4 <STEPPER_voidInit>:
 */
#include "Stepper_Interface.h"
#include <util/delay.h>

void STEPPER_voidInit ()
{
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(StepperGroup,StepperB1,Output);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	41 e0       	ldi	r20, 0x01	; 1
    3802:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB2,Output);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	61 e0       	ldi	r22, 0x01	; 1
    380a:	41 e0       	ldi	r20, 0x01	; 1
    380c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB3,Output);
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	62 e0       	ldi	r22, 0x02	; 2
    3814:	41 e0       	ldi	r20, 0x01	; 1
    3816:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB4,Output);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	63 e0       	ldi	r22, 0x03	; 3
    381e:	41 e0       	ldi	r20, 0x01	; 1
    3820:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <STEPPER_voidCW>:

void STEPPER_voidCW(u16 angle)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	c2 54       	subi	r28, 0x42	; 66
    3834:	d0 40       	sbci	r29, 0x00	; 0
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	de bf       	out	0x3e, r29	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	cd bf       	out	0x3d, r28	; 61
    3840:	fe 01       	movw	r30, r28
    3842:	ef 5b       	subi	r30, 0xBF	; 191
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	91 83       	std	Z+1, r25	; 0x01
    3848:	80 83       	st	Z, r24
	u32 NOSteps =(angle/FullStepAngle);
    384a:	fe 01       	movw	r30, r28
    384c:	ef 5b       	subi	r30, 0xBF	; 191
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	80 81       	ld	r24, Z
    3852:	91 81       	ldd	r25, Z+1	; 0x01
    3854:	cc 01       	movw	r24, r24
    3856:	a0 e0       	ldi	r26, 0x00	; 0
    3858:	b0 e0       	ldi	r27, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	2c eb       	ldi	r18, 0xBC	; 188
    386c:	3c ec       	ldi	r19, 0xCC	; 204
    386e:	40 e3       	ldi	r20, 0x30	; 48
    3870:	5e e3       	ldi	r21, 0x3E	; 62
    3872:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	fe 01       	movw	r30, r28
    3888:	fd 96       	adiw	r30, 0x3d	; 61
    388a:	80 83       	st	Z, r24
    388c:	91 83       	std	Z+1, r25	; 0x01
    388e:	a2 83       	std	Z+2, r26	; 0x02
    3890:	b3 83       	std	Z+3, r27	; 0x03
	u16 NOIterations=NOSteps/FUllIteration;
    3892:	fe 01       	movw	r30, r28
    3894:	fd 96       	adiw	r30, 0x3d	; 61
    3896:	80 81       	ld	r24, Z
    3898:	91 81       	ldd	r25, Z+1	; 0x01
    389a:	a2 81       	ldd	r26, Z+2	; 0x02
    389c:	b3 81       	ldd	r27, Z+3	; 0x03
    389e:	b6 95       	lsr	r27
    38a0:	a7 95       	ror	r26
    38a2:	97 95       	ror	r25
    38a4:	87 95       	ror	r24
    38a6:	b6 95       	lsr	r27
    38a8:	a7 95       	ror	r26
    38aa:	97 95       	ror	r25
    38ac:	87 95       	ror	r24
    38ae:	9c af       	std	Y+60, r25	; 0x3c
    38b0:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    38b2:	1a ae       	std	Y+58, r1	; 0x3a
    38b4:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    38b6:	1a ae       	std	Y+58, r1	; 0x3a
    38b8:	19 ae       	std	Y+57, r1	; 0x39
    38ba:	1d c2       	rjmp	.+1082   	; 0x3cf6 <STEPPER_voidCW+0x4cc>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	60 e0       	ldi	r22, 0x00	; 0
    38c0:	40 e0       	ldi	r20, 0x00	; 0
    38c2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	61 e0       	ldi	r22, 0x01	; 1
    38ca:	41 e0       	ldi	r20, 0x01	; 1
    38cc:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	62 e0       	ldi	r22, 0x02	; 2
    38d4:	41 e0       	ldi	r20, 0x01	; 1
    38d6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	63 e0       	ldi	r22, 0x03	; 3
    38de:	41 e0       	ldi	r20, 0x01	; 1
    38e0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	a0 e2       	ldi	r26, 0x20	; 32
    38ea:	b1 e4       	ldi	r27, 0x41	; 65
    38ec:	8d ab       	std	Y+53, r24	; 0x35
    38ee:	9e ab       	std	Y+54, r25	; 0x36
    38f0:	af ab       	std	Y+55, r26	; 0x37
    38f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38f4:	6d a9       	ldd	r22, Y+53	; 0x35
    38f6:	7e a9       	ldd	r23, Y+54	; 0x36
    38f8:	8f a9       	ldd	r24, Y+55	; 0x37
    38fa:	98 ad       	ldd	r25, Y+56	; 0x38
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	4a ef       	ldi	r20, 0xFA	; 250
    3902:	54 e4       	ldi	r21, 0x44	; 68
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	89 ab       	std	Y+49, r24	; 0x31
    390e:	9a ab       	std	Y+50, r25	; 0x32
    3910:	ab ab       	std	Y+51, r26	; 0x33
    3912:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3914:	69 a9       	ldd	r22, Y+49	; 0x31
    3916:	7a a9       	ldd	r23, Y+50	; 0x32
    3918:	8b a9       	ldd	r24, Y+51	; 0x33
    391a:	9c a9       	ldd	r25, Y+52	; 0x34
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e8       	ldi	r20, 0x80	; 128
    3922:	5f e3       	ldi	r21, 0x3F	; 63
    3924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3928:	88 23       	and	r24, r24
    392a:	2c f4       	brge	.+10     	; 0x3936 <STEPPER_voidCW+0x10c>
		__ticks = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	98 ab       	std	Y+48, r25	; 0x30
    3932:	8f a7       	std	Y+47, r24	; 0x2f
    3934:	3f c0       	rjmp	.+126    	; 0x39b4 <STEPPER_voidCW+0x18a>
	else if (__tmp > 65535)
    3936:	69 a9       	ldd	r22, Y+49	; 0x31
    3938:	7a a9       	ldd	r23, Y+50	; 0x32
    393a:	8b a9       	ldd	r24, Y+51	; 0x33
    393c:	9c a9       	ldd	r25, Y+52	; 0x34
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	3f ef       	ldi	r19, 0xFF	; 255
    3942:	4f e7       	ldi	r20, 0x7F	; 127
    3944:	57 e4       	ldi	r21, 0x47	; 71
    3946:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    394a:	18 16       	cp	r1, r24
    394c:	4c f5       	brge	.+82     	; 0x39a0 <STEPPER_voidCW+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    394e:	6d a9       	ldd	r22, Y+53	; 0x35
    3950:	7e a9       	ldd	r23, Y+54	; 0x36
    3952:	8f a9       	ldd	r24, Y+55	; 0x37
    3954:	98 ad       	ldd	r25, Y+56	; 0x38
    3956:	20 e0       	ldi	r18, 0x00	; 0
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	40 e2       	ldi	r20, 0x20	; 32
    395c:	51 e4       	ldi	r21, 0x41	; 65
    395e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	bc 01       	movw	r22, r24
    3968:	cd 01       	movw	r24, r26
    396a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	98 ab       	std	Y+48, r25	; 0x30
    3974:	8f a7       	std	Y+47, r24	; 0x2f
    3976:	0f c0       	rjmp	.+30     	; 0x3996 <STEPPER_voidCW+0x16c>
    3978:	88 ec       	ldi	r24, 0xC8	; 200
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	9e a7       	std	Y+46, r25	; 0x2e
    397e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3980:	8d a5       	ldd	r24, Y+45	; 0x2d
    3982:	9e a5       	ldd	r25, Y+46	; 0x2e
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <STEPPER_voidCW+0x15a>
    3988:	9e a7       	std	Y+46, r25	; 0x2e
    398a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    398c:	8f a5       	ldd	r24, Y+47	; 0x2f
    398e:	98 a9       	ldd	r25, Y+48	; 0x30
    3990:	01 97       	sbiw	r24, 0x01	; 1
    3992:	98 ab       	std	Y+48, r25	; 0x30
    3994:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3996:	8f a5       	ldd	r24, Y+47	; 0x2f
    3998:	98 a9       	ldd	r25, Y+48	; 0x30
    399a:	00 97       	sbiw	r24, 0x00	; 0
    399c:	69 f7       	brne	.-38     	; 0x3978 <STEPPER_voidCW+0x14e>
    399e:	14 c0       	rjmp	.+40     	; 0x39c8 <STEPPER_voidCW+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39a0:	69 a9       	ldd	r22, Y+49	; 0x31
    39a2:	7a a9       	ldd	r23, Y+50	; 0x32
    39a4:	8b a9       	ldd	r24, Y+51	; 0x33
    39a6:	9c a9       	ldd	r25, Y+52	; 0x34
    39a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	98 ab       	std	Y+48, r25	; 0x30
    39b2:	8f a7       	std	Y+47, r24	; 0x2f
    39b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    39b6:	98 a9       	ldd	r25, Y+48	; 0x30
    39b8:	9c a7       	std	Y+44, r25	; 0x2c
    39ba:	8b a7       	std	Y+43, r24	; 0x2b
    39bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    39be:	9c a5       	ldd	r25, Y+44	; 0x2c
    39c0:	01 97       	sbiw	r24, 0x01	; 1
    39c2:	f1 f7       	brne	.-4      	; 0x39c0 <STEPPER_voidCW+0x196>
    39c4:	9c a7       	std	Y+44, r25	; 0x2c
    39c6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    39c8:	81 e0       	ldi	r24, 0x01	; 1
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	41 e0       	ldi	r20, 0x01	; 1
    39ce:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	40 e0       	ldi	r20, 0x00	; 0
    39d8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	62 e0       	ldi	r22, 0x02	; 2
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    39e6:	81 e0       	ldi	r24, 0x01	; 1
    39e8:	63 e0       	ldi	r22, 0x03	; 3
    39ea:	41 e0       	ldi	r20, 0x01	; 1
    39ec:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	a0 e2       	ldi	r26, 0x20	; 32
    39f6:	b1 e4       	ldi	r27, 0x41	; 65
    39f8:	8f a3       	std	Y+39, r24	; 0x27
    39fa:	98 a7       	std	Y+40, r25	; 0x28
    39fc:	a9 a7       	std	Y+41, r26	; 0x29
    39fe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a00:	6f a1       	ldd	r22, Y+39	; 0x27
    3a02:	78 a5       	ldd	r23, Y+40	; 0x28
    3a04:	89 a5       	ldd	r24, Y+41	; 0x29
    3a06:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	4a ef       	ldi	r20, 0xFA	; 250
    3a0e:	54 e4       	ldi	r21, 0x44	; 68
    3a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a14:	dc 01       	movw	r26, r24
    3a16:	cb 01       	movw	r24, r22
    3a18:	8b a3       	std	Y+35, r24	; 0x23
    3a1a:	9c a3       	std	Y+36, r25	; 0x24
    3a1c:	ad a3       	std	Y+37, r26	; 0x25
    3a1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a20:	6b a1       	ldd	r22, Y+35	; 0x23
    3a22:	7c a1       	ldd	r23, Y+36	; 0x24
    3a24:	8d a1       	ldd	r24, Y+37	; 0x25
    3a26:	9e a1       	ldd	r25, Y+38	; 0x26
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	30 e0       	ldi	r19, 0x00	; 0
    3a2c:	40 e8       	ldi	r20, 0x80	; 128
    3a2e:	5f e3       	ldi	r21, 0x3F	; 63
    3a30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a34:	88 23       	and	r24, r24
    3a36:	2c f4       	brge	.+10     	; 0x3a42 <STEPPER_voidCW+0x218>
		__ticks = 1;
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	9a a3       	std	Y+34, r25	; 0x22
    3a3e:	89 a3       	std	Y+33, r24	; 0x21
    3a40:	3f c0       	rjmp	.+126    	; 0x3ac0 <STEPPER_voidCW+0x296>
	else if (__tmp > 65535)
    3a42:	6b a1       	ldd	r22, Y+35	; 0x23
    3a44:	7c a1       	ldd	r23, Y+36	; 0x24
    3a46:	8d a1       	ldd	r24, Y+37	; 0x25
    3a48:	9e a1       	ldd	r25, Y+38	; 0x26
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	3f ef       	ldi	r19, 0xFF	; 255
    3a4e:	4f e7       	ldi	r20, 0x7F	; 127
    3a50:	57 e4       	ldi	r21, 0x47	; 71
    3a52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a56:	18 16       	cp	r1, r24
    3a58:	4c f5       	brge	.+82     	; 0x3aac <STEPPER_voidCW+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a5c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a5e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a60:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	40 e2       	ldi	r20, 0x20	; 32
    3a68:	51 e4       	ldi	r21, 0x41	; 65
    3a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	bc 01       	movw	r22, r24
    3a74:	cd 01       	movw	r24, r26
    3a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	9a a3       	std	Y+34, r25	; 0x22
    3a80:	89 a3       	std	Y+33, r24	; 0x21
    3a82:	0f c0       	rjmp	.+30     	; 0x3aa2 <STEPPER_voidCW+0x278>
    3a84:	88 ec       	ldi	r24, 0xC8	; 200
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	98 a3       	std	Y+32, r25	; 0x20
    3a8a:	8f 8f       	std	Y+31, r24	; 0x1f
    3a8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <STEPPER_voidCW+0x266>
    3a94:	98 a3       	std	Y+32, r25	; 0x20
    3a96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a98:	89 a1       	ldd	r24, Y+33	; 0x21
    3a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a9c:	01 97       	sbiw	r24, 0x01	; 1
    3a9e:	9a a3       	std	Y+34, r25	; 0x22
    3aa0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa2:	89 a1       	ldd	r24, Y+33	; 0x21
    3aa4:	9a a1       	ldd	r25, Y+34	; 0x22
    3aa6:	00 97       	sbiw	r24, 0x00	; 0
    3aa8:	69 f7       	brne	.-38     	; 0x3a84 <STEPPER_voidCW+0x25a>
    3aaa:	14 c0       	rjmp	.+40     	; 0x3ad4 <STEPPER_voidCW+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aac:	6b a1       	ldd	r22, Y+35	; 0x23
    3aae:	7c a1       	ldd	r23, Y+36	; 0x24
    3ab0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ab2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	9a a3       	std	Y+34, r25	; 0x22
    3abe:	89 a3       	std	Y+33, r24	; 0x21
    3ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ac4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ac6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ac8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3aca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	f1 f7       	brne	.-4      	; 0x3acc <STEPPER_voidCW+0x2a2>
    3ad0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ad2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3ad4:	81 e0       	ldi	r24, 0x01	; 1
    3ad6:	60 e0       	ldi	r22, 0x00	; 0
    3ad8:	41 e0       	ldi	r20, 0x01	; 1
    3ada:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	61 e0       	ldi	r22, 0x01	; 1
    3ae2:	41 e0       	ldi	r20, 0x01	; 1
    3ae4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	62 e0       	ldi	r22, 0x02	; 2
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	63 e0       	ldi	r22, 0x03	; 3
    3af6:	41 e0       	ldi	r20, 0x01	; 1
    3af8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	a0 e2       	ldi	r26, 0x20	; 32
    3b02:	b1 e4       	ldi	r27, 0x41	; 65
    3b04:	89 8f       	std	Y+25, r24	; 0x19
    3b06:	9a 8f       	std	Y+26, r25	; 0x1a
    3b08:	ab 8f       	std	Y+27, r26	; 0x1b
    3b0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b0c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	4a ef       	ldi	r20, 0xFA	; 250
    3b1a:	54 e4       	ldi	r21, 0x44	; 68
    3b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b20:	dc 01       	movw	r26, r24
    3b22:	cb 01       	movw	r24, r22
    3b24:	8d 8b       	std	Y+21, r24	; 0x15
    3b26:	9e 8b       	std	Y+22, r25	; 0x16
    3b28:	af 8b       	std	Y+23, r26	; 0x17
    3b2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b30:	8f 89       	ldd	r24, Y+23	; 0x17
    3b32:	98 8d       	ldd	r25, Y+24	; 0x18
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	2c f4       	brge	.+10     	; 0x3b4e <STEPPER_voidCW+0x324>
		__ticks = 1;
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	9c 8b       	std	Y+20, r25	; 0x14
    3b4a:	8b 8b       	std	Y+19, r24	; 0x13
    3b4c:	3f c0       	rjmp	.+126    	; 0x3bcc <STEPPER_voidCW+0x3a2>
	else if (__tmp > 65535)
    3b4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b50:	7e 89       	ldd	r23, Y+22	; 0x16
    3b52:	8f 89       	ldd	r24, Y+23	; 0x17
    3b54:	98 8d       	ldd	r25, Y+24	; 0x18
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	4c f5       	brge	.+82     	; 0x3bb8 <STEPPER_voidCW+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b66:	69 8d       	ldd	r22, Y+25	; 0x19
    3b68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b6e:	20 e0       	ldi	r18, 0x00	; 0
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	40 e2       	ldi	r20, 0x20	; 32
    3b74:	51 e4       	ldi	r21, 0x41	; 65
    3b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	bc 01       	movw	r22, r24
    3b80:	cd 01       	movw	r24, r26
    3b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	9c 8b       	std	Y+20, r25	; 0x14
    3b8c:	8b 8b       	std	Y+19, r24	; 0x13
    3b8e:	0f c0       	rjmp	.+30     	; 0x3bae <STEPPER_voidCW+0x384>
    3b90:	88 ec       	ldi	r24, 0xC8	; 200
    3b92:	90 e0       	ldi	r25, 0x00	; 0
    3b94:	9a 8b       	std	Y+18, r25	; 0x12
    3b96:	89 8b       	std	Y+17, r24	; 0x11
    3b98:	89 89       	ldd	r24, Y+17	; 0x11
    3b9a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <STEPPER_voidCW+0x372>
    3ba0:	9a 8b       	std	Y+18, r25	; 0x12
    3ba2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	9c 8b       	std	Y+20, r25	; 0x14
    3bac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bae:	8b 89       	ldd	r24, Y+19	; 0x13
    3bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    3bb2:	00 97       	sbiw	r24, 0x00	; 0
    3bb4:	69 f7       	brne	.-38     	; 0x3b90 <STEPPER_voidCW+0x366>
    3bb6:	14 c0       	rjmp	.+40     	; 0x3be0 <STEPPER_voidCW+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bba:	7e 89       	ldd	r23, Y+22	; 0x16
    3bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9c 8b       	std	Y+20, r25	; 0x14
    3bca:	8b 8b       	std	Y+19, r24	; 0x13
    3bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    3bce:	9c 89       	ldd	r25, Y+20	; 0x14
    3bd0:	98 8b       	std	Y+16, r25	; 0x10
    3bd2:	8f 87       	std	Y+15, r24	; 0x0f
    3bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bd6:	98 89       	ldd	r25, Y+16	; 0x10
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <STEPPER_voidCW+0x3ae>
    3bdc:	98 8b       	std	Y+16, r25	; 0x10
    3bde:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	61 e0       	ldi	r22, 0x01	; 1
    3bee:	41 e0       	ldi	r20, 0x01	; 1
    3bf0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	62 e0       	ldi	r22, 0x02	; 2
    3bf8:	41 e0       	ldi	r20, 0x01	; 1
    3bfa:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3bfe:	81 e0       	ldi	r24, 0x01	; 1
    3c00:	63 e0       	ldi	r22, 0x03	; 3
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	a0 e2       	ldi	r26, 0x20	; 32
    3c0e:	b1 e4       	ldi	r27, 0x41	; 65
    3c10:	8b 87       	std	Y+11, r24	; 0x0b
    3c12:	9c 87       	std	Y+12, r25	; 0x0c
    3c14:	ad 87       	std	Y+13, r26	; 0x0d
    3c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	4a ef       	ldi	r20, 0xFA	; 250
    3c26:	54 e4       	ldi	r21, 0x44	; 68
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	8f 83       	std	Y+7, r24	; 0x07
    3c32:	98 87       	std	Y+8, r25	; 0x08
    3c34:	a9 87       	std	Y+9, r26	; 0x09
    3c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c38:	6f 81       	ldd	r22, Y+7	; 0x07
    3c3a:	78 85       	ldd	r23, Y+8	; 0x08
    3c3c:	89 85       	ldd	r24, Y+9	; 0x09
    3c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	40 e8       	ldi	r20, 0x80	; 128
    3c46:	5f e3       	ldi	r21, 0x3F	; 63
    3c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c4c:	88 23       	and	r24, r24
    3c4e:	2c f4       	brge	.+10     	; 0x3c5a <STEPPER_voidCW+0x430>
		__ticks = 1;
    3c50:	81 e0       	ldi	r24, 0x01	; 1
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	9e 83       	std	Y+6, r25	; 0x06
    3c56:	8d 83       	std	Y+5, r24	; 0x05
    3c58:	3f c0       	rjmp	.+126    	; 0x3cd8 <STEPPER_voidCW+0x4ae>
	else if (__tmp > 65535)
    3c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5c:	78 85       	ldd	r23, Y+8	; 0x08
    3c5e:	89 85       	ldd	r24, Y+9	; 0x09
    3c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	3f ef       	ldi	r19, 0xFF	; 255
    3c66:	4f e7       	ldi	r20, 0x7F	; 127
    3c68:	57 e4       	ldi	r21, 0x47	; 71
    3c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c6e:	18 16       	cp	r1, r24
    3c70:	4c f5       	brge	.+82     	; 0x3cc4 <STEPPER_voidCW+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e2       	ldi	r20, 0x20	; 32
    3c80:	51 e4       	ldi	r21, 0x41	; 65
    3c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	bc 01       	movw	r22, r24
    3c8c:	cd 01       	movw	r24, r26
    3c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	9e 83       	std	Y+6, r25	; 0x06
    3c98:	8d 83       	std	Y+5, r24	; 0x05
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <STEPPER_voidCW+0x490>
    3c9c:	88 ec       	ldi	r24, 0xC8	; 200
    3c9e:	90 e0       	ldi	r25, 0x00	; 0
    3ca0:	9c 83       	std	Y+4, r25	; 0x04
    3ca2:	8b 83       	std	Y+3, r24	; 0x03
    3ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <STEPPER_voidCW+0x47e>
    3cac:	9c 83       	std	Y+4, r25	; 0x04
    3cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb4:	01 97       	sbiw	r24, 0x01	; 1
    3cb6:	9e 83       	std	Y+6, r25	; 0x06
    3cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cba:	8d 81       	ldd	r24, Y+5	; 0x05
    3cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	69 f7       	brne	.-38     	; 0x3c9c <STEPPER_voidCW+0x472>
    3cc2:	14 c0       	rjmp	.+40     	; 0x3cec <STEPPER_voidCW+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc6:	78 85       	ldd	r23, Y+8	; 0x08
    3cc8:	89 85       	ldd	r24, Y+9	; 0x09
    3cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	9e 83       	std	Y+6, r25	; 0x06
    3cd6:	8d 83       	std	Y+5, r24	; 0x05
    3cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cda:	9e 81       	ldd	r25, Y+6	; 0x06
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	89 83       	std	Y+1, r24	; 0x01
    3ce0:	89 81       	ldd	r24, Y+1	; 0x01
    3ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce4:	01 97       	sbiw	r24, 0x01	; 1
    3ce6:	f1 f7       	brne	.-4      	; 0x3ce4 <STEPPER_voidCW+0x4ba>
    3ce8:	9a 83       	std	Y+2, r25	; 0x02
    3cea:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidCW(u16 angle)
{
	u32 NOSteps =(angle/FullStepAngle);
	u16 NOIterations=NOSteps/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3cec:	89 ad       	ldd	r24, Y+57	; 0x39
    3cee:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cf0:	01 96       	adiw	r24, 0x01	; 1
    3cf2:	9a af       	std	Y+58, r25	; 0x3a
    3cf4:	89 af       	std	Y+57, r24	; 0x39
    3cf6:	29 ad       	ldd	r18, Y+57	; 0x39
    3cf8:	3a ad       	ldd	r19, Y+58	; 0x3a
    3cfa:	8b ad       	ldd	r24, Y+59	; 0x3b
    3cfc:	9c ad       	ldd	r25, Y+60	; 0x3c
    3cfe:	28 17       	cp	r18, r24
    3d00:	39 07       	cpc	r19, r25
    3d02:	08 f4       	brcc	.+2      	; 0x3d06 <STEPPER_voidCW+0x4dc>
    3d04:	db cd       	rjmp	.-1098   	; 0x38bc <STEPPER_voidCW+0x92>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
		_delay_ms(delay);
	}

}
    3d06:	ce 5b       	subi	r28, 0xBE	; 190
    3d08:	df 4f       	sbci	r29, 0xFF	; 255
    3d0a:	0f b6       	in	r0, 0x3f	; 63
    3d0c:	f8 94       	cli
    3d0e:	de bf       	out	0x3e, r29	; 62
    3d10:	0f be       	out	0x3f, r0	; 63
    3d12:	cd bf       	out	0x3d, r28	; 61
    3d14:	cf 91       	pop	r28
    3d16:	df 91       	pop	r29
    3d18:	08 95       	ret

00003d1a <STEPPER_voidACW>:

void STEPPER_voidACW(u16 angle)
{
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62
    3d22:	ee 97       	sbiw	r28, 0x3e	; 62
    3d24:	0f b6       	in	r0, 0x3f	; 63
    3d26:	f8 94       	cli
    3d28:	de bf       	out	0x3e, r29	; 62
    3d2a:	0f be       	out	0x3f, r0	; 63
    3d2c:	cd bf       	out	0x3d, r28	; 61
    3d2e:	9e af       	std	Y+62, r25	; 0x3e
    3d30:	8d af       	std	Y+61, r24	; 0x3d

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
    3d32:	8d ad       	ldd	r24, Y+61	; 0x3d
    3d34:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d36:	cc 01       	movw	r24, r24
    3d38:	a0 e0       	ldi	r26, 0x00	; 0
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	bc 01       	movw	r22, r24
    3d3e:	cd 01       	movw	r24, r26
    3d40:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	bc 01       	movw	r22, r24
    3d4a:	cd 01       	movw	r24, r26
    3d4c:	2c eb       	ldi	r18, 0xBC	; 188
    3d4e:	3c ec       	ldi	r19, 0xCC	; 204
    3d50:	40 e3       	ldi	r20, 0x30	; 48
    3d52:	5e e3       	ldi	r21, 0x3E	; 62
    3d54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d58:	dc 01       	movw	r26, r24
    3d5a:	cb 01       	movw	r24, r22
    3d5c:	bc 01       	movw	r22, r24
    3d5e:	cd 01       	movw	r24, r26
    3d60:	20 e0       	ldi	r18, 0x00	; 0
    3d62:	30 e0       	ldi	r19, 0x00	; 0
    3d64:	40 e8       	ldi	r20, 0x80	; 128
    3d66:	50 e4       	ldi	r21, 0x40	; 64
    3d68:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	bc 01       	movw	r22, r24
    3d72:	cd 01       	movw	r24, r26
    3d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	9c af       	std	Y+60, r25	; 0x3c
    3d7e:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    3d80:	1a ae       	std	Y+58, r1	; 0x3a
    3d82:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3d84:	1a ae       	std	Y+58, r1	; 0x3a
    3d86:	19 ae       	std	Y+57, r1	; 0x39
    3d88:	1d c2       	rjmp	.+1082   	; 0x41c4 <STEPPER_voidACW+0x4aa>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	40 e0       	ldi	r20, 0x00	; 0
    3d90:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	61 e0       	ldi	r22, 0x01	; 1
    3d98:	41 e0       	ldi	r20, 0x01	; 1
    3d9a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	62 e0       	ldi	r22, 0x02	; 2
    3da2:	41 e0       	ldi	r20, 0x01	; 1
    3da4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3da8:	81 e0       	ldi	r24, 0x01	; 1
    3daa:	63 e0       	ldi	r22, 0x03	; 3
    3dac:	41 e0       	ldi	r20, 0x01	; 1
    3dae:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	a0 e2       	ldi	r26, 0x20	; 32
    3db8:	b1 e4       	ldi	r27, 0x41	; 65
    3dba:	8d ab       	std	Y+53, r24	; 0x35
    3dbc:	9e ab       	std	Y+54, r25	; 0x36
    3dbe:	af ab       	std	Y+55, r26	; 0x37
    3dc0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc2:	6d a9       	ldd	r22, Y+53	; 0x35
    3dc4:	7e a9       	ldd	r23, Y+54	; 0x36
    3dc6:	8f a9       	ldd	r24, Y+55	; 0x37
    3dc8:	98 ad       	ldd	r25, Y+56	; 0x38
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	4a ef       	ldi	r20, 0xFA	; 250
    3dd0:	54 e4       	ldi	r21, 0x44	; 68
    3dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	89 ab       	std	Y+49, r24	; 0x31
    3ddc:	9a ab       	std	Y+50, r25	; 0x32
    3dde:	ab ab       	std	Y+51, r26	; 0x33
    3de0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3de2:	69 a9       	ldd	r22, Y+49	; 0x31
    3de4:	7a a9       	ldd	r23, Y+50	; 0x32
    3de6:	8b a9       	ldd	r24, Y+51	; 0x33
    3de8:	9c a9       	ldd	r25, Y+52	; 0x34
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e8       	ldi	r20, 0x80	; 128
    3df0:	5f e3       	ldi	r21, 0x3F	; 63
    3df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3df6:	88 23       	and	r24, r24
    3df8:	2c f4       	brge	.+10     	; 0x3e04 <STEPPER_voidACW+0xea>
		__ticks = 1;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	98 ab       	std	Y+48, r25	; 0x30
    3e00:	8f a7       	std	Y+47, r24	; 0x2f
    3e02:	3f c0       	rjmp	.+126    	; 0x3e82 <STEPPER_voidACW+0x168>
	else if (__tmp > 65535)
    3e04:	69 a9       	ldd	r22, Y+49	; 0x31
    3e06:	7a a9       	ldd	r23, Y+50	; 0x32
    3e08:	8b a9       	ldd	r24, Y+51	; 0x33
    3e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	3f ef       	ldi	r19, 0xFF	; 255
    3e10:	4f e7       	ldi	r20, 0x7F	; 127
    3e12:	57 e4       	ldi	r21, 0x47	; 71
    3e14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e18:	18 16       	cp	r1, r24
    3e1a:	4c f5       	brge	.+82     	; 0x3e6e <STEPPER_voidACW+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1c:	6d a9       	ldd	r22, Y+53	; 0x35
    3e1e:	7e a9       	ldd	r23, Y+54	; 0x36
    3e20:	8f a9       	ldd	r24, Y+55	; 0x37
    3e22:	98 ad       	ldd	r25, Y+56	; 0x38
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e2       	ldi	r20, 0x20	; 32
    3e2a:	51 e4       	ldi	r21, 0x41	; 65
    3e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	98 ab       	std	Y+48, r25	; 0x30
    3e42:	8f a7       	std	Y+47, r24	; 0x2f
    3e44:	0f c0       	rjmp	.+30     	; 0x3e64 <STEPPER_voidACW+0x14a>
    3e46:	88 ec       	ldi	r24, 0xC8	; 200
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	9e a7       	std	Y+46, r25	; 0x2e
    3e4c:	8d a7       	std	Y+45, r24	; 0x2d
    3e4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e50:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	f1 f7       	brne	.-4      	; 0x3e52 <STEPPER_voidACW+0x138>
    3e56:	9e a7       	std	Y+46, r25	; 0x2e
    3e58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e5c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	98 ab       	std	Y+48, r25	; 0x30
    3e62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e66:	98 a9       	ldd	r25, Y+48	; 0x30
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	69 f7       	brne	.-38     	; 0x3e46 <STEPPER_voidACW+0x12c>
    3e6c:	14 c0       	rjmp	.+40     	; 0x3e96 <STEPPER_voidACW+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    3e70:	7a a9       	ldd	r23, Y+50	; 0x32
    3e72:	8b a9       	ldd	r24, Y+51	; 0x33
    3e74:	9c a9       	ldd	r25, Y+52	; 0x34
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	98 ab       	std	Y+48, r25	; 0x30
    3e80:	8f a7       	std	Y+47, r24	; 0x2f
    3e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e84:	98 a9       	ldd	r25, Y+48	; 0x30
    3e86:	9c a7       	std	Y+44, r25	; 0x2c
    3e88:	8b a7       	std	Y+43, r24	; 0x2b
    3e8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <STEPPER_voidACW+0x174>
    3e92:	9c a7       	std	Y+44, r25	; 0x2c
    3e94:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	41 e0       	ldi	r20, 0x01	; 1
    3e9c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	61 e0       	ldi	r22, 0x01	; 1
    3ea4:	41 e0       	ldi	r20, 0x01	; 1
    3ea6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	62 e0       	ldi	r22, 0x02	; 2
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	63 e0       	ldi	r22, 0x03	; 3
    3eb8:	40 e0       	ldi	r20, 0x00	; 0
    3eba:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    3ebe:	80 e0       	ldi	r24, 0x00	; 0
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	a0 e2       	ldi	r26, 0x20	; 32
    3ec4:	b1 e4       	ldi	r27, 0x41	; 65
    3ec6:	8f a3       	std	Y+39, r24	; 0x27
    3ec8:	98 a7       	std	Y+40, r25	; 0x28
    3eca:	a9 a7       	std	Y+41, r26	; 0x29
    3ecc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ece:	6f a1       	ldd	r22, Y+39	; 0x27
    3ed0:	78 a5       	ldd	r23, Y+40	; 0x28
    3ed2:	89 a5       	ldd	r24, Y+41	; 0x29
    3ed4:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	4a ef       	ldi	r20, 0xFA	; 250
    3edc:	54 e4       	ldi	r21, 0x44	; 68
    3ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	8b a3       	std	Y+35, r24	; 0x23
    3ee8:	9c a3       	std	Y+36, r25	; 0x24
    3eea:	ad a3       	std	Y+37, r26	; 0x25
    3eec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3eee:	6b a1       	ldd	r22, Y+35	; 0x23
    3ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    3ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    3ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef6:	20 e0       	ldi	r18, 0x00	; 0
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e8       	ldi	r20, 0x80	; 128
    3efc:	5f e3       	ldi	r21, 0x3F	; 63
    3efe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f02:	88 23       	and	r24, r24
    3f04:	2c f4       	brge	.+10     	; 0x3f10 <STEPPER_voidACW+0x1f6>
		__ticks = 1;
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	9a a3       	std	Y+34, r25	; 0x22
    3f0c:	89 a3       	std	Y+33, r24	; 0x21
    3f0e:	3f c0       	rjmp	.+126    	; 0x3f8e <STEPPER_voidACW+0x274>
	else if (__tmp > 65535)
    3f10:	6b a1       	ldd	r22, Y+35	; 0x23
    3f12:	7c a1       	ldd	r23, Y+36	; 0x24
    3f14:	8d a1       	ldd	r24, Y+37	; 0x25
    3f16:	9e a1       	ldd	r25, Y+38	; 0x26
    3f18:	20 e0       	ldi	r18, 0x00	; 0
    3f1a:	3f ef       	ldi	r19, 0xFF	; 255
    3f1c:	4f e7       	ldi	r20, 0x7F	; 127
    3f1e:	57 e4       	ldi	r21, 0x47	; 71
    3f20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f24:	18 16       	cp	r1, r24
    3f26:	4c f5       	brge	.+82     	; 0x3f7a <STEPPER_voidACW+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f28:	6f a1       	ldd	r22, Y+39	; 0x27
    3f2a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f2c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e2       	ldi	r20, 0x20	; 32
    3f36:	51 e4       	ldi	r21, 0x41	; 65
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f48:	dc 01       	movw	r26, r24
    3f4a:	cb 01       	movw	r24, r22
    3f4c:	9a a3       	std	Y+34, r25	; 0x22
    3f4e:	89 a3       	std	Y+33, r24	; 0x21
    3f50:	0f c0       	rjmp	.+30     	; 0x3f70 <STEPPER_voidACW+0x256>
    3f52:	88 ec       	ldi	r24, 0xC8	; 200
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	98 a3       	std	Y+32, r25	; 0x20
    3f58:	8f 8f       	std	Y+31, r24	; 0x1f
    3f5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f5c:	98 a1       	ldd	r25, Y+32	; 0x20
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
    3f60:	f1 f7       	brne	.-4      	; 0x3f5e <STEPPER_voidACW+0x244>
    3f62:	98 a3       	std	Y+32, r25	; 0x20
    3f64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f66:	89 a1       	ldd	r24, Y+33	; 0x21
    3f68:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	9a a3       	std	Y+34, r25	; 0x22
    3f6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f70:	89 a1       	ldd	r24, Y+33	; 0x21
    3f72:	9a a1       	ldd	r25, Y+34	; 0x22
    3f74:	00 97       	sbiw	r24, 0x00	; 0
    3f76:	69 f7       	brne	.-38     	; 0x3f52 <STEPPER_voidACW+0x238>
    3f78:	14 c0       	rjmp	.+40     	; 0x3fa2 <STEPPER_voidACW+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f7a:	6b a1       	ldd	r22, Y+35	; 0x23
    3f7c:	7c a1       	ldd	r23, Y+36	; 0x24
    3f7e:	8d a1       	ldd	r24, Y+37	; 0x25
    3f80:	9e a1       	ldd	r25, Y+38	; 0x26
    3f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f86:	dc 01       	movw	r26, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	9a a3       	std	Y+34, r25	; 0x22
    3f8c:	89 a3       	std	Y+33, r24	; 0x21
    3f8e:	89 a1       	ldd	r24, Y+33	; 0x21
    3f90:	9a a1       	ldd	r25, Y+34	; 0x22
    3f92:	9e 8f       	std	Y+30, r25	; 0x1e
    3f94:	8d 8f       	std	Y+29, r24	; 0x1d
    3f96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <STEPPER_voidACW+0x280>
    3f9e:	9e 8f       	std	Y+30, r25	; 0x1e
    3fa0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	60 e0       	ldi	r22, 0x00	; 0
    3fa6:	41 e0       	ldi	r20, 0x01	; 1
    3fa8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	61 e0       	ldi	r22, 0x01	; 1
    3fb0:	41 e0       	ldi	r20, 0x01	; 1
    3fb2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3fb6:	81 e0       	ldi	r24, 0x01	; 1
    3fb8:	62 e0       	ldi	r22, 0x02	; 2
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	63 e0       	ldi	r22, 0x03	; 3
    3fc4:	41 e0       	ldi	r20, 0x01	; 1
    3fc6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    3fca:	80 e0       	ldi	r24, 0x00	; 0
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	a0 e2       	ldi	r26, 0x20	; 32
    3fd0:	b1 e4       	ldi	r27, 0x41	; 65
    3fd2:	89 8f       	std	Y+25, r24	; 0x19
    3fd4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fd6:	ab 8f       	std	Y+27, r26	; 0x1b
    3fd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fda:	69 8d       	ldd	r22, Y+25	; 0x19
    3fdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3fe2:	20 e0       	ldi	r18, 0x00	; 0
    3fe4:	30 e0       	ldi	r19, 0x00	; 0
    3fe6:	4a ef       	ldi	r20, 0xFA	; 250
    3fe8:	54 e4       	ldi	r21, 0x44	; 68
    3fea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	8d 8b       	std	Y+21, r24	; 0x15
    3ff4:	9e 8b       	std	Y+22, r25	; 0x16
    3ff6:	af 8b       	std	Y+23, r26	; 0x17
    3ff8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    3ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    4000:	98 8d       	ldd	r25, Y+24	; 0x18
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	40 e8       	ldi	r20, 0x80	; 128
    4008:	5f e3       	ldi	r21, 0x3F	; 63
    400a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    400e:	88 23       	and	r24, r24
    4010:	2c f4       	brge	.+10     	; 0x401c <STEPPER_voidACW+0x302>
		__ticks = 1;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	90 e0       	ldi	r25, 0x00	; 0
    4016:	9c 8b       	std	Y+20, r25	; 0x14
    4018:	8b 8b       	std	Y+19, r24	; 0x13
    401a:	3f c0       	rjmp	.+126    	; 0x409a <STEPPER_voidACW+0x380>
	else if (__tmp > 65535)
    401c:	6d 89       	ldd	r22, Y+21	; 0x15
    401e:	7e 89       	ldd	r23, Y+22	; 0x16
    4020:	8f 89       	ldd	r24, Y+23	; 0x17
    4022:	98 8d       	ldd	r25, Y+24	; 0x18
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	3f ef       	ldi	r19, 0xFF	; 255
    4028:	4f e7       	ldi	r20, 0x7F	; 127
    402a:	57 e4       	ldi	r21, 0x47	; 71
    402c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4030:	18 16       	cp	r1, r24
    4032:	4c f5       	brge	.+82     	; 0x4086 <STEPPER_voidACW+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4034:	69 8d       	ldd	r22, Y+25	; 0x19
    4036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    403a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    403c:	20 e0       	ldi	r18, 0x00	; 0
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	40 e2       	ldi	r20, 0x20	; 32
    4042:	51 e4       	ldi	r21, 0x41	; 65
    4044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4048:	dc 01       	movw	r26, r24
    404a:	cb 01       	movw	r24, r22
    404c:	bc 01       	movw	r22, r24
    404e:	cd 01       	movw	r24, r26
    4050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4054:	dc 01       	movw	r26, r24
    4056:	cb 01       	movw	r24, r22
    4058:	9c 8b       	std	Y+20, r25	; 0x14
    405a:	8b 8b       	std	Y+19, r24	; 0x13
    405c:	0f c0       	rjmp	.+30     	; 0x407c <STEPPER_voidACW+0x362>
    405e:	88 ec       	ldi	r24, 0xC8	; 200
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	9a 8b       	std	Y+18, r25	; 0x12
    4064:	89 8b       	std	Y+17, r24	; 0x11
    4066:	89 89       	ldd	r24, Y+17	; 0x11
    4068:	9a 89       	ldd	r25, Y+18	; 0x12
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	f1 f7       	brne	.-4      	; 0x406a <STEPPER_voidACW+0x350>
    406e:	9a 8b       	std	Y+18, r25	; 0x12
    4070:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4072:	8b 89       	ldd	r24, Y+19	; 0x13
    4074:	9c 89       	ldd	r25, Y+20	; 0x14
    4076:	01 97       	sbiw	r24, 0x01	; 1
    4078:	9c 8b       	std	Y+20, r25	; 0x14
    407a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407c:	8b 89       	ldd	r24, Y+19	; 0x13
    407e:	9c 89       	ldd	r25, Y+20	; 0x14
    4080:	00 97       	sbiw	r24, 0x00	; 0
    4082:	69 f7       	brne	.-38     	; 0x405e <STEPPER_voidACW+0x344>
    4084:	14 c0       	rjmp	.+40     	; 0x40ae <STEPPER_voidACW+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4086:	6d 89       	ldd	r22, Y+21	; 0x15
    4088:	7e 89       	ldd	r23, Y+22	; 0x16
    408a:	8f 89       	ldd	r24, Y+23	; 0x17
    408c:	98 8d       	ldd	r25, Y+24	; 0x18
    408e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	9c 8b       	std	Y+20, r25	; 0x14
    4098:	8b 8b       	std	Y+19, r24	; 0x13
    409a:	8b 89       	ldd	r24, Y+19	; 0x13
    409c:	9c 89       	ldd	r25, Y+20	; 0x14
    409e:	98 8b       	std	Y+16, r25	; 0x10
    40a0:	8f 87       	std	Y+15, r24	; 0x0f
    40a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40a4:	98 89       	ldd	r25, Y+16	; 0x10
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	f1 f7       	brne	.-4      	; 0x40a6 <STEPPER_voidACW+0x38c>
    40aa:	98 8b       	std	Y+16, r25	; 0x10
    40ac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	41 e0       	ldi	r20, 0x01	; 1
    40b4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	40 e0       	ldi	r20, 0x00	; 0
    40be:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	62 e0       	ldi	r22, 0x02	; 2
    40c6:	41 e0       	ldi	r20, 0x01	; 1
    40c8:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	63 e0       	ldi	r22, 0x03	; 3
    40d0:	41 e0       	ldi	r20, 0x01	; 1
    40d2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	a0 e2       	ldi	r26, 0x20	; 32
    40dc:	b1 e4       	ldi	r27, 0x41	; 65
    40de:	8b 87       	std	Y+11, r24	; 0x0b
    40e0:	9c 87       	std	Y+12, r25	; 0x0c
    40e2:	ad 87       	std	Y+13, r26	; 0x0d
    40e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    40e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    40ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ee:	20 e0       	ldi	r18, 0x00	; 0
    40f0:	30 e0       	ldi	r19, 0x00	; 0
    40f2:	4a ef       	ldi	r20, 0xFA	; 250
    40f4:	54 e4       	ldi	r21, 0x44	; 68
    40f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	8f 83       	std	Y+7, r24	; 0x07
    4100:	98 87       	std	Y+8, r25	; 0x08
    4102:	a9 87       	std	Y+9, r26	; 0x09
    4104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4106:	6f 81       	ldd	r22, Y+7	; 0x07
    4108:	78 85       	ldd	r23, Y+8	; 0x08
    410a:	89 85       	ldd	r24, Y+9	; 0x09
    410c:	9a 85       	ldd	r25, Y+10	; 0x0a
    410e:	20 e0       	ldi	r18, 0x00	; 0
    4110:	30 e0       	ldi	r19, 0x00	; 0
    4112:	40 e8       	ldi	r20, 0x80	; 128
    4114:	5f e3       	ldi	r21, 0x3F	; 63
    4116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    411a:	88 23       	and	r24, r24
    411c:	2c f4       	brge	.+10     	; 0x4128 <STEPPER_voidACW+0x40e>
		__ticks = 1;
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	90 e0       	ldi	r25, 0x00	; 0
    4122:	9e 83       	std	Y+6, r25	; 0x06
    4124:	8d 83       	std	Y+5, r24	; 0x05
    4126:	3f c0       	rjmp	.+126    	; 0x41a6 <STEPPER_voidACW+0x48c>
	else if (__tmp > 65535)
    4128:	6f 81       	ldd	r22, Y+7	; 0x07
    412a:	78 85       	ldd	r23, Y+8	; 0x08
    412c:	89 85       	ldd	r24, Y+9	; 0x09
    412e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4130:	20 e0       	ldi	r18, 0x00	; 0
    4132:	3f ef       	ldi	r19, 0xFF	; 255
    4134:	4f e7       	ldi	r20, 0x7F	; 127
    4136:	57 e4       	ldi	r21, 0x47	; 71
    4138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    413c:	18 16       	cp	r1, r24
    413e:	4c f5       	brge	.+82     	; 0x4192 <STEPPER_voidACW+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4140:	6b 85       	ldd	r22, Y+11	; 0x0b
    4142:	7c 85       	ldd	r23, Y+12	; 0x0c
    4144:	8d 85       	ldd	r24, Y+13	; 0x0d
    4146:	9e 85       	ldd	r25, Y+14	; 0x0e
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	40 e2       	ldi	r20, 0x20	; 32
    414e:	51 e4       	ldi	r21, 0x41	; 65
    4150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	bc 01       	movw	r22, r24
    415a:	cd 01       	movw	r24, r26
    415c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	9e 83       	std	Y+6, r25	; 0x06
    4166:	8d 83       	std	Y+5, r24	; 0x05
    4168:	0f c0       	rjmp	.+30     	; 0x4188 <STEPPER_voidACW+0x46e>
    416a:	88 ec       	ldi	r24, 0xC8	; 200
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	9c 83       	std	Y+4, r25	; 0x04
    4170:	8b 83       	std	Y+3, r24	; 0x03
    4172:	8b 81       	ldd	r24, Y+3	; 0x03
    4174:	9c 81       	ldd	r25, Y+4	; 0x04
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	f1 f7       	brne	.-4      	; 0x4176 <STEPPER_voidACW+0x45c>
    417a:	9c 83       	std	Y+4, r25	; 0x04
    417c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    417e:	8d 81       	ldd	r24, Y+5	; 0x05
    4180:	9e 81       	ldd	r25, Y+6	; 0x06
    4182:	01 97       	sbiw	r24, 0x01	; 1
    4184:	9e 83       	std	Y+6, r25	; 0x06
    4186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4188:	8d 81       	ldd	r24, Y+5	; 0x05
    418a:	9e 81       	ldd	r25, Y+6	; 0x06
    418c:	00 97       	sbiw	r24, 0x00	; 0
    418e:	69 f7       	brne	.-38     	; 0x416a <STEPPER_voidACW+0x450>
    4190:	14 c0       	rjmp	.+40     	; 0x41ba <STEPPER_voidACW+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4192:	6f 81       	ldd	r22, Y+7	; 0x07
    4194:	78 85       	ldd	r23, Y+8	; 0x08
    4196:	89 85       	ldd	r24, Y+9	; 0x09
    4198:	9a 85       	ldd	r25, Y+10	; 0x0a
    419a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	9e 83       	std	Y+6, r25	; 0x06
    41a4:	8d 83       	std	Y+5, r24	; 0x05
    41a6:	8d 81       	ldd	r24, Y+5	; 0x05
    41a8:	9e 81       	ldd	r25, Y+6	; 0x06
    41aa:	9a 83       	std	Y+2, r25	; 0x02
    41ac:	89 83       	std	Y+1, r24	; 0x01
    41ae:	89 81       	ldd	r24, Y+1	; 0x01
    41b0:	9a 81       	ldd	r25, Y+2	; 0x02
    41b2:	01 97       	sbiw	r24, 0x01	; 1
    41b4:	f1 f7       	brne	.-4      	; 0x41b2 <STEPPER_voidACW+0x498>
    41b6:	9a 83       	std	Y+2, r25	; 0x02
    41b8:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidACW(u16 angle)
{

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    41ba:	89 ad       	ldd	r24, Y+57	; 0x39
    41bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    41be:	01 96       	adiw	r24, 0x01	; 1
    41c0:	9a af       	std	Y+58, r25	; 0x3a
    41c2:	89 af       	std	Y+57, r24	; 0x39
    41c4:	29 ad       	ldd	r18, Y+57	; 0x39
    41c6:	3a ad       	ldd	r19, Y+58	; 0x3a
    41c8:	8b ad       	ldd	r24, Y+59	; 0x3b
    41ca:	9c ad       	ldd	r25, Y+60	; 0x3c
    41cc:	28 17       	cp	r18, r24
    41ce:	39 07       	cpc	r19, r25
    41d0:	08 f4       	brcc	.+2      	; 0x41d4 <STEPPER_voidACW+0x4ba>
    41d2:	db cd       	rjmp	.-1098   	; 0x3d8a <STEPPER_voidACW+0x70>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
		_delay_ms(delay);
	}

}
    41d4:	ee 96       	adiw	r28, 0x3e	; 62
    41d6:	0f b6       	in	r0, 0x3f	; 63
    41d8:	f8 94       	cli
    41da:	de bf       	out	0x3e, r29	; 62
    41dc:	0f be       	out	0x3f, r0	; 63
    41de:	cd bf       	out	0x3d, r28	; 61
    41e0:	cf 91       	pop	r28
    41e2:	df 91       	pop	r29
    41e4:	08 95       	ret

000041e6 <SEVSEG_voidInit>:
 *      Author: salma
 */
#include "SevenSeg_Interface.h"
u8 SevSegValue[10]=SEVSEGVALUE;
void SEVSEG_voidInit()
{
    41e6:	df 93       	push	r29
    41e8:	cf 93       	push	r28
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SevSeg1,0xff);
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	6f ef       	ldi	r22, 0xFF	; 255
    41f2:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(SevSeg2,0xff);
    41f6:	82 e0       	ldi	r24, 0x02	; 2
    41f8:	6f ef       	ldi	r22, 0xFF	; 255
    41fa:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(SevSeg1,OFF);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	6f ef       	ldi	r22, 0xFF	; 255
    4202:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	6f ef       	ldi	r22, 0xFF	; 255
    420a:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
}
    420e:	cf 91       	pop	r28
    4210:	df 91       	pop	r29
    4212:	08 95       	ret

00004214 <SEVSEG_voidSetNum>:

void SEVSEG_voidSetNum(u8 num)
{
    4214:	df 93       	push	r29
    4216:	cf 93       	push	r28
    4218:	00 d0       	rcall	.+0      	; 0x421a <SEVSEG_voidSetNum+0x6>
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	8a 83       	std	Y+2, r24	; 0x02

	if (num<10)
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	8a 30       	cpi	r24, 0x0A	; 10
    4224:	80 f4       	brcc	.+32     	; 0x4246 <SEVSEG_voidSetNum+0x32>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    4226:	8a 81       	ldd	r24, Y+2	; 0x02
    4228:	88 2f       	mov	r24, r24
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	fc 01       	movw	r30, r24
    422e:	e8 59       	subi	r30, 0x98	; 152
    4230:	fe 4f       	sbci	r31, 0xFE	; 254
    4232:	90 81       	ld	r25, Z
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	69 2f       	mov	r22, r25
    4238:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,OFF);
    423c:	82 e0       	ldi	r24, 0x02	; 2
    423e:	6f ef       	ldi	r22, 0xFF	; 255
    4240:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
    4244:	31 c0       	rjmp	.+98     	; 0x42a8 <SEVSEG_voidSetNum+0x94>
	}
	else if (num==10)
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	8a 30       	cpi	r24, 0x0A	; 10
    424a:	69 f4       	brne	.+26     	; 0x4266 <SEVSEG_voidSetNum+0x52>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[0]);
    424c:	90 91 68 01 	lds	r25, 0x0168
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	69 2f       	mov	r22, r25
    4254:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
    4258:	90 91 69 01 	lds	r25, 0x0169
    425c:	82 e0       	ldi	r24, 0x02	; 2
    425e:	69 2f       	mov	r22, r25
    4260:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
    4264:	21 c0       	rjmp	.+66     	; 0x42a8 <SEVSEG_voidSetNum+0x94>
	}
	else
	{
		u8 counter = 0  ;
    4266:	19 82       	std	Y+1, r1	; 0x01
    4268:	06 c0       	rjmp	.+12     	; 0x4276 <SEVSEG_voidSetNum+0x62>
		while(num>=10)
		{
			counter++;
    426a:	89 81       	ldd	r24, Y+1	; 0x01
    426c:	8f 5f       	subi	r24, 0xFF	; 255
    426e:	89 83       	std	Y+1, r24	; 0x01
			num-=10;
    4270:	8a 81       	ldd	r24, Y+2	; 0x02
    4272:	8a 50       	subi	r24, 0x0A	; 10
    4274:	8a 83       	std	Y+2, r24	; 0x02
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
	}
	else
	{
		u8 counter = 0  ;
		while(num>=10)
    4276:	8a 81       	ldd	r24, Y+2	; 0x02
    4278:	8a 30       	cpi	r24, 0x0A	; 10
    427a:	b8 f7       	brcc	.-18     	; 0x426a <SEVSEG_voidSetNum+0x56>
		{
			counter++;
			num-=10;
		}
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    427c:	8a 81       	ldd	r24, Y+2	; 0x02
    427e:	88 2f       	mov	r24, r24
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	fc 01       	movw	r30, r24
    4284:	e8 59       	subi	r30, 0x98	; 152
    4286:	fe 4f       	sbci	r31, 0xFE	; 254
    4288:	90 81       	ld	r25, Z
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	69 2f       	mov	r22, r25
    428e:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[counter]);
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	88 2f       	mov	r24, r24
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	fc 01       	movw	r30, r24
    429a:	e8 59       	subi	r30, 0x98	; 152
    429c:	fe 4f       	sbci	r31, 0xFE	; 254
    429e:	90 81       	ld	r25, Z
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	69 2f       	mov	r22, r25
    42a4:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	}
}
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	cf 91       	pop	r28
    42ae:	df 91       	pop	r29
    42b0:	08 95       	ret

000042b2 <SEVSEG_voidOff>:
void SEVSEG_voidOff ()
{
    42b2:	df 93       	push	r29
    42b4:	cf 93       	push	r28
    42b6:	cd b7       	in	r28, 0x3d	; 61
    42b8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortValue(SevSeg1,OFF);
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	6f ef       	ldi	r22, 0xFF	; 255
    42be:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    42c2:	82 e0       	ldi	r24, 0x02	; 2
    42c4:	6f ef       	ldi	r22, 0xFF	; 255
    42c6:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	}
    42ca:	cf 91       	pop	r28
    42cc:	df 91       	pop	r29
    42ce:	08 95       	ret

000042d0 <ServoMotor_voidInit>:
 *      Author: salma
 */
#include "ServoMotor_Interface.h"
#include <util/delay.h>
void ServoMotor_voidInit()
{
    42d0:	df 93       	push	r29
    42d2:	cf 93       	push	r28
    42d4:	cd b7       	in	r28, 0x3d	; 61
    42d6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DIO_GroupD,DIO_Pin5,output);
    42d8:	84 e0       	ldi	r24, 0x04	; 4
    42da:	65 e0       	ldi	r22, 0x05	; 5
    42dc:	41 e0       	ldi	r20, 0x01	; 1
    42de:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	T1_voidFastPWMServoInit();
    42e2:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <T1_voidFastPWMServoInit>
}
    42e6:	cf 91       	pop	r28
    42e8:	df 91       	pop	r29
    42ea:	08 95       	ret

000042ec <ServoMotor_voidSetAngle>:
void ServoMotor_voidSetAngle(u8 angle)
{
    42ec:	df 93       	push	r29
    42ee:	cf 93       	push	r28
    42f0:	00 d0       	rcall	.+0      	; 0x42f2 <ServoMotor_voidSetAngle+0x6>
    42f2:	0f 92       	push	r0
    42f4:	cd b7       	in	r28, 0x3d	; 61
    42f6:	de b7       	in	r29, 0x3e	; 62
    42f8:	8b 83       	std	Y+3, r24	; 0x03
	u16 position;
	position = 1000 + ((f32)((f32)angle/MaxAngle))*1000;
    42fa:	8b 81       	ldd	r24, Y+3	; 0x03
    42fc:	88 2f       	mov	r24, r24
    42fe:	90 e0       	ldi	r25, 0x00	; 0
    4300:	a0 e0       	ldi	r26, 0x00	; 0
    4302:	b0 e0       	ldi	r27, 0x00	; 0
    4304:	bc 01       	movw	r22, r24
    4306:	cd 01       	movw	r24, r26
    4308:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    430c:	dc 01       	movw	r26, r24
    430e:	cb 01       	movw	r24, r22
    4310:	bc 01       	movw	r22, r24
    4312:	cd 01       	movw	r24, r26
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	44 e3       	ldi	r20, 0x34	; 52
    431a:	53 e4       	ldi	r21, 0x43	; 67
    431c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	bc 01       	movw	r22, r24
    4326:	cd 01       	movw	r24, r26
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	4a e7       	ldi	r20, 0x7A	; 122
    432e:	54 e4       	ldi	r21, 0x44	; 68
    4330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4334:	dc 01       	movw	r26, r24
    4336:	cb 01       	movw	r24, r22
    4338:	bc 01       	movw	r22, r24
    433a:	cd 01       	movw	r24, r26
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	30 e0       	ldi	r19, 0x00	; 0
    4340:	4a e7       	ldi	r20, 0x7A	; 122
    4342:	54 e4       	ldi	r21, 0x44	; 68
    4344:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	bc 01       	movw	r22, r24
    434e:	cd 01       	movw	r24, r26
    4350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	9a 83       	std	Y+2, r25	; 0x02
    435a:	89 83       	std	Y+1, r24	; 0x01
	T1_voidFastPWMServoSetAngle(position);
    435c:	89 81       	ldd	r24, Y+1	; 0x01
    435e:	9a 81       	ldd	r25, Y+2	; 0x02
    4360:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
}
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	cf 91       	pop	r28
    436c:	df 91       	pop	r29
    436e:	08 95       	ret

00004370 <ServoMotor_voidClockWiseSlow>:

void ServoMotor_voidClockWiseSlow(u8 StartAngle,u8 StopAngle)
{
    4370:	df 93       	push	r29
    4372:	cf 93       	push	r28
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	66 97       	sbiw	r28, 0x16	; 22
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	f8 94       	cli
    437e:	de bf       	out	0x3e, r29	; 62
    4380:	0f be       	out	0x3f, r0	; 63
    4382:	cd bf       	out	0x3d, r28	; 61
    4384:	8d 8b       	std	Y+21, r24	; 0x15
    4386:	6e 8b       	std	Y+22, r22	; 0x16
	u16 StartAnglePosition;
	u16 StopAnglePosition;

	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
    4388:	8d 89       	ldd	r24, Y+21	; 0x15
    438a:	88 2f       	mov	r24, r24
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	a0 e0       	ldi	r26, 0x00	; 0
    4390:	b0 e0       	ldi	r27, 0x00	; 0
    4392:	bc 01       	movw	r22, r24
    4394:	cd 01       	movw	r24, r26
    4396:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	44 e3       	ldi	r20, 0x34	; 52
    43a8:	53 e4       	ldi	r21, 0x43	; 67
    43aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43ae:	dc 01       	movw	r26, r24
    43b0:	cb 01       	movw	r24, r22
    43b2:	bc 01       	movw	r22, r24
    43b4:	cd 01       	movw	r24, r26
    43b6:	20 e0       	ldi	r18, 0x00	; 0
    43b8:	30 e0       	ldi	r19, 0x00	; 0
    43ba:	4a e7       	ldi	r20, 0x7A	; 122
    43bc:	54 e4       	ldi	r21, 0x44	; 68
    43be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43c2:	dc 01       	movw	r26, r24
    43c4:	cb 01       	movw	r24, r22
    43c6:	bc 01       	movw	r22, r24
    43c8:	cd 01       	movw	r24, r26
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	4a e7       	ldi	r20, 0x7A	; 122
    43d0:	54 e4       	ldi	r21, 0x44	; 68
    43d2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	9c 8b       	std	Y+20, r25	; 0x14
    43e8:	8b 8b       	std	Y+19, r24	; 0x13
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
    43ea:	8e 89       	ldd	r24, Y+22	; 0x16
    43ec:	88 2f       	mov	r24, r24
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	a0 e0       	ldi	r26, 0x00	; 0
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	bc 01       	movw	r22, r24
    43f6:	cd 01       	movw	r24, r26
    43f8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    43fc:	dc 01       	movw	r26, r24
    43fe:	cb 01       	movw	r24, r22
    4400:	bc 01       	movw	r22, r24
    4402:	cd 01       	movw	r24, r26
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	44 e3       	ldi	r20, 0x34	; 52
    440a:	53 e4       	ldi	r21, 0x43	; 67
    440c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	bc 01       	movw	r22, r24
    4416:	cd 01       	movw	r24, r26
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	4a e7       	ldi	r20, 0x7A	; 122
    441e:	54 e4       	ldi	r21, 0x44	; 68
    4420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	bc 01       	movw	r22, r24
    442a:	cd 01       	movw	r24, r26
    442c:	20 e0       	ldi	r18, 0x00	; 0
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	4a e7       	ldi	r20, 0x7A	; 122
    4432:	54 e4       	ldi	r21, 0x44	; 68
    4434:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4438:	dc 01       	movw	r26, r24
    443a:	cb 01       	movw	r24, r22
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	9a 8b       	std	Y+18, r25	; 0x12
    444a:	89 8b       	std	Y+17, r24	; 0x11
	for (u16 i =StartAnglePosition ; i<=StopAnglePosition;i+=5){
    444c:	8b 89       	ldd	r24, Y+19	; 0x13
    444e:	9c 89       	ldd	r25, Y+20	; 0x14
    4450:	98 8b       	std	Y+16, r25	; 0x10
    4452:	8f 87       	std	Y+15, r24	; 0x0f
    4454:	7b c0       	rjmp	.+246    	; 0x454c <ServoMotor_voidClockWiseSlow+0x1dc>
		T1_voidFastPWMServoSetAngle(i);
    4456:	8f 85       	ldd	r24, Y+15	; 0x0f
    4458:	98 89       	ldd	r25, Y+16	; 0x10
    445a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
    445e:	80 e0       	ldi	r24, 0x00	; 0
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	a0 e2       	ldi	r26, 0x20	; 32
    4464:	b1 e4       	ldi	r27, 0x41	; 65
    4466:	8b 87       	std	Y+11, r24	; 0x0b
    4468:	9c 87       	std	Y+12, r25	; 0x0c
    446a:	ad 87       	std	Y+13, r26	; 0x0d
    446c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    446e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4470:	7c 85       	ldd	r23, Y+12	; 0x0c
    4472:	8d 85       	ldd	r24, Y+13	; 0x0d
    4474:	9e 85       	ldd	r25, Y+14	; 0x0e
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	4a ef       	ldi	r20, 0xFA	; 250
    447c:	54 e4       	ldi	r21, 0x44	; 68
    447e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	8f 83       	std	Y+7, r24	; 0x07
    4488:	98 87       	std	Y+8, r25	; 0x08
    448a:	a9 87       	std	Y+9, r26	; 0x09
    448c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    448e:	6f 81       	ldd	r22, Y+7	; 0x07
    4490:	78 85       	ldd	r23, Y+8	; 0x08
    4492:	89 85       	ldd	r24, Y+9	; 0x09
    4494:	9a 85       	ldd	r25, Y+10	; 0x0a
    4496:	20 e0       	ldi	r18, 0x00	; 0
    4498:	30 e0       	ldi	r19, 0x00	; 0
    449a:	40 e8       	ldi	r20, 0x80	; 128
    449c:	5f e3       	ldi	r21, 0x3F	; 63
    449e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44a2:	88 23       	and	r24, r24
    44a4:	2c f4       	brge	.+10     	; 0x44b0 <ServoMotor_voidClockWiseSlow+0x140>
		__ticks = 1;
    44a6:	81 e0       	ldi	r24, 0x01	; 1
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9e 83       	std	Y+6, r25	; 0x06
    44ac:	8d 83       	std	Y+5, r24	; 0x05
    44ae:	3f c0       	rjmp	.+126    	; 0x452e <ServoMotor_voidClockWiseSlow+0x1be>
	else if (__tmp > 65535)
    44b0:	6f 81       	ldd	r22, Y+7	; 0x07
    44b2:	78 85       	ldd	r23, Y+8	; 0x08
    44b4:	89 85       	ldd	r24, Y+9	; 0x09
    44b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44b8:	20 e0       	ldi	r18, 0x00	; 0
    44ba:	3f ef       	ldi	r19, 0xFF	; 255
    44bc:	4f e7       	ldi	r20, 0x7F	; 127
    44be:	57 e4       	ldi	r21, 0x47	; 71
    44c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44c4:	18 16       	cp	r1, r24
    44c6:	4c f5       	brge	.+82     	; 0x451a <ServoMotor_voidClockWiseSlow+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    44ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    44cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	30 e0       	ldi	r19, 0x00	; 0
    44d4:	40 e2       	ldi	r20, 0x20	; 32
    44d6:	51 e4       	ldi	r21, 0x41	; 65
    44d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44dc:	dc 01       	movw	r26, r24
    44de:	cb 01       	movw	r24, r22
    44e0:	bc 01       	movw	r22, r24
    44e2:	cd 01       	movw	r24, r26
    44e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	9e 83       	std	Y+6, r25	; 0x06
    44ee:	8d 83       	std	Y+5, r24	; 0x05
    44f0:	0f c0       	rjmp	.+30     	; 0x4510 <ServoMotor_voidClockWiseSlow+0x1a0>
    44f2:	88 ec       	ldi	r24, 0xC8	; 200
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	9c 83       	std	Y+4, r25	; 0x04
    44f8:	8b 83       	std	Y+3, r24	; 0x03
    44fa:	8b 81       	ldd	r24, Y+3	; 0x03
    44fc:	9c 81       	ldd	r25, Y+4	; 0x04
    44fe:	01 97       	sbiw	r24, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <ServoMotor_voidClockWiseSlow+0x18e>
    4502:	9c 83       	std	Y+4, r25	; 0x04
    4504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4506:	8d 81       	ldd	r24, Y+5	; 0x05
    4508:	9e 81       	ldd	r25, Y+6	; 0x06
    450a:	01 97       	sbiw	r24, 0x01	; 1
    450c:	9e 83       	std	Y+6, r25	; 0x06
    450e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4510:	8d 81       	ldd	r24, Y+5	; 0x05
    4512:	9e 81       	ldd	r25, Y+6	; 0x06
    4514:	00 97       	sbiw	r24, 0x00	; 0
    4516:	69 f7       	brne	.-38     	; 0x44f2 <ServoMotor_voidClockWiseSlow+0x182>
    4518:	14 c0       	rjmp	.+40     	; 0x4542 <ServoMotor_voidClockWiseSlow+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    451a:	6f 81       	ldd	r22, Y+7	; 0x07
    451c:	78 85       	ldd	r23, Y+8	; 0x08
    451e:	89 85       	ldd	r24, Y+9	; 0x09
    4520:	9a 85       	ldd	r25, Y+10	; 0x0a
    4522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	9e 83       	std	Y+6, r25	; 0x06
    452c:	8d 83       	std	Y+5, r24	; 0x05
    452e:	8d 81       	ldd	r24, Y+5	; 0x05
    4530:	9e 81       	ldd	r25, Y+6	; 0x06
    4532:	9a 83       	std	Y+2, r25	; 0x02
    4534:	89 83       	std	Y+1, r24	; 0x01
    4536:	89 81       	ldd	r24, Y+1	; 0x01
    4538:	9a 81       	ldd	r25, Y+2	; 0x02
    453a:	01 97       	sbiw	r24, 0x01	; 1
    453c:	f1 f7       	brne	.-4      	; 0x453a <ServoMotor_voidClockWiseSlow+0x1ca>
    453e:	9a 83       	std	Y+2, r25	; 0x02
    4540:	89 83       	std	Y+1, r24	; 0x01
	u16 StartAnglePosition;
	u16 StopAnglePosition;

	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
	for (u16 i =StartAnglePosition ; i<=StopAnglePosition;i+=5){
    4542:	8f 85       	ldd	r24, Y+15	; 0x0f
    4544:	98 89       	ldd	r25, Y+16	; 0x10
    4546:	05 96       	adiw	r24, 0x05	; 5
    4548:	98 8b       	std	Y+16, r25	; 0x10
    454a:	8f 87       	std	Y+15, r24	; 0x0f
    454c:	2f 85       	ldd	r18, Y+15	; 0x0f
    454e:	38 89       	ldd	r19, Y+16	; 0x10
    4550:	89 89       	ldd	r24, Y+17	; 0x11
    4552:	9a 89       	ldd	r25, Y+18	; 0x12
    4554:	82 17       	cp	r24, r18
    4556:	93 07       	cpc	r25, r19
    4558:	08 f0       	brcs	.+2      	; 0x455c <ServoMotor_voidClockWiseSlow+0x1ec>
    455a:	7d cf       	rjmp	.-262    	; 0x4456 <ServoMotor_voidClockWiseSlow+0xe6>
		T1_voidFastPWMServoSetAngle(i);
		_delay_ms(10);
	}
}
    455c:	66 96       	adiw	r28, 0x16	; 22
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	f8 94       	cli
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	cf 91       	pop	r28
    456a:	df 91       	pop	r29
    456c:	08 95       	ret

0000456e <ServoMotor_voidAntiClockWiseSlow>:


void ServoMotor_voidAntiClockWiseSlow(u8 StartAngle,u8 StopAngle)
{
    456e:	df 93       	push	r29
    4570:	cf 93       	push	r28
    4572:	cd b7       	in	r28, 0x3d	; 61
    4574:	de b7       	in	r29, 0x3e	; 62
    4576:	66 97       	sbiw	r28, 0x16	; 22
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	f8 94       	cli
    457c:	de bf       	out	0x3e, r29	; 62
    457e:	0f be       	out	0x3f, r0	; 63
    4580:	cd bf       	out	0x3d, r28	; 61
    4582:	8d 8b       	std	Y+21, r24	; 0x15
    4584:	6e 8b       	std	Y+22, r22	; 0x16
	u16 StartAnglePosition;
	u16 StopAnglePosition;
	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
    4586:	8d 89       	ldd	r24, Y+21	; 0x15
    4588:	88 2f       	mov	r24, r24
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	a0 e0       	ldi	r26, 0x00	; 0
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	bc 01       	movw	r22, r24
    4592:	cd 01       	movw	r24, r26
    4594:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4598:	dc 01       	movw	r26, r24
    459a:	cb 01       	movw	r24, r22
    459c:	bc 01       	movw	r22, r24
    459e:	cd 01       	movw	r24, r26
    45a0:	20 e0       	ldi	r18, 0x00	; 0
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	44 e3       	ldi	r20, 0x34	; 52
    45a6:	53 e4       	ldi	r21, 0x43	; 67
    45a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    45ac:	dc 01       	movw	r26, r24
    45ae:	cb 01       	movw	r24, r22
    45b0:	bc 01       	movw	r22, r24
    45b2:	cd 01       	movw	r24, r26
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	4a e7       	ldi	r20, 0x7A	; 122
    45ba:	54 e4       	ldi	r21, 0x44	; 68
    45bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	bc 01       	movw	r22, r24
    45c6:	cd 01       	movw	r24, r26
    45c8:	20 e0       	ldi	r18, 0x00	; 0
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	4a e7       	ldi	r20, 0x7A	; 122
    45ce:	54 e4       	ldi	r21, 0x44	; 68
    45d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    45d4:	dc 01       	movw	r26, r24
    45d6:	cb 01       	movw	r24, r22
    45d8:	bc 01       	movw	r22, r24
    45da:	cd 01       	movw	r24, r26
    45dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e0:	dc 01       	movw	r26, r24
    45e2:	cb 01       	movw	r24, r22
    45e4:	9c 8b       	std	Y+20, r25	; 0x14
    45e6:	8b 8b       	std	Y+19, r24	; 0x13
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
    45e8:	8e 89       	ldd	r24, Y+22	; 0x16
    45ea:	88 2f       	mov	r24, r24
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	a0 e0       	ldi	r26, 0x00	; 0
    45f0:	b0 e0       	ldi	r27, 0x00	; 0
    45f2:	bc 01       	movw	r22, r24
    45f4:	cd 01       	movw	r24, r26
    45f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    45fa:	dc 01       	movw	r26, r24
    45fc:	cb 01       	movw	r24, r22
    45fe:	bc 01       	movw	r22, r24
    4600:	cd 01       	movw	r24, r26
    4602:	20 e0       	ldi	r18, 0x00	; 0
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	44 e3       	ldi	r20, 0x34	; 52
    4608:	53 e4       	ldi	r21, 0x43	; 67
    460a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    460e:	dc 01       	movw	r26, r24
    4610:	cb 01       	movw	r24, r22
    4612:	bc 01       	movw	r22, r24
    4614:	cd 01       	movw	r24, r26
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	4a e7       	ldi	r20, 0x7A	; 122
    461c:	54 e4       	ldi	r21, 0x44	; 68
    461e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	bc 01       	movw	r22, r24
    4628:	cd 01       	movw	r24, r26
    462a:	20 e0       	ldi	r18, 0x00	; 0
    462c:	30 e0       	ldi	r19, 0x00	; 0
    462e:	4a e7       	ldi	r20, 0x7A	; 122
    4630:	54 e4       	ldi	r21, 0x44	; 68
    4632:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4636:	dc 01       	movw	r26, r24
    4638:	cb 01       	movw	r24, r22
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	9a 8b       	std	Y+18, r25	; 0x12
    4648:	89 8b       	std	Y+17, r24	; 0x11
	for (u16 i =StartAnglePosition ; i>=StopAnglePosition ;i-=5){
    464a:	8b 89       	ldd	r24, Y+19	; 0x13
    464c:	9c 89       	ldd	r25, Y+20	; 0x14
    464e:	98 8b       	std	Y+16, r25	; 0x10
    4650:	8f 87       	std	Y+15, r24	; 0x0f
    4652:	7b c0       	rjmp	.+246    	; 0x474a <ServoMotor_voidAntiClockWiseSlow+0x1dc>
		T1_voidFastPWMServoSetAngle(i);
    4654:	8f 85       	ldd	r24, Y+15	; 0x0f
    4656:	98 89       	ldd	r25, Y+16	; 0x10
    4658:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	a0 e2       	ldi	r26, 0x20	; 32
    4662:	b1 e4       	ldi	r27, 0x41	; 65
    4664:	8b 87       	std	Y+11, r24	; 0x0b
    4666:	9c 87       	std	Y+12, r25	; 0x0c
    4668:	ad 87       	std	Y+13, r26	; 0x0d
    466a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    466c:	6b 85       	ldd	r22, Y+11	; 0x0b
    466e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4670:	8d 85       	ldd	r24, Y+13	; 0x0d
    4672:	9e 85       	ldd	r25, Y+14	; 0x0e
    4674:	20 e0       	ldi	r18, 0x00	; 0
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	4a ef       	ldi	r20, 0xFA	; 250
    467a:	54 e4       	ldi	r21, 0x44	; 68
    467c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4680:	dc 01       	movw	r26, r24
    4682:	cb 01       	movw	r24, r22
    4684:	8f 83       	std	Y+7, r24	; 0x07
    4686:	98 87       	std	Y+8, r25	; 0x08
    4688:	a9 87       	std	Y+9, r26	; 0x09
    468a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    468c:	6f 81       	ldd	r22, Y+7	; 0x07
    468e:	78 85       	ldd	r23, Y+8	; 0x08
    4690:	89 85       	ldd	r24, Y+9	; 0x09
    4692:	9a 85       	ldd	r25, Y+10	; 0x0a
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e8       	ldi	r20, 0x80	; 128
    469a:	5f e3       	ldi	r21, 0x3F	; 63
    469c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46a0:	88 23       	and	r24, r24
    46a2:	2c f4       	brge	.+10     	; 0x46ae <ServoMotor_voidAntiClockWiseSlow+0x140>
		__ticks = 1;
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	9e 83       	std	Y+6, r25	; 0x06
    46aa:	8d 83       	std	Y+5, r24	; 0x05
    46ac:	3f c0       	rjmp	.+126    	; 0x472c <ServoMotor_voidAntiClockWiseSlow+0x1be>
	else if (__tmp > 65535)
    46ae:	6f 81       	ldd	r22, Y+7	; 0x07
    46b0:	78 85       	ldd	r23, Y+8	; 0x08
    46b2:	89 85       	ldd	r24, Y+9	; 0x09
    46b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    46b6:	20 e0       	ldi	r18, 0x00	; 0
    46b8:	3f ef       	ldi	r19, 0xFF	; 255
    46ba:	4f e7       	ldi	r20, 0x7F	; 127
    46bc:	57 e4       	ldi	r21, 0x47	; 71
    46be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c2:	18 16       	cp	r1, r24
    46c4:	4c f5       	brge	.+82     	; 0x4718 <ServoMotor_voidAntiClockWiseSlow+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    46c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    46ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    46cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	30 e0       	ldi	r19, 0x00	; 0
    46d2:	40 e2       	ldi	r20, 0x20	; 32
    46d4:	51 e4       	ldi	r21, 0x41	; 65
    46d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46da:	dc 01       	movw	r26, r24
    46dc:	cb 01       	movw	r24, r22
    46de:	bc 01       	movw	r22, r24
    46e0:	cd 01       	movw	r24, r26
    46e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	9e 83       	std	Y+6, r25	; 0x06
    46ec:	8d 83       	std	Y+5, r24	; 0x05
    46ee:	0f c0       	rjmp	.+30     	; 0x470e <ServoMotor_voidAntiClockWiseSlow+0x1a0>
    46f0:	88 ec       	ldi	r24, 0xC8	; 200
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	9c 83       	std	Y+4, r25	; 0x04
    46f6:	8b 83       	std	Y+3, r24	; 0x03
    46f8:	8b 81       	ldd	r24, Y+3	; 0x03
    46fa:	9c 81       	ldd	r25, Y+4	; 0x04
    46fc:	01 97       	sbiw	r24, 0x01	; 1
    46fe:	f1 f7       	brne	.-4      	; 0x46fc <ServoMotor_voidAntiClockWiseSlow+0x18e>
    4700:	9c 83       	std	Y+4, r25	; 0x04
    4702:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4704:	8d 81       	ldd	r24, Y+5	; 0x05
    4706:	9e 81       	ldd	r25, Y+6	; 0x06
    4708:	01 97       	sbiw	r24, 0x01	; 1
    470a:	9e 83       	std	Y+6, r25	; 0x06
    470c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    470e:	8d 81       	ldd	r24, Y+5	; 0x05
    4710:	9e 81       	ldd	r25, Y+6	; 0x06
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	69 f7       	brne	.-38     	; 0x46f0 <ServoMotor_voidAntiClockWiseSlow+0x182>
    4716:	14 c0       	rjmp	.+40     	; 0x4740 <ServoMotor_voidAntiClockWiseSlow+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4718:	6f 81       	ldd	r22, Y+7	; 0x07
    471a:	78 85       	ldd	r23, Y+8	; 0x08
    471c:	89 85       	ldd	r24, Y+9	; 0x09
    471e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4724:	dc 01       	movw	r26, r24
    4726:	cb 01       	movw	r24, r22
    4728:	9e 83       	std	Y+6, r25	; 0x06
    472a:	8d 83       	std	Y+5, r24	; 0x05
    472c:	8d 81       	ldd	r24, Y+5	; 0x05
    472e:	9e 81       	ldd	r25, Y+6	; 0x06
    4730:	9a 83       	std	Y+2, r25	; 0x02
    4732:	89 83       	std	Y+1, r24	; 0x01
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	9a 81       	ldd	r25, Y+2	; 0x02
    4738:	01 97       	sbiw	r24, 0x01	; 1
    473a:	f1 f7       	brne	.-4      	; 0x4738 <ServoMotor_voidAntiClockWiseSlow+0x1ca>
    473c:	9a 83       	std	Y+2, r25	; 0x02
    473e:	89 83       	std	Y+1, r24	; 0x01
{
	u16 StartAnglePosition;
	u16 StopAnglePosition;
	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
	for (u16 i =StartAnglePosition ; i>=StopAnglePosition ;i-=5){
    4740:	8f 85       	ldd	r24, Y+15	; 0x0f
    4742:	98 89       	ldd	r25, Y+16	; 0x10
    4744:	05 97       	sbiw	r24, 0x05	; 5
    4746:	98 8b       	std	Y+16, r25	; 0x10
    4748:	8f 87       	std	Y+15, r24	; 0x0f
    474a:	2f 85       	ldd	r18, Y+15	; 0x0f
    474c:	38 89       	ldd	r19, Y+16	; 0x10
    474e:	89 89       	ldd	r24, Y+17	; 0x11
    4750:	9a 89       	ldd	r25, Y+18	; 0x12
    4752:	28 17       	cp	r18, r24
    4754:	39 07       	cpc	r19, r25
    4756:	08 f0       	brcs	.+2      	; 0x475a <ServoMotor_voidAntiClockWiseSlow+0x1ec>
    4758:	7d cf       	rjmp	.-262    	; 0x4654 <ServoMotor_voidAntiClockWiseSlow+0xe6>
		T1_voidFastPWMServoSetAngle(i);
		_delay_ms(10);
	}
}
    475a:	66 96       	adiw	r28, 0x16	; 22
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	de bf       	out	0x3e, r29	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	cd bf       	out	0x3d, r28	; 61
    4766:	cf 91       	pop	r28
    4768:	df 91       	pop	r29
    476a:	08 95       	ret

0000476c <LED_voidInit>:
 */

#include "Led_Interface.h"
#include <util/delay.h>
void LED_voidInit (u8 Group, u8 pin)
{
    476c:	df 93       	push	r29
    476e:	cf 93       	push	r28
    4770:	00 d0       	rcall	.+0      	; 0x4772 <LED_voidInit+0x6>
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	89 83       	std	Y+1, r24	; 0x01
    4778:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group, pin, Output);
    477a:	89 81       	ldd	r24, Y+1	; 0x01
    477c:	6a 81       	ldd	r22, Y+2	; 0x02
    477e:	41 e0       	ldi	r20, 0x01	; 1
    4780:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	cf 91       	pop	r28
    478a:	df 91       	pop	r29
    478c:	08 95       	ret

0000478e <LED_voidOn>:

void LED_voidOn (u8 Group, u8 pin)
{
    478e:	df 93       	push	r29
    4790:	cf 93       	push	r28
    4792:	00 d0       	rcall	.+0      	; 0x4794 <LED_voidOn+0x6>
    4794:	cd b7       	in	r28, 0x3d	; 61
    4796:	de b7       	in	r29, 0x3e	; 62
    4798:	89 83       	std	Y+1, r24	; 0x01
    479a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, High);
    479c:	89 81       	ldd	r24, Y+1	; 0x01
    479e:	6a 81       	ldd	r22, Y+2	; 0x02
    47a0:	41 e0       	ldi	r20, 0x01	; 1
    47a2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    47a6:	0f 90       	pop	r0
    47a8:	0f 90       	pop	r0
    47aa:	cf 91       	pop	r28
    47ac:	df 91       	pop	r29
    47ae:	08 95       	ret

000047b0 <LED_voidOff>:

void LED_voidOff (u8 Group, u8 pin)
{
    47b0:	df 93       	push	r29
    47b2:	cf 93       	push	r28
    47b4:	00 d0       	rcall	.+0      	; 0x47b6 <LED_voidOff+0x6>
    47b6:	cd b7       	in	r28, 0x3d	; 61
    47b8:	de b7       	in	r29, 0x3e	; 62
    47ba:	89 83       	std	Y+1, r24	; 0x01
    47bc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, Low);
    47be:	89 81       	ldd	r24, Y+1	; 0x01
    47c0:	6a 81       	ldd	r22, Y+2	; 0x02
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    47c8:	0f 90       	pop	r0
    47ca:	0f 90       	pop	r0
    47cc:	cf 91       	pop	r28
    47ce:	df 91       	pop	r29
    47d0:	08 95       	ret

000047d2 <LED_voidToggle>:

void LED_voidToggle (u8 Group, u8 pin)
{
    47d2:	df 93       	push	r29
    47d4:	cf 93       	push	r28
    47d6:	00 d0       	rcall	.+0      	; 0x47d8 <LED_voidToggle+0x6>
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
    47dc:	89 83       	std	Y+1, r24	; 0x01
    47de:	6a 83       	std	Y+2, r22	; 0x02
	if (DIO_u8ReadPinValue(Group,pin)==High)
    47e0:	89 81       	ldd	r24, Y+1	; 0x01
    47e2:	6a 81       	ldd	r22, Y+2	; 0x02
    47e4:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
    47e8:	81 30       	cpi	r24, 0x01	; 1
    47ea:	29 f4       	brne	.+10     	; 0x47f6 <LED_voidToggle+0x24>
	{
		LED_voidOff(Group,pin);
    47ec:	89 81       	ldd	r24, Y+1	; 0x01
    47ee:	6a 81       	ldd	r22, Y+2	; 0x02
    47f0:	0e 94 d8 23 	call	0x47b0	; 0x47b0 <LED_voidOff>
    47f4:	04 c0       	rjmp	.+8      	; 0x47fe <LED_voidToggle+0x2c>
	}
	else
	{
		LED_voidOn(Group,pin);
    47f6:	89 81       	ldd	r24, Y+1	; 0x01
    47f8:	6a 81       	ldd	r22, Y+2	; 0x02
    47fa:	0e 94 c7 23 	call	0x478e	; 0x478e <LED_voidOn>
	}

}
    47fe:	0f 90       	pop	r0
    4800:	0f 90       	pop	r0
    4802:	cf 91       	pop	r28
    4804:	df 91       	pop	r29
    4806:	08 95       	ret

00004808 <LCD_voidSendCommand>:
#include <util/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Lcd_Interface.h"

void LCD_voidSendCommand(u8 command)
{
    4808:	df 93       	push	r29
    480a:	cf 93       	push	r28
    480c:	0f 92       	push	r0
    480e:	cd b7       	in	r28, 0x3d	; 61
    4810:	de b7       	in	r29, 0x3e	; 62
    4812:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    4814:	81 e0       	ldi	r24, 0x01	; 1
    4816:	60 e0       	ldi	r22, 0x00	; 0
    4818:	40 e0       	ldi	r20, 0x00	; 0
    481a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    481e:	81 e0       	ldi	r24, 0x01	; 1
    4820:	61 e0       	ldi	r22, 0x01	; 1
    4822:	40 e0       	ldi	r20, 0x00	; 0
    4824:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	62 e0       	ldi	r22, 0x02	; 2
    482c:	41 e0       	ldi	r20, 0x01	; 1
    482e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//Send Command
		DIO_voidSetPortValue(Lcd_DCGroup,command);
    4832:	84 e0       	ldi	r24, 0x04	; 4
    4834:	69 81       	ldd	r22, Y+1	; 0x01
    4836:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Lcd_DCGroup,Lcd_D7,get_bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
#endif

}
    4844:	0f 90       	pop	r0
    4846:	cf 91       	pop	r28
    4848:	df 91       	pop	r29
    484a:	08 95       	ret

0000484c <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    484c:	df 93       	push	r29
    484e:	cf 93       	push	r28
    4850:	0f 92       	push	r0
    4852:	cd b7       	in	r28, 0x3d	; 61
    4854:	de b7       	in	r29, 0x3e	; 62
    4856:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    4858:	81 e0       	ldi	r24, 0x01	; 1
    485a:	60 e0       	ldi	r22, 0x00	; 0
    485c:	41 e0       	ldi	r20, 0x01	; 1
    485e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	61 e0       	ldi	r22, 0x01	; 1
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    486c:	81 e0       	ldi	r24, 0x01	; 1
    486e:	62 e0       	ldi	r22, 0x02	; 2
    4870:	41 e0       	ldi	r20, 0x01	; 1
    4872:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//Send Data
		DIO_voidSetPortValue(Lcd_DCGroup,data);
    4876:	84 e0       	ldi	r24, 0x04	; 4
    4878:	69 81       	ldd	r22, Y+1	; 0x01
    487a:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    487e:	81 e0       	ldi	r24, 0x01	; 1
    4880:	62 e0       	ldi	r22, 0x02	; 2
    4882:	40 e0       	ldi	r20, 0x00	; 0
    4884:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);

#endif

}
    4888:	0f 90       	pop	r0
    488a:	cf 91       	pop	r28
    488c:	df 91       	pop	r29
    488e:	08 95       	ret

00004890 <LCD_voidInit>:


void LCD_voidInit()
{
    4890:	df 93       	push	r29
    4892:	cf 93       	push	r28
    4894:	cd b7       	in	r28, 0x3d	; 61
    4896:	de b7       	in	r29, 0x3e	; 62
    4898:	e8 97       	sbiw	r28, 0x38	; 56
    489a:	0f b6       	in	r0, 0x3f	; 63
    489c:	f8 94       	cli
    489e:	de bf       	out	0x3e, r29	; 62
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	60 e0       	ldi	r22, 0x00	; 0
    48a8:	41 e0       	ldi	r20, 0x01	; 1
    48aa:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	61 e0       	ldi	r22, 0x01	; 1
    48b2:	41 e0       	ldi	r20, 0x01	; 1
    48b4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	62 e0       	ldi	r22, 0x02	; 2
    48bc:	41 e0       	ldi	r20, 0x01	; 1
    48be:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    48c2:	84 e0       	ldi	r24, 0x04	; 4
    48c4:	6f ef       	ldi	r22, 0xFF	; 255
    48c6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <DIO_voidSetPortDir>
    48ca:	80 e0       	ldi	r24, 0x00	; 0
    48cc:	90 e0       	ldi	r25, 0x00	; 0
    48ce:	ac e0       	ldi	r26, 0x0C	; 12
    48d0:	b2 e4       	ldi	r27, 0x42	; 66
    48d2:	8d ab       	std	Y+53, r24	; 0x35
    48d4:	9e ab       	std	Y+54, r25	; 0x36
    48d6:	af ab       	std	Y+55, r26	; 0x37
    48d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48da:	6d a9       	ldd	r22, Y+53	; 0x35
    48dc:	7e a9       	ldd	r23, Y+54	; 0x36
    48de:	8f a9       	ldd	r24, Y+55	; 0x37
    48e0:	98 ad       	ldd	r25, Y+56	; 0x38
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	4a ef       	ldi	r20, 0xFA	; 250
    48e8:	54 e4       	ldi	r21, 0x44	; 68
    48ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ee:	dc 01       	movw	r26, r24
    48f0:	cb 01       	movw	r24, r22
    48f2:	89 ab       	std	Y+49, r24	; 0x31
    48f4:	9a ab       	std	Y+50, r25	; 0x32
    48f6:	ab ab       	std	Y+51, r26	; 0x33
    48f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    48fa:	69 a9       	ldd	r22, Y+49	; 0x31
    48fc:	7a a9       	ldd	r23, Y+50	; 0x32
    48fe:	8b a9       	ldd	r24, Y+51	; 0x33
    4900:	9c a9       	ldd	r25, Y+52	; 0x34
    4902:	20 e0       	ldi	r18, 0x00	; 0
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	40 e8       	ldi	r20, 0x80	; 128
    4908:	5f e3       	ldi	r21, 0x3F	; 63
    490a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    490e:	88 23       	and	r24, r24
    4910:	2c f4       	brge	.+10     	; 0x491c <LCD_voidInit+0x8c>
		__ticks = 1;
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	90 e0       	ldi	r25, 0x00	; 0
    4916:	98 ab       	std	Y+48, r25	; 0x30
    4918:	8f a7       	std	Y+47, r24	; 0x2f
    491a:	3f c0       	rjmp	.+126    	; 0x499a <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    491c:	69 a9       	ldd	r22, Y+49	; 0x31
    491e:	7a a9       	ldd	r23, Y+50	; 0x32
    4920:	8b a9       	ldd	r24, Y+51	; 0x33
    4922:	9c a9       	ldd	r25, Y+52	; 0x34
    4924:	20 e0       	ldi	r18, 0x00	; 0
    4926:	3f ef       	ldi	r19, 0xFF	; 255
    4928:	4f e7       	ldi	r20, 0x7F	; 127
    492a:	57 e4       	ldi	r21, 0x47	; 71
    492c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4930:	18 16       	cp	r1, r24
    4932:	4c f5       	brge	.+82     	; 0x4986 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4934:	6d a9       	ldd	r22, Y+53	; 0x35
    4936:	7e a9       	ldd	r23, Y+54	; 0x36
    4938:	8f a9       	ldd	r24, Y+55	; 0x37
    493a:	98 ad       	ldd	r25, Y+56	; 0x38
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	40 e2       	ldi	r20, 0x20	; 32
    4942:	51 e4       	ldi	r21, 0x41	; 65
    4944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4948:	dc 01       	movw	r26, r24
    494a:	cb 01       	movw	r24, r22
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4954:	dc 01       	movw	r26, r24
    4956:	cb 01       	movw	r24, r22
    4958:	98 ab       	std	Y+48, r25	; 0x30
    495a:	8f a7       	std	Y+47, r24	; 0x2f
    495c:	0f c0       	rjmp	.+30     	; 0x497c <LCD_voidInit+0xec>
    495e:	88 ec       	ldi	r24, 0xC8	; 200
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	9e a7       	std	Y+46, r25	; 0x2e
    4964:	8d a7       	std	Y+45, r24	; 0x2d
    4966:	8d a5       	ldd	r24, Y+45	; 0x2d
    4968:	9e a5       	ldd	r25, Y+46	; 0x2e
    496a:	01 97       	sbiw	r24, 0x01	; 1
    496c:	f1 f7       	brne	.-4      	; 0x496a <LCD_voidInit+0xda>
    496e:	9e a7       	std	Y+46, r25	; 0x2e
    4970:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4972:	8f a5       	ldd	r24, Y+47	; 0x2f
    4974:	98 a9       	ldd	r25, Y+48	; 0x30
    4976:	01 97       	sbiw	r24, 0x01	; 1
    4978:	98 ab       	std	Y+48, r25	; 0x30
    497a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497c:	8f a5       	ldd	r24, Y+47	; 0x2f
    497e:	98 a9       	ldd	r25, Y+48	; 0x30
    4980:	00 97       	sbiw	r24, 0x00	; 0
    4982:	69 f7       	brne	.-38     	; 0x495e <LCD_voidInit+0xce>
    4984:	14 c0       	rjmp	.+40     	; 0x49ae <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4986:	69 a9       	ldd	r22, Y+49	; 0x31
    4988:	7a a9       	ldd	r23, Y+50	; 0x32
    498a:	8b a9       	ldd	r24, Y+51	; 0x33
    498c:	9c a9       	ldd	r25, Y+52	; 0x34
    498e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4992:	dc 01       	movw	r26, r24
    4994:	cb 01       	movw	r24, r22
    4996:	98 ab       	std	Y+48, r25	; 0x30
    4998:	8f a7       	std	Y+47, r24	; 0x2f
    499a:	8f a5       	ldd	r24, Y+47	; 0x2f
    499c:	98 a9       	ldd	r25, Y+48	; 0x30
    499e:	9c a7       	std	Y+44, r25	; 0x2c
    49a0:	8b a7       	std	Y+43, r24	; 0x2b
    49a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    49a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	f1 f7       	brne	.-4      	; 0x49a6 <LCD_voidInit+0x116>
    49aa:	9c a7       	std	Y+44, r25	; 0x2c
    49ac:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    49ae:	88 e3       	ldi	r24, 0x38	; 56
    49b0:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
    49b4:	80 e0       	ldi	r24, 0x00	; 0
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	a0 e8       	ldi	r26, 0x80	; 128
    49ba:	bf e3       	ldi	r27, 0x3F	; 63
    49bc:	8f a3       	std	Y+39, r24	; 0x27
    49be:	98 a7       	std	Y+40, r25	; 0x28
    49c0:	a9 a7       	std	Y+41, r26	; 0x29
    49c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49c4:	6f a1       	ldd	r22, Y+39	; 0x27
    49c6:	78 a5       	ldd	r23, Y+40	; 0x28
    49c8:	89 a5       	ldd	r24, Y+41	; 0x29
    49ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    49cc:	20 e0       	ldi	r18, 0x00	; 0
    49ce:	30 e0       	ldi	r19, 0x00	; 0
    49d0:	4a ef       	ldi	r20, 0xFA	; 250
    49d2:	54 e4       	ldi	r21, 0x44	; 68
    49d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49d8:	dc 01       	movw	r26, r24
    49da:	cb 01       	movw	r24, r22
    49dc:	8b a3       	std	Y+35, r24	; 0x23
    49de:	9c a3       	std	Y+36, r25	; 0x24
    49e0:	ad a3       	std	Y+37, r26	; 0x25
    49e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    49e4:	6b a1       	ldd	r22, Y+35	; 0x23
    49e6:	7c a1       	ldd	r23, Y+36	; 0x24
    49e8:	8d a1       	ldd	r24, Y+37	; 0x25
    49ea:	9e a1       	ldd	r25, Y+38	; 0x26
    49ec:	20 e0       	ldi	r18, 0x00	; 0
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	40 e8       	ldi	r20, 0x80	; 128
    49f2:	5f e3       	ldi	r21, 0x3F	; 63
    49f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49f8:	88 23       	and	r24, r24
    49fa:	2c f4       	brge	.+10     	; 0x4a06 <LCD_voidInit+0x176>
		__ticks = 1;
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	9a a3       	std	Y+34, r25	; 0x22
    4a02:	89 a3       	std	Y+33, r24	; 0x21
    4a04:	3f c0       	rjmp	.+126    	; 0x4a84 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    4a06:	6b a1       	ldd	r22, Y+35	; 0x23
    4a08:	7c a1       	ldd	r23, Y+36	; 0x24
    4a0a:	8d a1       	ldd	r24, Y+37	; 0x25
    4a0c:	9e a1       	ldd	r25, Y+38	; 0x26
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	3f ef       	ldi	r19, 0xFF	; 255
    4a12:	4f e7       	ldi	r20, 0x7F	; 127
    4a14:	57 e4       	ldi	r21, 0x47	; 71
    4a16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a1a:	18 16       	cp	r1, r24
    4a1c:	4c f5       	brge	.+82     	; 0x4a70 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a20:	78 a5       	ldd	r23, Y+40	; 0x28
    4a22:	89 a5       	ldd	r24, Y+41	; 0x29
    4a24:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	40 e2       	ldi	r20, 0x20	; 32
    4a2c:	51 e4       	ldi	r21, 0x41	; 65
    4a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a32:	dc 01       	movw	r26, r24
    4a34:	cb 01       	movw	r24, r22
    4a36:	bc 01       	movw	r22, r24
    4a38:	cd 01       	movw	r24, r26
    4a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3e:	dc 01       	movw	r26, r24
    4a40:	cb 01       	movw	r24, r22
    4a42:	9a a3       	std	Y+34, r25	; 0x22
    4a44:	89 a3       	std	Y+33, r24	; 0x21
    4a46:	0f c0       	rjmp	.+30     	; 0x4a66 <LCD_voidInit+0x1d6>
    4a48:	88 ec       	ldi	r24, 0xC8	; 200
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	98 a3       	std	Y+32, r25	; 0x20
    4a4e:	8f 8f       	std	Y+31, r24	; 0x1f
    4a50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4a52:	98 a1       	ldd	r25, Y+32	; 0x20
    4a54:	01 97       	sbiw	r24, 0x01	; 1
    4a56:	f1 f7       	brne	.-4      	; 0x4a54 <LCD_voidInit+0x1c4>
    4a58:	98 a3       	std	Y+32, r25	; 0x20
    4a5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    4a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    4a60:	01 97       	sbiw	r24, 0x01	; 1
    4a62:	9a a3       	std	Y+34, r25	; 0x22
    4a64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a66:	89 a1       	ldd	r24, Y+33	; 0x21
    4a68:	9a a1       	ldd	r25, Y+34	; 0x22
    4a6a:	00 97       	sbiw	r24, 0x00	; 0
    4a6c:	69 f7       	brne	.-38     	; 0x4a48 <LCD_voidInit+0x1b8>
    4a6e:	14 c0       	rjmp	.+40     	; 0x4a98 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a70:	6b a1       	ldd	r22, Y+35	; 0x23
    4a72:	7c a1       	ldd	r23, Y+36	; 0x24
    4a74:	8d a1       	ldd	r24, Y+37	; 0x25
    4a76:	9e a1       	ldd	r25, Y+38	; 0x26
    4a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a7c:	dc 01       	movw	r26, r24
    4a7e:	cb 01       	movw	r24, r22
    4a80:	9a a3       	std	Y+34, r25	; 0x22
    4a82:	89 a3       	std	Y+33, r24	; 0x21
    4a84:	89 a1       	ldd	r24, Y+33	; 0x21
    4a86:	9a a1       	ldd	r25, Y+34	; 0x22
    4a88:	9e 8f       	std	Y+30, r25	; 0x1e
    4a8a:	8d 8f       	std	Y+29, r24	; 0x1d
    4a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4a8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4a90:	01 97       	sbiw	r24, 0x01	; 1
    4a92:	f1 f7       	brne	.-4      	; 0x4a90 <LCD_voidInit+0x200>
    4a94:	9e 8f       	std	Y+30, r25	; 0x1e
    4a96:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    4a98:	8f e0       	ldi	r24, 0x0F	; 15
    4a9a:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	a0 e8       	ldi	r26, 0x80	; 128
    4aa4:	bf e3       	ldi	r27, 0x3F	; 63
    4aa6:	89 8f       	std	Y+25, r24	; 0x19
    4aa8:	9a 8f       	std	Y+26, r25	; 0x1a
    4aaa:	ab 8f       	std	Y+27, r26	; 0x1b
    4aac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aae:	69 8d       	ldd	r22, Y+25	; 0x19
    4ab0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ab2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ab4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ab6:	20 e0       	ldi	r18, 0x00	; 0
    4ab8:	30 e0       	ldi	r19, 0x00	; 0
    4aba:	4a ef       	ldi	r20, 0xFA	; 250
    4abc:	54 e4       	ldi	r21, 0x44	; 68
    4abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ac2:	dc 01       	movw	r26, r24
    4ac4:	cb 01       	movw	r24, r22
    4ac6:	8d 8b       	std	Y+21, r24	; 0x15
    4ac8:	9e 8b       	std	Y+22, r25	; 0x16
    4aca:	af 8b       	std	Y+23, r26	; 0x17
    4acc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4ace:	6d 89       	ldd	r22, Y+21	; 0x15
    4ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    4ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    4ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e8       	ldi	r20, 0x80	; 128
    4adc:	5f e3       	ldi	r21, 0x3F	; 63
    4ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ae2:	88 23       	and	r24, r24
    4ae4:	2c f4       	brge	.+10     	; 0x4af0 <LCD_voidInit+0x260>
		__ticks = 1;
    4ae6:	81 e0       	ldi	r24, 0x01	; 1
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	9c 8b       	std	Y+20, r25	; 0x14
    4aec:	8b 8b       	std	Y+19, r24	; 0x13
    4aee:	3f c0       	rjmp	.+126    	; 0x4b6e <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    4af0:	6d 89       	ldd	r22, Y+21	; 0x15
    4af2:	7e 89       	ldd	r23, Y+22	; 0x16
    4af4:	8f 89       	ldd	r24, Y+23	; 0x17
    4af6:	98 8d       	ldd	r25, Y+24	; 0x18
    4af8:	20 e0       	ldi	r18, 0x00	; 0
    4afa:	3f ef       	ldi	r19, 0xFF	; 255
    4afc:	4f e7       	ldi	r20, 0x7F	; 127
    4afe:	57 e4       	ldi	r21, 0x47	; 71
    4b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b04:	18 16       	cp	r1, r24
    4b06:	4c f5       	brge	.+82     	; 0x4b5a <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b08:	69 8d       	ldd	r22, Y+25	; 0x19
    4b0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	40 e2       	ldi	r20, 0x20	; 32
    4b16:	51 e4       	ldi	r21, 0x41	; 65
    4b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1c:	dc 01       	movw	r26, r24
    4b1e:	cb 01       	movw	r24, r22
    4b20:	bc 01       	movw	r22, r24
    4b22:	cd 01       	movw	r24, r26
    4b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b28:	dc 01       	movw	r26, r24
    4b2a:	cb 01       	movw	r24, r22
    4b2c:	9c 8b       	std	Y+20, r25	; 0x14
    4b2e:	8b 8b       	std	Y+19, r24	; 0x13
    4b30:	0f c0       	rjmp	.+30     	; 0x4b50 <LCD_voidInit+0x2c0>
    4b32:	88 ec       	ldi	r24, 0xC8	; 200
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	9a 8b       	std	Y+18, r25	; 0x12
    4b38:	89 8b       	std	Y+17, r24	; 0x11
    4b3a:	89 89       	ldd	r24, Y+17	; 0x11
    4b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    4b3e:	01 97       	sbiw	r24, 0x01	; 1
    4b40:	f1 f7       	brne	.-4      	; 0x4b3e <LCD_voidInit+0x2ae>
    4b42:	9a 8b       	std	Y+18, r25	; 0x12
    4b44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b46:	8b 89       	ldd	r24, Y+19	; 0x13
    4b48:	9c 89       	ldd	r25, Y+20	; 0x14
    4b4a:	01 97       	sbiw	r24, 0x01	; 1
    4b4c:	9c 8b       	std	Y+20, r25	; 0x14
    4b4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b50:	8b 89       	ldd	r24, Y+19	; 0x13
    4b52:	9c 89       	ldd	r25, Y+20	; 0x14
    4b54:	00 97       	sbiw	r24, 0x00	; 0
    4b56:	69 f7       	brne	.-38     	; 0x4b32 <LCD_voidInit+0x2a2>
    4b58:	14 c0       	rjmp	.+40     	; 0x4b82 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4b60:	98 8d       	ldd	r25, Y+24	; 0x18
    4b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b66:	dc 01       	movw	r26, r24
    4b68:	cb 01       	movw	r24, r22
    4b6a:	9c 8b       	std	Y+20, r25	; 0x14
    4b6c:	8b 8b       	std	Y+19, r24	; 0x13
    4b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    4b70:	9c 89       	ldd	r25, Y+20	; 0x14
    4b72:	98 8b       	std	Y+16, r25	; 0x10
    4b74:	8f 87       	std	Y+15, r24	; 0x0f
    4b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b78:	98 89       	ldd	r25, Y+16	; 0x10
    4b7a:	01 97       	sbiw	r24, 0x01	; 1
    4b7c:	f1 f7       	brne	.-4      	; 0x4b7a <LCD_voidInit+0x2ea>
    4b7e:	98 8b       	std	Y+16, r25	; 0x10
    4b80:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
    4b88:	80 e0       	ldi	r24, 0x00	; 0
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	a0 e0       	ldi	r26, 0x00	; 0
    4b8e:	b0 e4       	ldi	r27, 0x40	; 64
    4b90:	8b 87       	std	Y+11, r24	; 0x0b
    4b92:	9c 87       	std	Y+12, r25	; 0x0c
    4b94:	ad 87       	std	Y+13, r26	; 0x0d
    4b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ba0:	20 e0       	ldi	r18, 0x00	; 0
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    4ba4:	4a ef       	ldi	r20, 0xFA	; 250
    4ba6:	54 e4       	ldi	r21, 0x44	; 68
    4ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	8f 83       	std	Y+7, r24	; 0x07
    4bb2:	98 87       	std	Y+8, r25	; 0x08
    4bb4:	a9 87       	std	Y+9, r26	; 0x09
    4bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    4bba:	78 85       	ldd	r23, Y+8	; 0x08
    4bbc:	89 85       	ldd	r24, Y+9	; 0x09
    4bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bc0:	20 e0       	ldi	r18, 0x00	; 0
    4bc2:	30 e0       	ldi	r19, 0x00	; 0
    4bc4:	40 e8       	ldi	r20, 0x80	; 128
    4bc6:	5f e3       	ldi	r21, 0x3F	; 63
    4bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bcc:	88 23       	and	r24, r24
    4bce:	2c f4       	brge	.+10     	; 0x4bda <LCD_voidInit+0x34a>
		__ticks = 1;
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	9e 83       	std	Y+6, r25	; 0x06
    4bd6:	8d 83       	std	Y+5, r24	; 0x05
    4bd8:	3f c0       	rjmp	.+126    	; 0x4c58 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    4bda:	6f 81       	ldd	r22, Y+7	; 0x07
    4bdc:	78 85       	ldd	r23, Y+8	; 0x08
    4bde:	89 85       	ldd	r24, Y+9	; 0x09
    4be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be2:	20 e0       	ldi	r18, 0x00	; 0
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	4f e7       	ldi	r20, 0x7F	; 127
    4be8:	57 e4       	ldi	r21, 0x47	; 71
    4bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bee:	18 16       	cp	r1, r24
    4bf0:	4c f5       	brge	.+82     	; 0x4c44 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e2       	ldi	r20, 0x20	; 32
    4c00:	51 e4       	ldi	r21, 0x41	; 65
    4c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22
    4c0a:	bc 01       	movw	r22, r24
    4c0c:	cd 01       	movw	r24, r26
    4c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c12:	dc 01       	movw	r26, r24
    4c14:	cb 01       	movw	r24, r22
    4c16:	9e 83       	std	Y+6, r25	; 0x06
    4c18:	8d 83       	std	Y+5, r24	; 0x05
    4c1a:	0f c0       	rjmp	.+30     	; 0x4c3a <LCD_voidInit+0x3aa>
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	9c 83       	std	Y+4, r25	; 0x04
    4c22:	8b 83       	std	Y+3, r24	; 0x03
    4c24:	8b 81       	ldd	r24, Y+3	; 0x03
    4c26:	9c 81       	ldd	r25, Y+4	; 0x04
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	f1 f7       	brne	.-4      	; 0x4c28 <LCD_voidInit+0x398>
    4c2c:	9c 83       	std	Y+4, r25	; 0x04
    4c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c30:	8d 81       	ldd	r24, Y+5	; 0x05
    4c32:	9e 81       	ldd	r25, Y+6	; 0x06
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	9e 83       	std	Y+6, r25	; 0x06
    4c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c3e:	00 97       	sbiw	r24, 0x00	; 0
    4c40:	69 f7       	brne	.-38     	; 0x4c1c <LCD_voidInit+0x38c>
    4c42:	14 c0       	rjmp	.+40     	; 0x4c6c <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c44:	6f 81       	ldd	r22, Y+7	; 0x07
    4c46:	78 85       	ldd	r23, Y+8	; 0x08
    4c48:	89 85       	ldd	r24, Y+9	; 0x09
    4c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	9e 83       	std	Y+6, r25	; 0x06
    4c56:	8d 83       	std	Y+5, r24	; 0x05
    4c58:	8d 81       	ldd	r24, Y+5	; 0x05
    4c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4c5c:	9a 83       	std	Y+2, r25	; 0x02
    4c5e:	89 83       	std	Y+1, r24	; 0x01
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	9a 81       	ldd	r25, Y+2	; 0x02
    4c64:	01 97       	sbiw	r24, 0x01	; 1
    4c66:	f1 f7       	brne	.-4      	; 0x4c64 <LCD_voidInit+0x3d4>
    4c68:	9a 83       	std	Y+2, r25	; 0x02
    4c6a:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    4c6c:	86 e0       	ldi	r24, 0x06	; 6
    4c6e:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    4c72:	e8 96       	adiw	r28, 0x38	; 56
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	f8 94       	cli
    4c78:	de bf       	out	0x3e, r29	; 62
    4c7a:	0f be       	out	0x3f, r0	; 63
    4c7c:	cd bf       	out	0x3d, r28	; 61
    4c7e:	cf 91       	pop	r28
    4c80:	df 91       	pop	r29
    4c82:	08 95       	ret

00004c84 <LCD_voidSendString>:


void LCD_voidSendString(u8 String[])
{
    4c84:	df 93       	push	r29
    4c86:	cf 93       	push	r28
    4c88:	00 d0       	rcall	.+0      	; 0x4c8a <LCD_voidSendString+0x6>
    4c8a:	0f 92       	push	r0
    4c8c:	cd b7       	in	r28, 0x3d	; 61
    4c8e:	de b7       	in	r29, 0x3e	; 62
    4c90:	9b 83       	std	Y+3, r25	; 0x03
    4c92:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    4c94:	19 82       	std	Y+1, r1	; 0x01
    4c96:	0e c0       	rjmp	.+28     	; 0x4cb4 <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	28 2f       	mov	r18, r24
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ca2:	fc 01       	movw	r30, r24
    4ca4:	e2 0f       	add	r30, r18
    4ca6:	f3 1f       	adc	r31, r19
    4ca8:	80 81       	ld	r24, Z
    4caa:	0e 94 26 24 	call	0x484c	; 0x484c <LCD_voidSendData>
		i++;
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	8f 5f       	subi	r24, 0xFF	; 255
    4cb2:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 String[])
{
	u8 i = 0 ;
	while(String[i]!='\0')
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	28 2f       	mov	r18, r24
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	8a 81       	ldd	r24, Y+2	; 0x02
    4cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	e2 0f       	add	r30, r18
    4cc2:	f3 1f       	adc	r31, r19
    4cc4:	80 81       	ld	r24, Z
    4cc6:	88 23       	and	r24, r24
    4cc8:	39 f7       	brne	.-50     	; 0x4c98 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    4cca:	0f 90       	pop	r0
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	cf 91       	pop	r28
    4cd2:	df 91       	pop	r29
    4cd4:	08 95       	ret

00004cd6 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    4cd6:	df 93       	push	r29
    4cd8:	cf 93       	push	r28
    4cda:	00 d0       	rcall	.+0      	; 0x4cdc <LCD_voidSetPos+0x6>
    4cdc:	0f 92       	push	r0
    4cde:	cd b7       	in	r28, 0x3d	; 61
    4ce0:	de b7       	in	r29, 0x3e	; 62
    4ce2:	8a 83       	std	Y+2, r24	; 0x02
    4ce4:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    4ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce8:	88 23       	and	r24, r24
    4cea:	19 f4       	brne	.+6      	; 0x4cf2 <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    4cec:	8b 81       	ldd	r24, Y+3	; 0x03
    4cee:	89 83       	std	Y+1, r24	; 0x01
    4cf0:	06 c0       	rjmp	.+12     	; 0x4cfe <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    4cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf4:	81 30       	cpi	r24, 0x01	; 1
    4cf6:	19 f4       	brne	.+6      	; 0x4cfe <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    4cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    4cfa:	80 5c       	subi	r24, 0xC0	; 192
    4cfc:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    4cfe:	89 81       	ldd	r24, Y+1	; 0x01
    4d00:	80 68       	ori	r24, 0x80	; 128
    4d02:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
}
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	08 95       	ret

00004d12 <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    4d12:	df 93       	push	r29
    4d14:	cf 93       	push	r28
    4d16:	cd b7       	in	r28, 0x3d	; 61
    4d18:	de b7       	in	r29, 0x3e	; 62
    4d1a:	27 97       	sbiw	r28, 0x07	; 7
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	de bf       	out	0x3e, r29	; 62
    4d22:	0f be       	out	0x3f, r0	; 63
    4d24:	cd bf       	out	0x3d, r28	; 61
    4d26:	8b 83       	std	Y+3, r24	; 0x03
    4d28:	7d 83       	std	Y+5, r23	; 0x05
    4d2a:	6c 83       	std	Y+4, r22	; 0x04
    4d2c:	4e 83       	std	Y+6, r20	; 0x06
    4d2e:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    4d30:	8b 81       	ldd	r24, Y+3	; 0x03
    4d32:	88 2f       	mov	r24, r24
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	88 0f       	add	r24, r24
    4d38:	99 1f       	adc	r25, r25
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	88 0f       	add	r24, r24
    4d40:	99 1f       	adc	r25, r25
    4d42:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    4d44:	8a 81       	ldd	r24, Y+2	; 0x02
    4d46:	80 64       	ori	r24, 0x40	; 64
    4d48:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    4d4c:	19 82       	std	Y+1, r1	; 0x01
    4d4e:	0e c0       	rjmp	.+28     	; 0x4d6c <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
    4d52:	28 2f       	mov	r18, r24
    4d54:	30 e0       	ldi	r19, 0x00	; 0
    4d56:	8c 81       	ldd	r24, Y+4	; 0x04
    4d58:	9d 81       	ldd	r25, Y+5	; 0x05
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	e2 0f       	add	r30, r18
    4d5e:	f3 1f       	adc	r31, r19
    4d60:	80 81       	ld	r24, Z
    4d62:	0e 94 26 24 	call	0x484c	; 0x484c <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    4d66:	89 81       	ldd	r24, Y+1	; 0x01
    4d68:	8f 5f       	subi	r24, 0xFF	; 255
    4d6a:	89 83       	std	Y+1, r24	; 0x01
    4d6c:	89 81       	ldd	r24, Y+1	; 0x01
    4d6e:	88 30       	cpi	r24, 0x08	; 8
    4d70:	78 f3       	brcs	.-34     	; 0x4d50 <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    4d72:	8e 81       	ldd	r24, Y+6	; 0x06
    4d74:	6f 81       	ldd	r22, Y+7	; 0x07
    4d76:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    4d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7c:	0e 94 26 24 	call	0x484c	; 0x484c <LCD_voidSendData>
}
    4d80:	27 96       	adiw	r28, 0x07	; 7
    4d82:	0f b6       	in	r0, 0x3f	; 63
    4d84:	f8 94       	cli
    4d86:	de bf       	out	0x3e, r29	; 62
    4d88:	0f be       	out	0x3f, r0	; 63
    4d8a:	cd bf       	out	0x3d, r28	; 61
    4d8c:	cf 91       	pop	r28
    4d8e:	df 91       	pop	r29
    4d90:	08 95       	ret

00004d92 <LCD_voidClear>:

void LCD_voidClear()
{
    4d92:	df 93       	push	r29
    4d94:	cf 93       	push	r28
    4d96:	cd b7       	in	r28, 0x3d	; 61
    4d98:	de b7       	in	r29, 0x3e	; 62
    4d9a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	de bf       	out	0x3e, r29	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4da6:	81 e0       	ldi	r24, 0x01	; 1
    4da8:	0e 94 04 24 	call	0x4808	; 0x4808 <LCD_voidSendCommand>
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	90 e0       	ldi	r25, 0x00	; 0
    4db0:	a0 e0       	ldi	r26, 0x00	; 0
    4db2:	b0 e4       	ldi	r27, 0x40	; 64
    4db4:	8b 87       	std	Y+11, r24	; 0x0b
    4db6:	9c 87       	std	Y+12, r25	; 0x0c
    4db8:	ad 87       	std	Y+13, r26	; 0x0d
    4dba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dc4:	20 e0       	ldi	r18, 0x00	; 0
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	4a ef       	ldi	r20, 0xFA	; 250
    4dca:	54 e4       	ldi	r21, 0x44	; 68
    4dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dd0:	dc 01       	movw	r26, r24
    4dd2:	cb 01       	movw	r24, r22
    4dd4:	8f 83       	std	Y+7, r24	; 0x07
    4dd6:	98 87       	std	Y+8, r25	; 0x08
    4dd8:	a9 87       	std	Y+9, r26	; 0x09
    4dda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    4dde:	78 85       	ldd	r23, Y+8	; 0x08
    4de0:	89 85       	ldd	r24, Y+9	; 0x09
    4de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de4:	20 e0       	ldi	r18, 0x00	; 0
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	40 e8       	ldi	r20, 0x80	; 128
    4dea:	5f e3       	ldi	r21, 0x3F	; 63
    4dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4df0:	88 23       	and	r24, r24
    4df2:	2c f4       	brge	.+10     	; 0x4dfe <LCD_voidClear+0x6c>
		__ticks = 1;
    4df4:	81 e0       	ldi	r24, 0x01	; 1
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	9e 83       	std	Y+6, r25	; 0x06
    4dfa:	8d 83       	std	Y+5, r24	; 0x05
    4dfc:	3f c0       	rjmp	.+126    	; 0x4e7c <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    4dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    4e00:	78 85       	ldd	r23, Y+8	; 0x08
    4e02:	89 85       	ldd	r24, Y+9	; 0x09
    4e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e06:	20 e0       	ldi	r18, 0x00	; 0
    4e08:	3f ef       	ldi	r19, 0xFF	; 255
    4e0a:	4f e7       	ldi	r20, 0x7F	; 127
    4e0c:	57 e4       	ldi	r21, 0x47	; 71
    4e0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e12:	18 16       	cp	r1, r24
    4e14:	4c f5       	brge	.+82     	; 0x4e68 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e16:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e18:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e1e:	20 e0       	ldi	r18, 0x00	; 0
    4e20:	30 e0       	ldi	r19, 0x00	; 0
    4e22:	40 e2       	ldi	r20, 0x20	; 32
    4e24:	51 e4       	ldi	r21, 0x41	; 65
    4e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e2a:	dc 01       	movw	r26, r24
    4e2c:	cb 01       	movw	r24, r22
    4e2e:	bc 01       	movw	r22, r24
    4e30:	cd 01       	movw	r24, r26
    4e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e36:	dc 01       	movw	r26, r24
    4e38:	cb 01       	movw	r24, r22
    4e3a:	9e 83       	std	Y+6, r25	; 0x06
    4e3c:	8d 83       	std	Y+5, r24	; 0x05
    4e3e:	0f c0       	rjmp	.+30     	; 0x4e5e <LCD_voidClear+0xcc>
    4e40:	88 ec       	ldi	r24, 0xC8	; 200
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	9c 83       	std	Y+4, r25	; 0x04
    4e46:	8b 83       	std	Y+3, r24	; 0x03
    4e48:	8b 81       	ldd	r24, Y+3	; 0x03
    4e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    4e4c:	01 97       	sbiw	r24, 0x01	; 1
    4e4e:	f1 f7       	brne	.-4      	; 0x4e4c <LCD_voidClear+0xba>
    4e50:	9c 83       	std	Y+4, r25	; 0x04
    4e52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e54:	8d 81       	ldd	r24, Y+5	; 0x05
    4e56:	9e 81       	ldd	r25, Y+6	; 0x06
    4e58:	01 97       	sbiw	r24, 0x01	; 1
    4e5a:	9e 83       	std	Y+6, r25	; 0x06
    4e5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e60:	9e 81       	ldd	r25, Y+6	; 0x06
    4e62:	00 97       	sbiw	r24, 0x00	; 0
    4e64:	69 f7       	brne	.-38     	; 0x4e40 <LCD_voidClear+0xae>
    4e66:	14 c0       	rjmp	.+40     	; 0x4e90 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e68:	6f 81       	ldd	r22, Y+7	; 0x07
    4e6a:	78 85       	ldd	r23, Y+8	; 0x08
    4e6c:	89 85       	ldd	r24, Y+9	; 0x09
    4e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e74:	dc 01       	movw	r26, r24
    4e76:	cb 01       	movw	r24, r22
    4e78:	9e 83       	std	Y+6, r25	; 0x06
    4e7a:	8d 83       	std	Y+5, r24	; 0x05
    4e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e80:	9a 83       	std	Y+2, r25	; 0x02
    4e82:	89 83       	std	Y+1, r24	; 0x01
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	9a 81       	ldd	r25, Y+2	; 0x02
    4e88:	01 97       	sbiw	r24, 0x01	; 1
    4e8a:	f1 f7       	brne	.-4      	; 0x4e88 <LCD_voidClear+0xf6>
    4e8c:	9a 83       	std	Y+2, r25	; 0x02
    4e8e:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    4e90:	2e 96       	adiw	r28, 0x0e	; 14
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	de bf       	out	0x3e, r29	; 62
    4e98:	0f be       	out	0x3f, r0	; 63
    4e9a:	cd bf       	out	0x3d, r28	; 61
    4e9c:	cf 91       	pop	r28
    4e9e:	df 91       	pop	r29
    4ea0:	08 95       	ret

00004ea2 <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    4ea2:	0f 93       	push	r16
    4ea4:	1f 93       	push	r17
    4ea6:	df 93       	push	r29
    4ea8:	cf 93       	push	r28
    4eaa:	cd b7       	in	r28, 0x3d	; 61
    4eac:	de b7       	in	r29, 0x3e	; 62
    4eae:	a0 97       	sbiw	r28, 0x20	; 32
    4eb0:	0f b6       	in	r0, 0x3f	; 63
    4eb2:	f8 94       	cli
    4eb4:	de bf       	out	0x3e, r29	; 62
    4eb6:	0f be       	out	0x3f, r0	; 63
    4eb8:	cd bf       	out	0x3d, r28	; 61
    4eba:	6d 8f       	std	Y+29, r22	; 0x1d
    4ebc:	7e 8f       	std	Y+30, r23	; 0x1e
    4ebe:	8f 8f       	std	Y+31, r24	; 0x1f
    4ec0:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    4ec2:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    4ec4:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    4ec6:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    4ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4eca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ecc:	af 8d       	ldd	r26, Y+31	; 0x1f
    4ece:	b8 a1       	ldd	r27, Y+32	; 0x20
    4ed0:	bb 23       	and	r27, r27
    4ed2:	c4 f4       	brge	.+48     	; 0x4f04 <LCD_voidSendNumber+0x62>
        num = -num;
    4ed4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ed6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ed8:	af 8d       	ldd	r26, Y+31	; 0x1f
    4eda:	b8 a1       	ldd	r27, Y+32	; 0x20
    4edc:	b0 95       	com	r27
    4ede:	a0 95       	com	r26
    4ee0:	90 95       	com	r25
    4ee2:	81 95       	neg	r24
    4ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ee6:	af 4f       	sbci	r26, 0xFF	; 255
    4ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    4eea:	8d 8f       	std	Y+29, r24	; 0x1d
    4eec:	9e 8f       	std	Y+30, r25	; 0x1e
    4eee:	af 8f       	std	Y+31, r26	; 0x1f
    4ef0:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    4ef6:	81 e0       	ldi	r24, 0x01	; 1
    4ef8:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    4efa:	8d e2       	ldi	r24, 0x2D	; 45
    4efc:	89 87       	std	Y+9, r24	; 0x09
        length++;
    4efe:	8f 81       	ldd	r24, Y+7	; 0x07
    4f00:	8f 5f       	subi	r24, 0xFF	; 255
    4f02:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    4f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f08:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f0a:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f0c:	89 83       	std	Y+1, r24	; 0x01
    4f0e:	9a 83       	std	Y+2, r25	; 0x02
    4f10:	ab 83       	std	Y+3, r26	; 0x03
    4f12:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    4f14:	89 81       	ldd	r24, Y+1	; 0x01
    4f16:	9a 81       	ldd	r25, Y+2	; 0x02
    4f18:	ab 81       	ldd	r26, Y+3	; 0x03
    4f1a:	bc 81       	ldd	r27, Y+4	; 0x04
    4f1c:	2a e0       	ldi	r18, 0x0A	; 10
    4f1e:	30 e0       	ldi	r19, 0x00	; 0
    4f20:	40 e0       	ldi	r20, 0x00	; 0
    4f22:	50 e0       	ldi	r21, 0x00	; 0
    4f24:	bc 01       	movw	r22, r24
    4f26:	cd 01       	movw	r24, r26
    4f28:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__udivmodsi4>
    4f2c:	da 01       	movw	r26, r20
    4f2e:	c9 01       	movw	r24, r18
    4f30:	89 83       	std	Y+1, r24	; 0x01
    4f32:	9a 83       	std	Y+2, r25	; 0x02
    4f34:	ab 83       	std	Y+3, r26	; 0x03
    4f36:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    4f38:	8f 81       	ldd	r24, Y+7	; 0x07
    4f3a:	8f 5f       	subi	r24, 0xFF	; 255
    4f3c:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    4f3e:	89 81       	ldd	r24, Y+1	; 0x01
    4f40:	9a 81       	ldd	r25, Y+2	; 0x02
    4f42:	ab 81       	ldd	r26, Y+3	; 0x03
    4f44:	bc 81       	ldd	r27, Y+4	; 0x04
    4f46:	00 97       	sbiw	r24, 0x00	; 0
    4f48:	a1 05       	cpc	r26, r1
    4f4a:	b1 05       	cpc	r27, r1
    4f4c:	19 f7       	brne	.-58     	; 0x4f14 <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    4f4e:	8f 81       	ldd	r24, Y+7	; 0x07
    4f50:	81 50       	subi	r24, 0x01	; 1
    4f52:	88 87       	std	Y+8, r24	; 0x08
    4f54:	30 c0       	rjmp	.+96     	; 0x4fb6 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    4f56:	88 85       	ldd	r24, Y+8	; 0x08
    4f58:	08 2f       	mov	r16, r24
    4f5a:	11 27       	eor	r17, r17
    4f5c:	07 fd       	sbrc	r16, 7
    4f5e:	10 95       	com	r17
    4f60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f64:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f66:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f68:	2a e0       	ldi	r18, 0x0A	; 10
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	40 e0       	ldi	r20, 0x00	; 0
    4f6e:	50 e0       	ldi	r21, 0x00	; 0
    4f70:	bc 01       	movw	r22, r24
    4f72:	cd 01       	movw	r24, r26
    4f74:	0e 94 76 2b 	call	0x56ec	; 0x56ec <__divmodsi4>
    4f78:	dc 01       	movw	r26, r24
    4f7a:	cb 01       	movw	r24, r22
    4f7c:	28 2f       	mov	r18, r24
    4f7e:	20 5d       	subi	r18, 0xD0	; 208
    4f80:	ce 01       	movw	r24, r28
    4f82:	09 96       	adiw	r24, 0x09	; 9
    4f84:	fc 01       	movw	r30, r24
    4f86:	e0 0f       	add	r30, r16
    4f88:	f1 1f       	adc	r31, r17
    4f8a:	20 83       	st	Z, r18
        num /= 10;
    4f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f90:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f92:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f94:	2a e0       	ldi	r18, 0x0A	; 10
    4f96:	30 e0       	ldi	r19, 0x00	; 0
    4f98:	40 e0       	ldi	r20, 0x00	; 0
    4f9a:	50 e0       	ldi	r21, 0x00	; 0
    4f9c:	bc 01       	movw	r22, r24
    4f9e:	cd 01       	movw	r24, r26
    4fa0:	0e 94 76 2b 	call	0x56ec	; 0x56ec <__divmodsi4>
    4fa4:	da 01       	movw	r26, r20
    4fa6:	c9 01       	movw	r24, r18
    4fa8:	8d 8f       	std	Y+29, r24	; 0x1d
    4faa:	9e 8f       	std	Y+30, r25	; 0x1e
    4fac:	af 8f       	std	Y+31, r26	; 0x1f
    4fae:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    4fb0:	88 85       	ldd	r24, Y+8	; 0x08
    4fb2:	81 50       	subi	r24, 0x01	; 1
    4fb4:	88 87       	std	Y+8, r24	; 0x08
    4fb6:	88 85       	ldd	r24, Y+8	; 0x08
    4fb8:	28 2f       	mov	r18, r24
    4fba:	33 27       	eor	r19, r19
    4fbc:	27 fd       	sbrc	r18, 7
    4fbe:	30 95       	com	r19
    4fc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4fc2:	88 2f       	mov	r24, r24
    4fc4:	90 e0       	ldi	r25, 0x00	; 0
    4fc6:	28 17       	cp	r18, r24
    4fc8:	39 07       	cpc	r19, r25
    4fca:	2c f6       	brge	.-118    	; 0x4f56 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    4fcc:	8f 81       	ldd	r24, Y+7	; 0x07
    4fce:	28 2f       	mov	r18, r24
    4fd0:	30 e0       	ldi	r19, 0x00	; 0
    4fd2:	ce 01       	movw	r24, r28
    4fd4:	09 96       	adiw	r24, 0x09	; 9
    4fd6:	fc 01       	movw	r30, r24
    4fd8:	e2 0f       	add	r30, r18
    4fda:	f3 1f       	adc	r31, r19
    4fdc:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    4fde:	ce 01       	movw	r24, r28
    4fe0:	09 96       	adiw	r24, 0x09	; 9
    4fe2:	0e 94 42 26 	call	0x4c84	; 0x4c84 <LCD_voidSendString>
}
    4fe6:	a0 96       	adiw	r28, 0x20	; 32
    4fe8:	0f b6       	in	r0, 0x3f	; 63
    4fea:	f8 94       	cli
    4fec:	de bf       	out	0x3e, r29	; 62
    4fee:	0f be       	out	0x3f, r0	; 63
    4ff0:	cd bf       	out	0x3d, r28	; 61
    4ff2:	cf 91       	pop	r28
    4ff4:	df 91       	pop	r29
    4ff6:	1f 91       	pop	r17
    4ff8:	0f 91       	pop	r16
    4ffa:	08 95       	ret

00004ffc <LM35_voidInit>:

#include "LM35_Interface.h"
#include <util/delay.h>
#include "LM35_Config.h"
void LM35_voidInit()
{
    4ffc:	df 93       	push	r29
    4ffe:	cf 93       	push	r28
    5000:	cd b7       	in	r28, 0x3d	; 61
    5002:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LM35Group,LM35Pin,Input);
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	63 e0       	ldi	r22, 0x03	; 3
    5008:	40 e0       	ldi	r20, 0x00	; 0
    500a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    500e:	cf 91       	pop	r28
    5010:	df 91       	pop	r29
    5012:	08 95       	ret

00005014 <LM35_voidRead>:

void LM35_voidRead(u16 *temp)
{
    5014:	df 93       	push	r29
    5016:	cf 93       	push	r28
    5018:	00 d0       	rcall	.+0      	; 0x501a <LM35_voidRead+0x6>
    501a:	cd b7       	in	r28, 0x3d	; 61
    501c:	de b7       	in	r29, 0x3e	; 62
    501e:	9a 83       	std	Y+2, r25	; 0x02
    5020:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(LM35Pin,temp);
    5022:	29 81       	ldd	r18, Y+1	; 0x01
    5024:	3a 81       	ldd	r19, Y+2	; 0x02
    5026:	83 e0       	ldi	r24, 0x03	; 3
    5028:	b9 01       	movw	r22, r18
    502a:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <ADC_voidReadResultPolling>
	*temp=((u32)(*temp)*ADCRefmV)/DACRes; //convert ot equevilant mV
    502e:	e9 81       	ldd	r30, Y+1	; 0x01
    5030:	fa 81       	ldd	r31, Y+2	; 0x02
    5032:	80 81       	ld	r24, Z
    5034:	91 81       	ldd	r25, Z+1	; 0x01
    5036:	cc 01       	movw	r24, r24
    5038:	a0 e0       	ldi	r26, 0x00	; 0
    503a:	b0 e0       	ldi	r27, 0x00	; 0
    503c:	28 e8       	ldi	r18, 0x88	; 136
    503e:	33 e1       	ldi	r19, 0x13	; 19
    5040:	40 e0       	ldi	r20, 0x00	; 0
    5042:	50 e0       	ldi	r21, 0x00	; 0
    5044:	bc 01       	movw	r22, r24
    5046:	cd 01       	movw	r24, r26
    5048:	0e 94 0e 2b 	call	0x561c	; 0x561c <__mulsi3>
    504c:	dc 01       	movw	r26, r24
    504e:	cb 01       	movw	r24, r22
    5050:	07 2e       	mov	r0, r23
    5052:	7a e0       	ldi	r23, 0x0A	; 10
    5054:	b6 95       	lsr	r27
    5056:	a7 95       	ror	r26
    5058:	97 95       	ror	r25
    505a:	87 95       	ror	r24
    505c:	7a 95       	dec	r23
    505e:	d1 f7       	brne	.-12     	; 0x5054 <LM35_voidRead+0x40>
    5060:	70 2d       	mov	r23, r0
    5062:	e9 81       	ldd	r30, Y+1	; 0x01
    5064:	fa 81       	ldd	r31, Y+2	; 0x02
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	80 83       	st	Z, r24
	*temp= (*temp)/10.00;
    506a:	e9 81       	ldd	r30, Y+1	; 0x01
    506c:	fa 81       	ldd	r31, Y+2	; 0x02
    506e:	80 81       	ld	r24, Z
    5070:	91 81       	ldd	r25, Z+1	; 0x01
    5072:	cc 01       	movw	r24, r24
    5074:	a0 e0       	ldi	r26, 0x00	; 0
    5076:	b0 e0       	ldi	r27, 0x00	; 0
    5078:	bc 01       	movw	r22, r24
    507a:	cd 01       	movw	r24, r26
    507c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5080:	dc 01       	movw	r26, r24
    5082:	cb 01       	movw	r24, r22
    5084:	bc 01       	movw	r22, r24
    5086:	cd 01       	movw	r24, r26
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	40 e2       	ldi	r20, 0x20	; 32
    508e:	51 e4       	ldi	r21, 0x41	; 65
    5090:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	bc 01       	movw	r22, r24
    509a:	cd 01       	movw	r24, r26
    509c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a0:	dc 01       	movw	r26, r24
    50a2:	cb 01       	movw	r24, r22
    50a4:	e9 81       	ldd	r30, Y+1	; 0x01
    50a6:	fa 81       	ldd	r31, Y+2	; 0x02
    50a8:	91 83       	std	Z+1, r25	; 0x01
    50aa:	80 83       	st	Z, r24
}
    50ac:	0f 90       	pop	r0
    50ae:	0f 90       	pop	r0
    50b0:	cf 91       	pop	r28
    50b2:	df 91       	pop	r29
    50b4:	08 95       	ret

000050b6 <LDR_voidInit>:
 */

#include "LDR_Interface.h"

void LDR_voidInit()
{
    50b6:	df 93       	push	r29
    50b8:	cf 93       	push	r28
    50ba:	00 d0       	rcall	.+0      	; 0x50bc <LDR_voidInit+0x6>
    50bc:	0f 92       	push	r0
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LDRGroup,LDRPin,Input);
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	64 e0       	ldi	r22, 0x04	; 4
    50c6:	40 e0       	ldi	r20, 0x00	; 0
    50c8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	ADCInformation ADCInformationLDR;
	ADCInformationLDR.AutoTriggerState=LDR_ADC_AutoTriggerState;
    50cc:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationLDR.TriggerSource=LDR_ADC_TriggerSource;
    50ce:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationLDR.DivisionFactor=LDR_ADC_DivisionFactor;
    50d0:	83 e0       	ldi	r24, 0x03	; 3
    50d2:	8b 83       	std	Y+3, r24	; 0x03
#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
    50d4:	69 81       	ldd	r22, Y+1	; 0x01
    50d6:	7a 81       	ldd	r23, Y+2	; 0x02
    50d8:	8b 81       	ldd	r24, Y+3	; 0x03
    50da:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <ADC_voidInitPolling>
#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    50de:	0f 90       	pop	r0
    50e0:	0f 90       	pop	r0
    50e2:	0f 90       	pop	r0
    50e4:	cf 91       	pop	r28
    50e6:	df 91       	pop	r29
    50e8:	08 95       	ret

000050ea <LDR_voidRead>:

void LDR_voidRead(u16 *Light)
{
    50ea:	df 93       	push	r29
    50ec:	cf 93       	push	r28
    50ee:	00 d0       	rcall	.+0      	; 0x50f0 <LDR_voidRead+0x6>
    50f0:	cd b7       	in	r28, 0x3d	; 61
    50f2:	de b7       	in	r29, 0x3e	; 62
    50f4:	9a 83       	std	Y+2, r25	; 0x02
    50f6:	89 83       	std	Y+1, r24	; 0x01
#if LDRMode==Polling
	ADC_voidReadResultPolling(LDRPin,Light);
    50f8:	29 81       	ldd	r18, Y+1	; 0x01
    50fa:	3a 81       	ldd	r19, Y+2	; 0x02
    50fc:	84 e0       	ldi	r24, 0x04	; 4
    50fe:	b9 01       	movw	r22, r18
    5100:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <ADC_voidReadResultPolling>
	*Light=((u32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV
    5104:	e9 81       	ldd	r30, Y+1	; 0x01
    5106:	fa 81       	ldd	r31, Y+2	; 0x02
    5108:	80 81       	ld	r24, Z
    510a:	91 81       	ldd	r25, Z+1	; 0x01
    510c:	cc 01       	movw	r24, r24
    510e:	a0 e0       	ldi	r26, 0x00	; 0
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	28 e8       	ldi	r18, 0x88	; 136
    5114:	33 e1       	ldi	r19, 0x13	; 19
    5116:	40 e0       	ldi	r20, 0x00	; 0
    5118:	50 e0       	ldi	r21, 0x00	; 0
    511a:	bc 01       	movw	r22, r24
    511c:	cd 01       	movw	r24, r26
    511e:	0e 94 0e 2b 	call	0x561c	; 0x561c <__mulsi3>
    5122:	dc 01       	movw	r26, r24
    5124:	cb 01       	movw	r24, r22
    5126:	07 2e       	mov	r0, r23
    5128:	7a e0       	ldi	r23, 0x0A	; 10
    512a:	b6 95       	lsr	r27
    512c:	a7 95       	ror	r26
    512e:	97 95       	ror	r25
    5130:	87 95       	ror	r24
    5132:	7a 95       	dec	r23
    5134:	d1 f7       	brne	.-12     	; 0x512a <LDR_voidRead+0x40>
    5136:	70 2d       	mov	r23, r0
    5138:	e9 81       	ldd	r30, Y+1	; 0x01
    513a:	fa 81       	ldd	r31, Y+2	; 0x02
    513c:	91 83       	std	Z+1, r25	; 0x01
    513e:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    5140:	0f 90       	pop	r0
    5142:	0f 90       	pop	r0
    5144:	cf 91       	pop	r28
    5146:	df 91       	pop	r29
    5148:	08 95       	ret

0000514a <KEYPAD_voidInit>:
#include "Keypad_Interface.h"
#include "../../Common/definition.h"
u8 keypad_value1[Row][Column]= KEYPAD_ARR1;
u8 keypad_value2[Row][Column]=KEYPAD_ARR2;
void KEYPAD_voidInit()
{
    514a:	df 93       	push	r29
    514c:	cf 93       	push	r28
    514e:	cd b7       	in	r28, 0x3d	; 61
    5150:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(KeypadGroup,0xF0);
    5152:	84 e0       	ldi	r24, 0x04	; 4
    5154:	60 ef       	ldi	r22, 0xF0	; 240
    5156:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(KeypadGroup,0xFF);
    515a:	84 e0       	ldi	r24, 0x04	; 4
    515c:	6f ef       	ldi	r22, 0xFF	; 255
    515e:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
}
    5162:	cf 91       	pop	r28
    5164:	df 91       	pop	r29
    5166:	08 95       	ret

00005168 <KEYPAD_u8GetValue1>:

u8 KEYPAD_u8GetValue1()
{
    5168:	df 93       	push	r29
    516a:	cf 93       	push	r28
    516c:	00 d0       	rcall	.+0      	; 0x516e <KEYPAD_u8GetValue1+0x6>
    516e:	0f 92       	push	r0
    5170:	cd b7       	in	r28, 0x3d	; 61
    5172:	de b7       	in	r29, 0x3e	; 62
	u8 C , R ;
	for(C=0;C<Column;C++)
    5174:	1a 82       	std	Y+2, r1	; 0x02
    5176:	38 c0       	rjmp	.+112    	; 0x51e8 <KEYPAD_u8GetValue1+0x80>
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
    5178:	84 e0       	ldi	r24, 0x04	; 4
    517a:	6f ef       	ldi	r22, 0xFF	; 255
    517c:	0e 94 32 19 	call	0x3264	; 0x3264 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    5180:	8a 81       	ldd	r24, Y+2	; 0x02
    5182:	98 2f       	mov	r25, r24
    5184:	9c 5f       	subi	r25, 0xFC	; 252
    5186:	84 e0       	ldi	r24, 0x04	; 4
    5188:	69 2f       	mov	r22, r25
    518a:	40 e0       	ldi	r20, 0x00	; 0
    518c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    5190:	19 82       	std	Y+1, r1	; 0x01
    5192:	1c c0       	rjmp	.+56     	; 0x51cc <KEYPAD_u8GetValue1+0x64>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    5194:	84 e0       	ldi	r24, 0x04	; 4
    5196:	69 81       	ldd	r22, Y+1	; 0x01
    5198:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
    519c:	88 23       	and	r24, r24
    519e:	99 f4       	brne	.+38     	; 0x51c6 <KEYPAD_u8GetValue1+0x5e>
			{
				return keypad_value1[R][C];
    51a0:	89 81       	ldd	r24, Y+1	; 0x01
    51a2:	48 2f       	mov	r20, r24
    51a4:	50 e0       	ldi	r21, 0x00	; 0
    51a6:	8a 81       	ldd	r24, Y+2	; 0x02
    51a8:	28 2f       	mov	r18, r24
    51aa:	30 e0       	ldi	r19, 0x00	; 0
    51ac:	ca 01       	movw	r24, r20
    51ae:	88 0f       	add	r24, r24
    51b0:	99 1f       	adc	r25, r25
    51b2:	88 0f       	add	r24, r24
    51b4:	99 1f       	adc	r25, r25
    51b6:	82 0f       	add	r24, r18
    51b8:	93 1f       	adc	r25, r19
    51ba:	fc 01       	movw	r30, r24
    51bc:	ee 58       	subi	r30, 0x8E	; 142
    51be:	fe 4f       	sbci	r31, 0xFE	; 254
    51c0:	80 81       	ld	r24, Z
    51c2:	8b 83       	std	Y+3, r24	; 0x03
    51c4:	16 c0       	rjmp	.+44     	; 0x51f2 <KEYPAD_u8GetValue1+0x8a>
	u8 C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    51c6:	89 81       	ldd	r24, Y+1	; 0x01
    51c8:	8f 5f       	subi	r24, 0xFF	; 255
    51ca:	89 83       	std	Y+1, r24	; 0x01
    51cc:	89 81       	ldd	r24, Y+1	; 0x01
    51ce:	84 30       	cpi	r24, 0x04	; 4
    51d0:	08 f3       	brcs	.-62     	; 0x5194 <KEYPAD_u8GetValue1+0x2c>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
    51d2:	8a 81       	ldd	r24, Y+2	; 0x02
    51d4:	98 2f       	mov	r25, r24
    51d6:	9c 5f       	subi	r25, 0xFC	; 252
    51d8:	84 e0       	ldi	r24, 0x04	; 4
    51da:	69 2f       	mov	r22, r25
    51dc:	41 e0       	ldi	r20, 0x01	; 1
    51de:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}

u8 KEYPAD_u8GetValue1()
{
	u8 C , R ;
	for(C=0;C<Column;C++)
    51e2:	8a 81       	ldd	r24, Y+2	; 0x02
    51e4:	8f 5f       	subi	r24, 0xFF	; 255
    51e6:	8a 83       	std	Y+2, r24	; 0x02
    51e8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ea:	84 30       	cpi	r24, 0x04	; 4
    51ec:	28 f2       	brcs	.-118    	; 0x5178 <KEYPAD_u8GetValue1+0x10>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
	}
	return Unpressed ;
    51ee:	8f ef       	ldi	r24, 0xFF	; 255
    51f0:	8b 83       	std	Y+3, r24	; 0x03
    51f2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    51f4:	0f 90       	pop	r0
    51f6:	0f 90       	pop	r0
    51f8:	0f 90       	pop	r0
    51fa:	cf 91       	pop	r28
    51fc:	df 91       	pop	r29
    51fe:	08 95       	ret

00005200 <KEYPAD_charGetValue2>:

char KEYPAD_charGetValue2()
{
    5200:	df 93       	push	r29
    5202:	cf 93       	push	r28
    5204:	00 d0       	rcall	.+0      	; 0x5206 <KEYPAD_charGetValue2+0x6>
    5206:	00 d0       	rcall	.+0      	; 0x5208 <KEYPAD_charGetValue2+0x8>
    5208:	0f 92       	push	r0
    520a:	cd b7       	in	r28, 0x3d	; 61
    520c:	de b7       	in	r29, 0x3e	; 62
	int C , R ;
	for(C=0;C<Column;C++)
    520e:	1c 82       	std	Y+4, r1	; 0x04
    5210:	1b 82       	std	Y+3, r1	; 0x03
    5212:	39 c0       	rjmp	.+114    	; 0x5286 <KEYPAD_charGetValue2+0x86>
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    5214:	8b 81       	ldd	r24, Y+3	; 0x03
    5216:	98 2f       	mov	r25, r24
    5218:	9c 5f       	subi	r25, 0xFC	; 252
    521a:	84 e0       	ldi	r24, 0x04	; 4
    521c:	69 2f       	mov	r22, r25
    521e:	40 e0       	ldi	r20, 0x00	; 0
    5220:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    5224:	1a 82       	std	Y+2, r1	; 0x02
    5226:	19 82       	std	Y+1, r1	; 0x01
    5228:	1c c0       	rjmp	.+56     	; 0x5262 <KEYPAD_charGetValue2+0x62>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    522a:	99 81       	ldd	r25, Y+1	; 0x01
    522c:	84 e0       	ldi	r24, 0x04	; 4
    522e:	69 2f       	mov	r22, r25
    5230:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
    5234:	88 23       	and	r24, r24
    5236:	81 f4       	brne	.+32     	; 0x5258 <KEYPAD_charGetValue2+0x58>
			{
				return keypad_value1[R][C];
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	9a 81       	ldd	r25, Y+2	; 0x02
    523c:	2b 81       	ldd	r18, Y+3	; 0x03
    523e:	3c 81       	ldd	r19, Y+4	; 0x04
    5240:	88 0f       	add	r24, r24
    5242:	99 1f       	adc	r25, r25
    5244:	88 0f       	add	r24, r24
    5246:	99 1f       	adc	r25, r25
    5248:	82 0f       	add	r24, r18
    524a:	93 1f       	adc	r25, r19
    524c:	fc 01       	movw	r30, r24
    524e:	ee 58       	subi	r30, 0x8E	; 142
    5250:	fe 4f       	sbci	r31, 0xFE	; 254
    5252:	80 81       	ld	r24, Z
    5254:	8d 83       	std	Y+5, r24	; 0x05
    5256:	1e c0       	rjmp	.+60     	; 0x5294 <KEYPAD_charGetValue2+0x94>
{
	int C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    5258:	89 81       	ldd	r24, Y+1	; 0x01
    525a:	9a 81       	ldd	r25, Y+2	; 0x02
    525c:	01 96       	adiw	r24, 0x01	; 1
    525e:	9a 83       	std	Y+2, r25	; 0x02
    5260:	89 83       	std	Y+1, r24	; 0x01
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	9a 81       	ldd	r25, Y+2	; 0x02
    5266:	84 30       	cpi	r24, 0x04	; 4
    5268:	91 05       	cpc	r25, r1
    526a:	fc f2       	brlt	.-66     	; 0x522a <KEYPAD_charGetValue2+0x2a>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    526c:	8b 81       	ldd	r24, Y+3	; 0x03
    526e:	98 2f       	mov	r25, r24
    5270:	9c 5f       	subi	r25, 0xFC	; 252
    5272:	84 e0       	ldi	r24, 0x04	; 4
    5274:	69 2f       	mov	r22, r25
    5276:	40 e0       	ldi	r20, 0x00	; 0
    5278:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}

char KEYPAD_charGetValue2()
{
	int C , R ;
	for(C=0;C<Column;C++)
    527c:	8b 81       	ldd	r24, Y+3	; 0x03
    527e:	9c 81       	ldd	r25, Y+4	; 0x04
    5280:	01 96       	adiw	r24, 0x01	; 1
    5282:	9c 83       	std	Y+4, r25	; 0x04
    5284:	8b 83       	std	Y+3, r24	; 0x03
    5286:	8b 81       	ldd	r24, Y+3	; 0x03
    5288:	9c 81       	ldd	r25, Y+4	; 0x04
    528a:	84 30       	cpi	r24, 0x04	; 4
    528c:	91 05       	cpc	r25, r1
    528e:	14 f2       	brlt	.-124    	; 0x5214 <KEYPAD_charGetValue2+0x14>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
	}
	return Unpressed ;
    5290:	8f ef       	ldi	r24, 0xFF	; 255
    5292:	8d 83       	std	Y+5, r24	; 0x05
    5294:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5296:	0f 90       	pop	r0
    5298:	0f 90       	pop	r0
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	cf 91       	pop	r28
    52a2:	df 91       	pop	r29
    52a4:	08 95       	ret

000052a6 <GasSensor_voidAnalogInit>:
 */

#include "GasSensor_Interface.h"

void GasSensor_voidAnalogInit()
{
    52a6:	df 93       	push	r29
    52a8:	cf 93       	push	r28
    52aa:	00 d0       	rcall	.+0      	; 0x52ac <GasSensor_voidAnalogInit+0x6>
    52ac:	0f 92       	push	r0
    52ae:	cd b7       	in	r28, 0x3d	; 61
    52b0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    52b2:	81 e0       	ldi	r24, 0x01	; 1
    52b4:	65 e0       	ldi	r22, 0x05	; 5
    52b6:	40 e0       	ldi	r20, 0x00	; 0
    52b8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	ADCInformation ADCInformationGasSensor;
	ADCInformationGasSensor.AutoTriggerState=GasSensor_ADC_AutoTriggerState;
    52bc:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationGasSensor.TriggerSource=GasSensor_ADC_TriggerSource;
    52be:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationGasSensor.DivisionFactor=GasSensor_ADC_DivisionFactor;
    52c0:	83 e0       	ldi	r24, 0x03	; 3
    52c2:	8b 83       	std	Y+3, r24	; 0x03
#if GasSensorMode==Polling
	ADC_voidInitPolling(ADCInformationGasSensor);
    52c4:	69 81       	ldd	r22, Y+1	; 0x01
    52c6:	7a 81       	ldd	r23, Y+2	; 0x02
    52c8:	8b 81       	ldd	r24, Y+3	; 0x03
    52ca:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <ADC_voidInitPolling>
#elif GasSensorMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    52ce:	0f 90       	pop	r0
    52d0:	0f 90       	pop	r0
    52d2:	0f 90       	pop	r0
    52d4:	cf 91       	pop	r28
    52d6:	df 91       	pop	r29
    52d8:	08 95       	ret

000052da <GasSensor_voidDigitalInit>:

void GasSensor_voidDigitalInit()
{
    52da:	df 93       	push	r29
    52dc:	cf 93       	push	r28
    52de:	cd b7       	in	r28, 0x3d	; 61
    52e0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	65 e0       	ldi	r22, 0x05	; 5
    52e6:	40 e0       	ldi	r20, 0x00	; 0
    52e8:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    52ec:	cf 91       	pop	r28
    52ee:	df 91       	pop	r29
    52f0:	08 95       	ret

000052f2 <GasSensor_f32ReadAnalog>:

void GasSensor_f32ReadAnalog(u16 read)
{
    52f2:	df 93       	push	r29
    52f4:	cf 93       	push	r28
    52f6:	00 d0       	rcall	.+0      	; 0x52f8 <GasSensor_f32ReadAnalog+0x6>
    52f8:	cd b7       	in	r28, 0x3d	; 61
    52fa:	de b7       	in	r29, 0x3e	; 62
    52fc:	9a 83       	std	Y+2, r25	; 0x02
    52fe:	89 83       	std	Y+1, r24	; 0x01


}
    5300:	0f 90       	pop	r0
    5302:	0f 90       	pop	r0
    5304:	cf 91       	pop	r28
    5306:	df 91       	pop	r29
    5308:	08 95       	ret

0000530a <GasSensor_u8DigitalState>:

u8 GasSensor_u8DigitalState()
{
    530a:	df 93       	push	r29
    530c:	cf 93       	push	r28
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8ReadPinValue(GasSensorGroup,GasSensorPin);
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	65 e0       	ldi	r22, 0x05	; 5
    5316:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
}
    531a:	cf 91       	pop	r28
    531c:	df 91       	pop	r29
    531e:	08 95       	ret

00005320 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "../../Common/STD_Types.h"

u8 EEPROM_writeByte(u16 u16addr, u8 u8data)
{
    5320:	df 93       	push	r29
    5322:	cf 93       	push	r28
    5324:	00 d0       	rcall	.+0      	; 0x5326 <EEPROM_writeByte+0x6>
    5326:	00 d0       	rcall	.+0      	; 0x5328 <EEPROM_writeByte+0x8>
    5328:	cd b7       	in	r28, 0x3d	; 61
    532a:	de b7       	in	r29, 0x3e	; 62
    532c:	9a 83       	std	Y+2, r25	; 0x02
    532e:	89 83       	std	Y+1, r24	; 0x01
    5330:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    5332:	0e 94 0c 12 	call	0x2418	; 0x2418 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    5336:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    533a:	88 30       	cpi	r24, 0x08	; 8
    533c:	11 f0       	breq	.+4      	; 0x5342 <EEPROM_writeByte+0x22>
        return ERROR;
    533e:	1c 82       	std	Y+4, r1	; 0x04
    5340:	28 c0       	rjmp	.+80     	; 0x5392 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)(0xA0 | ((u16addr & 0x0700)>>7)));
    5342:	89 81       	ldd	r24, Y+1	; 0x01
    5344:	9a 81       	ldd	r25, Y+2	; 0x02
    5346:	80 70       	andi	r24, 0x00	; 0
    5348:	97 70       	andi	r25, 0x07	; 7
    534a:	88 0f       	add	r24, r24
    534c:	89 2f       	mov	r24, r25
    534e:	88 1f       	adc	r24, r24
    5350:	99 0b       	sbc	r25, r25
    5352:	91 95       	neg	r25
    5354:	80 6a       	ori	r24, 0xA0	; 160
    5356:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    535a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    535e:	88 31       	cpi	r24, 0x18	; 24
    5360:	11 f0       	breq	.+4      	; 0x5366 <EEPROM_writeByte+0x46>
        return ERROR; 
    5362:	1c 82       	std	Y+4, r1	; 0x04
    5364:	16 c0       	rjmp	.+44     	; 0x5392 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    5366:	89 81       	ldd	r24, Y+1	; 0x01
    5368:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    536c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    5370:	88 32       	cpi	r24, 0x28	; 40
    5372:	11 f0       	breq	.+4      	; 0x5378 <EEPROM_writeByte+0x58>
        return ERROR;
    5374:	1c 82       	std	Y+4, r1	; 0x04
    5376:	0d c0       	rjmp	.+26     	; 0x5392 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    5378:	8b 81       	ldd	r24, Y+3	; 0x03
    537a:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    537e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    5382:	88 32       	cpi	r24, 0x28	; 40
    5384:	11 f0       	breq	.+4      	; 0x538a <EEPROM_writeByte+0x6a>
        return ERROR;
    5386:	1c 82       	std	Y+4, r1	; 0x04
    5388:	04 c0       	rjmp	.+8      	; 0x5392 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    538a:	0e 94 1c 12 	call	0x2438	; 0x2438 <TWI_stop>
	
    return SUCCESS;
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	8c 83       	std	Y+4, r24	; 0x04
    5392:	8c 81       	ldd	r24, Y+4	; 0x04
}
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    5398:	0f 90       	pop	r0
    539a:	0f 90       	pop	r0
    539c:	cf 91       	pop	r28
    539e:	df 91       	pop	r29
    53a0:	08 95       	ret

000053a2 <EEPROM_readByte>:

u8 EEPROM_readByte(u16 u16addr, u8 *u8data)
{
    53a2:	df 93       	push	r29
    53a4:	cf 93       	push	r28
    53a6:	00 d0       	rcall	.+0      	; 0x53a8 <EEPROM_readByte+0x6>
    53a8:	00 d0       	rcall	.+0      	; 0x53aa <EEPROM_readByte+0x8>
    53aa:	0f 92       	push	r0
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	9a 83       	std	Y+2, r25	; 0x02
    53b2:	89 83       	std	Y+1, r24	; 0x01
    53b4:	7c 83       	std	Y+4, r23	; 0x04
    53b6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    53b8:	0e 94 0c 12 	call	0x2418	; 0x2418 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    53bc:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    53c0:	88 30       	cpi	r24, 0x08	; 8
    53c2:	11 f0       	breq	.+4      	; 0x53c8 <EEPROM_readByte+0x26>
        return ERROR;
    53c4:	1d 82       	std	Y+5, r1	; 0x05
    53c6:	44 c0       	rjmp	.+136    	; 0x5450 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7)));
    53c8:	89 81       	ldd	r24, Y+1	; 0x01
    53ca:	9a 81       	ldd	r25, Y+2	; 0x02
    53cc:	80 70       	andi	r24, 0x00	; 0
    53ce:	97 70       	andi	r25, 0x07	; 7
    53d0:	88 0f       	add	r24, r24
    53d2:	89 2f       	mov	r24, r25
    53d4:	88 1f       	adc	r24, r24
    53d6:	99 0b       	sbc	r25, r25
    53d8:	91 95       	neg	r25
    53da:	80 6a       	ori	r24, 0xA0	; 160
    53dc:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    53e0:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    53e4:	88 31       	cpi	r24, 0x18	; 24
    53e6:	11 f0       	breq	.+4      	; 0x53ec <EEPROM_readByte+0x4a>
        return ERROR;
    53e8:	1d 82       	std	Y+5, r1	; 0x05
    53ea:	32 c0       	rjmp	.+100    	; 0x5450 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((u8)(u16addr));
    53ec:	89 81       	ldd	r24, Y+1	; 0x01
    53ee:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    53f2:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    53f6:	88 32       	cpi	r24, 0x28	; 40
    53f8:	11 f0       	breq	.+4      	; 0x53fe <EEPROM_readByte+0x5c>
        return ERROR;
    53fa:	1d 82       	std	Y+5, r1	; 0x05
    53fc:	29 c0       	rjmp	.+82     	; 0x5450 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    53fe:	0e 94 0c 12 	call	0x2418	; 0x2418 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    5402:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    5406:	80 31       	cpi	r24, 0x10	; 16
    5408:	11 f0       	breq	.+4      	; 0x540e <EEPROM_readByte+0x6c>
        return ERROR;
    540a:	1d 82       	std	Y+5, r1	; 0x05
    540c:	21 c0       	rjmp	.+66     	; 0x5450 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((u8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    540e:	89 81       	ldd	r24, Y+1	; 0x01
    5410:	9a 81       	ldd	r25, Y+2	; 0x02
    5412:	80 70       	andi	r24, 0x00	; 0
    5414:	97 70       	andi	r25, 0x07	; 7
    5416:	88 0f       	add	r24, r24
    5418:	89 2f       	mov	r24, r25
    541a:	88 1f       	adc	r24, r24
    541c:	99 0b       	sbc	r25, r25
    541e:	91 95       	neg	r25
    5420:	81 6a       	ori	r24, 0xA1	; 161
    5422:	0e 94 27 12 	call	0x244e	; 0x244e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    5426:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    542a:	80 34       	cpi	r24, 0x40	; 64
    542c:	11 f0       	breq	.+4      	; 0x5432 <EEPROM_readByte+0x90>
        return ERROR;
    542e:	1d 82       	std	Y+5, r1	; 0x05
    5430:	0f c0       	rjmp	.+30     	; 0x5450 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    5432:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TWI_readByteWithNACK>
    5436:	eb 81       	ldd	r30, Y+3	; 0x03
    5438:	fc 81       	ldd	r31, Y+4	; 0x04
    543a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    543c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <TWI_getStatus>
    5440:	88 35       	cpi	r24, 0x58	; 88
    5442:	11 f0       	breq	.+4      	; 0x5448 <EEPROM_readByte+0xa6>
        return ERROR;
    5444:	1d 82       	std	Y+5, r1	; 0x05
    5446:	04 c0       	rjmp	.+8      	; 0x5450 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    5448:	0e 94 1c 12 	call	0x2438	; 0x2438 <TWI_stop>

    return SUCCESS;
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	8d 83       	std	Y+5, r24	; 0x05
    5450:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5452:	0f 90       	pop	r0
    5454:	0f 90       	pop	r0
    5456:	0f 90       	pop	r0
    5458:	0f 90       	pop	r0
    545a:	0f 90       	pop	r0
    545c:	cf 91       	pop	r28
    545e:	df 91       	pop	r29
    5460:	08 95       	ret

00005462 <DCMotor_voidInit>:

#include "DCMotor_Interface.h"


void DCMotor_voidInit()
{
    5462:	df 93       	push	r29
    5464:	cf 93       	push	r28
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB1,Output);
    546a:	81 e0       	ldi	r24, 0x01	; 1
    546c:	60 e0       	ldi	r22, 0x00	; 0
    546e:	41 e0       	ldi	r20, 0x01	; 1
    5470:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB2,Output);
    5474:	81 e0       	ldi	r24, 0x01	; 1
    5476:	61 e0       	ldi	r22, 0x01	; 1
    5478:	41 e0       	ldi	r20, 0x01	; 1
    547a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB3,Output);
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	62 e0       	ldi	r22, 0x02	; 2
    5482:	41 e0       	ldi	r20, 0x01	; 1
    5484:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB4,Output);
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	63 e0       	ldi	r22, 0x03	; 3
    548c:	41 e0       	ldi	r20, 0x01	; 1
    548e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    5492:	cf 91       	pop	r28
    5494:	df 91       	pop	r29
    5496:	08 95       	ret

00005498 <DCMotor_voidOnMaxSpeed>:

void DCMotor_voidOnMaxSpeed(u8 Dir)
{
    5498:	df 93       	push	r29
    549a:	cf 93       	push	r28
    549c:	0f 92       	push	r0
    549e:	cd b7       	in	r28, 0x3d	; 61
    54a0:	de b7       	in	r29, 0x3e	; 62
    54a2:	89 83       	std	Y+1, r24	; 0x01
	if (Dir==clock_wise)
    54a4:	89 81       	ldd	r24, Y+1	; 0x01
    54a6:	88 23       	and	r24, r24
    54a8:	a9 f4       	brne	.+42     	; 0x54d4 <DCMotor_voidOnMaxSpeed+0x3c>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,High);
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	60 e0       	ldi	r22, 0x00	; 0
    54ae:	41 e0       	ldi	r20, 0x01	; 1
    54b0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,High);
    54b4:	81 e0       	ldi	r24, 0x01	; 1
    54b6:	63 e0       	ldi	r22, 0x03	; 3
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    54be:	81 e0       	ldi	r24, 0x01	; 1
    54c0:	61 e0       	ldi	r22, 0x01	; 1
    54c2:	40 e0       	ldi	r20, 0x00	; 0
    54c4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	62 e0       	ldi	r22, 0x02	; 2
    54cc:	40 e0       	ldi	r20, 0x00	; 0
    54ce:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
    54d2:	17 c0       	rjmp	.+46     	; 0x5502 <DCMotor_voidOnMaxSpeed+0x6a>
	}
	else if(Dir==anti_clock_wise)
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	81 30       	cpi	r24, 0x01	; 1
    54d8:	a1 f4       	brne	.+40     	; 0x5502 <DCMotor_voidOnMaxSpeed+0x6a>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    54da:	81 e0       	ldi	r24, 0x01	; 1
    54dc:	60 e0       	ldi	r22, 0x00	; 0
    54de:	40 e0       	ldi	r20, 0x00	; 0
    54e0:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    54e4:	81 e0       	ldi	r24, 0x01	; 1
    54e6:	63 e0       	ldi	r22, 0x03	; 3
    54e8:	40 e0       	ldi	r20, 0x00	; 0
    54ea:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,High);
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	61 e0       	ldi	r22, 0x01	; 1
    54f2:	41 e0       	ldi	r20, 0x01	; 1
    54f4:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,High);
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	62 e0       	ldi	r22, 0x02	; 2
    54fc:	41 e0       	ldi	r20, 0x01	; 1
    54fe:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	}
}
    5502:	0f 90       	pop	r0
    5504:	cf 91       	pop	r28
    5506:	df 91       	pop	r29
    5508:	08 95       	ret

0000550a <DCMotor_voidOff>:

void DCMotor_voidOff()
{
    550a:	df 93       	push	r29
    550c:	cf 93       	push	r28
    550e:	cd b7       	in	r28, 0x3d	; 61
    5510:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	40 e0       	ldi	r20, 0x00	; 0
    5518:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	63 e0       	ldi	r22, 0x03	; 3
    5520:	40 e0       	ldi	r20, 0x00	; 0
    5522:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	61 e0       	ldi	r22, 0x01	; 1
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	62 e0       	ldi	r22, 0x02	; 2
    5534:	40 e0       	ldi	r20, 0x00	; 0
    5536:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    553a:	cf 91       	pop	r28
    553c:	df 91       	pop	r29
    553e:	08 95       	ret

00005540 <BUZZER_voidInit>:
 *      Author: salma
 */
#include "Buzzer_Interface.h"
#include <util/delay.h>
void BUZZER_voidInit ()
{
    5540:	df 93       	push	r29
    5542:	cf 93       	push	r28
    5544:	cd b7       	in	r28, 0x3d	; 61
    5546:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(BuzzerGruop,BuzzerPin,Output);
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	61 e0       	ldi	r22, 0x01	; 1
    554c:	41 e0       	ldi	r20, 0x01	; 1
    554e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
}
    5552:	cf 91       	pop	r28
    5554:	df 91       	pop	r29
    5556:	08 95       	ret

00005558 <BUZZER_voidOn>:

void BUZZER_voidOn ()
{
    5558:	df 93       	push	r29
    555a:	cf 93       	push	r28
    555c:	cd b7       	in	r28, 0x3d	; 61
    555e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,High);
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	61 e0       	ldi	r22, 0x01	; 1
    5564:	41 e0       	ldi	r20, 0x01	; 1
    5566:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    556a:	cf 91       	pop	r28
    556c:	df 91       	pop	r29
    556e:	08 95       	ret

00005570 <BUZZER_voidOff>:

void BUZZER_voidOff ()
{
    5570:	df 93       	push	r29
    5572:	cf 93       	push	r28
    5574:	cd b7       	in	r28, 0x3d	; 61
    5576:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,Low);
    5578:	81 e0       	ldi	r24, 0x01	; 1
    557a:	61 e0       	ldi	r22, 0x01	; 1
    557c:	40 e0       	ldi	r20, 0x00	; 0
    557e:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <DIO_voidSetPinValue>
}
    5582:	cf 91       	pop	r28
    5584:	df 91       	pop	r29
    5586:	08 95       	ret

00005588 <BUZZER_voidToggle>:

void BUZZER_voidToggle ()
{
    5588:	df 93       	push	r29
    558a:	cf 93       	push	r28
    558c:	cd b7       	in	r28, 0x3d	; 61
    558e:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8ReadPinValue(BuzzerGruop,BuzzerPin)==High)
    5590:	81 e0       	ldi	r24, 0x01	; 1
    5592:	61 e0       	ldi	r22, 0x01	; 1
    5594:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <DIO_u8ReadPinValue>
    5598:	81 30       	cpi	r24, 0x01	; 1
    559a:	19 f4       	brne	.+6      	; 0x55a2 <BUZZER_voidToggle+0x1a>
	{
		BUZZER_voidOff();
    559c:	0e 94 b8 2a 	call	0x5570	; 0x5570 <BUZZER_voidOff>
    55a0:	02 c0       	rjmp	.+4      	; 0x55a6 <BUZZER_voidToggle+0x1e>
	}
	else
	{
		BUZZER_voidOn();
    55a2:	0e 94 ac 2a 	call	0x5558	; 0x5558 <BUZZER_voidOn>
	}
}
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	08 95       	ret

000055ac <BluetoothModule_voidInit>:
 */

#include "BluetoothModule_Interface.h"

void BluetoothModule_voidInit()
{
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(UARTGroup,TX,output);
    55b4:	84 e0       	ldi	r24, 0x04	; 4
    55b6:	61 e0       	ldi	r22, 0x01	; 1
    55b8:	41 e0       	ldi	r20, 0x01	; 1
    55ba:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(UARTGroup,RX,input);
    55be:	84 e0       	ldi	r24, 0x04	; 4
    55c0:	60 e0       	ldi	r22, 0x00	; 0
    55c2:	40 e0       	ldi	r20, 0x00	; 0
    55c4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <DIO_voidSetPinDir>
	UART_voidInit(9600);
    55c8:	60 e8       	ldi	r22, 0x80	; 128
    55ca:	75 e2       	ldi	r23, 0x25	; 37
    55cc:	80 e0       	ldi	r24, 0x00	; 0
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
}
    55d4:	cf 91       	pop	r28
    55d6:	df 91       	pop	r29
    55d8:	08 95       	ret

000055da <BluetoothModule_u8RecieveData>:

u8 BluetoothModule_u8RecieveData()
{
    55da:	df 93       	push	r29
    55dc:	cf 93       	push	r28
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
	return UART_u8RecieveData();
    55e2:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_u8RecieveData>
}
    55e6:	cf 91       	pop	r28
    55e8:	df 91       	pop	r29
    55ea:	08 95       	ret

000055ec <main>:
#include "HAL/EEPROM_EXTERNAL/external_eeprom.h"
#include "HAL/Lcd/Lcd_Interface.h"
#include "MCAL/EEPROM_INTERNAL/EEPROM_Interface.h"
#include <util/delay.h>
void main()
{
    55ec:	df 93       	push	r29
    55ee:	cf 93       	push	r28
    55f0:	0f 92       	push	r0
    55f2:	cd b7       	in	r28, 0x3d	; 61
    55f4:	de b7       	in	r29, 0x3e	; 62

	LCD_voidInit();
    55f6:	0e 94 48 24 	call	0x4890	; 0x4890 <LCD_voidInit>
	EEPROM_Write(0x00,'B');
    55fa:	80 e0       	ldi	r24, 0x00	; 0
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	62 e4       	ldi	r22, 0x42	; 66
    5600:	0e 94 01 15 	call	0x2a02	; 0x2a02 <EEPROM_Write>
	u8 data;
	data=EEPROM_Read(0);
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	90 e0       	ldi	r25, 0x00	; 0
    5608:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <EEPROM_Read>
    560c:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendData(data);
    560e:	89 81       	ldd	r24, Y+1	; 0x01
    5610:	0e 94 26 24 	call	0x484c	; 0x484c <LCD_voidSendData>
	LCD_voidSendData('a');
    5614:	81 e6       	ldi	r24, 0x61	; 97
    5616:	0e 94 26 24 	call	0x484c	; 0x484c <LCD_voidSendData>
    561a:	ff cf       	rjmp	.-2      	; 0x561a <main+0x2e>

0000561c <__mulsi3>:
    561c:	62 9f       	mul	r22, r18
    561e:	d0 01       	movw	r26, r0
    5620:	73 9f       	mul	r23, r19
    5622:	f0 01       	movw	r30, r0
    5624:	82 9f       	mul	r24, r18
    5626:	e0 0d       	add	r30, r0
    5628:	f1 1d       	adc	r31, r1
    562a:	64 9f       	mul	r22, r20
    562c:	e0 0d       	add	r30, r0
    562e:	f1 1d       	adc	r31, r1
    5630:	92 9f       	mul	r25, r18
    5632:	f0 0d       	add	r31, r0
    5634:	83 9f       	mul	r24, r19
    5636:	f0 0d       	add	r31, r0
    5638:	74 9f       	mul	r23, r20
    563a:	f0 0d       	add	r31, r0
    563c:	65 9f       	mul	r22, r21
    563e:	f0 0d       	add	r31, r0
    5640:	99 27       	eor	r25, r25
    5642:	72 9f       	mul	r23, r18
    5644:	b0 0d       	add	r27, r0
    5646:	e1 1d       	adc	r30, r1
    5648:	f9 1f       	adc	r31, r25
    564a:	63 9f       	mul	r22, r19
    564c:	b0 0d       	add	r27, r0
    564e:	e1 1d       	adc	r30, r1
    5650:	f9 1f       	adc	r31, r25
    5652:	bd 01       	movw	r22, r26
    5654:	cf 01       	movw	r24, r30
    5656:	11 24       	eor	r1, r1
    5658:	08 95       	ret

0000565a <__udivmodhi4>:
    565a:	aa 1b       	sub	r26, r26
    565c:	bb 1b       	sub	r27, r27
    565e:	51 e1       	ldi	r21, 0x11	; 17
    5660:	07 c0       	rjmp	.+14     	; 0x5670 <__udivmodhi4_ep>

00005662 <__udivmodhi4_loop>:
    5662:	aa 1f       	adc	r26, r26
    5664:	bb 1f       	adc	r27, r27
    5666:	a6 17       	cp	r26, r22
    5668:	b7 07       	cpc	r27, r23
    566a:	10 f0       	brcs	.+4      	; 0x5670 <__udivmodhi4_ep>
    566c:	a6 1b       	sub	r26, r22
    566e:	b7 0b       	sbc	r27, r23

00005670 <__udivmodhi4_ep>:
    5670:	88 1f       	adc	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	5a 95       	dec	r21
    5676:	a9 f7       	brne	.-22     	; 0x5662 <__udivmodhi4_loop>
    5678:	80 95       	com	r24
    567a:	90 95       	com	r25
    567c:	bc 01       	movw	r22, r24
    567e:	cd 01       	movw	r24, r26
    5680:	08 95       	ret

00005682 <__divmodhi4>:
    5682:	97 fb       	bst	r25, 7
    5684:	09 2e       	mov	r0, r25
    5686:	07 26       	eor	r0, r23
    5688:	0a d0       	rcall	.+20     	; 0x569e <__divmodhi4_neg1>
    568a:	77 fd       	sbrc	r23, 7
    568c:	04 d0       	rcall	.+8      	; 0x5696 <__divmodhi4_neg2>
    568e:	e5 df       	rcall	.-54     	; 0x565a <__udivmodhi4>
    5690:	06 d0       	rcall	.+12     	; 0x569e <__divmodhi4_neg1>
    5692:	00 20       	and	r0, r0
    5694:	1a f4       	brpl	.+6      	; 0x569c <__divmodhi4_exit>

00005696 <__divmodhi4_neg2>:
    5696:	70 95       	com	r23
    5698:	61 95       	neg	r22
    569a:	7f 4f       	sbci	r23, 0xFF	; 255

0000569c <__divmodhi4_exit>:
    569c:	08 95       	ret

0000569e <__divmodhi4_neg1>:
    569e:	f6 f7       	brtc	.-4      	; 0x569c <__divmodhi4_exit>
    56a0:	90 95       	com	r25
    56a2:	81 95       	neg	r24
    56a4:	9f 4f       	sbci	r25, 0xFF	; 255
    56a6:	08 95       	ret

000056a8 <__udivmodsi4>:
    56a8:	a1 e2       	ldi	r26, 0x21	; 33
    56aa:	1a 2e       	mov	r1, r26
    56ac:	aa 1b       	sub	r26, r26
    56ae:	bb 1b       	sub	r27, r27
    56b0:	fd 01       	movw	r30, r26
    56b2:	0d c0       	rjmp	.+26     	; 0x56ce <__udivmodsi4_ep>

000056b4 <__udivmodsi4_loop>:
    56b4:	aa 1f       	adc	r26, r26
    56b6:	bb 1f       	adc	r27, r27
    56b8:	ee 1f       	adc	r30, r30
    56ba:	ff 1f       	adc	r31, r31
    56bc:	a2 17       	cp	r26, r18
    56be:	b3 07       	cpc	r27, r19
    56c0:	e4 07       	cpc	r30, r20
    56c2:	f5 07       	cpc	r31, r21
    56c4:	20 f0       	brcs	.+8      	; 0x56ce <__udivmodsi4_ep>
    56c6:	a2 1b       	sub	r26, r18
    56c8:	b3 0b       	sbc	r27, r19
    56ca:	e4 0b       	sbc	r30, r20
    56cc:	f5 0b       	sbc	r31, r21

000056ce <__udivmodsi4_ep>:
    56ce:	66 1f       	adc	r22, r22
    56d0:	77 1f       	adc	r23, r23
    56d2:	88 1f       	adc	r24, r24
    56d4:	99 1f       	adc	r25, r25
    56d6:	1a 94       	dec	r1
    56d8:	69 f7       	brne	.-38     	; 0x56b4 <__udivmodsi4_loop>
    56da:	60 95       	com	r22
    56dc:	70 95       	com	r23
    56de:	80 95       	com	r24
    56e0:	90 95       	com	r25
    56e2:	9b 01       	movw	r18, r22
    56e4:	ac 01       	movw	r20, r24
    56e6:	bd 01       	movw	r22, r26
    56e8:	cf 01       	movw	r24, r30
    56ea:	08 95       	ret

000056ec <__divmodsi4>:
    56ec:	97 fb       	bst	r25, 7
    56ee:	09 2e       	mov	r0, r25
    56f0:	05 26       	eor	r0, r21
    56f2:	0e d0       	rcall	.+28     	; 0x5710 <__divmodsi4_neg1>
    56f4:	57 fd       	sbrc	r21, 7
    56f6:	04 d0       	rcall	.+8      	; 0x5700 <__divmodsi4_neg2>
    56f8:	d7 df       	rcall	.-82     	; 0x56a8 <__udivmodsi4>
    56fa:	0a d0       	rcall	.+20     	; 0x5710 <__divmodsi4_neg1>
    56fc:	00 1c       	adc	r0, r0
    56fe:	38 f4       	brcc	.+14     	; 0x570e <__divmodsi4_exit>

00005700 <__divmodsi4_neg2>:
    5700:	50 95       	com	r21
    5702:	40 95       	com	r20
    5704:	30 95       	com	r19
    5706:	21 95       	neg	r18
    5708:	3f 4f       	sbci	r19, 0xFF	; 255
    570a:	4f 4f       	sbci	r20, 0xFF	; 255
    570c:	5f 4f       	sbci	r21, 0xFF	; 255

0000570e <__divmodsi4_exit>:
    570e:	08 95       	ret

00005710 <__divmodsi4_neg1>:
    5710:	f6 f7       	brtc	.-4      	; 0x570e <__divmodsi4_exit>
    5712:	90 95       	com	r25
    5714:	80 95       	com	r24
    5716:	70 95       	com	r23
    5718:	61 95       	neg	r22
    571a:	7f 4f       	sbci	r23, 0xFF	; 255
    571c:	8f 4f       	sbci	r24, 0xFF	; 255
    571e:	9f 4f       	sbci	r25, 0xFF	; 255
    5720:	08 95       	ret

00005722 <__prologue_saves__>:
    5722:	2f 92       	push	r2
    5724:	3f 92       	push	r3
    5726:	4f 92       	push	r4
    5728:	5f 92       	push	r5
    572a:	6f 92       	push	r6
    572c:	7f 92       	push	r7
    572e:	8f 92       	push	r8
    5730:	9f 92       	push	r9
    5732:	af 92       	push	r10
    5734:	bf 92       	push	r11
    5736:	cf 92       	push	r12
    5738:	df 92       	push	r13
    573a:	ef 92       	push	r14
    573c:	ff 92       	push	r15
    573e:	0f 93       	push	r16
    5740:	1f 93       	push	r17
    5742:	cf 93       	push	r28
    5744:	df 93       	push	r29
    5746:	cd b7       	in	r28, 0x3d	; 61
    5748:	de b7       	in	r29, 0x3e	; 62
    574a:	ca 1b       	sub	r28, r26
    574c:	db 0b       	sbc	r29, r27
    574e:	0f b6       	in	r0, 0x3f	; 63
    5750:	f8 94       	cli
    5752:	de bf       	out	0x3e, r29	; 62
    5754:	0f be       	out	0x3f, r0	; 63
    5756:	cd bf       	out	0x3d, r28	; 61
    5758:	09 94       	ijmp

0000575a <__epilogue_restores__>:
    575a:	2a 88       	ldd	r2, Y+18	; 0x12
    575c:	39 88       	ldd	r3, Y+17	; 0x11
    575e:	48 88       	ldd	r4, Y+16	; 0x10
    5760:	5f 84       	ldd	r5, Y+15	; 0x0f
    5762:	6e 84       	ldd	r6, Y+14	; 0x0e
    5764:	7d 84       	ldd	r7, Y+13	; 0x0d
    5766:	8c 84       	ldd	r8, Y+12	; 0x0c
    5768:	9b 84       	ldd	r9, Y+11	; 0x0b
    576a:	aa 84       	ldd	r10, Y+10	; 0x0a
    576c:	b9 84       	ldd	r11, Y+9	; 0x09
    576e:	c8 84       	ldd	r12, Y+8	; 0x08
    5770:	df 80       	ldd	r13, Y+7	; 0x07
    5772:	ee 80       	ldd	r14, Y+6	; 0x06
    5774:	fd 80       	ldd	r15, Y+5	; 0x05
    5776:	0c 81       	ldd	r16, Y+4	; 0x04
    5778:	1b 81       	ldd	r17, Y+3	; 0x03
    577a:	aa 81       	ldd	r26, Y+2	; 0x02
    577c:	b9 81       	ldd	r27, Y+1	; 0x01
    577e:	ce 0f       	add	r28, r30
    5780:	d1 1d       	adc	r29, r1
    5782:	0f b6       	in	r0, 0x3f	; 63
    5784:	f8 94       	cli
    5786:	de bf       	out	0x3e, r29	; 62
    5788:	0f be       	out	0x3f, r0	; 63
    578a:	cd bf       	out	0x3d, r28	; 61
    578c:	ed 01       	movw	r28, r26
    578e:	08 95       	ret

00005790 <_exit>:
    5790:	f8 94       	cli

00005792 <__stop_program>:
    5792:	ff cf       	rjmp	.-2      	; 0x5792 <__stop_program>
