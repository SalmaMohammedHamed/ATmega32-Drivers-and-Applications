
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000057f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  000057f2  00005886  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800192  00800192  000059b8  2**0
                  ALLOC
  3 .stab         00008cdc  00000000  00000000  000059b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003fe1  00000000  00000000  0000e694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00012675  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00012815  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00012a07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00014e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00016198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00017370  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00017530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00017826  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00018194  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5e 14 	jmp	0x28bc	; 0x28bc <__vector_1>
       8:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__vector_2>
       c:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__vector_3>
      10:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_4>
      14:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_5>
      18:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <__vector_6>
      1c:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__vector_7>
      20:	0c 94 c9 0b 	jmp	0x1792	; 0x1792 <__vector_8>
      24:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_9>
      28:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__vector_10>
      2c:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 aa 2a 	call	0x5554	; 0x5554 <main>
      8a:	0c 94 f7 2b 	jmp	0x57ee	; 0x57ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c0 2b 	jmp	0x5780	; 0x5780 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 dc 2b 	jmp	0x57b8	; 0x57b8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c0 2b 	jmp	0x5780	; 0x5780 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 dc 2b 	jmp	0x57b8	; 0x57b8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cc 2b 	jmp	0x5798	; 0x5798 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e8 2b 	jmp	0x57d0	; 0x57d0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ec 2b 	jmp	0x57d8	; 0x57d8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
 */

#include "UART_Interface.h"

void UART_voidInit(u32 BoudRate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_voidInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
	/*Set boud rate*/
	clear_bit(UART_UBRRH,UBRRH_URSEL);
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
	UART_UBRRH=0;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
	UART_UBRRL=BoudRate;
     e56:	e9 e2       	ldi	r30, 0x29	; 41
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24

	/*Interrupts*/
#if TXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
#elif TXIEState==enable
	set_bit(UART_UCSRB,UCSRB_TXCIE);
#endif

#if RXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_RXCIE);
     e6c:	aa e2       	ldi	r26, 0x2A	; 42
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e2       	ldi	r30, 0x2A	; 42
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	8c 93       	st	X, r24
#elif RXIEState==enable
	set_bit(UART_UCSRB,UCSRB_RXCIE);
#endif

#if UDIEState==disable
	clear_bit(UART_UCSRB,UCSRB_UDRIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
#elif UDIEState==enable
	set_bit(UART_UCSRB,UCSRB_UDRIE);
#endif

	/*Async*/
	set_bit(UART_UCSRC,UCSRC_URSEL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UMSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24

	/*parity*/
#if ParityEnable==enable
#if Parity==odd
	set_bit(UART_UCSRC,UCSRC_UPM0);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UPM1);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UPM1);
#endif

	/*Stop bits*/
#if NoStopBits==1
	clear_bit(UART_UCSRC,UCSRC_USBS);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24
#elif DataSize==7
	clear_bit(UART_UCSRC,UCSRC_UCSZ0);
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
#elif DataSize==8
	set_bit(UART_UCSRC,UCSRC_UCSZ0);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	set_bit(UART_UCSRB,UCSRB_UCSZ2);
#else
#error "Invalid Option"
#endif
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_voidSendData>:

void UART_voidSendData(u8 Data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	a1 f3       	breq	.-24     	; 0xf12 <UART_voidSendData+0xc>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f2a:	ab e2       	ldi	r26, 0x2B	; 43
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e2       	ldi	r30, 0x2B	; 43
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
	UART_UDR=Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
	set_bit(UART_UCSRB,UCSRB_TXEN);
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24

}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_u8RecieveData>:

u8 UART_u8RecieveData()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u8 RecievedData;
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_u8RecieveData+0xa>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
	set_bit(UART_UCSRB,UCSRB_RXEN);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	while (get_bit(UART_UCSRA,UCSRA_RXC)==Low);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <UART_u8RecieveData+0x3e>
	set_bit(UART_UCSRA,UCSRA_RXC);
     f9e:	ab e2       	ldi	r26, 0x2B	; 43
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	RecievedData=UART_UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return RecievedData;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <T2_voidNormalModeInit>:



/**********************Normal Mode functions**********************************/
void T2_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <T2_voidNormalModeInit+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T2_TCCR2,T2_TCCR2_WGM20);
     fd0:	a5 e4       	ldi	r26, 0x45	; 69
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e5 e4       	ldi	r30, 0x45	; 69
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8f 7b       	andi	r24, 0xBF	; 191
     fdc:	8c 93       	st	X, r24
	clear_bit(T2_TCCR2,T2_TCCR2_WGM21);
     fde:	a5 e4       	ldi	r26, 0x45	; 69
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e4       	ldi	r30, 0x45	; 69
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	87 7f       	andi	r24, 0xF7	; 247
     fea:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	87 70       	andi	r24, 0x07	; 7
     ff0:	89 83       	std	Y+1, r24	; 0x01
	T2_TCCR2&=0xF8;
     ff2:	a5 e4       	ldi	r26, 0x45	; 69
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e5 e4       	ldi	r30, 0x45	; 69
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	88 7f       	andi	r24, 0xF8	; 248
     ffe:	8c 93       	st	X, r24
	T2_TCCR2|=Prescaller;
    1000:	a5 e4       	ldi	r26, 0x45	; 69
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e4       	ldi	r30, 0x45	; 69
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	90 81       	ld	r25, Z
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	89 2b       	or	r24, r25
    100e:	8c 93       	st	X, r24
	T2_TCNT2=PreloadValue;
    1010:	e4 e4       	ldi	r30, 0x44	; 68
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	80 83       	st	Z, r24
	//Interrupt State
	if(InterruptState ==enable)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	41 f4       	brne	.+16     	; 0x102e <T2_voidNormalModeInit+0x70>
	{
		set_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    101e:	a9 e5       	ldi	r26, 0x59	; 89
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e9 e5       	ldi	r30, 0x59	; 89
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	80 64       	ori	r24, 0x40	; 64
    102a:	8c 93       	st	X, r24
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <T2_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	39 f4       	brne	.+14     	; 0x1042 <T2_voidNormalModeInit+0x84>
	{
		clear_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    1034:	a9 e5       	ldi	r26, 0x59	; 89
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e9 e5       	ldi	r30, 0x59	; 89
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7b       	andi	r24, 0xBF	; 191
    1040:	8c 93       	st	X, r24
	}

}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	cf 91       	pop	r28
    104a:	df 91       	pop	r29
    104c:	08 95       	ret

0000104e <T2_voidCallBackFuncNormalMode>:


void T2_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    104e:	df 93       	push	r29
    1050:	cf 93       	push	r28
    1052:	00 d0       	rcall	.+0      	; 0x1054 <T2_voidCallBackFuncNormalMode+0x6>
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	31 f0       	breq	.+12     	; 0x1070 <T2_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	90 93 93 01 	sts	0x0193, r25
    106c:	80 93 92 01 	sts	0x0192, r24
	}
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <__vector_5>:

void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    10a4:	80 91 92 01 	lds	r24, 0x0192
    10a8:	90 91 93 01 	lds	r25, 0x0193
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	29 f0       	breq	.+10     	; 0x10ba <__vector_5+0x40>
	{
		GlobalOVPF();
    10b0:	e0 91 92 01 	lds	r30, 0x0192
    10b4:	f0 91 93 01 	lds	r31, 0x0193
    10b8:	09 95       	icall
	}
}
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	ff 91       	pop	r31
    10c0:	ef 91       	pop	r30
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	7f 91       	pop	r23
    10cc:	6f 91       	pop	r22
    10ce:	5f 91       	pop	r21
    10d0:	4f 91       	pop	r20
    10d2:	3f 91       	pop	r19
    10d4:	2f 91       	pop	r18
    10d6:	0f 90       	pop	r0
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	0f 90       	pop	r0
    10dc:	1f 90       	pop	r1
    10de:	18 95       	reti

000010e0 <T2_voidCTCModeInit>:



/**************************************CTC*****************************************/
void T2_voidCTCModeInit(u8 OC2State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <T2_voidCTCModeInit+0x6>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <T2_voidCTCModeInit+0x8>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	6a 83       	std	Y+2, r22	; 0x02
    10f0:	4b 83       	std	Y+3, r20	; 0x03
    10f2:	2c 83       	std	Y+4, r18	; 0x04
	//select CTC Mode
	clear_bit(T2_TCCR2,T2_TCCR2_WGM20);
    10f4:	a5 e4       	ldi	r26, 0x45	; 69
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e4       	ldi	r30, 0x45	; 69
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 7b       	andi	r24, 0xBF	; 191
    1100:	8c 93       	st	X, r24
	set_bit(T2_TCCR2,T2_TCCR2_WGM21);
    1102:	a5 e4       	ldi	r26, 0x45	; 69
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e4       	ldi	r30, 0x45	; 69
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24

	//OC2 State
	if(OC2State==CTC_OC2_Disconnect)
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	79 f4       	brne	.+30     	; 0x1134 <T2_voidCTCModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    1116:	a5 e4       	ldi	r26, 0x45	; 69
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e4       	ldi	r30, 0x45	; 69
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7e       	andi	r24, 0xEF	; 239
    1122:	8c 93       	st	X, r24
		clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1124:	a5 e4       	ldi	r26, 0x45	; 69
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e4       	ldi	r30, 0x45	; 69
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 7d       	andi	r24, 0xDF	; 223
    1130:	8c 93       	st	X, r24
    1132:	35 c0       	rjmp	.+106    	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_Tog)
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	82 30       	cpi	r24, 0x02	; 2
    1138:	79 f4       	brne	.+30     	; 0x1158 <T2_voidCTCModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T2_TCCR2,T2_TCCR2_COM20);
    113a:	a5 e4       	ldi	r26, 0x45	; 69
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e5 e4       	ldi	r30, 0x45	; 69
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	80 61       	ori	r24, 0x10	; 16
    1146:	8c 93       	st	X, r24
		clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1148:	a5 e4       	ldi	r26, 0x45	; 69
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e5 e4       	ldi	r30, 0x45	; 69
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7d       	andi	r24, 0xDF	; 223
    1154:	8c 93       	st	X, r24
    1156:	23 c0       	rjmp	.+70     	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_CLr)
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	83 30       	cpi	r24, 0x03	; 3
    115c:	79 f4       	brne	.+30     	; 0x117c <T2_voidCTCModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    115e:	a5 e4       	ldi	r26, 0x45	; 69
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e5 e4       	ldi	r30, 0x45	; 69
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8f 7e       	andi	r24, 0xEF	; 239
    116a:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_COM21);
    116c:	a5 e4       	ldi	r26, 0x45	; 69
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e4       	ldi	r30, 0x45	; 69
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	80 62       	ori	r24, 0x20	; 32
    1178:	8c 93       	st	X, r24
    117a:	11 c0       	rjmp	.+34     	; 0x119e <T2_voidCTCModeInit+0xbe>
	}
	else if (OC2State==CTC_OC2_Set)
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	71 f4       	brne	.+28     	; 0x119e <T2_voidCTCModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T2_TCCR2,T2_TCCR2_COM20);
    1182:	a5 e4       	ldi	r26, 0x45	; 69
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	e5 e4       	ldi	r30, 0x45	; 69
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 61       	ori	r24, 0x10	; 16
    118e:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1190:	a5 e4       	ldi	r26, 0x45	; 69
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e5 e4       	ldi	r30, 0x45	; 69
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 62       	ori	r24, 0x20	; 32
    119c:	8c 93       	st	X, r24
	}

	//Prescaller
	Prescaller&=0x07;
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	87 70       	andi	r24, 0x07	; 7
    11a2:	8a 83       	std	Y+2, r24	; 0x02
	T2_TCCR2&=0xF8;
    11a4:	a5 e4       	ldi	r26, 0x45	; 69
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e5 e4       	ldi	r30, 0x45	; 69
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	88 7f       	andi	r24, 0xF8	; 248
    11b0:	8c 93       	st	X, r24
	T2_TCCR2|=Prescaller;
    11b2:	a5 e4       	ldi	r26, 0x45	; 69
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e4       	ldi	r30, 0x45	; 69
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	90 81       	ld	r25, Z
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	89 2b       	or	r24, r25
    11c0:	8c 93       	st	X, r24
	//Output compare
	T2_OCR2 = CompareValue;
    11c2:	e3 e4       	ldi	r30, 0x43	; 67
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	80 83       	st	Z, r24

	if(InterruptState ==enable)
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	41 f4       	brne	.+16     	; 0x11e0 <T2_voidCTCModeInit+0x100>
	{
		set_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    11d0:	a9 e5       	ldi	r26, 0x59	; 89
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e9 e5       	ldi	r30, 0x59	; 89
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	80 64       	ori	r24, 0x40	; 64
    11dc:	8c 93       	st	X, r24
    11de:	0a c0       	rjmp	.+20     	; 0x11f4 <T2_voidCTCModeInit+0x114>
	}
	else if(InterruptState ==disable)
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	39 f4       	brne	.+14     	; 0x11f4 <T2_voidCTCModeInit+0x114>
	{
		clear_bit(T2_TIMSK,T2_TIMSK_TOIE2);
    11e6:	a9 e5       	ldi	r26, 0x59	; 89
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e9 e5       	ldi	r30, 0x59	; 89
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7b       	andi	r24, 0xBF	; 191
    11f2:	8c 93       	st	X, r24
	}
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <T2_voidCallBackFuncCTCMode>:

void T2_voidCallBackFuncCTCMode(void (*CTCpf)(void))
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	00 d0       	rcall	.+0      	; 0x1208 <T2_voidCallBackFuncCTCMode+0x6>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	31 f0       	breq	.+12     	; 0x1224 <T2_voidCallBackFuncCTCMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	9a 81       	ldd	r25, Y+2	; 0x02
    121c:	90 93 95 01 	sts	0x0195, r25
    1220:	80 93 94 01 	sts	0x0194, r24
	}
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <__vector_4>:

void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    1258:	80 91 94 01 	lds	r24, 0x0194
    125c:	90 91 95 01 	lds	r25, 0x0195
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	29 f0       	breq	.+10     	; 0x126e <__vector_4+0x40>
	{
		GlobalCTCPF();
    1264:	e0 91 94 01 	lds	r30, 0x0194
    1268:	f0 91 95 01 	lds	r31, 0x0195
    126c:	09 95       	icall
	}
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	ff 91       	pop	r31
    1274:	ef 91       	pop	r30
    1276:	bf 91       	pop	r27
    1278:	af 91       	pop	r26
    127a:	9f 91       	pop	r25
    127c:	8f 91       	pop	r24
    127e:	7f 91       	pop	r23
    1280:	6f 91       	pop	r22
    1282:	5f 91       	pop	r21
    1284:	4f 91       	pop	r20
    1286:	3f 91       	pop	r19
    1288:	2f 91       	pop	r18
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <T2_voidPWMModeInit>:
/*************************************************************************************/

/**************************************PWM**************************************/
void T2_voidPWMModeInit(u8 PWMType, u8 OC2State ,u8 Prescaller, u8 DutyCycle)
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	00 d0       	rcall	.+0      	; 0x129a <T2_voidPWMModeInit+0x6>
    129a:	00 d0       	rcall	.+0      	; 0x129c <T2_voidPWMModeInit+0x8>
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	6a 83       	std	Y+2, r22	; 0x02
    12a4:	4b 83       	std	Y+3, r20	; 0x03
    12a6:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <T2_voidPWMModeInit+0x1c>
    12ae:	68 c0       	rjmp	.+208    	; 0x1380 <T2_voidPWMModeInit+0xec>
	{
		//fast PWM
		set_bit(T2_TCCR2,T2_TCCR2_WGM20);
    12b0:	a5 e4       	ldi	r26, 0x45	; 69
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e5 e4       	ldi	r30, 0x45	; 69
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	80 64       	ori	r24, 0x40	; 64
    12bc:	8c 93       	st	X, r24
		set_bit(T2_TCCR2,T2_TCCR2_WGM21);
    12be:	a5 e4       	ldi	r26, 0x45	; 69
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e5 e4       	ldi	r30, 0x45	; 69
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	8c 93       	st	X, r24
		//OC2 State
			if(OC2State==CTC_OC2_Disconnect)
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	81 30       	cpi	r24, 0x01	; 1
    12d0:	79 f4       	brne	.+30     	; 0x12f0 <T2_voidPWMModeInit+0x5c>
			{//disconnect  pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    12d2:	a5 e4       	ldi	r26, 0x45	; 69
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e5 e4       	ldi	r30, 0x45	; 69
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 7e       	andi	r24, 0xEF	; 239
    12de:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    12e0:	a5 e4       	ldi	r26, 0x45	; 69
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e4       	ldi	r30, 0x45	; 69
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	8f 7d       	andi	r24, 0xDF	; 223
    12ec:	8c 93       	st	X, r24
    12ee:	35 c0       	rjmp	.+106    	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_Tog)
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	82 30       	cpi	r24, 0x02	; 2
    12f4:	79 f4       	brne	.+30     	; 0x1314 <T2_voidPWMModeInit+0x80>
			{	//Tog Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    12f6:	a5 e4       	ldi	r26, 0x45	; 69
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e5 e4       	ldi	r30, 0x45	; 69
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    1304:	a5 e4       	ldi	r26, 0x45	; 69
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e5 e4       	ldi	r30, 0x45	; 69
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8f 7d       	andi	r24, 0xDF	; 223
    1310:	8c 93       	st	X, r24
    1312:	23 c0       	rjmp	.+70     	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_CLr)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	79 f4       	brne	.+30     	; 0x1338 <T2_voidPWMModeInit+0xa4>
			{
				//clr Pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    131a:	a5 e4       	ldi	r26, 0x45	; 69
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e5 e4       	ldi	r30, 0x45	; 69
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	8f 7e       	andi	r24, 0xEF	; 239
    1326:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1328:	a5 e4       	ldi	r26, 0x45	; 69
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e5 e4       	ldi	r30, 0x45	; 69
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	80 62       	ori	r24, 0x20	; 32
    1334:	8c 93       	st	X, r24
    1336:	11 c0       	rjmp	.+34     	; 0x135a <T2_voidPWMModeInit+0xc6>
			}
			else if (OC2State==CTC_OC2_Set)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	71 f4       	brne	.+28     	; 0x135a <T2_voidPWMModeInit+0xc6>
			{
				//set Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    133e:	a5 e4       	ldi	r26, 0x45	; 69
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e4       	ldi	r30, 0x45	; 69
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 61       	ori	r24, 0x10	; 16
    134a:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    134c:	a5 e4       	ldi	r26, 0x45	; 69
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e4       	ldi	r30, 0x45	; 69
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	8c 93       	st	X, r24
			}


		//Prescaller
		Prescaller&=0x07;
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	87 70       	andi	r24, 0x07	; 7
    135e:	8b 83       	std	Y+3, r24	; 0x03
		T2_TCCR2&=0xF8;
    1360:	a5 e4       	ldi	r26, 0x45	; 69
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e5 e4       	ldi	r30, 0x45	; 69
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	88 7f       	andi	r24, 0xF8	; 248
    136c:	8c 93       	st	X, r24
		T2_TCCR2|=Prescaller;
    136e:	a5 e4       	ldi	r26, 0x45	; 69
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e4       	ldi	r30, 0x45	; 69
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	90 81       	ld	r25, Z
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	89 2b       	or	r24, r25
    137c:	8c 93       	st	X, r24
    137e:	5d c0       	rjmp	.+186    	; 0x143a <T2_voidPWMModeInit+0x1a6>
	}
	else if (PWMType==PhaseCorrectPWM)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	82 30       	cpi	r24, 0x02	; 2
    1384:	09 f0       	breq	.+2      	; 0x1388 <T2_voidPWMModeInit+0xf4>
    1386:	59 c0       	rjmp	.+178    	; 0x143a <T2_voidPWMModeInit+0x1a6>
	{
		//OC2 State
			if(OC2State==CTC_OC2_Disconnect)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	81 30       	cpi	r24, 0x01	; 1
    138c:	79 f4       	brne	.+30     	; 0x13ac <T2_voidPWMModeInit+0x118>
			{//disconnect  pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    138e:	a5 e4       	ldi	r26, 0x45	; 69
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e4       	ldi	r30, 0x45	; 69
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8f 7e       	andi	r24, 0xEF	; 239
    139a:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    139c:	a5 e4       	ldi	r26, 0x45	; 69
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e4       	ldi	r30, 0x45	; 69
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	8c 93       	st	X, r24
    13aa:	35 c0       	rjmp	.+106    	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_Tog)
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	82 30       	cpi	r24, 0x02	; 2
    13b0:	79 f4       	brne	.+30     	; 0x13d0 <T2_voidPWMModeInit+0x13c>
			{	//Tog Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    13b2:	a5 e4       	ldi	r26, 0x45	; 69
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e5 e4       	ldi	r30, 0x45	; 69
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	80 61       	ori	r24, 0x10	; 16
    13be:	8c 93       	st	X, r24
				clear_bit(T2_TCCR2,T2_TCCR2_COM21);
    13c0:	a5 e4       	ldi	r26, 0x45	; 69
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e5 e4       	ldi	r30, 0x45	; 69
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 7d       	andi	r24, 0xDF	; 223
    13cc:	8c 93       	st	X, r24
    13ce:	23 c0       	rjmp	.+70     	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_CLr)
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	83 30       	cpi	r24, 0x03	; 3
    13d4:	79 f4       	brne	.+30     	; 0x13f4 <T2_voidPWMModeInit+0x160>
			{
				//clr Pin OC0
				clear_bit(T2_TCCR2,T2_TCCR2_COM20);
    13d6:	a5 e4       	ldi	r26, 0x45	; 69
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e4       	ldi	r30, 0x45	; 69
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7e       	andi	r24, 0xEF	; 239
    13e2:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    13e4:	a5 e4       	ldi	r26, 0x45	; 69
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e4       	ldi	r30, 0x45	; 69
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 62       	ori	r24, 0x20	; 32
    13f0:	8c 93       	st	X, r24
    13f2:	11 c0       	rjmp	.+34     	; 0x1416 <T2_voidPWMModeInit+0x182>
			}
			else if (OC2State==CTC_OC2_Set)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	71 f4       	brne	.+28     	; 0x1416 <T2_voidPWMModeInit+0x182>
			{
				//set Pin OC0
				set_bit(T2_TCCR2,T2_TCCR2_COM20);
    13fa:	a5 e4       	ldi	r26, 0x45	; 69
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e5 e4       	ldi	r30, 0x45	; 69
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 61       	ori	r24, 0x10	; 16
    1406:	8c 93       	st	X, r24
				set_bit(T2_TCCR2,T2_TCCR2_COM21);
    1408:	a5 e4       	ldi	r26, 0x45	; 69
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e5 e4       	ldi	r30, 0x45	; 69
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	80 62       	ori	r24, 0x20	; 32
    1414:	8c 93       	st	X, r24
			}

			//Prescaller
			Prescaller&=0x07;
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	87 70       	andi	r24, 0x07	; 7
    141a:	8b 83       	std	Y+3, r24	; 0x03
			T2_TCCR2&=0xF8;
    141c:	a5 e4       	ldi	r26, 0x45	; 69
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e5 e4       	ldi	r30, 0x45	; 69
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	88 7f       	andi	r24, 0xF8	; 248
    1428:	8c 93       	st	X, r24
			T2_TCCR2|=Prescaller;
    142a:	a5 e4       	ldi	r26, 0x45	; 69
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e5 e4       	ldi	r30, 0x45	; 69
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	90 81       	ld	r25, Z
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	89 2b       	or	r24, r25
    1438:	8c 93       	st	X, r24
	}
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <T1_voidNormalModeInit>:



/*******************************Normal Mode Functions*******************************************/
void T1_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <T1_voidNormalModeInit+0x6>
    144e:	0f 92       	push	r0
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02
    1458:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    145a:	af e4       	ldi	r26, 0x4F	; 79
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ef e4       	ldi	r30, 0x4F	; 79
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8e 7f       	andi	r24, 0xFE	; 254
    1466:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1468:	af e4       	ldi	r26, 0x4F	; 79
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	ef e4       	ldi	r30, 0x4F	; 79
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	8d 7f       	andi	r24, 0xFD	; 253
    1474:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1476:	ae e4       	ldi	r26, 0x4E	; 78
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	ee e4       	ldi	r30, 0x4E	; 78
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	87 7f       	andi	r24, 0xF7	; 247
    1482:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1484:	ae e4       	ldi	r26, 0x4E	; 78
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	ee e4       	ldi	r30, 0x4E	; 78
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7e       	andi	r24, 0xEF	; 239
    1490:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	87 70       	andi	r24, 0x07	; 7
    1496:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1498:	ae e4       	ldi	r26, 0x4E	; 78
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	ee e4       	ldi	r30, 0x4E	; 78
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 7f       	andi	r24, 0xF8	; 248
    14a4:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    14a6:	ae e4       	ldi	r26, 0x4E	; 78
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	ee e4       	ldi	r30, 0x4E	; 78
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	90 81       	ld	r25, Z
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	89 2b       	or	r24, r25
    14b4:	8c 93       	st	X, r24
	T1_TCNT1=PreloadValue;
    14b6:	ec e4       	ldi	r30, 0x4C	; 76
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	41 f4       	brne	.+16     	; 0x14da <T1_voidNormalModeInit+0x92>
	{
		set_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	8c 93       	st	X, r24
    14d8:	0a c0       	rjmp	.+20     	; 0x14ee <T1_voidNormalModeInit+0xa6>
	}
	else if(InterruptState ==disable)
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	39 f4       	brne	.+14     	; 0x14ee <T1_voidNormalModeInit+0xa6>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    14e0:	a9 e5       	ldi	r26, 0x59	; 89
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e9 e5       	ldi	r30, 0x59	; 89
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8b 7f       	andi	r24, 0xFB	; 251
    14ec:	8c 93       	st	X, r24
	}

}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	cf 91       	pop	r28
    14f6:	df 91       	pop	r29
    14f8:	08 95       	ret

000014fa <T1_voidCallBackFuncNormalMode>:


void T1_voidCallBackFuncNormalMode(void (*Normalpf)(void))
{
    14fa:	df 93       	push	r29
    14fc:	cf 93       	push	r28
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <T1_voidCallBackFuncNormalMode+0x6>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	if(Normalpf!=NULL)
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	31 f0       	breq	.+12     	; 0x151c <T1_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPf=Normalpf;
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	9a 81       	ldd	r25, Y+2	; 0x02
    1514:	90 93 99 01 	sts	0x0199, r25
    1518:	80 93 98 01 	sts	0x0198, r24
	}
}
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <__vector_9>:


void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOVPf!=NULL)
    1550:	80 91 98 01 	lds	r24, 0x0198
    1554:	90 91 99 01 	lds	r25, 0x0199
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	29 f0       	breq	.+10     	; 0x1566 <__vector_9+0x40>
	{
		GlobalOVPf();
    155c:	e0 91 98 01 	lds	r30, 0x0198
    1560:	f0 91 99 01 	lds	r31, 0x0199
    1564:	09 95       	icall
	}

}
    1566:	cf 91       	pop	r28
    1568:	df 91       	pop	r29
    156a:	ff 91       	pop	r31
    156c:	ef 91       	pop	r30
    156e:	bf 91       	pop	r27
    1570:	af 91       	pop	r26
    1572:	9f 91       	pop	r25
    1574:	8f 91       	pop	r24
    1576:	7f 91       	pop	r23
    1578:	6f 91       	pop	r22
    157a:	5f 91       	pop	r21
    157c:	4f 91       	pop	r20
    157e:	3f 91       	pop	r19
    1580:	2f 91       	pop	r18
    1582:	0f 90       	pop	r0
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	0f 90       	pop	r0
    1588:	1f 90       	pop	r1
    158a:	18 95       	reti

0000158c <T1_voidCTCModeInit>:



/********************************CTC Functions****************************************************/
void T1_voidCTCModeInit(u8 Prescaller,u16 CompareValue,u8 Interruptstate,u8 OC1AState)
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	00 d0       	rcall	.+0      	; 0x1592 <T1_voidCTCModeInit+0x6>
    1592:	00 d0       	rcall	.+0      	; 0x1594 <T1_voidCTCModeInit+0x8>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	7b 83       	std	Y+3, r23	; 0x03
    159e:	6a 83       	std	Y+2, r22	; 0x02
    15a0:	4c 83       	std	Y+4, r20	; 0x04
    15a2:	2d 83       	std	Y+5, r18	; 0x05
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
    15b0:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	8d 7f       	andi	r24, 0xFD	; 253
    15be:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	8c 93       	st	X, r24
	T1_ICR1=CompareValue;
    15dc:	e6 e4       	ldi	r30, 0x46	; 70
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
	if (Interruptstate==enable)
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	41 f4       	brne	.+16     	; 0x15fe <T1_voidCTCModeInit+0x72>
	{
		set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    15ee:	a9 e5       	ldi	r26, 0x59	; 89
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e9 e5       	ldi	r30, 0x59	; 89
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	8c 93       	st	X, r24
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <T1_voidCTCModeInit+0x86>
	}
	else if (Interruptstate==disable)
    15fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1600:	82 30       	cpi	r24, 0x02	; 2
    1602:	39 f4       	brne	.+14     	; 0x1612 <T1_voidCTCModeInit+0x86>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1604:	a9 e5       	ldi	r26, 0x59	; 89
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e9 e5       	ldi	r30, 0x59	; 89
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	8f 7e       	andi	r24, 0xEF	; 239
    1610:	8c 93       	st	X, r24
	}
	if(OC1AState==CTC_OC1A_Disconnect)
    1612:	8d 81       	ldd	r24, Y+5	; 0x05
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	79 f4       	brne	.+30     	; 0x1636 <T1_voidCTCModeInit+0xaa>
	{//disconnect  pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1618:	af e4       	ldi	r26, 0x4F	; 79
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ef e4       	ldi	r30, 0x4F	; 79
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	8f 7b       	andi	r24, 0xBF	; 191
    1624:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1626:	af e4       	ldi	r26, 0x4F	; 79
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ef e4       	ldi	r30, 0x4F	; 79
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	8c 93       	st	X, r24
    1634:	35 c0       	rjmp	.+106    	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Tog)
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	82 30       	cpi	r24, 0x02	; 2
    163a:	79 f4       	brne	.+30     	; 0x165a <T1_voidCTCModeInit+0xce>
	{	//Tog Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    163c:	af e4       	ldi	r26, 0x4F	; 79
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ef e4       	ldi	r30, 0x4F	; 79
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	80 64       	ori	r24, 0x40	; 64
    1648:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    164a:	af e4       	ldi	r26, 0x4F	; 79
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ef e4       	ldi	r30, 0x4F	; 79
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	8c 93       	st	X, r24
    1658:	23 c0       	rjmp	.+70     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_CLr)
    165a:	8d 81       	ldd	r24, Y+5	; 0x05
    165c:	83 30       	cpi	r24, 0x03	; 3
    165e:	79 f4       	brne	.+30     	; 0x167e <T1_voidCTCModeInit+0xf2>
	{
		//clr Pin OC0
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1660:	af e4       	ldi	r26, 0x4F	; 79
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ef e4       	ldi	r30, 0x4F	; 79
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    166e:	af e4       	ldi	r26, 0x4F	; 79
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e4       	ldi	r30, 0x4F	; 79
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	80 68       	ori	r24, 0x80	; 128
    167a:	8c 93       	st	X, r24
    167c:	11 c0       	rjmp	.+34     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	}
	else if (OC1AState==CTC_OC1A_Set)
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	84 30       	cpi	r24, 0x04	; 4
    1682:	71 f4       	brne	.+28     	; 0x16a0 <T1_voidCTCModeInit+0x114>
	{
		//set Pin OC0
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1684:	af e4       	ldi	r26, 0x4F	; 79
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ef e4       	ldi	r30, 0x4F	; 79
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1692:	af e4       	ldi	r26, 0x4F	; 79
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 68       	ori	r24, 0x80	; 128
    169e:	8c 93       	st	X, r24
	}
	Prescaller&=0x07;
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	87 70       	andi	r24, 0x07	; 7
    16a4:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    16a6:	ae e4       	ldi	r26, 0x4E	; 78
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	ee e4       	ldi	r30, 0x4E	; 78
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	88 7f       	andi	r24, 0xF8	; 248
    16b2:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    16b4:	ae e4       	ldi	r26, 0x4E	; 78
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ee e4       	ldi	r30, 0x4E	; 78
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	90 81       	ld	r25, Z
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	89 2b       	or	r24, r25
    16c2:	8c 93       	st	X, r24
}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <T1_voidCallBackFuncOCA>:


void T1_voidCallBackFuncOCA(void (*CTCApf)(void))
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	00 d0       	rcall	.+0      	; 0x16da <T1_voidCallBackFuncOCA+0x6>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01
	if(CTCApf!=NULL)
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	9a 81       	ldd	r25, Y+2	; 0x02
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	31 f0       	breq	.+12     	; 0x16f6 <T1_voidCallBackFuncOCA+0x22>
	{
		GlobalOCAPf=CTCApf;
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	90 93 9b 01 	sts	0x019B, r25
    16f2:	80 93 9a 01 	sts	0x019A, r24
	}
}
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	cf 91       	pop	r28
    16fc:	df 91       	pop	r29
    16fe:	08 95       	ret

00001700 <__vector_7>:


void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOCAPf!=NULL)
    172a:	80 91 9a 01 	lds	r24, 0x019A
    172e:	90 91 9b 01 	lds	r25, 0x019B
    1732:	00 97       	sbiw	r24, 0x00	; 0
    1734:	29 f0       	breq	.+10     	; 0x1740 <__vector_7+0x40>
	{
		GlobalOCAPf();
    1736:	e0 91 9a 01 	lds	r30, 0x019A
    173a:	f0 91 9b 01 	lds	r31, 0x019B
    173e:	09 95       	icall
	}
}
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	ff 91       	pop	r31
    1746:	ef 91       	pop	r30
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	0f 90       	pop	r0
    1762:	1f 90       	pop	r1
    1764:	18 95       	reti

00001766 <T1_voidCallBackFuncOCB>:


void T1_voidCallBackFuncOCB(void (*CTCBpf)(void))
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <T1_voidCallBackFuncOCB+0x6>
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
	if(CTCBpf!=NULL)
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	31 f0       	breq	.+12     	; 0x1788 <T1_voidCallBackFuncOCB+0x22>
	{
		GlobalOCBPf=CTCBpf;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	90 93 9d 01 	sts	0x019D, r25
    1784:	80 93 9c 01 	sts	0x019C, r24
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <__vector_8>:


void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1792:	1f 92       	push	r1
    1794:	0f 92       	push	r0
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	0f 92       	push	r0
    179a:	11 24       	eor	r1, r1
    179c:	2f 93       	push	r18
    179e:	3f 93       	push	r19
    17a0:	4f 93       	push	r20
    17a2:	5f 93       	push	r21
    17a4:	6f 93       	push	r22
    17a6:	7f 93       	push	r23
    17a8:	8f 93       	push	r24
    17aa:	9f 93       	push	r25
    17ac:	af 93       	push	r26
    17ae:	bf 93       	push	r27
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOCBPf!=NULL)
    17bc:	80 91 9c 01 	lds	r24, 0x019C
    17c0:	90 91 9d 01 	lds	r25, 0x019D
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	29 f0       	breq	.+10     	; 0x17d2 <__vector_8+0x40>
	{
		GlobalOCBPf();
    17c8:	e0 91 9c 01 	lds	r30, 0x019C
    17cc:	f0 91 9d 01 	lds	r31, 0x019D
    17d0:	09 95       	icall
	}
}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <T1_voidFastPWMFixedTop>:



/*******************************Fast PWM*********************************/
void T1_voidFastPWMFixedTop(u8 Type,u8 PreScaller ,u8 PWMMode , u8 DutyCycle)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	00 d0       	rcall	.+0      	; 0x17fe <T1_voidFastPWMFixedTop+0x6>
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <T1_voidFastPWMFixedTop+0x8>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	6a 83       	std	Y+2, r22	; 0x02
    1808:	4b 83       	std	Y+3, r20	; 0x03
    180a:	2c 83       	std	Y+4, r18	; 0x04
	//prescaller
	PreScaller&=0x07;
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	87 70       	andi	r24, 0x07	; 7
    1810:	8a 83       	std	Y+2, r24	; 0x02
	T1_TCCR1B&=0xF8;
    1812:	ae e4       	ldi	r26, 0x4E	; 78
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ee e4       	ldi	r30, 0x4E	; 78
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	88 7f       	andi	r24, 0xF8	; 248
    181e:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1820:	ae e4       	ldi	r26, 0x4E	; 78
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	ee e4       	ldi	r30, 0x4E	; 78
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	90 81       	ld	r25, Z
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	89 2b       	or	r24, r25
    182e:	8c 93       	st	X, r24
	//select mode
	if (PWMMode==NonInverting)
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	79 f4       	brne	.+30     	; 0x1854 <T1_voidFastPWMFixedTop+0x5c>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1836:	af e4       	ldi	r26, 0x4F	; 79
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	ef e4       	ldi	r30, 0x4F	; 79
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	8f 7b       	andi	r24, 0xBF	; 191
    1842:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1844:	af e4       	ldi	r26, 0x4F	; 79
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	ef e4       	ldi	r30, 0x4F	; 79
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	80 68       	ori	r24, 0x80	; 128
    1850:	8c 93       	st	X, r24
    1852:	11 c0       	rjmp	.+34     	; 0x1876 <T1_voidFastPWMFixedTop+0x7e>
	}
	else if (PWMMode==Inverting)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	71 f4       	brne	.+28     	; 0x1876 <T1_voidFastPWMFixedTop+0x7e>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    185a:	af e4       	ldi	r26, 0x4F	; 79
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 61       	ori	r24, 0x10	; 16
    1866:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1868:	af e4       	ldi	r26, 0x4F	; 79
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ef e4       	ldi	r30, 0x4F	; 79
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	80 62       	ori	r24, 0x20	; 32
    1874:	8c 93       	st	X, r24
	}
	//select Type & set duty cycle
	if (Type==FastPWM_8Bit)
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	88 23       	and	r24, r24
    187a:	09 f0       	breq	.+2      	; 0x187e <T1_voidFastPWMFixedTop+0x86>
    187c:	5f c0       	rjmp	.+190    	; 0x193c <T1_voidFastPWMFixedTop+0x144>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    187e:	af e4       	ldi	r26, 0x4F	; 79
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e4       	ldi	r30, 0x4F	; 79
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    188c:	af e4       	ldi	r26, 0x4F	; 79
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ef e4       	ldi	r30, 0x4F	; 79
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8d 7f       	andi	r24, 0xFD	; 253
    1898:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    189a:	ae e4       	ldi	r26, 0x4E	; 78
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ee e4       	ldi	r30, 0x4E	; 78
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    18a8:	ae e4       	ldi	r26, 0x4E	; 78
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ee e4       	ldi	r30, 0x4E	; 78
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 7e       	andi	r24, 0xEF	; 239
    18b4:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	01 f5       	brne	.+64     	; 0x18fc <T1_voidFastPWMFixedTop+0x104>
		{
			T1_OCR1A = (FastPWM_8BitTopValue*(100-DutyCycle))/100;
    18bc:	ea e4       	ldi	r30, 0x4A	; 74
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8c 81       	ldd	r24, Y+4	; 0x04
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	84 e6       	ldi	r24, 0x64	; 100
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	ac 01       	movw	r20, r24
    18cc:	42 1b       	sub	r20, r18
    18ce:	53 0b       	sbc	r21, r19
    18d0:	ca 01       	movw	r24, r20
    18d2:	9c 01       	movw	r18, r24
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	c9 01       	movw	r24, r18
    18da:	96 95       	lsr	r25
    18dc:	98 2f       	mov	r25, r24
    18de:	88 27       	eor	r24, r24
    18e0:	97 95       	ror	r25
    18e2:	87 95       	ror	r24
    18e4:	82 1b       	sub	r24, r18
    18e6:	93 0b       	sbc	r25, r19
    18e8:	84 0f       	add	r24, r20
    18ea:	95 1f       	adc	r25, r21
    18ec:	24 e6       	ldi	r18, 0x64	; 100
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	b9 01       	movw	r22, r18
    18f2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    18f6:	cb 01       	movw	r24, r22
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	09 f0       	breq	.+2      	; 0x1904 <T1_voidFastPWMFixedTop+0x10c>
    1902:	d2 c0       	rjmp	.+420    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_8BitTopValue*DutyCycle)/100;
    1904:	ea e4       	ldi	r30, 0x4A	; 74
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8c 81       	ldd	r24, Y+4	; 0x04
    190a:	48 2f       	mov	r20, r24
    190c:	50 e0       	ldi	r21, 0x00	; 0
    190e:	ca 01       	movw	r24, r20
    1910:	9c 01       	movw	r18, r24
    1912:	22 0f       	add	r18, r18
    1914:	33 1f       	adc	r19, r19
    1916:	c9 01       	movw	r24, r18
    1918:	96 95       	lsr	r25
    191a:	98 2f       	mov	r25, r24
    191c:	88 27       	eor	r24, r24
    191e:	97 95       	ror	r25
    1920:	87 95       	ror	r24
    1922:	82 1b       	sub	r24, r18
    1924:	93 0b       	sbc	r25, r19
    1926:	84 0f       	add	r24, r20
    1928:	95 1f       	adc	r25, r21
    192a:	24 e6       	ldi	r18, 0x64	; 100
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	b9 01       	movw	r22, r18
    1930:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    1934:	cb 01       	movw	r24, r22
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	b6 c0       	rjmp	.+364    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		}
	}
	else if (Type==FastPWM_9Bit)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	81 30       	cpi	r24, 0x01	; 1
    1940:	09 f0       	breq	.+2      	; 0x1944 <T1_voidFastPWMFixedTop+0x14c>
    1942:	58 c0       	rjmp	.+176    	; 0x19f4 <T1_voidFastPWMFixedTop+0x1fc>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1944:	af e4       	ldi	r26, 0x4F	; 79
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	ef e4       	ldi	r30, 0x4F	; 79
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8e 7f       	andi	r24, 0xFE	; 254
    1950:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	82 60       	ori	r24, 0x02	; 2
    195e:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1960:	ae e4       	ldi	r26, 0x4E	; 78
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ee e4       	ldi	r30, 0x4E	; 78
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	8f 7e       	andi	r24, 0xEF	; 239
    197a:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	e9 f4       	brne	.+58     	; 0x19bc <T1_voidFastPWMFixedTop+0x1c4>
		{
			T1_OCR1A = (FastPWM_9BitTopValue*(100-DutyCycle))/100;
    1982:	ea e4       	ldi	r30, 0x4A	; 74
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8c 81       	ldd	r24, Y+4	; 0x04
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	84 e6       	ldi	r24, 0x64	; 100
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	ac 01       	movw	r20, r24
    1992:	42 1b       	sub	r20, r18
    1994:	53 0b       	sbc	r21, r19
    1996:	9a 01       	movw	r18, r20
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	91 e0       	ldi	r25, 0x01	; 1
    199c:	ac 01       	movw	r20, r24
    199e:	24 9f       	mul	r18, r20
    19a0:	c0 01       	movw	r24, r0
    19a2:	25 9f       	mul	r18, r21
    19a4:	90 0d       	add	r25, r0
    19a6:	34 9f       	mul	r19, r20
    19a8:	90 0d       	add	r25, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	24 e6       	ldi	r18, 0x64	; 100
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    19b6:	cb 01       	movw	r24, r22
    19b8:	91 83       	std	Z+1, r25	; 0x01
    19ba:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	82 30       	cpi	r24, 0x02	; 2
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <T1_voidFastPWMFixedTop+0x1cc>
    19c2:	72 c0       	rjmp	.+228    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_9BitTopValue*DutyCycle)/100;
    19c4:	ea e4       	ldi	r30, 0x4A	; 74
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	91 e0       	ldi	r25, 0x01	; 1
    19d2:	ac 01       	movw	r20, r24
    19d4:	24 9f       	mul	r18, r20
    19d6:	c0 01       	movw	r24, r0
    19d8:	25 9f       	mul	r18, r21
    19da:	90 0d       	add	r25, r0
    19dc:	34 9f       	mul	r19, r20
    19de:	90 0d       	add	r25, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	24 e6       	ldi	r18, 0x64	; 100
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	b9 01       	movw	r22, r18
    19e8:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    19ec:	cb 01       	movw	r24, r22
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	5a c0       	rjmp	.+180    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		}
	}
	else if (Type==FastPWM_10Bit)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	09 f0       	breq	.+2      	; 0x19fc <T1_voidFastPWMFixedTop+0x204>
    19fa:	56 c0       	rjmp	.+172    	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    19fc:	af e4       	ldi	r26, 0x4F	; 79
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	ef e4       	ldi	r30, 0x4F	; 79
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	81 60       	ori	r24, 0x01	; 1
    1a08:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1a0a:	af e4       	ldi	r26, 0x4F	; 79
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	ef e4       	ldi	r30, 0x4F	; 79
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	82 60       	ori	r24, 0x02	; 2
    1a16:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1a18:	ae e4       	ldi	r26, 0x4E	; 78
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ee e4       	ldi	r30, 0x4E	; 78
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	88 60       	ori	r24, 0x08	; 8
    1a24:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1a26:	ae e4       	ldi	r26, 0x4E	; 78
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	ee e4       	ldi	r30, 0x4E	; 78
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	8f 7e       	andi	r24, 0xEF	; 239
    1a32:	8c 93       	st	X, r24
		if (PWMMode==Inverting)
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	e9 f4       	brne	.+58     	; 0x1a74 <T1_voidFastPWMFixedTop+0x27c>
		{
			T1_OCR1A = (FastPWM_10BitTopValue*(100-DutyCycle))/100;
    1a3a:	ea e4       	ldi	r30, 0x4A	; 74
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	84 e6       	ldi	r24, 0x64	; 100
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	ac 01       	movw	r20, r24
    1a4a:	42 1b       	sub	r20, r18
    1a4c:	53 0b       	sbc	r21, r19
    1a4e:	9a 01       	movw	r18, r20
    1a50:	8f ef       	ldi	r24, 0xFF	; 255
    1a52:	93 e0       	ldi	r25, 0x03	; 3
    1a54:	ac 01       	movw	r20, r24
    1a56:	24 9f       	mul	r18, r20
    1a58:	c0 01       	movw	r24, r0
    1a5a:	25 9f       	mul	r18, r21
    1a5c:	90 0d       	add	r25, r0
    1a5e:	34 9f       	mul	r19, r20
    1a60:	90 0d       	add	r25, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	24 e6       	ldi	r18, 0x64	; 100
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	b9 01       	movw	r22, r18
    1a6a:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    1a6e:	cb 01       	movw	r24, r22
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
		}
		if (PWMMode==NonInverting)
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	82 30       	cpi	r24, 0x02	; 2
    1a78:	b9 f4       	brne	.+46     	; 0x1aa8 <T1_voidFastPWMFixedTop+0x2b0>
		{
			T1_OCR1A = (FastPWM_10BitTopValue*DutyCycle)/100;
    1a7a:	ea e4       	ldi	r30, 0x4A	; 74
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	ac 01       	movw	r20, r24
    1a8a:	24 9f       	mul	r18, r20
    1a8c:	c0 01       	movw	r24, r0
    1a8e:	25 9f       	mul	r18, r21
    1a90:	90 0d       	add	r25, r0
    1a92:	34 9f       	mul	r19, r20
    1a94:	90 0d       	add	r25, r0
    1a96:	11 24       	eor	r1, r1
    1a98:	24 e6       	ldi	r18, 0x64	; 100
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	b9 01       	movw	r22, r18
    1a9e:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	91 83       	std	Z+1, r25	; 0x01
    1aa6:	80 83       	st	Z, r24
		}
	}

}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <T1_voidFastPWMSetTop>:


void T1_voidFastPWMSetTop(u8 Type,u8 PreScaller ,u8 PWMMode ,u16 TopValue, u8 DutyCycle)
{
    1ab6:	0f 93       	push	r16
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <T1_voidFastPWMSetTop+0x8>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <T1_voidFastPWMSetTop+0xa>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <T1_voidFastPWMSetTop+0xc>
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	6a 83       	std	Y+2, r22	; 0x02
    1aca:	4b 83       	std	Y+3, r20	; 0x03
    1acc:	3d 83       	std	Y+5, r19	; 0x05
    1ace:	2c 83       	std	Y+4, r18	; 0x04
    1ad0:	0e 83       	std	Y+6, r16	; 0x06
	//prescaller
		PreScaller&=0x07;
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	87 70       	andi	r24, 0x07	; 7
    1ad6:	8a 83       	std	Y+2, r24	; 0x02
		T1_TCCR1B&=0xF8;
    1ad8:	ae e4       	ldi	r26, 0x4E	; 78
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	ee e4       	ldi	r30, 0x4E	; 78
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 7f       	andi	r24, 0xF8	; 248
    1ae4:	8c 93       	st	X, r24
		T1_TCCR1B|=PreScaller;
    1ae6:	ae e4       	ldi	r26, 0x4E	; 78
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	ee e4       	ldi	r30, 0x4E	; 78
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	90 81       	ld	r25, Z
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	89 2b       	or	r24, r25
    1af4:	8c 93       	st	X, r24
		//select mode
		if (PWMMode==NonInverting)
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	79 f4       	brne	.+30     	; 0x1b1a <T1_voidFastPWMSetTop+0x64>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1afc:	af e4       	ldi	r26, 0x4F	; 79
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ef e4       	ldi	r30, 0x4F	; 79
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 7b       	andi	r24, 0xBF	; 191
    1b08:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1b0a:	af e4       	ldi	r26, 0x4F	; 79
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	ef e4       	ldi	r30, 0x4F	; 79
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	80 68       	ori	r24, 0x80	; 128
    1b16:	8c 93       	st	X, r24
    1b18:	11 c0       	rjmp	.+34     	; 0x1b3c <T1_voidFastPWMSetTop+0x86>
		}
		else if (PWMMode==Inverting)
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	71 f4       	brne	.+28     	; 0x1b3c <T1_voidFastPWMSetTop+0x86>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1b20:	af e4       	ldi	r26, 0x4F	; 79
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	ef e4       	ldi	r30, 0x4F	; 79
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	80 61       	ori	r24, 0x10	; 16
    1b2c:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1b2e:	af e4       	ldi	r26, 0x4F	; 79
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	ef e4       	ldi	r30, 0x4F	; 79
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 62       	ori	r24, 0x20	; 32
    1b3a:	8c 93       	st	X, r24
		}

		//select Type & set duty cycle & Set top value
		if (Type==FastPWM_ICR1)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <T1_voidFastPWMSetTop+0x8e>
    1b42:	5e c0       	rjmp	.+188    	; 0x1c00 <T1_voidFastPWMSetTop+0x14a>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1b44:	af e4       	ldi	r26, 0x4F	; 79
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ef e4       	ldi	r30, 0x4F	; 79
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1b52:	af e4       	ldi	r26, 0x4F	; 79
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	ef e4       	ldi	r30, 0x4F	; 79
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	82 60       	ori	r24, 0x02	; 2
    1b5e:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1b60:	ae e4       	ldi	r26, 0x4E	; 78
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ee e4       	ldi	r30, 0x4E	; 78
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 60       	ori	r24, 0x08	; 8
    1b6c:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1b6e:	ae e4       	ldi	r26, 0x4E	; 78
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	ee e4       	ldi	r30, 0x4E	; 78
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 61       	ori	r24, 0x10	; 16
    1b7a:	8c 93       	st	X, r24
			T1_ICR1=TopValue;
    1b7c:	e6 e4       	ldi	r30, 0x46	; 70
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
    1b82:	9d 81       	ldd	r25, Y+5	; 0x05
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
			if (PWMMode==Inverting)
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	81 30       	cpi	r24, 0x01	; 1
    1b8c:	e9 f4       	brne	.+58     	; 0x1bc8 <T1_voidFastPWMSetTop+0x112>
			{
				T1_OCR1A = (TopValue*(100-DutyCycle))/100;
    1b8e:	ea e4       	ldi	r30, 0x4A	; 74
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8e 81       	ldd	r24, Y+6	; 0x06
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	84 e6       	ldi	r24, 0x64	; 100
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 1b       	sub	r24, r18
    1b9e:	93 0b       	sbc	r25, r19
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	24 9f       	mul	r18, r20
    1baa:	c0 01       	movw	r24, r0
    1bac:	25 9f       	mul	r18, r21
    1bae:	90 0d       	add	r25, r0
    1bb0:	34 9f       	mul	r19, r20
    1bb2:	90 0d       	add	r25, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	24 e6       	ldi	r18, 0x64	; 100
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	b9 01       	movw	r22, r18
    1bbc:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__udivmodhi4>
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	91 83       	std	Z+1, r25	; 0x01
    1bc4:	80 83       	st	Z, r24
    1bc6:	7c c0       	rjmp	.+248    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
			else if (PWMMode==NonInverting)
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	82 30       	cpi	r24, 0x02	; 2
    1bcc:	09 f0       	breq	.+2      	; 0x1bd0 <T1_voidFastPWMSetTop+0x11a>
    1bce:	78 c0       	rjmp	.+240    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			{
				T1_OCR1A = (TopValue*DutyCycle)/100;
    1bd0:	ea e4       	ldi	r30, 0x4A	; 74
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8c 81       	ldd	r24, Y+4	; 0x04
    1bdc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bde:	ac 01       	movw	r20, r24
    1be0:	24 9f       	mul	r18, r20
    1be2:	c0 01       	movw	r24, r0
    1be4:	25 9f       	mul	r18, r21
    1be6:	90 0d       	add	r25, r0
    1be8:	34 9f       	mul	r19, r20
    1bea:	90 0d       	add	r25, r0
    1bec:	11 24       	eor	r1, r1
    1bee:	24 e6       	ldi	r18, 0x64	; 100
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	b9 01       	movw	r22, r18
    1bf4:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__udivmodhi4>
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	60 c0       	rjmp	.+192    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
		}
		else if (Type==FastPWM_OCR1A)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	84 30       	cpi	r24, 0x04	; 4
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <T1_voidFastPWMSetTop+0x152>
    1c06:	5c c0       	rjmp	.+184    	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1c08:	af e4       	ldi	r26, 0x4F	; 79
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ef e4       	ldi	r30, 0x4F	; 79
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	81 60       	ori	r24, 0x01	; 1
    1c14:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1c16:	af e4       	ldi	r26, 0x4F	; 79
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ef e4       	ldi	r30, 0x4F	; 79
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	82 60       	ori	r24, 0x02	; 2
    1c22:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1c24:	ae e4       	ldi	r26, 0x4E	; 78
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	ee e4       	ldi	r30, 0x4E	; 78
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 60       	ori	r24, 0x08	; 8
    1c30:	8c 93       	st	X, r24
			set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1c32:	ae e4       	ldi	r26, 0x4E	; 78
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ee e4       	ldi	r30, 0x4E	; 78
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 61       	ori	r24, 0x10	; 16
    1c3e:	8c 93       	st	X, r24
			T1_OCR1A=TopValue;
    1c40:	ea e4       	ldi	r30, 0x4A	; 74
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
			if (PWMMode==Inverting)
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	e9 f4       	brne	.+58     	; 0x1c8c <T1_voidFastPWMSetTop+0x1d6>
			{
				T1_OCR1B = (TopValue*(100-DutyCycle))/100;
    1c52:	e8 e4       	ldi	r30, 0x48	; 72
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8e 81       	ldd	r24, Y+6	; 0x06
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	84 e6       	ldi	r24, 0x64	; 100
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	82 1b       	sub	r24, r18
    1c62:	93 0b       	sbc	r25, r19
    1c64:	9c 01       	movw	r18, r24
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	24 9f       	mul	r18, r20
    1c6e:	c0 01       	movw	r24, r0
    1c70:	25 9f       	mul	r18, r21
    1c72:	90 0d       	add	r25, r0
    1c74:	34 9f       	mul	r19, r20
    1c76:	90 0d       	add	r25, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	24 e6       	ldi	r18, 0x64	; 100
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__udivmodhi4>
    1c84:	cb 01       	movw	r24, r22
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
    1c8a:	1a c0       	rjmp	.+52     	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			}
			else if (PWMMode==NonInverting)
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	b9 f4       	brne	.+46     	; 0x1cc0 <T1_voidFastPWMSetTop+0x20a>
			{
				T1_OCR1B = (TopValue*DutyCycle)/100;
    1c92:	e8 e4       	ldi	r30, 0x48	; 72
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	8e 81       	ldd	r24, Y+6	; 0x06
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	ac 01       	movw	r20, r24
    1ca2:	24 9f       	mul	r18, r20
    1ca4:	c0 01       	movw	r24, r0
    1ca6:	25 9f       	mul	r18, r21
    1ca8:	90 0d       	add	r25, r0
    1caa:	34 9f       	mul	r19, r20
    1cac:	90 0d       	add	r25, r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	24 e6       	ldi	r18, 0x64	; 100
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	b9 01       	movw	r22, r18
    1cb6:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <__udivmodhi4>
    1cba:	cb 01       	movw	r24, r22
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	80 83       	st	Z, r24
			}
		}
}
    1cc0:	26 96       	adiw	r28, 0x06	; 6
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	0f 91       	pop	r16
    1cd2:	08 95       	ret

00001cd4 <T1_voidFastPWMServoInit>:



/****************************Servo Functions*************************/
void T1_voidFastPWMServoInit()
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	0f 92       	push	r0
    1cda:	cd b7       	in	r28, 0x3d	; 61
    1cdc:	de b7       	in	r29, 0x3e	; 62
	//COM1A1/COM1B1 COM1A0/COM1B0  1 0 Clear OC1A/OC1B on compare match, set  OC1A/OC1B at TOP
	clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1cde:	af e4       	ldi	r26, 0x4F	; 79
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	ef e4       	ldi	r30, 0x4F	; 79
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	8f 7b       	andi	r24, 0xBF	; 191
    1cea:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1cec:	af e4       	ldi	r26, 0x4F	; 79
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	ef e4       	ldi	r30, 0x4F	; 79
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	8c 93       	st	X, r24

	/*WGM13 WGM12	WGM11	WGM10	Timer/Counter Mode of Operation TOP Update of OCR1x	TOV1 Flag Set 	on
      1      1       1        0        Fast PWM                      ICR1 TOP TOP*/
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1cfa:	ae e4       	ldi	r26, 0x4E	; 78
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	ee e4       	ldi	r30, 0x4E	; 78
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	80 61       	ori	r24, 0x10	; 16
    1d06:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1d08:	ae e4       	ldi	r26, 0x4E	; 78
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	ee e4       	ldi	r30, 0x4E	; 78
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	88 60       	ori	r24, 0x08	; 8
    1d14:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1d16:	af e4       	ldi	r26, 0x4F	; 79
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ef e4       	ldi	r30, 0x4F	; 79
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	82 60       	ori	r24, 0x02	; 2
    1d22:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1d24:	af e4       	ldi	r26, 0x4F	; 79
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	ef e4       	ldi	r30, 0x4F	; 79
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8e 7f       	andi	r24, 0xFE	; 254
    1d30:	8c 93       	st	X, r24

	//PreScaller
	u8 PreScaller=prescaler8;
    1d32:	82 e0       	ldi	r24, 0x02	; 2
    1d34:	89 83       	std	Y+1, r24	; 0x01
	PreScaller&=0x07;
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	87 70       	andi	r24, 0x07	; 7
    1d3a:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1d3c:	ae e4       	ldi	r26, 0x4E	; 78
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ee e4       	ldi	r30, 0x4E	; 78
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	88 7f       	andi	r24, 0xF8	; 248
    1d48:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1d4a:	ae e4       	ldi	r26, 0x4E	; 78
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ee e4       	ldi	r30, 0x4E	; 78
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	90 81       	ld	r25, Z
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	89 2b       	or	r24, r25
    1d58:	8c 93       	st	X, r24


	T1_ICR1=Servo_value;
    1d5a:	e6 e4       	ldi	r30, 0x46	; 70
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8f e1       	ldi	r24, 0x1F	; 31
    1d60:	9e e4       	ldi	r25, 0x4E	; 78
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24


}
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <T1_voidFastPWMServoSetAngle>:

void T1_voidFastPWMServoSetAngle(u16 angle)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <T1_voidFastPWMServoSetAngle+0x6>
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
	T1_OCR1A=angle;
    1d7c:	ea e4       	ldi	r30, 0x4A	; 74
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
	}
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <T1_voidICUInit>:



/***********************ICU functions*******************************/
void T1_voidICUInit(void)
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	0f 92       	push	r0
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
	u8 Prescaller=prescaler8;
    1d9c:	82 e0       	ldi	r24, 0x02	; 2
    1d9e:	89 83       	std	Y+1, r24	; 0x01
	//NormalMode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1da0:	af e4       	ldi	r26, 0x4F	; 79
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	ef e4       	ldi	r30, 0x4F	; 79
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8e 7f       	andi	r24, 0xFE	; 254
    1dac:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1dae:	af e4       	ldi	r26, 0x4F	; 79
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ef e4       	ldi	r30, 0x4F	; 79
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	8d 7f       	andi	r24, 0xFD	; 253
    1dba:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    1dbc:	ae e4       	ldi	r26, 0x4E	; 78
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	ee e4       	ldi	r30, 0x4E	; 78
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	87 7f       	andi	r24, 0xF7	; 247
    1dc8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1dca:	ae e4       	ldi	r26, 0x4E	; 78
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ee e4       	ldi	r30, 0x4E	; 78
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	8f 7e       	andi	r24, 0xEF	; 239
    1dd6:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	87 70       	andi	r24, 0x07	; 7
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1dde:	ae e4       	ldi	r26, 0x4E	; 78
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	ee e4       	ldi	r30, 0x4E	; 78
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 7f       	andi	r24, 0xF8	; 248
    1dea:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1dec:	ae e4       	ldi	r26, 0x4E	; 78
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	ee e4       	ldi	r30, 0x4E	; 78
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	90 81       	ld	r25, Z
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	89 2b       	or	r24, r25
    1dfa:	8c 93       	st	X, r24
	//Set ICU Bit to Rising
	set_bit(T1_TCCR1B,T1_TCCR1B_ICES1);
    1dfc:	ae e4       	ldi	r26, 0x4E	; 78
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	ee e4       	ldi	r30, 0x4E	; 78
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	8c 93       	st	X, r24
	//Enable ICU Interrupt
	set_bit(T1_TIMSK,T1_TIMSK_TICIE1);
    1e0a:	a9 e5       	ldi	r26, 0x59	; 89
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	e9 e5       	ldi	r30, 0x59	; 89
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	80 62       	ori	r24, 0x20	; 32
    1e16:	8c 93       	st	X, r24
	}
    1e18:	0f 90       	pop	r0
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	08 95       	ret

00001e20 <T1_voidCallBackFuncICUMode>:


void T1_voidCallBackFuncICUMode(void (*ICUpf)(void))
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <T1_voidCallBackFuncICUMode+0x6>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	if(ICUpf!=NULL)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	9a 81       	ldd	r25, Y+2	; 0x02
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	31 f0       	breq	.+12     	; 0x1e42 <T1_voidCallBackFuncICUMode+0x22>
	{
		GlobalICUPf=ICUpf;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	90 93 97 01 	sts	0x0197, r25
    1e3e:	80 93 96 01 	sts	0x0196, r24
	}
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	08 95       	ret

00001e4c <__vector_6>:


void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    1e4c:	1f 92       	push	r1
    1e4e:	0f 92       	push	r0
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	0f 92       	push	r0
    1e54:	11 24       	eor	r1, r1
    1e56:	2f 93       	push	r18
    1e58:	3f 93       	push	r19
    1e5a:	4f 93       	push	r20
    1e5c:	5f 93       	push	r21
    1e5e:	6f 93       	push	r22
    1e60:	7f 93       	push	r23
    1e62:	8f 93       	push	r24
    1e64:	9f 93       	push	r25
    1e66:	af 93       	push	r26
    1e68:	bf 93       	push	r27
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62

	if (GlobalICUPf!=NULL)
    1e76:	80 91 96 01 	lds	r24, 0x0196
    1e7a:	90 91 97 01 	lds	r25, 0x0197
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	29 f0       	breq	.+10     	; 0x1e8c <__vector_6+0x40>
	{
		GlobalICUPf();
    1e82:	e0 91 96 01 	lds	r30, 0x0196
    1e86:	f0 91 97 01 	lds	r31, 0x0197
    1e8a:	09 95       	icall
	}

}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	ff 91       	pop	r31
    1e92:	ef 91       	pop	r30
    1e94:	bf 91       	pop	r27
    1e96:	af 91       	pop	r26
    1e98:	9f 91       	pop	r25
    1e9a:	8f 91       	pop	r24
    1e9c:	7f 91       	pop	r23
    1e9e:	6f 91       	pop	r22
    1ea0:	5f 91       	pop	r21
    1ea2:	4f 91       	pop	r20
    1ea4:	3f 91       	pop	r19
    1ea6:	2f 91       	pop	r18
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <T0_voidNormalModeInit>:



/*************************************Normal Mode functions***************************/
void T0_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	00 d0       	rcall	.+0      	; 0x1eb8 <T0_voidNormalModeInit+0x6>
    1eb8:	0f 92       	push	r0
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	6a 83       	std	Y+2, r22	; 0x02
    1ec2:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1ec4:	a3 e5       	ldi	r26, 0x53	; 83
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e3 e5       	ldi	r30, 0x53	; 83
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8f 7b       	andi	r24, 0xBF	; 191
    1ed0:	8c 93       	st	X, r24
	clear_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	87 7f       	andi	r24, 0xF7	; 247
    1ede:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	87 70       	andi	r24, 0x07	; 7
    1ee4:	89 83       	std	Y+1, r24	; 0x01
	T0_TCCR0&=0xF8;
    1ee6:	a3 e5       	ldi	r26, 0x53	; 83
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e3 e5       	ldi	r30, 0x53	; 83
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	88 7f       	andi	r24, 0xF8	; 248
    1ef2:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1ef4:	a3 e5       	ldi	r26, 0x53	; 83
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e3 e5       	ldi	r30, 0x53	; 83
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	90 81       	ld	r25, Z
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	89 2b       	or	r24, r25
    1f02:	8c 93       	st	X, r24
	T0_TCNT0=PreloadValue;
    1f04:	e2 e5       	ldi	r30, 0x52	; 82
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	41 f4       	brne	.+16     	; 0x1f22 <T0_voidNormalModeInit+0x70>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1f12:	a9 e5       	ldi	r26, 0x59	; 89
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	e9 e5       	ldi	r30, 0x59	; 89
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	81 60       	ori	r24, 0x01	; 1
    1f1e:	8c 93       	st	X, r24
    1f20:	0a c0       	rjmp	.+20     	; 0x1f36 <T0_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	39 f4       	brne	.+14     	; 0x1f36 <T0_voidNormalModeInit+0x84>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1f28:	a9 e5       	ldi	r26, 0x59	; 89
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e9 e5       	ldi	r30, 0x59	; 89
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	8e 7f       	andi	r24, 0xFE	; 254
    1f34:	8c 93       	st	X, r24
	}

}
    1f36:	0f 90       	pop	r0
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	cf 91       	pop	r28
    1f3e:	df 91       	pop	r29
    1f40:	08 95       	ret

00001f42 <T0_voidCallBackFuncNormalMode>:


void T0_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    1f42:	df 93       	push	r29
    1f44:	cf 93       	push	r28
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <T0_voidCallBackFuncNormalMode+0x6>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9a 83       	std	Y+2, r25	; 0x02
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	31 f0       	breq	.+12     	; 0x1f64 <T0_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	90 93 9f 01 	sts	0x019F, r25
    1f60:	80 93 9e 01 	sts	0x019E, r24
	}
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <__vector_11>:


void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1f6e:	1f 92       	push	r1
    1f70:	0f 92       	push	r0
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	2f 93       	push	r18
    1f7a:	3f 93       	push	r19
    1f7c:	4f 93       	push	r20
    1f7e:	5f 93       	push	r21
    1f80:	6f 93       	push	r22
    1f82:	7f 93       	push	r23
    1f84:	8f 93       	push	r24
    1f86:	9f 93       	push	r25
    1f88:	af 93       	push	r26
    1f8a:	bf 93       	push	r27
    1f8c:	ef 93       	push	r30
    1f8e:	ff 93       	push	r31
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    1f98:	80 91 9e 01 	lds	r24, 0x019E
    1f9c:	90 91 9f 01 	lds	r25, 0x019F
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	29 f0       	breq	.+10     	; 0x1fae <__vector_11+0x40>
	{
		GlobalOVPF();
    1fa4:	e0 91 9e 01 	lds	r30, 0x019E
    1fa8:	f0 91 9f 01 	lds	r31, 0x019F
    1fac:	09 95       	icall
	}
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti

00001fd4 <T0_voidCTCModeInit>:



/**************************************CTC*****************************************/
void T0_voidCTCModeInit(u8 OC0State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <T0_voidCTCModeInit+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <T0_voidCTCModeInit+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	6a 83       	std	Y+2, r22	; 0x02
    1fe4:	4b 83       	std	Y+3, r20	; 0x03
    1fe6:	2c 83       	std	Y+4, r18	; 0x04
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1fe8:	a3 e5       	ldi	r26, 0x53	; 83
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e3 e5       	ldi	r30, 0x53	; 83
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	8f 7b       	andi	r24, 0xBF	; 191
    1ff4:	8c 93       	st	X, r24
	set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1ff6:	a3 e5       	ldi	r26, 0x53	; 83
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e3 e5       	ldi	r30, 0x53	; 83
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	88 60       	ori	r24, 0x08	; 8
    2002:	8c 93       	st	X, r24
	if(OC0State==CTC_OC0_Disconnect)
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	81 30       	cpi	r24, 0x01	; 1
    2008:	79 f4       	brne	.+30     	; 0x2028 <T0_voidCTCModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    200a:	a3 e5       	ldi	r26, 0x53	; 83
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e3 e5       	ldi	r30, 0x53	; 83
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 7e       	andi	r24, 0xEF	; 239
    2016:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    2018:	a3 e5       	ldi	r26, 0x53	; 83
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e3 e5       	ldi	r30, 0x53	; 83
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8f 7d       	andi	r24, 0xDF	; 223
    2024:	8c 93       	st	X, r24
    2026:	35 c0       	rjmp	.+106    	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Tog)
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	79 f4       	brne	.+30     	; 0x204c <T0_voidCTCModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    202e:	a3 e5       	ldi	r26, 0x53	; 83
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e3 e5       	ldi	r30, 0x53	; 83
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	80 61       	ori	r24, 0x10	; 16
    203a:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    203c:	a3 e5       	ldi	r26, 0x53	; 83
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e3 e5       	ldi	r30, 0x53	; 83
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7d       	andi	r24, 0xDF	; 223
    2048:	8c 93       	st	X, r24
    204a:	23 c0       	rjmp	.+70     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_CLr)
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	79 f4       	brne	.+30     	; 0x2070 <T0_voidCTCModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    2052:	a3 e5       	ldi	r26, 0x53	; 83
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e3 e5       	ldi	r30, 0x53	; 83
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 7e       	andi	r24, 0xEF	; 239
    205e:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2060:	a3 e5       	ldi	r26, 0x53	; 83
    2062:	b0 e0       	ldi	r27, 0x00	; 0
    2064:	e3 e5       	ldi	r30, 0x53	; 83
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	80 62       	ori	r24, 0x20	; 32
    206c:	8c 93       	st	X, r24
    206e:	11 c0       	rjmp	.+34     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Set)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	84 30       	cpi	r24, 0x04	; 4
    2074:	71 f4       	brne	.+28     	; 0x2092 <T0_voidCTCModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    2076:	a3 e5       	ldi	r26, 0x53	; 83
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e3 e5       	ldi	r30, 0x53	; 83
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	80 61       	ori	r24, 0x10	; 16
    2082:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2084:	a3 e5       	ldi	r26, 0x53	; 83
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e3 e5       	ldi	r30, 0x53	; 83
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	80 62       	ori	r24, 0x20	; 32
    2090:	8c 93       	st	X, r24
	}
	//Prescaller
	Prescaller&=0x07;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	87 70       	andi	r24, 0x07	; 7
    2096:	8a 83       	std	Y+2, r24	; 0x02
	T0_TCCR0&=0xF8;
    2098:	a3 e5       	ldi	r26, 0x53	; 83
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e3 e5       	ldi	r30, 0x53	; 83
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	88 7f       	andi	r24, 0xF8	; 248
    20a4:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    20a6:	a3 e5       	ldi	r26, 0x53	; 83
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e3 e5       	ldi	r30, 0x53	; 83
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	90 81       	ld	r25, Z
    20b0:	8a 81       	ldd	r24, Y+2	; 0x02
    20b2:	89 2b       	or	r24, r25
    20b4:	8c 93       	st	X, r24
	//Output compare
	T0_OCR0 = CompareValue;
    20b6:	ec e5       	ldi	r30, 0x5C	; 92
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8b 81       	ldd	r24, Y+3	; 0x03
    20bc:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	41 f4       	brne	.+16     	; 0x20d4 <T0_voidCTCModeInit+0x100>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    20c4:	a9 e5       	ldi	r26, 0x59	; 89
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e9 e5       	ldi	r30, 0x59	; 89
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	81 60       	ori	r24, 0x01	; 1
    20d0:	8c 93       	st	X, r24
    20d2:	0a c0       	rjmp	.+20     	; 0x20e8 <T0_voidCTCModeInit+0x114>
	}
	else if(InterruptState ==disable)
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	82 30       	cpi	r24, 0x02	; 2
    20d8:	39 f4       	brne	.+14     	; 0x20e8 <T0_voidCTCModeInit+0x114>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    20da:	a9 e5       	ldi	r26, 0x59	; 89
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e9 e5       	ldi	r30, 0x59	; 89
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8e 7f       	andi	r24, 0xFE	; 254
    20e6:	8c 93       	st	X, r24
	}

}
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <T0_voidCallBackFuncCTCMode>:


void T0_voidCallBackFuncCTCMode(void (*CTCpf)(void))
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <T0_voidCallBackFuncCTCMode+0x6>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	9a 81       	ldd	r25, Y+2	; 0x02
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	31 f0       	breq	.+12     	; 0x2118 <T0_voidCallBackFuncCTCMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	90 93 a1 01 	sts	0x01A1, r25
    2114:	80 93 a0 01 	sts	0x01A0, r24
	}
}
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	08 95       	ret

00002122 <__vector_10>:



void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    2122:	1f 92       	push	r1
    2124:	0f 92       	push	r0
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	0f 92       	push	r0
    212a:	11 24       	eor	r1, r1
    212c:	2f 93       	push	r18
    212e:	3f 93       	push	r19
    2130:	4f 93       	push	r20
    2132:	5f 93       	push	r21
    2134:	6f 93       	push	r22
    2136:	7f 93       	push	r23
    2138:	8f 93       	push	r24
    213a:	9f 93       	push	r25
    213c:	af 93       	push	r26
    213e:	bf 93       	push	r27
    2140:	ef 93       	push	r30
    2142:	ff 93       	push	r31
    2144:	df 93       	push	r29
    2146:	cf 93       	push	r28
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    214c:	80 91 a0 01 	lds	r24, 0x01A0
    2150:	90 91 a1 01 	lds	r25, 0x01A1
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	29 f0       	breq	.+10     	; 0x2162 <__vector_10+0x40>
	{
		GlobalCTCPF();
    2158:	e0 91 a0 01 	lds	r30, 0x01A0
    215c:	f0 91 a1 01 	lds	r31, 0x01A1
    2160:	09 95       	icall
	}
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	ff 91       	pop	r31
    2168:	ef 91       	pop	r30
    216a:	bf 91       	pop	r27
    216c:	af 91       	pop	r26
    216e:	9f 91       	pop	r25
    2170:	8f 91       	pop	r24
    2172:	7f 91       	pop	r23
    2174:	6f 91       	pop	r22
    2176:	5f 91       	pop	r21
    2178:	4f 91       	pop	r20
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	0f 90       	pop	r0
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	0f 90       	pop	r0
    2184:	1f 90       	pop	r1
    2186:	18 95       	reti

00002188 <T0_voidPWMModeInit>:



/**************************************PWM**************************************/
void T0_voidPWMModeInit(u8 PWMType, u8 OC0State ,u8 Prescaller, u8 DutyCycle)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <T0_voidPWMModeInit+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <T0_voidPWMModeInit+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	6a 83       	std	Y+2, r22	; 0x02
    2198:	4b 83       	std	Y+3, r20	; 0x03
    219a:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	81 30       	cpi	r24, 0x01	; 1
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <T0_voidPWMModeInit+0x1c>
    21a2:	8f c0       	rjmp	.+286    	; 0x22c2 <T0_voidPWMModeInit+0x13a>
	{
		//fast PWM
		set_bit(T0_TCCR0,T0_TCCR0_WGM00);
    21a4:	a3 e5       	ldi	r26, 0x53	; 83
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e3 e5       	ldi	r30, 0x53	; 83
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	80 64       	ori	r24, 0x40	; 64
    21b0:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    21b2:	a3 e5       	ldi	r26, 0x53	; 83
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e3 e5       	ldi	r30, 0x53	; 83
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 60       	ori	r24, 0x08	; 8
    21be:	8c 93       	st	X, r24
		if (OC0State==PWM_OC0_Disconnect)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	81 30       	cpi	r24, 0x01	; 1
    21c4:	79 f4       	brne	.+30     	; 0x21e4 <T0_voidPWMModeInit+0x5c>
		{
			//disconnect  pin OC0
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    21c6:	a3 e5       	ldi	r26, 0x53	; 83
    21c8:	b0 e0       	ldi	r27, 0x00	; 0
    21ca:	e3 e5       	ldi	r30, 0x53	; 83
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	8f 7e       	andi	r24, 0xEF	; 239
    21d2:	8c 93       	st	X, r24
			clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    21d4:	a3 e5       	ldi	r26, 0x53	; 83
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e3 e5       	ldi	r30, 0x53	; 83
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	8f 7d       	andi	r24, 0xDF	; 223
    21e0:	8c 93       	st	X, r24
    21e2:	5c c0       	rjmp	.+184    	; 0x229c <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_nonInverting)
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	82 30       	cpi	r24, 0x02	; 2
    21e8:	49 f5       	brne	.+82     	; 0x223c <T0_voidPWMModeInit+0xb4>
		{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	8f 7e       	andi	r24, 0xEF	; 239
    21f6:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 62       	ori	r24, 0x20	; 32
    2204:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    2206:	ec e5       	ldi	r30, 0x5C	; 92
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	8c 81       	ldd	r24, Y+4	; 0x04
    220c:	48 2f       	mov	r20, r24
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	ca 01       	movw	r24, r20
    2212:	9c 01       	movw	r18, r24
    2214:	22 0f       	add	r18, r18
    2216:	33 1f       	adc	r19, r19
    2218:	c9 01       	movw	r24, r18
    221a:	96 95       	lsr	r25
    221c:	98 2f       	mov	r25, r24
    221e:	88 27       	eor	r24, r24
    2220:	97 95       	ror	r25
    2222:	87 95       	ror	r24
    2224:	82 1b       	sub	r24, r18
    2226:	93 0b       	sbc	r25, r19
    2228:	84 0f       	add	r24, r20
    222a:	95 1f       	adc	r25, r21
    222c:	24 e6       	ldi	r18, 0x64	; 100
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	b9 01       	movw	r22, r18
    2232:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    2236:	cb 01       	movw	r24, r22
    2238:	80 83       	st	Z, r24
    223a:	30 c0       	rjmp	.+96     	; 0x229c <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_Inverting)
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	83 30       	cpi	r24, 0x03	; 3
    2240:	69 f5       	brne	.+90     	; 0x229c <T0_voidPWMModeInit+0x114>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    2242:	a3 e5       	ldi	r26, 0x53	; 83
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e3 e5       	ldi	r30, 0x53	; 83
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	80 61       	ori	r24, 0x10	; 16
    224e:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2250:	a3 e5       	ldi	r26, 0x53	; 83
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e3 e5       	ldi	r30, 0x53	; 83
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 62       	ori	r24, 0x20	; 32
    225c:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    225e:	ec e5       	ldi	r30, 0x5C	; 92
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	24 e6       	ldi	r18, 0x64	; 100
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	b9 01       	movw	r22, r18
    2276:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    227a:	cb 01       	movw	r24, r22
    227c:	ac 01       	movw	r20, r24
    227e:	ca 01       	movw	r24, r20
    2280:	9c 01       	movw	r18, r24
    2282:	22 0f       	add	r18, r18
    2284:	33 1f       	adc	r19, r19
    2286:	c9 01       	movw	r24, r18
    2288:	96 95       	lsr	r25
    228a:	98 2f       	mov	r25, r24
    228c:	88 27       	eor	r24, r24
    228e:	97 95       	ror	r25
    2290:	87 95       	ror	r24
    2292:	82 1b       	sub	r24, r18
    2294:	93 0b       	sbc	r25, r19
    2296:	84 0f       	add	r24, r20
    2298:	95 1f       	adc	r25, r21
    229a:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	87 70       	andi	r24, 0x07	; 7
    22a0:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    22a2:	a3 e5       	ldi	r26, 0x53	; 83
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e3 e5       	ldi	r30, 0x53	; 83
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	88 7f       	andi	r24, 0xF8	; 248
    22ae:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    22b0:	a3 e5       	ldi	r26, 0x53	; 83
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e3 e5       	ldi	r30, 0x53	; 83
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	90 81       	ld	r25, Z
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	89 2b       	or	r24, r25
    22be:	8c 93       	st	X, r24
    22c0:	84 c0       	rjmp	.+264    	; 0x23ca <T0_voidPWMModeInit+0x242>
	}
	else if (PWMType==PhaseCorrectPWM)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	09 f0       	breq	.+2      	; 0x22ca <T0_voidPWMModeInit+0x142>
    22c8:	80 c0       	rjmp	.+256    	; 0x23ca <T0_voidPWMModeInit+0x242>
	{
		if (OC0State==PWM_OC0_Disconnect)
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	81 30       	cpi	r24, 0x01	; 1
    22ce:	79 f4       	brne	.+30     	; 0x22ee <T0_voidPWMModeInit+0x166>
			{
				//disconnect  pin OC0
				clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    22d0:	a3 e5       	ldi	r26, 0x53	; 83
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e3 e5       	ldi	r30, 0x53	; 83
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7e       	andi	r24, 0xEF	; 239
    22dc:	8c 93       	st	X, r24
				clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    22de:	a3 e5       	ldi	r26, 0x53	; 83
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e3 e5       	ldi	r30, 0x53	; 83
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8f 7d       	andi	r24, 0xDF	; 223
    22ea:	8c 93       	st	X, r24
    22ec:	5c c0       	rjmp	.+184    	; 0x23a6 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_nonInverting)
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	82 30       	cpi	r24, 0x02	; 2
    22f2:	49 f5       	brne	.+82     	; 0x2346 <T0_voidPWMModeInit+0x1be>
			{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    22f4:	a3 e5       	ldi	r26, 0x53	; 83
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e3 e5       	ldi	r30, 0x53	; 83
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	8f 7e       	andi	r24, 0xEF	; 239
    2300:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    2302:	a3 e5       	ldi	r26, 0x53	; 83
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e3 e5       	ldi	r30, 0x53	; 83
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	80 62       	ori	r24, 0x20	; 32
    230e:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    2310:	ec e5       	ldi	r30, 0x5C	; 92
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	48 2f       	mov	r20, r24
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	ca 01       	movw	r24, r20
    231c:	9c 01       	movw	r18, r24
    231e:	22 0f       	add	r18, r18
    2320:	33 1f       	adc	r19, r19
    2322:	c9 01       	movw	r24, r18
    2324:	96 95       	lsr	r25
    2326:	98 2f       	mov	r25, r24
    2328:	88 27       	eor	r24, r24
    232a:	97 95       	ror	r25
    232c:	87 95       	ror	r24
    232e:	82 1b       	sub	r24, r18
    2330:	93 0b       	sbc	r25, r19
    2332:	84 0f       	add	r24, r20
    2334:	95 1f       	adc	r25, r21
    2336:	24 e6       	ldi	r18, 0x64	; 100
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	b9 01       	movw	r22, r18
    233c:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    2340:	cb 01       	movw	r24, r22
    2342:	80 83       	st	Z, r24
    2344:	30 c0       	rjmp	.+96     	; 0x23a6 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_Inverting)
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	83 30       	cpi	r24, 0x03	; 3
    234a:	69 f5       	brne	.+90     	; 0x23a6 <T0_voidPWMModeInit+0x21e>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    234c:	a3 e5       	ldi	r26, 0x53	; 83
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e3 e5       	ldi	r30, 0x53	; 83
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	80 61       	ori	r24, 0x10	; 16
    2358:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    235a:	a3 e5       	ldi	r26, 0x53	; 83
    235c:	b0 e0       	ldi	r27, 0x00	; 0
    235e:	e3 e5       	ldi	r30, 0x53	; 83
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	80 81       	ld	r24, Z
    2364:	80 62       	ori	r24, 0x20	; 32
    2366:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    2368:	ec e5       	ldi	r30, 0x5C	; 92
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	8c 81       	ldd	r24, Y+4	; 0x04
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	82 1b       	sub	r24, r18
    2378:	93 0b       	sbc	r25, r19
    237a:	24 e6       	ldi	r18, 0x64	; 100
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	b9 01       	movw	r22, r18
    2380:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <__divmodhi4>
    2384:	cb 01       	movw	r24, r22
    2386:	ac 01       	movw	r20, r24
    2388:	ca 01       	movw	r24, r20
    238a:	9c 01       	movw	r18, r24
    238c:	22 0f       	add	r18, r18
    238e:	33 1f       	adc	r19, r19
    2390:	c9 01       	movw	r24, r18
    2392:	96 95       	lsr	r25
    2394:	98 2f       	mov	r25, r24
    2396:	88 27       	eor	r24, r24
    2398:	97 95       	ror	r25
    239a:	87 95       	ror	r24
    239c:	82 1b       	sub	r24, r18
    239e:	93 0b       	sbc	r25, r19
    23a0:	84 0f       	add	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    23a6:	8b 81       	ldd	r24, Y+3	; 0x03
    23a8:	87 70       	andi	r24, 0x07	; 7
    23aa:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    23ac:	a3 e5       	ldi	r26, 0x53	; 83
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	e3 e5       	ldi	r30, 0x53	; 83
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	88 7f       	andi	r24, 0xF8	; 248
    23b8:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    23ba:	a3 e5       	ldi	r26, 0x53	; 83
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 e5       	ldi	r30, 0x53	; 83
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	90 81       	ld	r25, Z
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	89 2b       	or	r24, r25
    23c8:	8c 93       	st	X, r24
	}

}
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <TWI_voidMasterInit>:



/*Init*/
void TWI_voidMasterInit(void)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
	//Bit Rate
	//Prescaller
	u8 Prescaller=TWI_Prescaller;
    23e2:	19 82       	std	Y+1, r1	; 0x01
	Prescaller&=0x03;  //0000 0011
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	83 70       	andi	r24, 0x03	; 3
    23e8:	89 83       	std	Y+1, r24	; 0x01
	TWI_TWSR&=0xFC;        //1111 1100
    23ea:	a1 e2       	ldi	r26, 0x21	; 33
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e1 e2       	ldi	r30, 0x21	; 33
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8c 7f       	andi	r24, 0xFC	; 252
    23f6:	8c 93       	st	X, r24
	//TWBR value
	TWI_TWBR=TWI_TWBR_value;
    23f8:	e0 e2       	ldi	r30, 0x20	; 32
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	80 83       	st	Z, r24
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    2400:	a6 e5       	ldi	r26, 0x56	; 86
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	e6 e5       	ldi	r30, 0x56	; 86
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	80 64       	ori	r24, 0x40	; 64
    240c:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    240e:	a6 e5       	ldi	r26, 0x56	; 86
    2410:	b0 e0       	ldi	r27, 0x00	; 0
    2412:	e6 e5       	ldi	r30, 0x56	; 86
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 81       	ld	r24, Z
    2418:	8e 7f       	andi	r24, 0xFE	; 254
    241a:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    241c:	e2 e2       	ldi	r30, 0x22	; 34
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    2422:	a6 e5       	ldi	r26, 0x56	; 86
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	e6 e5       	ldi	r30, 0x56	; 86
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	84 60       	ori	r24, 0x04	; 4
    242e:	8c 93       	st	X, r24

}
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <TWI_voidSlaveInit>:
void TWI_voidSlaveInit()
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	//Enable ACK TWEA
	set_bit(TWI_TWCR,TWI_TWCR_TWEA);
    2440:	a6 e5       	ldi	r26, 0x56	; 86
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e6 e5       	ldi	r30, 0x56	; 86
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	80 64       	ori	r24, 0x40	; 64
    244c:	8c 93       	st	X, r24
	//Interrupt State
#if InterruptState==enable
	set_bit(TWI_TWCR,TWI_TWCR_TWIE);
#elif InterruptState==disable
	clear_bit(TWI_TWCR,TWI_TWCR_TWIE);
    244e:	a6 e5       	ldi	r26, 0x56	; 86
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e6 e5       	ldi	r30, 0x56	; 86
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	8e 7f       	andi	r24, 0xFE	; 254
    245a:	8c 93       	st	X, r24
#endif
	//My Address
	TWI_TWAR=MyAdress;
    245c:	e2 e2       	ldi	r30, 0x22	; 34
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	10 82       	st	Z, r1
	//Enable TWI
	set_bit(TWI_TWCR,TWI_TWCR_TWEN);
    2462:	a6 e5       	ldi	r26, 0x56	; 86
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	e6 e5       	ldi	r30, 0x56	; 86
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	84 60       	ori	r24, 0x04	; 4
    246e:	8c 93       	st	X, r24

}
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <TWI_voidStartCondition>:
/*************************************/
/*Start Condtion */
void TWI_voidStartCondition()
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	set_bit(TWI_TWCR,TWI_TWCR_TWINT);
    247e:	a6 e5       	ldi	r26, 0x56	; 86
    2480:	b0 e0       	ldi	r27, 0x00	; 0
    2482:	e6 e5       	ldi	r30, 0x56	; 86
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	80 81       	ld	r24, Z
    2488:	80 68       	ori	r24, 0x80	; 128
    248a:	8c 93       	st	X, r24
	//Set Start Condition
	set_bit(TWI_TWCR,TWI_TWCR_TWSTA);
    248c:	a6 e5       	ldi	r26, 0x56	; 86
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e6 e5       	ldi	r30, 0x56	; 86
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	80 62       	ori	r24, 0x20	; 32
    2498:	8c 93       	st	X, r24
	//Wait Flag on () when the Current Job Finish
	while (!get_bit(TWI_TWCR,TWI_TWCR_TWINT));
    249a:	e6 e5       	ldi	r30, 0x56	; 86
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	88 23       	and	r24, r24
    24a2:	dc f7       	brge	.-10     	; 0x249a <TWI_voidStartCondition+0x24>
	//Check on the ACK (TWSR) -> TWI_StartCondition

}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <TWI_voidRestartCondition>:
void TWI_voidRestartCondition()
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag (TWCR)
	//Set Start Condition Job
	//Wait Flag on () when the Current Job Finish
	//Check on the ACK (TWSR)-> TWI_ReStartCondition
}
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <TWI_voidStopCondition>:
/*************************************/
/*Stop Condtion */
void TWI_voidStopCondition()
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	//Clear_Flag
	// Enable Stop Condition
}
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <TWI_voidSendSlAWithWrite>:
/*************************************/
/*Slave Address */
void TWI_voidSendSlAWithWrite(u8 DestinationAddress)
{	 	//Sent the Destiantion
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	89 83       	std	Y+1, r24	; 0x01
		//TWDR = DestinationAddress + 0 ->Write
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/W )
	//Check on the ACK (TWSR) -> TWI_SLAWACK

}
    24d2:	0f 90       	pop	r0
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <TWI_voidSendSlAWithRead>:
void TWI_voidSendSlAWithRead(u8 DestinationAddress)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	89 83       	std	Y+1, r24	; 0x01
	//TWDR-> Sent Any thing (DestinationAddress and Write Date and Read Data)
		//TWDR = DestinationAddress + 1 ->Read
	//Clear_Falg
	//Wait Flag on () when the Current Job Finish (Sent the SLA/A )
	//Check on the ACK (TWSR) -> TWI_SLARACK
}
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <TWI_voidWriteDataByte>:
/*************************************/
/*Data Byte */
void TWI_voidWriteDataByte(u8 Data)
{
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	0f 92       	push	r0
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	89 83       	std	Y+1, r24	; 0x01
	//Write Data Byte in TWDR
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Write Byte)
	//Check on the ACK (TWSR) -> TWI_Tx_DataACK

}// Take this Value
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <TWI_voidReadDataByte>:
void TWI_voidReadDataByte(u8 *Data)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <TWI_voidReadDataByte+0x6>
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
	//Clr Flag
	//wait Flag on () when the Current Job Finish (Read Byte)
	//Check on the ACK (TWSR) -> TWI_Rx_DataACK
	//Read Data From TWDR And Store it in side Pointer

}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <SPI_voidinit>:
#include "SPI_Interface.h"



void SPI_voidinit(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
#if SPI_InterrptE==disable
	clear_bit(SPI_SPCR,SPCR_SPIE);
    2522:	ad e2       	ldi	r26, 0x2D	; 45
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	ed e2       	ldi	r30, 0x2D	; 45
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	8f 77       	andi	r24, 0x7F	; 127
    252e:	8c 93       	st	X, r24
#endif

#if SPI_DataOrder==DataorderLSB
	set_bit(SPI_SPCR,SPCR_DORD);
#elif SPI_DataOrder==DataorderMSB
	clear_bit(SPI_SPCR,SPCR_DORD);
    2530:	ad e2       	ldi	r26, 0x2D	; 45
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	ed e2       	ldi	r30, 0x2D	; 45
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	8f 7d       	andi	r24, 0xDF	; 223
    253c:	8c 93       	st	X, r24
#endif


	set_bit(SPI_SPCR,SPCR_SPE);
    253e:	ad e2       	ldi	r26, 0x2D	; 45
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	ed e2       	ldi	r30, 0x2D	; 45
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	80 64       	ori	r24, 0x40	; 64
    254a:	8c 93       	st	X, r24
#if SPI_State==Master
	set_bit(SPI_SPCR,SPCR_MSTR);
    254c:	ad e2       	ldi	r26, 0x2D	; 45
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ed e2       	ldi	r30, 0x2D	; 45
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	80 61       	ori	r24, 0x10	; 16
    2558:	8c 93       	st	X, r24
#elif SPI_State==Slave
	clear_bit(SPI_SPCR,SPCR_MSTR);
#endif

#if SPI_ClkPolarity==Rising
	clear_bit(SPI_SPCR,SPCR_CPOL);
    255a:	ad e2       	ldi	r26, 0x2D	; 45
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	ed e2       	ldi	r30, 0x2D	; 45
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	87 7f       	andi	r24, 0xF7	; 247
    2566:	8c 93       	st	X, r24
#elif SPI_ClkPolarity==Falling
	set_bit(SPI_SPCR,SPCR_CPOL);
#endif

#if SPI_ClkPhase==TxRx
	clear_bit(SPI_SPCR,SPCR_CPHA);
    2568:	ad e2       	ldi	r26, 0x2D	; 45
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ed e2       	ldi	r30, 0x2D	; 45
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8b 7f       	andi	r24, 0xFB	; 251
    2574:	8c 93       	st	X, r24
	set_bit(SPI_SPCR,SPCR_CPHA);
#endif


#if SPI_Frequency==F4
	clear_bit(SPI_SPSR,SPSR_SPI2X);
    2576:	ae e2       	ldi	r26, 0x2E	; 46
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	ee e2       	ldi	r30, 0x2E	; 46
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8e 7f       	andi	r24, 0xFE	; 254
    2582:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR0);
    2584:	ad e2       	ldi	r26, 0x2D	; 45
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	ed e2       	ldi	r30, 0x2D	; 45
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR1);
    2592:	ad e2       	ldi	r26, 0x2D	; 45
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	ed e2       	ldi	r30, 0x2D	; 45
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8d 7f       	andi	r24, 0xFD	; 253
    259e:	8c 93       	st	X, r24
	set_bit(SPI_SPSR,SPSR_SPI2X);
	clear_bit(SPI_SPCR,SPCR_SPR0);
	set_bit(SPI_SPCR,SPCR_SPR1);
#endif

}
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <SPI_u8sendReceiveByte>:




u8 SPI_u8sendReceiveByte(u8 data)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	0f 92       	push	r0
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPI_SPDR = data;
    25b2:	ef e2       	ldi	r30, 0x2F	; 47
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(!get_bit(SPI_SPSR,SPSR_SPIF)){}
    25ba:	ee e2       	ldi	r30, 0x2E	; 46
    25bc:	f0 e0       	ldi	r31, 0x00	; 0
    25be:	80 81       	ld	r24, Z
    25c0:	88 23       	and	r24, r24
    25c2:	dc f7       	brge	.-10     	; 0x25ba <SPI_u8sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPI_SPDR;
    25c4:	ef e2       	ldi	r30, 0x2F	; 47
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
}
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <SPI_voidsendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_voidsendString(const u8 *str)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <SPI_voidsendString+0x6>
    25d8:	00 d0       	rcall	.+0      	; 0x25da <SPI_voidsendString+0x8>
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9c 83       	std	Y+4, r25	; 0x04
    25e0:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    25e2:	1a 82       	std	Y+2, r1	; 0x02
	u8 received_data = 0;
    25e4:	19 82       	std	Y+1, r1	; 0x01
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <SPI_voidsendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
    25e8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	fc 01       	movw	r30, r24
    25f4:	e2 0f       	add	r30, r18
    25f6:	f3 1f       	adc	r31, r19
    25f8:	80 81       	ld	r24, Z
    25fa:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <SPI_u8sendReceiveByte>
    25fe:	89 83       	std	Y+1, r24	; 0x01
		i++;
    2600:	8a 81       	ldd	r24, Y+2	; 0x02
    2602:	8f 5f       	subi	r24, 0xFF	; 255
    2604:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	28 2f       	mov	r18, r24
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	fc 01       	movw	r30, r24
    2612:	e2 0f       	add	r30, r18
    2614:	f3 1f       	adc	r31, r19
    2616:	80 81       	ld	r24, Z
    2618:	88 23       	and	r24, r24
    261a:	31 f7       	brne	.-52     	; 0x25e8 <SPI_voidsendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
		i++;
	}
}
    261c:	0f 90       	pop	r0
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <SPI_voidreceiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_voidreceiveString(u8 *str)
{
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <SPI_voidreceiveString+0xa>
    2634:	0f 92       	push	r0
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	9b 83       	std	Y+3, r25	; 0x03
    263c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    263e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2640:	89 81       	ldd	r24, Y+1	; 0x01
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	9b 81       	ldd	r25, Y+3	; 0x03
    264a:	8c 01       	movw	r16, r24
    264c:	02 0f       	add	r16, r18
    264e:	13 1f       	adc	r17, r19
    2650:	8f ef       	ldi	r24, 0xFF	; 255
    2652:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <SPI_u8sendReceiveByte>
    2656:	f8 01       	movw	r30, r16
    2658:	80 83       	st	Z, r24
    265a:	10 c0       	rjmp	.+32     	; 0x267c <SPI_voidreceiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    265c:	89 81       	ldd	r24, Y+1	; 0x01
    265e:	8f 5f       	subi	r24, 0xFF	; 255
    2660:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	9b 81       	ldd	r25, Y+3	; 0x03
    266c:	8c 01       	movw	r16, r24
    266e:	02 0f       	add	r16, r18
    2670:	13 1f       	adc	r17, r19
    2672:	8f ef       	ldi	r24, 0xFF	; 255
    2674:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <SPI_u8sendReceiveByte>
    2678:	f8 01       	movw	r30, r16
    267a:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	fc 01       	movw	r30, r24
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
    268c:	80 81       	ld	r24, Z
    268e:	83 32       	cpi	r24, 0x23	; 35
    2690:	29 f7       	brne	.-54     	; 0x265c <SPI_voidreceiveString+0x32>
		i++;
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	9b 81       	ldd	r25, Y+3	; 0x03
    269c:	fc 01       	movw	r30, r24
    269e:	e2 0f       	add	r30, r18
    26a0:	f3 1f       	adc	r31, r19
    26a2:	10 82       	st	Z, r1
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	cf 91       	pop	r28
    26ac:	df 91       	pop	r29
    26ae:	1f 91       	pop	r17
    26b0:	0f 91       	pop	r16
    26b2:	08 95       	ret

000026b4 <GIE_voidEnable>:
#define GIE_SREG    *((volatile u8*)0x5F)
#define GIE_I       7


void GIE_voidEnable()
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
	set_bit(GIE_SREG,GIE_I);
    26bc:	af e5       	ldi	r26, 0x5F	; 95
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	ef e5       	ldi	r30, 0x5F	; 95
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 68       	ori	r24, 0x80	; 128
    26c8:	8c 93       	st	X, r24
}
    26ca:	cf 91       	pop	r28
    26cc:	df 91       	pop	r29
    26ce:	08 95       	ret

000026d0 <GIE_voidDisable>:

void GIE_voidDisable()
{
    26d0:	df 93       	push	r29
    26d2:	cf 93       	push	r28
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GIE_SREG,GIE_I);
    26d8:	af e5       	ldi	r26, 0x5F	; 95
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	ef e5       	ldi	r30, 0x5F	; 95
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	8f 77       	andi	r24, 0x7F	; 127
    26e4:	8c 93       	st	X, r24
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <EXTI_voidInitINT0>:
#include "EXTI_Interface.h"
void (*EXTI0_ISR)();
void (*EXTI1_ISR)();
void (*EXTI2_ISR)();
void EXTI_voidInitINT0(u8 sense)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	0f 92       	push	r0
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	81 30       	cpi	r24, 0x01	; 1
    26fc:	79 f4       	brne	.+30     	; 0x271c <EXTI_voidInitINT0+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    26fe:	a5 e5       	ldi	r26, 0x55	; 85
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e5 e5       	ldi	r30, 0x55	; 85
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	8e 7f       	andi	r24, 0xFE	; 254
    270a:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    270c:	a5 e5       	ldi	r26, 0x55	; 85
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e5 e5       	ldi	r30, 0x55	; 85
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	8d 7f       	andi	r24, 0xFD	; 253
    2718:	8c 93       	st	X, r24
    271a:	35 c0       	rjmp	.+106    	; 0x2786 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==AnyCahnge)
    271c:	89 81       	ldd	r24, Y+1	; 0x01
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	79 f4       	brne	.+30     	; 0x2740 <EXTI_voidInitINT0+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    2722:	a5 e5       	ldi	r26, 0x55	; 85
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e5 e5       	ldi	r30, 0x55	; 85
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	81 60       	ori	r24, 0x01	; 1
    272e:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    2730:	a5 e5       	ldi	r26, 0x55	; 85
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e5 e5       	ldi	r30, 0x55	; 85
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8d 7f       	andi	r24, 0xFD	; 253
    273c:	8c 93       	st	X, r24
    273e:	23 c0       	rjmp	.+70     	; 0x2786 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Falling)
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	83 30       	cpi	r24, 0x03	; 3
    2744:	79 f4       	brne	.+30     	; 0x2764 <EXTI_voidInitINT0+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    2746:	a5 e5       	ldi	r26, 0x55	; 85
    2748:	b0 e0       	ldi	r27, 0x00	; 0
    274a:	e5 e5       	ldi	r30, 0x55	; 85
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	8e 7f       	andi	r24, 0xFE	; 254
    2752:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2754:	a5 e5       	ldi	r26, 0x55	; 85
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e5 e5       	ldi	r30, 0x55	; 85
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	82 60       	ori	r24, 0x02	; 2
    2760:	8c 93       	st	X, r24
    2762:	11 c0       	rjmp	.+34     	; 0x2786 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Rising)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	84 30       	cpi	r24, 0x04	; 4
    2768:	71 f4       	brne	.+28     	; 0x2786 <EXTI_voidInitINT0+0x9a>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    276a:	a5 e5       	ldi	r26, 0x55	; 85
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	e5 e5       	ldi	r30, 0x55	; 85
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	81 60       	ori	r24, 0x01	; 1
    2776:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2778:	a5 e5       	ldi	r26, 0x55	; 85
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	e5 e5       	ldi	r30, 0x55	; 85
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	82 60       	ori	r24, 0x02	; 2
    2784:	8c 93       	st	X, r24
	}
	else
	{
		//error
	}
	set_bit(EXTI_GICR,EXTI_INT0);
    2786:	ab e5       	ldi	r26, 0x5B	; 91
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	eb e5       	ldi	r30, 0x5B	; 91
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 64       	ori	r24, 0x40	; 64
    2792:	8c 93       	st	X, r24

}
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <EXTI_voidInitINT1>:

void EXTI_voidInitINT1(u8 sense)
{
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	79 f4       	brne	.+30     	; 0x27cc <EXTI_voidInitINT1+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    27ae:	a5 e5       	ldi	r26, 0x55	; 85
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e5 e5       	ldi	r30, 0x55	; 85
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	8b 7f       	andi	r24, 0xFB	; 251
    27ba:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    27bc:	a5 e5       	ldi	r26, 0x55	; 85
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e5 e5       	ldi	r30, 0x55	; 85
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	87 7f       	andi	r24, 0xF7	; 247
    27c8:	8c 93       	st	X, r24
    27ca:	35 c0       	rjmp	.+106    	; 0x2836 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==AnyCahnge)
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	79 f4       	brne	.+30     	; 0x27f0 <EXTI_voidInitINT1+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    27d2:	a5 e5       	ldi	r26, 0x55	; 85
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	e5 e5       	ldi	r30, 0x55	; 85
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	84 60       	ori	r24, 0x04	; 4
    27de:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    27e0:	a5 e5       	ldi	r26, 0x55	; 85
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e5 e5       	ldi	r30, 0x55	; 85
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	87 7f       	andi	r24, 0xF7	; 247
    27ec:	8c 93       	st	X, r24
    27ee:	23 c0       	rjmp	.+70     	; 0x2836 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Falling)
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	83 30       	cpi	r24, 0x03	; 3
    27f4:	79 f4       	brne	.+30     	; 0x2814 <EXTI_voidInitINT1+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    27f6:	a5 e5       	ldi	r26, 0x55	; 85
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e5 e5       	ldi	r30, 0x55	; 85
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	8b 7f       	andi	r24, 0xFB	; 251
    2802:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    2804:	a5 e5       	ldi	r26, 0x55	; 85
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e5 e5       	ldi	r30, 0x55	; 85
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	88 60       	ori	r24, 0x08	; 8
    2810:	8c 93       	st	X, r24
    2812:	11 c0       	rjmp	.+34     	; 0x2836 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Rising)
    2814:	89 81       	ldd	r24, Y+1	; 0x01
    2816:	84 30       	cpi	r24, 0x04	; 4
    2818:	a9 f4       	brne	.+42     	; 0x2844 <EXTI_voidInitINT1+0xa8>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    281a:	a5 e5       	ldi	r26, 0x55	; 85
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e5 e5       	ldi	r30, 0x55	; 85
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	84 60       	ori	r24, 0x04	; 4
    2826:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    2828:	a5 e5       	ldi	r26, 0x55	; 85
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e5 e5       	ldi	r30, 0x55	; 85
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	88 60       	ori	r24, 0x08	; 8
    2834:	8c 93       	st	X, r24
	}
	else
	{
		return;
	}
	set_bit(EXTI_GICR,EXTI_INT1);
    2836:	ab e5       	ldi	r26, 0x5B	; 91
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	eb e5       	ldi	r30, 0x5B	; 91
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	80 68       	ori	r24, 0x80	; 128
    2842:	8c 93       	st	X, r24
}
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <EXTI_voidInitINT2>:

void EXTI_voidInitINT2(u8 sense)
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	0f 92       	push	r0
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	89 83       	std	Y+1, r24	; 0x01
	if(sense==Rising)
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	84 30       	cpi	r24, 0x04	; 4
    285c:	41 f4       	brne	.+16     	; 0x286e <EXTI_voidInitINT2+0x22>
	{
		set_bit(EXTI_MCUCSR,EXTI_ISC2);
    285e:	a4 e5       	ldi	r26, 0x54	; 84
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e4 e5       	ldi	r30, 0x54	; 84
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	80 64       	ori	r24, 0x40	; 64
    286a:	8c 93       	st	X, r24
    286c:	0a c0       	rjmp	.+20     	; 0x2882 <EXTI_voidInitINT2+0x36>
	}
	else if (sense==Rising)
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	84 30       	cpi	r24, 0x04	; 4
    2872:	39 f4       	brne	.+14     	; 0x2882 <EXTI_voidInitINT2+0x36>
	{
		clear_bit(EXTI_MCUCSR,EXTI_ISC2);
    2874:	a4 e5       	ldi	r26, 0x54	; 84
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e4 e5       	ldi	r30, 0x54	; 84
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 7b       	andi	r24, 0xBF	; 191
    2880:	8c 93       	st	X, r24
	}
	else
	{

	}
	set_bit(EXTI_GICR,EXTI_INT2);
    2882:	ab e5       	ldi	r26, 0x5B	; 91
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	eb e5       	ldi	r30, 0x5B	; 91
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	80 62       	ori	r24, 0x20	; 32
    288e:	8c 93       	st	X, r24
}
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <EXTI0_CallBack>:

void EXTI0_CallBack (void (*ptr)(void))
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	00 d0       	rcall	.+0      	; 0x289e <EXTI0_CallBack+0x6>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_ISR = ptr;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	90 93 b1 01 	sts	0x01B1, r25
    28ae:	80 93 b0 01 	sts	0x01B0, r24
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <__vector_1>:
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    28bc:	1f 92       	push	r1
    28be:	0f 92       	push	r0
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	0f 92       	push	r0
    28c4:	11 24       	eor	r1, r1
    28c6:	2f 93       	push	r18
    28c8:	3f 93       	push	r19
    28ca:	4f 93       	push	r20
    28cc:	5f 93       	push	r21
    28ce:	6f 93       	push	r22
    28d0:	7f 93       	push	r23
    28d2:	8f 93       	push	r24
    28d4:	9f 93       	push	r25
    28d6:	af 93       	push	r26
    28d8:	bf 93       	push	r27
    28da:	ef 93       	push	r30
    28dc:	ff 93       	push	r31
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_ISR!=NULL)
    28e6:	80 91 b0 01 	lds	r24, 0x01B0
    28ea:	90 91 b1 01 	lds	r25, 0x01B1
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	29 f0       	breq	.+10     	; 0x28fc <__vector_1+0x40>
	{
		EXTI0_ISR();
    28f2:	e0 91 b0 01 	lds	r30, 0x01B0
    28f6:	f0 91 b1 01 	lds	r31, 0x01B1
    28fa:	09 95       	icall
	}
}
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	ff 91       	pop	r31
    2902:	ef 91       	pop	r30
    2904:	bf 91       	pop	r27
    2906:	af 91       	pop	r26
    2908:	9f 91       	pop	r25
    290a:	8f 91       	pop	r24
    290c:	7f 91       	pop	r23
    290e:	6f 91       	pop	r22
    2910:	5f 91       	pop	r21
    2912:	4f 91       	pop	r20
    2914:	3f 91       	pop	r19
    2916:	2f 91       	pop	r18
    2918:	0f 90       	pop	r0
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	0f 90       	pop	r0
    291e:	1f 90       	pop	r1
    2920:	18 95       	reti

00002922 <EXTI1_CallBack>:

void EXTI1_CallBack (void (*ptr)(void))
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <EXTI1_CallBack+0x6>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    EXTI1_ISR = ptr;
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	90 93 af 01 	sts	0x01AF, r25
    2938:	80 93 ae 01 	sts	0x01AE, r24
}
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	cf 91       	pop	r28
    2942:	df 91       	pop	r29
    2944:	08 95       	ret

00002946 <__vector_2>:
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    2946:	1f 92       	push	r1
    2948:	0f 92       	push	r0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	0f 92       	push	r0
    294e:	11 24       	eor	r1, r1
    2950:	2f 93       	push	r18
    2952:	3f 93       	push	r19
    2954:	4f 93       	push	r20
    2956:	5f 93       	push	r21
    2958:	6f 93       	push	r22
    295a:	7f 93       	push	r23
    295c:	8f 93       	push	r24
    295e:	9f 93       	push	r25
    2960:	af 93       	push	r26
    2962:	bf 93       	push	r27
    2964:	ef 93       	push	r30
    2966:	ff 93       	push	r31
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_ISR!=NULL)
    2970:	80 91 ae 01 	lds	r24, 0x01AE
    2974:	90 91 af 01 	lds	r25, 0x01AF
    2978:	00 97       	sbiw	r24, 0x00	; 0
    297a:	29 f0       	breq	.+10     	; 0x2986 <__vector_2+0x40>
	{
		EXTI1_ISR();
    297c:	e0 91 ae 01 	lds	r30, 0x01AE
    2980:	f0 91 af 01 	lds	r31, 0x01AF
    2984:	09 95       	icall
	}
}
    2986:	cf 91       	pop	r28
    2988:	df 91       	pop	r29
    298a:	ff 91       	pop	r31
    298c:	ef 91       	pop	r30
    298e:	bf 91       	pop	r27
    2990:	af 91       	pop	r26
    2992:	9f 91       	pop	r25
    2994:	8f 91       	pop	r24
    2996:	7f 91       	pop	r23
    2998:	6f 91       	pop	r22
    299a:	5f 91       	pop	r21
    299c:	4f 91       	pop	r20
    299e:	3f 91       	pop	r19
    29a0:	2f 91       	pop	r18
    29a2:	0f 90       	pop	r0
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	0f 90       	pop	r0
    29a8:	1f 90       	pop	r1
    29aa:	18 95       	reti

000029ac <EXTI2_CallBack>:
void EXTI2_CallBack (void (*ptr)(void))
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <EXTI2_CallBack+0x6>
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
    EXTI2_ISR = ptr;
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	90 93 ad 01 	sts	0x01AD, r25
    29c2:	80 93 ac 01 	sts	0x01AC, r24
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	cf 91       	pop	r28
    29cc:	df 91       	pop	r29
    29ce:	08 95       	ret

000029d0 <__vector_3>:
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    29d0:	1f 92       	push	r1
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	0f 92       	push	r0
    29d8:	11 24       	eor	r1, r1
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_ISR!=NULL)
    29fa:	80 91 ac 01 	lds	r24, 0x01AC
    29fe:	90 91 ad 01 	lds	r25, 0x01AD
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	29 f0       	breq	.+10     	; 0x2a10 <__vector_3+0x40>
	{
		EXTI2_ISR();
    2a06:	e0 91 ac 01 	lds	r30, 0x01AC
    2a0a:	f0 91 ad 01 	lds	r31, 0x01AD
    2a0e:	09 95       	icall
	}
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	0f 90       	pop	r0
    2a32:	1f 90       	pop	r1
    2a34:	18 95       	reti

00002a36 <IN_EEPROM_voidWriteByte>:
 */

#include "EEPROM_Interface.h"

void IN_EEPROM_voidWriteByte( u8 Address , u8 data)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <IN_EEPROM_voidWriteByte+0x6>
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    2a44:	ec e3       	ldi	r30, 0x3C	; 60
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	86 95       	lsr	r24
    2a4c:	88 2f       	mov	r24, r24
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	81 70       	andi	r24, 0x01	; 1
    2a52:	90 70       	andi	r25, 0x00	; 0
    2a54:	88 23       	and	r24, r24
    2a56:	b1 f7       	brne	.-20     	; 0x2a44 <IN_EEPROM_voidWriteByte+0xe>
	while(get_bit(E_SPMCR,E_SPMCR_SPMEN));
    2a58:	e7 e5       	ldi	r30, 0x57	; 87
    2a5a:	f0 e0       	ldi	r31, 0x00	; 0
    2a5c:	80 81       	ld	r24, Z
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	81 70       	andi	r24, 0x01	; 1
    2a64:	90 70       	andi	r25, 0x00	; 0
    2a66:	88 23       	and	r24, r24
    2a68:	b9 f7       	brne	.-18     	; 0x2a58 <IN_EEPROM_voidWriteByte+0x22>
	EE_EEARL = Address ;
    2a6a:	ee e3       	ldi	r30, 0x3E	; 62
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	80 83       	st	Z, r24
	EE_EEDR  = data ;
    2a72:	ed e3       	ldi	r30, 0x3D	; 61
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EEMWE);
    2a7a:	ac e3       	ldi	r26, 0x3C	; 60
    2a7c:	b0 e0       	ldi	r27, 0x00	; 0
    2a7e:	ec e3       	ldi	r30, 0x3C	; 60
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	80 81       	ld	r24, Z
    2a84:	84 60       	ori	r24, 0x04	; 4
    2a86:	8c 93       	st	X, r24
	set_bit(EE_EECR,EE_EECR_EEWE);
    2a88:	ac e3       	ldi	r26, 0x3C	; 60
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	ec e3       	ldi	r30, 0x3C	; 60
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	82 60       	ori	r24, 0x02	; 2
    2a94:	8c 93       	st	X, r24
}
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <IN_EEPROM_voidReadByte>:
void IN_EEPROM_voidReadByte( u8 Address , u8* data)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <IN_EEPROM_voidReadByte+0x6>
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	7b 83       	std	Y+3, r23	; 0x03
    2ab0:	6a 83       	std	Y+2, r22	; 0x02
	while(get_bit(EE_EECR,EE_EECR_EEWE));
    2ab2:	ec e3       	ldi	r30, 0x3C	; 60
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	86 95       	lsr	r24
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	81 70       	andi	r24, 0x01	; 1
    2ac0:	90 70       	andi	r25, 0x00	; 0
    2ac2:	88 23       	and	r24, r24
    2ac4:	b1 f7       	brne	.-20     	; 0x2ab2 <IN_EEPROM_voidReadByte+0x12>
	while(get_bit(E_SPMCR,E_SPMCR_SPMEN));
    2ac6:	e7 e5       	ldi	r30, 0x57	; 87
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	80 81       	ld	r24, Z
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	81 70       	andi	r24, 0x01	; 1
    2ad2:	90 70       	andi	r25, 0x00	; 0
    2ad4:	88 23       	and	r24, r24
    2ad6:	b9 f7       	brne	.-18     	; 0x2ac6 <IN_EEPROM_voidReadByte+0x26>
	EE_EEARL = Address ;
    2ad8:	ee e3       	ldi	r30, 0x3E	; 62
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	80 83       	st	Z, r24
	set_bit(EE_EECR,EE_EECR_EERE);
    2ae0:	ac e3       	ldi	r26, 0x3C	; 60
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	ec e3       	ldi	r30, 0x3C	; 60
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	81 60       	ori	r24, 0x01	; 1
    2aec:	8c 93       	st	X, r24
	*data = EE_EEDR ;
    2aee:	ed e3       	ldi	r30, 0x3D	; 61
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	ea 81       	ldd	r30, Y+2	; 0x02
    2af6:	fb 81       	ldd	r31, Y+3	; 0x03
    2af8:	80 83       	st	Z, r24
}
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	0f 90       	pop	r0
    2b00:	cf 91       	pop	r28
    2b02:	df 91       	pop	r29
    2b04:	08 95       	ret

00002b06 <IN_EEPROM_voidEraseAll>:

void IN_EEPROM_voidEraseAll(void)
{
    2b06:	df 93       	push	r29
    2b08:	cf 93       	push	r28
    2b0a:	00 d0       	rcall	.+0      	; 0x2b0c <IN_EEPROM_voidEraseAll+0x6>
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    2b10:	1a 82       	std	Y+2, r1	; 0x02
    2b12:	19 82       	std	Y+1, r1	; 0x01
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <IN_EEPROM_voidEraseAll+0x22>
	{
		IN_EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <IN_EEPROM_voidWriteByte>
}

void IN_EEPROM_voidEraseAll(void)
{
	u16 EEPROM_Add ;
	for(EEPROM_Add = 0 ; EEPROM_Add < Max_Array ; EEPROM_Add++)
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	01 96       	adiw	r24, 0x01	; 1
    2b24:	9a 83       	std	Y+2, r25	; 0x02
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b2c:	24 e0       	ldi	r18, 0x04	; 4
    2b2e:	80 30       	cpi	r24, 0x00	; 0
    2b30:	92 07       	cpc	r25, r18
    2b32:	88 f3       	brcs	.-30     	; 0x2b16 <IN_EEPROM_voidEraseAll+0x10>
	{
		IN_EEPROM_voidWriteByte( EEPROM_Add , 0x00 );
	}
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	08 95       	ret

00002b3e <IN_EEPROM_voidEraseByte>:

void IN_EEPROM_voidEraseByte(u8 Address)
{
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	0f 92       	push	r0
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	89 83       	std	Y+1, r24	; 0x01
	IN_EEPROM_voidWriteByte( Address , 0x00 );
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	60 e0       	ldi	r22, 0x00	; 0
    2b4e:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <IN_EEPROM_voidWriteByte>
}
    2b52:	0f 90       	pop	r0
    2b54:	cf 91       	pop	r28
    2b56:	df 91       	pop	r29
    2b58:	08 95       	ret

00002b5a <DIO_voidSetPinDir>:
#include "DIO_Praivte.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
    2b5a:	df 93       	push	r29
    2b5c:	cf 93       	push	r28
    2b5e:	cd b7       	in	r28, 0x3d	; 61
    2b60:	de b7       	in	r29, 0x3e	; 62
    2b62:	27 97       	sbiw	r28, 0x07	; 7
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	6a 83       	std	Y+2, r22	; 0x02
    2b72:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	88 23       	and	r24, r24
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <DIO_voidSetPinDir+0x22>
    2b7a:	f4 c0       	rjmp	.+488    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	85 30       	cpi	r24, 0x05	; 5
    2b80:	08 f0       	brcs	.+2      	; 0x2b84 <DIO_voidSetPinDir+0x2a>
    2b82:	f0 c0       	rjmp	.+480    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	88 30       	cpi	r24, 0x08	; 8
    2b88:	08 f0       	brcs	.+2      	; 0x2b8c <DIO_voidSetPinDir+0x32>
    2b8a:	ec c0       	rjmp	.+472    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	88 23       	and	r24, r24
    2b90:	09 f0       	breq	.+2      	; 0x2b94 <DIO_voidSetPinDir+0x3a>
    2b92:	75 c0       	rjmp	.+234    	; 0x2c7e <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	3f 83       	std	Y+7, r19	; 0x07
    2b9c:	2e 83       	std	Y+6, r18	; 0x06
    2b9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	61 f1       	breq	.+88     	; 0x2c00 <DIO_voidSetPinDir+0xa6>
    2ba8:	2e 81       	ldd	r18, Y+6	; 0x06
    2baa:	3f 81       	ldd	r19, Y+7	; 0x07
    2bac:	23 30       	cpi	r18, 0x03	; 3
    2bae:	31 05       	cpc	r19, r1
    2bb0:	34 f4       	brge	.+12     	; 0x2bbe <DIO_voidSetPinDir+0x64>
    2bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb6:	81 30       	cpi	r24, 0x01	; 1
    2bb8:	91 05       	cpc	r25, r1
    2bba:	69 f0       	breq	.+26     	; 0x2bd6 <DIO_voidSetPinDir+0x7c>
    2bbc:	d3 c0       	rjmp	.+422    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
    2bbe:	2e 81       	ldd	r18, Y+6	; 0x06
    2bc0:	3f 81       	ldd	r19, Y+7	; 0x07
    2bc2:	23 30       	cpi	r18, 0x03	; 3
    2bc4:	31 05       	cpc	r19, r1
    2bc6:	89 f1       	breq	.+98     	; 0x2c2a <DIO_voidSetPinDir+0xd0>
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	84 30       	cpi	r24, 0x04	; 4
    2bce:	91 05       	cpc	r25, r1
    2bd0:	09 f4       	brne	.+2      	; 0x2bd4 <DIO_voidSetPinDir+0x7a>
    2bd2:	40 c0       	rjmp	.+128    	; 0x2c54 <DIO_voidSetPinDir+0xfa>
    2bd4:	c7 c0       	rjmp	.+398    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
    2bd6:	aa e3       	ldi	r26, 0x3A	; 58
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	ea e3       	ldi	r30, 0x3A	; 58
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	48 2f       	mov	r20, r24
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	02 2e       	mov	r0, r18
    2bee:	02 c0       	rjmp	.+4      	; 0x2bf4 <DIO_voidSetPinDir+0x9a>
    2bf0:	88 0f       	add	r24, r24
    2bf2:	99 1f       	adc	r25, r25
    2bf4:	0a 94       	dec	r0
    2bf6:	e2 f7       	brpl	.-8      	; 0x2bf0 <DIO_voidSetPinDir+0x96>
    2bf8:	80 95       	com	r24
    2bfa:	84 23       	and	r24, r20
    2bfc:	8c 93       	st	X, r24
    2bfe:	b2 c0       	rjmp	.+356    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
    2c00:	a7 e3       	ldi	r26, 0x37	; 55
    2c02:	b0 e0       	ldi	r27, 0x00	; 0
    2c04:	e7 e3       	ldi	r30, 0x37	; 55
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	48 2f       	mov	r20, r24
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	02 2e       	mov	r0, r18
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <DIO_voidSetPinDir+0xc4>
    2c1a:	88 0f       	add	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	0a 94       	dec	r0
    2c20:	e2 f7       	brpl	.-8      	; 0x2c1a <DIO_voidSetPinDir+0xc0>
    2c22:	80 95       	com	r24
    2c24:	84 23       	and	r24, r20
    2c26:	8c 93       	st	X, r24
    2c28:	9d c0       	rjmp	.+314    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
    2c2a:	a4 e3       	ldi	r26, 0x34	; 52
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	e4 e3       	ldi	r30, 0x34	; 52
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 81       	ld	r24, Z
    2c34:	48 2f       	mov	r20, r24
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	02 2e       	mov	r0, r18
    2c42:	02 c0       	rjmp	.+4      	; 0x2c48 <DIO_voidSetPinDir+0xee>
    2c44:	88 0f       	add	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	0a 94       	dec	r0
    2c4a:	e2 f7       	brpl	.-8      	; 0x2c44 <DIO_voidSetPinDir+0xea>
    2c4c:	80 95       	com	r24
    2c4e:	84 23       	and	r24, r20
    2c50:	8c 93       	st	X, r24
    2c52:	88 c0       	rjmp	.+272    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
    2c54:	a1 e3       	ldi	r26, 0x31	; 49
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	e1 e3       	ldi	r30, 0x31	; 49
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	80 81       	ld	r24, Z
    2c5e:	48 2f       	mov	r20, r24
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	02 2e       	mov	r0, r18
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <DIO_voidSetPinDir+0x118>
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	0a 94       	dec	r0
    2c74:	e2 f7       	brpl	.-8      	; 0x2c6e <DIO_voidSetPinDir+0x114>
    2c76:	80 95       	com	r24
    2c78:	84 23       	and	r24, r20
    2c7a:	8c 93       	st	X, r24
    2c7c:	73 c0       	rjmp	.+230    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <DIO_voidSetPinDir+0x12c>
    2c84:	6f c0       	rjmp	.+222    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	3d 83       	std	Y+5, r19	; 0x05
    2c8e:	2c 83       	std	Y+4, r18	; 0x04
    2c90:	8c 81       	ldd	r24, Y+4	; 0x04
    2c92:	9d 81       	ldd	r25, Y+5	; 0x05
    2c94:	82 30       	cpi	r24, 0x02	; 2
    2c96:	91 05       	cpc	r25, r1
    2c98:	51 f1       	breq	.+84     	; 0x2cee <DIO_voidSetPinDir+0x194>
    2c9a:	2c 81       	ldd	r18, Y+4	; 0x04
    2c9c:	3d 81       	ldd	r19, Y+5	; 0x05
    2c9e:	23 30       	cpi	r18, 0x03	; 3
    2ca0:	31 05       	cpc	r19, r1
    2ca2:	34 f4       	brge	.+12     	; 0x2cb0 <DIO_voidSetPinDir+0x156>
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	81 30       	cpi	r24, 0x01	; 1
    2caa:	91 05       	cpc	r25, r1
    2cac:	61 f0       	breq	.+24     	; 0x2cc6 <DIO_voidSetPinDir+0x16c>
    2cae:	5a c0       	rjmp	.+180    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
    2cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb4:	23 30       	cpi	r18, 0x03	; 3
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	71 f1       	breq	.+92     	; 0x2d16 <DIO_voidSetPinDir+0x1bc>
    2cba:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbe:	84 30       	cpi	r24, 0x04	; 4
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	e9 f1       	breq	.+122    	; 0x2d3e <DIO_voidSetPinDir+0x1e4>
    2cc4:	4f c0       	rjmp	.+158    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
    2cc6:	aa e3       	ldi	r26, 0x3A	; 58
    2cc8:	b0 e0       	ldi	r27, 0x00	; 0
    2cca:	ea e3       	ldi	r30, 0x3A	; 58
    2ccc:	f0 e0       	ldi	r31, 0x00	; 0
    2cce:	80 81       	ld	r24, Z
    2cd0:	48 2f       	mov	r20, r24
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd4:	28 2f       	mov	r18, r24
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	02 2e       	mov	r0, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <DIO_voidSetPinDir+0x18a>
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	0a 94       	dec	r0
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <DIO_voidSetPinDir+0x186>
    2ce8:	84 2b       	or	r24, r20
    2cea:	8c 93       	st	X, r24
    2cec:	3b c0       	rjmp	.+118    	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
    2cee:	a7 e3       	ldi	r26, 0x37	; 55
    2cf0:	b0 e0       	ldi	r27, 0x00	; 0
    2cf2:	e7 e3       	ldi	r30, 0x37	; 55
    2cf4:	f0 e0       	ldi	r31, 0x00	; 0
    2cf6:	80 81       	ld	r24, Z
    2cf8:	48 2f       	mov	r20, r24
    2cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	02 2e       	mov	r0, r18
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <DIO_voidSetPinDir+0x1b2>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	0a 94       	dec	r0
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <DIO_voidSetPinDir+0x1ae>
    2d10:	84 2b       	or	r24, r20
    2d12:	8c 93       	st	X, r24
    2d14:	27 c0       	rjmp	.+78     	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
    2d16:	a4 e3       	ldi	r26, 0x34	; 52
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	e4 e3       	ldi	r30, 0x34	; 52
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	80 81       	ld	r24, Z
    2d20:	48 2f       	mov	r20, r24
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	02 2e       	mov	r0, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <DIO_voidSetPinDir+0x1da>
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	0a 94       	dec	r0
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <DIO_voidSetPinDir+0x1d6>
    2d38:	84 2b       	or	r24, r20
    2d3a:	8c 93       	st	X, r24
    2d3c:	13 c0       	rjmp	.+38     	; 0x2d64 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
    2d3e:	a1 e3       	ldi	r26, 0x31	; 49
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	e1 e3       	ldi	r30, 0x31	; 49
    2d44:	f0 e0       	ldi	r31, 0x00	; 0
    2d46:	80 81       	ld	r24, Z
    2d48:	48 2f       	mov	r20, r24
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	81 e0       	ldi	r24, 0x01	; 1
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	02 2e       	mov	r0, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <DIO_voidSetPinDir+0x202>
    2d58:	88 0f       	add	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	0a 94       	dec	r0
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <DIO_voidSetPinDir+0x1fe>
    2d60:	84 2b       	or	r24, r20
    2d62:	8c 93       	st	X, r24
			}
		}
	}


}
    2d64:	27 96       	adiw	r28, 0x07	; 7
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	27 97       	sbiw	r28, 0x07	; 7
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	6a 83       	std	Y+2, r22	; 0x02
    2d8e:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	88 23       	and	r24, r24
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <DIO_voidSetPinValue+0x22>
    2d96:	f4 c0       	rjmp	.+488    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	85 30       	cpi	r24, 0x05	; 5
    2d9c:	08 f0       	brcs	.+2      	; 0x2da0 <DIO_voidSetPinValue+0x2a>
    2d9e:	f0 c0       	rjmp	.+480    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	88 30       	cpi	r24, 0x08	; 8
    2da4:	08 f0       	brcs	.+2      	; 0x2da8 <DIO_voidSetPinValue+0x32>
    2da6:	ec c0       	rjmp	.+472    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	88 23       	and	r24, r24
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <DIO_voidSetPinValue+0x3a>
    2dae:	75 c0       	rjmp	.+234    	; 0x2e9a <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	3f 83       	std	Y+7, r19	; 0x07
    2db8:	2e 83       	std	Y+6, r18	; 0x06
    2dba:	8e 81       	ldd	r24, Y+6	; 0x06
    2dbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2dbe:	82 30       	cpi	r24, 0x02	; 2
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	61 f1       	breq	.+88     	; 0x2e1c <DIO_voidSetPinValue+0xa6>
    2dc4:	2e 81       	ldd	r18, Y+6	; 0x06
    2dc6:	3f 81       	ldd	r19, Y+7	; 0x07
    2dc8:	23 30       	cpi	r18, 0x03	; 3
    2dca:	31 05       	cpc	r19, r1
    2dcc:	34 f4       	brge	.+12     	; 0x2dda <DIO_voidSetPinValue+0x64>
    2dce:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd0:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	69 f0       	breq	.+26     	; 0x2df2 <DIO_voidSetPinValue+0x7c>
    2dd8:	d3 c0       	rjmp	.+422    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
    2dda:	2e 81       	ldd	r18, Y+6	; 0x06
    2ddc:	3f 81       	ldd	r19, Y+7	; 0x07
    2dde:	23 30       	cpi	r18, 0x03	; 3
    2de0:	31 05       	cpc	r19, r1
    2de2:	89 f1       	breq	.+98     	; 0x2e46 <DIO_voidSetPinValue+0xd0>
    2de4:	8e 81       	ldd	r24, Y+6	; 0x06
    2de6:	9f 81       	ldd	r25, Y+7	; 0x07
    2de8:	84 30       	cpi	r24, 0x04	; 4
    2dea:	91 05       	cpc	r25, r1
    2dec:	09 f4       	brne	.+2      	; 0x2df0 <DIO_voidSetPinValue+0x7a>
    2dee:	40 c0       	rjmp	.+128    	; 0x2e70 <DIO_voidSetPinValue+0xfa>
    2df0:	c7 c0       	rjmp	.+398    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
    2df2:	ab e3       	ldi	r26, 0x3B	; 59
    2df4:	b0 e0       	ldi	r27, 0x00	; 0
    2df6:	eb e3       	ldi	r30, 0x3B	; 59
    2df8:	f0 e0       	ldi	r31, 0x00	; 0
    2dfa:	80 81       	ld	r24, Z
    2dfc:	48 2f       	mov	r20, r24
    2dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2e00:	28 2f       	mov	r18, r24
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	02 2e       	mov	r0, r18
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <DIO_voidSetPinValue+0x9a>
    2e0c:	88 0f       	add	r24, r24
    2e0e:	99 1f       	adc	r25, r25
    2e10:	0a 94       	dec	r0
    2e12:	e2 f7       	brpl	.-8      	; 0x2e0c <DIO_voidSetPinValue+0x96>
    2e14:	80 95       	com	r24
    2e16:	84 23       	and	r24, r20
    2e18:	8c 93       	st	X, r24
    2e1a:	b2 c0       	rjmp	.+356    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
    2e1c:	a8 e3       	ldi	r26, 0x38	; 56
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e8 e3       	ldi	r30, 0x38	; 56
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	48 2f       	mov	r20, r24
    2e28:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 2e       	mov	r0, r18
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <DIO_voidSetPinValue+0xc4>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	0a 94       	dec	r0
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <DIO_voidSetPinValue+0xc0>
    2e3e:	80 95       	com	r24
    2e40:	84 23       	and	r24, r20
    2e42:	8c 93       	st	X, r24
    2e44:	9d c0       	rjmp	.+314    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
    2e46:	a5 e3       	ldi	r26, 0x35	; 53
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e5 e3       	ldi	r30, 0x35	; 53
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	80 81       	ld	r24, Z
    2e50:	48 2f       	mov	r20, r24
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	02 2e       	mov	r0, r18
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <DIO_voidSetPinValue+0xee>
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	0a 94       	dec	r0
    2e66:	e2 f7       	brpl	.-8      	; 0x2e60 <DIO_voidSetPinValue+0xea>
    2e68:	80 95       	com	r24
    2e6a:	84 23       	and	r24, r20
    2e6c:	8c 93       	st	X, r24
    2e6e:	88 c0       	rjmp	.+272    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
    2e70:	a2 e3       	ldi	r26, 0x32	; 50
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	e2 e3       	ldi	r30, 0x32	; 50
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 81       	ld	r24, Z
    2e7a:	48 2f       	mov	r20, r24
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	02 2e       	mov	r0, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <DIO_voidSetPinValue+0x118>
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	0a 94       	dec	r0
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <DIO_voidSetPinValue+0x114>
    2e92:	80 95       	com	r24
    2e94:	84 23       	and	r24, r20
    2e96:	8c 93       	st	X, r24
    2e98:	73 c0       	rjmp	.+230    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	81 30       	cpi	r24, 0x01	; 1
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <DIO_voidSetPinValue+0x12c>
    2ea0:	6f c0       	rjmp	.+222    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	3d 83       	std	Y+5, r19	; 0x05
    2eaa:	2c 83       	std	Y+4, r18	; 0x04
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb0:	82 30       	cpi	r24, 0x02	; 2
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	51 f1       	breq	.+84     	; 0x2f0a <DIO_voidSetPinValue+0x194>
    2eb6:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eba:	23 30       	cpi	r18, 0x03	; 3
    2ebc:	31 05       	cpc	r19, r1
    2ebe:	34 f4       	brge	.+12     	; 0x2ecc <DIO_voidSetPinValue+0x156>
    2ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	61 f0       	breq	.+24     	; 0x2ee2 <DIO_voidSetPinValue+0x16c>
    2eca:	5a c0       	rjmp	.+180    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
    2ecc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ece:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed0:	23 30       	cpi	r18, 0x03	; 3
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	71 f1       	breq	.+92     	; 0x2f32 <DIO_voidSetPinValue+0x1bc>
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eda:	84 30       	cpi	r24, 0x04	; 4
    2edc:	91 05       	cpc	r25, r1
    2ede:	e9 f1       	breq	.+122    	; 0x2f5a <DIO_voidSetPinValue+0x1e4>
    2ee0:	4f c0       	rjmp	.+158    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    2ee2:	ab e3       	ldi	r26, 0x3B	; 59
    2ee4:	b0 e0       	ldi	r27, 0x00	; 0
    2ee6:	eb e3       	ldi	r30, 0x3B	; 59
    2ee8:	f0 e0       	ldi	r31, 0x00	; 0
    2eea:	80 81       	ld	r24, Z
    2eec:	48 2f       	mov	r20, r24
    2eee:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	02 2e       	mov	r0, r18
    2efa:	02 c0       	rjmp	.+4      	; 0x2f00 <DIO_voidSetPinValue+0x18a>
    2efc:	88 0f       	add	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	0a 94       	dec	r0
    2f02:	e2 f7       	brpl	.-8      	; 0x2efc <DIO_voidSetPinValue+0x186>
    2f04:	84 2b       	or	r24, r20
    2f06:	8c 93       	st	X, r24
    2f08:	3b c0       	rjmp	.+118    	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    2f0a:	a8 e3       	ldi	r26, 0x38	; 56
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e8 e3       	ldi	r30, 0x38	; 56
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	48 2f       	mov	r20, r24
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	02 2e       	mov	r0, r18
    2f22:	02 c0       	rjmp	.+4      	; 0x2f28 <DIO_voidSetPinValue+0x1b2>
    2f24:	88 0f       	add	r24, r24
    2f26:	99 1f       	adc	r25, r25
    2f28:	0a 94       	dec	r0
    2f2a:	e2 f7       	brpl	.-8      	; 0x2f24 <DIO_voidSetPinValue+0x1ae>
    2f2c:	84 2b       	or	r24, r20
    2f2e:	8c 93       	st	X, r24
    2f30:	27 c0       	rjmp	.+78     	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    2f32:	a5 e3       	ldi	r26, 0x35	; 53
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	e5 e3       	ldi	r30, 0x35	; 53
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	48 2f       	mov	r20, r24
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	02 2e       	mov	r0, r18
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <DIO_voidSetPinValue+0x1da>
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	0a 94       	dec	r0
    2f52:	e2 f7       	brpl	.-8      	; 0x2f4c <DIO_voidSetPinValue+0x1d6>
    2f54:	84 2b       	or	r24, r20
    2f56:	8c 93       	st	X, r24
    2f58:	13 c0       	rjmp	.+38     	; 0x2f80 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    2f5a:	a2 e3       	ldi	r26, 0x32	; 50
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e2 e3       	ldi	r30, 0x32	; 50
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	48 2f       	mov	r20, r24
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 2e       	mov	r0, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <DIO_voidSetPinValue+0x202>
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	0a 94       	dec	r0
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <DIO_voidSetPinValue+0x1fe>
    2f7c:	84 2b       	or	r24, r20
    2f7e:	8c 93       	st	X, r24
			}
		}
	}
}
    2f80:	27 96       	adiw	r28, 0x07	; 7
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <DIO_u8ReadPinValue>:
u8 DIO_u8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	00 d0       	rcall	.+0      	; 0x2f98 <DIO_u8ReadPinValue+0x6>
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <DIO_u8ReadPinValue+0x8>
    2f9a:	0f 92       	push	r0
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    2fa2:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	88 23       	and	r24, r24
    2fa8:	09 f4       	brne	.+2      	; 0x2fac <DIO_u8ReadPinValue+0x1a>
    2faa:	5e c1       	rjmp	.+700    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
    2fac:	89 81       	ldd	r24, Y+1	; 0x01
    2fae:	85 30       	cpi	r24, 0x05	; 5
    2fb0:	08 f0       	brcs	.+2      	; 0x2fb4 <DIO_u8ReadPinValue+0x22>
    2fb2:	5a c1       	rjmp	.+692    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
    2fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb6:	88 30       	cpi	r24, 0x08	; 8
    2fb8:	08 f0       	brcs	.+2      	; 0x2fbc <DIO_u8ReadPinValue+0x2a>
    2fba:	56 c1       	rjmp	.+684    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	3d 83       	std	Y+5, r19	; 0x05
    2fc4:	2c 83       	std	Y+4, r18	; 0x04
    2fc6:	4c 81       	ldd	r20, Y+4	; 0x04
    2fc8:	5d 81       	ldd	r21, Y+5	; 0x05
    2fca:	42 30       	cpi	r20, 0x02	; 2
    2fcc:	51 05       	cpc	r21, r1
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <DIO_u8ReadPinValue+0x40>
    2fd0:	65 c0       	rjmp	.+202    	; 0x309c <DIO_u8ReadPinValue+0x10a>
    2fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd6:	83 30       	cpi	r24, 0x03	; 3
    2fd8:	91 05       	cpc	r25, r1
    2fda:	34 f4       	brge	.+12     	; 0x2fe8 <DIO_u8ReadPinValue+0x56>
    2fdc:	2c 81       	ldd	r18, Y+4	; 0x04
    2fde:	3d 81       	ldd	r19, Y+5	; 0x05
    2fe0:	21 30       	cpi	r18, 0x01	; 1
    2fe2:	31 05       	cpc	r19, r1
    2fe4:	71 f0       	breq	.+28     	; 0x3002 <DIO_u8ReadPinValue+0x70>
    2fe6:	40 c1       	rjmp	.+640    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
    2fe8:	4c 81       	ldd	r20, Y+4	; 0x04
    2fea:	5d 81       	ldd	r21, Y+5	; 0x05
    2fec:	43 30       	cpi	r20, 0x03	; 3
    2fee:	51 05       	cpc	r21, r1
    2ff0:	09 f4       	brne	.+2      	; 0x2ff4 <DIO_u8ReadPinValue+0x62>
    2ff2:	a1 c0       	rjmp	.+322    	; 0x3136 <DIO_u8ReadPinValue+0x1a4>
    2ff4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ff8:	84 30       	cpi	r24, 0x04	; 4
    2ffa:	91 05       	cpc	r25, r1
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <DIO_u8ReadPinValue+0x6e>
    2ffe:	e8 c0       	rjmp	.+464    	; 0x31d0 <DIO_u8ReadPinValue+0x23e>
    3000:	33 c1       	rjmp	.+614    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
		{
		case DIO_GroupA:
			if(get_bit(DIO_DDRA,Pin_No)==Input)
    3002:	ea e3       	ldi	r30, 0x3A	; 58
    3004:	f0 e0       	ldi	r31, 0x00	; 0
    3006:	80 81       	ld	r24, Z
    3008:	28 2f       	mov	r18, r24
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	88 2f       	mov	r24, r24
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a9 01       	movw	r20, r18
    3014:	02 c0       	rjmp	.+4      	; 0x301a <DIO_u8ReadPinValue+0x88>
    3016:	55 95       	asr	r21
    3018:	47 95       	ror	r20
    301a:	8a 95       	dec	r24
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <DIO_u8ReadPinValue+0x84>
    301e:	ca 01       	movw	r24, r20
    3020:	81 70       	andi	r24, 0x01	; 1
    3022:	90 70       	andi	r25, 0x00	; 0
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	99 f4       	brne	.+38     	; 0x304e <DIO_u8ReadPinValue+0xbc>
			{
				return((DIO_PINA>>Pin_No)&1);
    3028:	e9 e3       	ldi	r30, 0x39	; 57
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	8a 81       	ldd	r24, Y+2	; 0x02
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a9 01       	movw	r20, r18
    303a:	02 c0       	rjmp	.+4      	; 0x3040 <DIO_u8ReadPinValue+0xae>
    303c:	55 95       	asr	r21
    303e:	47 95       	ror	r20
    3040:	8a 95       	dec	r24
    3042:	e2 f7       	brpl	.-8      	; 0x303c <DIO_u8ReadPinValue+0xaa>
    3044:	ca 01       	movw	r24, r20
    3046:	58 2f       	mov	r21, r24
    3048:	51 70       	andi	r21, 0x01	; 1
    304a:	5b 83       	std	Y+3, r21	; 0x03
    304c:	0f c1       	rjmp	.+542    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRA,Pin_No)==Output)
    304e:	ea e3       	ldi	r30, 0x3A	; 58
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	8a 81       	ldd	r24, Y+2	; 0x02
    305a:	88 2f       	mov	r24, r24
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	a9 01       	movw	r20, r18
    3060:	02 c0       	rjmp	.+4      	; 0x3066 <DIO_u8ReadPinValue+0xd4>
    3062:	55 95       	asr	r21
    3064:	47 95       	ror	r20
    3066:	8a 95       	dec	r24
    3068:	e2 f7       	brpl	.-8      	; 0x3062 <DIO_u8ReadPinValue+0xd0>
    306a:	ca 01       	movw	r24, r20
    306c:	81 70       	andi	r24, 0x01	; 1
    306e:	90 70       	andi	r25, 0x00	; 0
    3070:	88 23       	and	r24, r24
    3072:	09 f4       	brne	.+2      	; 0x3076 <DIO_u8ReadPinValue+0xe4>
    3074:	f9 c0       	rjmp	.+498    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTA>>Pin_No)&1);
    3076:	eb e3       	ldi	r30, 0x3B	; 59
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	80 81       	ld	r24, Z
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	8a 81       	ldd	r24, Y+2	; 0x02
    3082:	88 2f       	mov	r24, r24
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a9 01       	movw	r20, r18
    3088:	02 c0       	rjmp	.+4      	; 0x308e <DIO_u8ReadPinValue+0xfc>
    308a:	55 95       	asr	r21
    308c:	47 95       	ror	r20
    308e:	8a 95       	dec	r24
    3090:	e2 f7       	brpl	.-8      	; 0x308a <DIO_u8ReadPinValue+0xf8>
    3092:	ca 01       	movw	r24, r20
    3094:	58 2f       	mov	r21, r24
    3096:	51 70       	andi	r21, 0x01	; 1
    3098:	5b 83       	std	Y+3, r21	; 0x03
    309a:	e8 c0       	rjmp	.+464    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupB:
			if(get_bit(DIO_DDRB,Pin_No)==Input)
    309c:	e7 e3       	ldi	r30, 0x37	; 55
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	28 2f       	mov	r18, r24
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	88 2f       	mov	r24, r24
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a9 01       	movw	r20, r18
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <DIO_u8ReadPinValue+0x122>
    30b0:	55 95       	asr	r21
    30b2:	47 95       	ror	r20
    30b4:	8a 95       	dec	r24
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <DIO_u8ReadPinValue+0x11e>
    30b8:	ca 01       	movw	r24, r20
    30ba:	81 70       	andi	r24, 0x01	; 1
    30bc:	90 70       	andi	r25, 0x00	; 0
    30be:	00 97       	sbiw	r24, 0x00	; 0
    30c0:	99 f4       	brne	.+38     	; 0x30e8 <DIO_u8ReadPinValue+0x156>
			{
				return((DIO_PINB>>Pin_No)&1);
    30c2:	e6 e3       	ldi	r30, 0x36	; 54
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	88 2f       	mov	r24, r24
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	a9 01       	movw	r20, r18
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <DIO_u8ReadPinValue+0x148>
    30d6:	55 95       	asr	r21
    30d8:	47 95       	ror	r20
    30da:	8a 95       	dec	r24
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <DIO_u8ReadPinValue+0x144>
    30de:	ca 01       	movw	r24, r20
    30e0:	58 2f       	mov	r21, r24
    30e2:	51 70       	andi	r21, 0x01	; 1
    30e4:	5b 83       	std	Y+3, r21	; 0x03
    30e6:	c2 c0       	rjmp	.+388    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRB,Pin_No)==Output)
    30e8:	e7 e3       	ldi	r30, 0x37	; 55
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a9 01       	movw	r20, r18
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <DIO_u8ReadPinValue+0x16e>
    30fc:	55 95       	asr	r21
    30fe:	47 95       	ror	r20
    3100:	8a 95       	dec	r24
    3102:	e2 f7       	brpl	.-8      	; 0x30fc <DIO_u8ReadPinValue+0x16a>
    3104:	ca 01       	movw	r24, r20
    3106:	81 70       	andi	r24, 0x01	; 1
    3108:	90 70       	andi	r25, 0x00	; 0
    310a:	88 23       	and	r24, r24
    310c:	09 f4       	brne	.+2      	; 0x3110 <DIO_u8ReadPinValue+0x17e>
    310e:	ac c0       	rjmp	.+344    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTB>>Pin_No)&1);
    3110:	e8 e3       	ldi	r30, 0x38	; 56
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a9 01       	movw	r20, r18
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <DIO_u8ReadPinValue+0x196>
    3124:	55 95       	asr	r21
    3126:	47 95       	ror	r20
    3128:	8a 95       	dec	r24
    312a:	e2 f7       	brpl	.-8      	; 0x3124 <DIO_u8ReadPinValue+0x192>
    312c:	ca 01       	movw	r24, r20
    312e:	58 2f       	mov	r21, r24
    3130:	51 70       	andi	r21, 0x01	; 1
    3132:	5b 83       	std	Y+3, r21	; 0x03
    3134:	9b c0       	rjmp	.+310    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupC:
			if(get_bit(DIO_DDRC,Pin_No)==Input)
    3136:	e4 e3       	ldi	r30, 0x34	; 52
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	28 2f       	mov	r18, r24
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	8a 81       	ldd	r24, Y+2	; 0x02
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	a9 01       	movw	r20, r18
    3148:	02 c0       	rjmp	.+4      	; 0x314e <DIO_u8ReadPinValue+0x1bc>
    314a:	55 95       	asr	r21
    314c:	47 95       	ror	r20
    314e:	8a 95       	dec	r24
    3150:	e2 f7       	brpl	.-8      	; 0x314a <DIO_u8ReadPinValue+0x1b8>
    3152:	ca 01       	movw	r24, r20
    3154:	81 70       	andi	r24, 0x01	; 1
    3156:	90 70       	andi	r25, 0x00	; 0
    3158:	00 97       	sbiw	r24, 0x00	; 0
    315a:	99 f4       	brne	.+38     	; 0x3182 <DIO_u8ReadPinValue+0x1f0>
			{
				return((DIO_PINC>>Pin_No)&1);
    315c:	e3 e3       	ldi	r30, 0x33	; 51
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a9 01       	movw	r20, r18
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <DIO_u8ReadPinValue+0x1e2>
    3170:	55 95       	asr	r21
    3172:	47 95       	ror	r20
    3174:	8a 95       	dec	r24
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <DIO_u8ReadPinValue+0x1de>
    3178:	ca 01       	movw	r24, r20
    317a:	58 2f       	mov	r21, r24
    317c:	51 70       	andi	r21, 0x01	; 1
    317e:	5b 83       	std	Y+3, r21	; 0x03
    3180:	75 c0       	rjmp	.+234    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRC,Pin_No)==Output)
    3182:	e4 e3       	ldi	r30, 0x34	; 52
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	28 2f       	mov	r18, r24
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	8a 81       	ldd	r24, Y+2	; 0x02
    318e:	88 2f       	mov	r24, r24
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	a9 01       	movw	r20, r18
    3194:	02 c0       	rjmp	.+4      	; 0x319a <DIO_u8ReadPinValue+0x208>
    3196:	55 95       	asr	r21
    3198:	47 95       	ror	r20
    319a:	8a 95       	dec	r24
    319c:	e2 f7       	brpl	.-8      	; 0x3196 <DIO_u8ReadPinValue+0x204>
    319e:	ca 01       	movw	r24, r20
    31a0:	81 70       	andi	r24, 0x01	; 1
    31a2:	90 70       	andi	r25, 0x00	; 0
    31a4:	88 23       	and	r24, r24
    31a6:	09 f4       	brne	.+2      	; 0x31aa <DIO_u8ReadPinValue+0x218>
    31a8:	5f c0       	rjmp	.+190    	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTC>>Pin_No)&1);
    31aa:	e5 e3       	ldi	r30, 0x35	; 53
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	88 2f       	mov	r24, r24
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	a9 01       	movw	r20, r18
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <DIO_u8ReadPinValue+0x230>
    31be:	55 95       	asr	r21
    31c0:	47 95       	ror	r20
    31c2:	8a 95       	dec	r24
    31c4:	e2 f7       	brpl	.-8      	; 0x31be <DIO_u8ReadPinValue+0x22c>
    31c6:	ca 01       	movw	r24, r20
    31c8:	58 2f       	mov	r21, r24
    31ca:	51 70       	andi	r21, 0x01	; 1
    31cc:	5b 83       	std	Y+3, r21	; 0x03
    31ce:	4e c0       	rjmp	.+156    	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupD:
			if(get_bit(DIO_DDRD,Pin_No)==Input)
    31d0:	e1 e3       	ldi	r30, 0x31	; 49
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a9 01       	movw	r20, r18
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <DIO_u8ReadPinValue+0x256>
    31e4:	55 95       	asr	r21
    31e6:	47 95       	ror	r20
    31e8:	8a 95       	dec	r24
    31ea:	e2 f7       	brpl	.-8      	; 0x31e4 <DIO_u8ReadPinValue+0x252>
    31ec:	ca 01       	movw	r24, r20
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	90 70       	andi	r25, 0x00	; 0
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	99 f4       	brne	.+38     	; 0x321c <DIO_u8ReadPinValue+0x28a>
			{
				return((DIO_PIND>>Pin_No)&1);
    31f6:	e0 e3       	ldi	r30, 0x30	; 48
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	80 81       	ld	r24, Z
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	88 2f       	mov	r24, r24
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a9 01       	movw	r20, r18
    3208:	02 c0       	rjmp	.+4      	; 0x320e <DIO_u8ReadPinValue+0x27c>
    320a:	55 95       	asr	r21
    320c:	47 95       	ror	r20
    320e:	8a 95       	dec	r24
    3210:	e2 f7       	brpl	.-8      	; 0x320a <DIO_u8ReadPinValue+0x278>
    3212:	ca 01       	movw	r24, r20
    3214:	58 2f       	mov	r21, r24
    3216:	51 70       	andi	r21, 0x01	; 1
    3218:	5b 83       	std	Y+3, r21	; 0x03
    321a:	28 c0       	rjmp	.+80     	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRD,Pin_No)==Output)
    321c:	e1 e3       	ldi	r30, 0x31	; 49
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	8a 81       	ldd	r24, Y+2	; 0x02
    3228:	88 2f       	mov	r24, r24
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a9 01       	movw	r20, r18
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <DIO_u8ReadPinValue+0x2a2>
    3230:	55 95       	asr	r21
    3232:	47 95       	ror	r20
    3234:	8a 95       	dec	r24
    3236:	e2 f7       	brpl	.-8      	; 0x3230 <DIO_u8ReadPinValue+0x29e>
    3238:	ca 01       	movw	r24, r20
    323a:	81 70       	andi	r24, 0x01	; 1
    323c:	90 70       	andi	r25, 0x00	; 0
    323e:	88 23       	and	r24, r24
    3240:	99 f0       	breq	.+38     	; 0x3268 <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTD>>Pin_No)&1);
    3242:	e2 e3       	ldi	r30, 0x32	; 50
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	28 2f       	mov	r18, r24
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	a9 01       	movw	r20, r18
    3254:	02 c0       	rjmp	.+4      	; 0x325a <DIO_u8ReadPinValue+0x2c8>
    3256:	55 95       	asr	r21
    3258:	47 95       	ror	r20
    325a:	8a 95       	dec	r24
    325c:	e2 f7       	brpl	.-8      	; 0x3256 <DIO_u8ReadPinValue+0x2c4>
    325e:	ca 01       	movw	r24, r20
    3260:	58 2f       	mov	r21, r24
    3262:	51 70       	andi	r21, 0x01	; 1
    3264:	5b 83       	std	Y+3, r21	; 0x03
    3266:	02 c0       	rjmp	.+4      	; 0x326c <DIO_u8ReadPinValue+0x2da>
			}
			break;
		}
	}
	return -1;
    3268:	8f ef       	ldi	r24, 0xFF	; 255
    326a:	8b 83       	std	Y+3, r24	; 0x03
    326c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    326e:	0f 90       	pop	r0
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	0f 90       	pop	r0
    3278:	cf 91       	pop	r28
    327a:	df 91       	pop	r29
    327c:	08 95       	ret

0000327e <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	00 d0       	rcall	.+0      	; 0x3284 <DIO_voidSetPortDir+0x6>
    3284:	00 d0       	rcall	.+0      	; 0x3286 <DIO_voidSetPortDir+0x8>
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	89 83       	std	Y+1, r24	; 0x01
    328c:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	88 23       	and	r24, r24
    3292:	b1 f1       	breq	.+108    	; 0x3300 <DIO_voidSetPortDir+0x82>
    3294:	89 81       	ldd	r24, Y+1	; 0x01
    3296:	85 30       	cpi	r24, 0x05	; 5
    3298:	98 f5       	brcc	.+102    	; 0x3300 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	28 2f       	mov	r18, r24
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	3c 83       	std	Y+4, r19	; 0x04
    32a2:	2b 83       	std	Y+3, r18	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	82 30       	cpi	r24, 0x02	; 2
    32aa:	91 05       	cpc	r25, r1
    32ac:	d9 f0       	breq	.+54     	; 0x32e4 <DIO_voidSetPortDir+0x66>
    32ae:	2b 81       	ldd	r18, Y+3	; 0x03
    32b0:	3c 81       	ldd	r19, Y+4	; 0x04
    32b2:	23 30       	cpi	r18, 0x03	; 3
    32b4:	31 05       	cpc	r19, r1
    32b6:	34 f4       	brge	.+12     	; 0x32c4 <DIO_voidSetPortDir+0x46>
    32b8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ba:	9c 81       	ldd	r25, Y+4	; 0x04
    32bc:	81 30       	cpi	r24, 0x01	; 1
    32be:	91 05       	cpc	r25, r1
    32c0:	61 f0       	breq	.+24     	; 0x32da <DIO_voidSetPortDir+0x5c>
    32c2:	1e c0       	rjmp	.+60     	; 0x3300 <DIO_voidSetPortDir+0x82>
    32c4:	2b 81       	ldd	r18, Y+3	; 0x03
    32c6:	3c 81       	ldd	r19, Y+4	; 0x04
    32c8:	23 30       	cpi	r18, 0x03	; 3
    32ca:	31 05       	cpc	r19, r1
    32cc:	81 f0       	breq	.+32     	; 0x32ee <DIO_voidSetPortDir+0x70>
    32ce:	8b 81       	ldd	r24, Y+3	; 0x03
    32d0:	9c 81       	ldd	r25, Y+4	; 0x04
    32d2:	84 30       	cpi	r24, 0x04	; 4
    32d4:	91 05       	cpc	r25, r1
    32d6:	81 f0       	breq	.+32     	; 0x32f8 <DIO_voidSetPortDir+0x7a>
    32d8:	13 c0       	rjmp	.+38     	; 0x3300 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    32da:	ea e3       	ldi	r30, 0x3A	; 58
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	80 83       	st	Z, r24
    32e2:	0e c0       	rjmp	.+28     	; 0x3300 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    32e4:	e7 e3       	ldi	r30, 0x37	; 55
    32e6:	f0 e0       	ldi	r31, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	80 83       	st	Z, r24
    32ec:	09 c0       	rjmp	.+18     	; 0x3300 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    32ee:	e4 e3       	ldi	r30, 0x34	; 52
    32f0:	f0 e0       	ldi	r31, 0x00	; 0
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	80 83       	st	Z, r24
    32f6:	04 c0       	rjmp	.+8      	; 0x3300 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    32f8:	e1 e3       	ldi	r30, 0x31	; 49
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	80 83       	st	Z, r24
		}
	}

}
    3300:	0f 90       	pop	r0
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	08 95       	ret

0000330e <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    330e:	df 93       	push	r29
    3310:	cf 93       	push	r28
    3312:	00 d0       	rcall	.+0      	; 0x3314 <DIO_voidSetPortValue+0x6>
    3314:	00 d0       	rcall	.+0      	; 0x3316 <DIO_voidSetPortValue+0x8>
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	89 83       	std	Y+1, r24	; 0x01
    331c:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	88 23       	and	r24, r24
    3322:	b1 f1       	breq	.+108    	; 0x3390 <DIO_voidSetPortValue+0x82>
    3324:	89 81       	ldd	r24, Y+1	; 0x01
    3326:	85 30       	cpi	r24, 0x05	; 5
    3328:	98 f5       	brcc	.+102    	; 0x3390 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	3c 83       	std	Y+4, r19	; 0x04
    3332:	2b 83       	std	Y+3, r18	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	82 30       	cpi	r24, 0x02	; 2
    333a:	91 05       	cpc	r25, r1
    333c:	d9 f0       	breq	.+54     	; 0x3374 <DIO_voidSetPortValue+0x66>
    333e:	2b 81       	ldd	r18, Y+3	; 0x03
    3340:	3c 81       	ldd	r19, Y+4	; 0x04
    3342:	23 30       	cpi	r18, 0x03	; 3
    3344:	31 05       	cpc	r19, r1
    3346:	34 f4       	brge	.+12     	; 0x3354 <DIO_voidSetPortValue+0x46>
    3348:	8b 81       	ldd	r24, Y+3	; 0x03
    334a:	9c 81       	ldd	r25, Y+4	; 0x04
    334c:	81 30       	cpi	r24, 0x01	; 1
    334e:	91 05       	cpc	r25, r1
    3350:	61 f0       	breq	.+24     	; 0x336a <DIO_voidSetPortValue+0x5c>
    3352:	1e c0       	rjmp	.+60     	; 0x3390 <DIO_voidSetPortValue+0x82>
    3354:	2b 81       	ldd	r18, Y+3	; 0x03
    3356:	3c 81       	ldd	r19, Y+4	; 0x04
    3358:	23 30       	cpi	r18, 0x03	; 3
    335a:	31 05       	cpc	r19, r1
    335c:	81 f0       	breq	.+32     	; 0x337e <DIO_voidSetPortValue+0x70>
    335e:	8b 81       	ldd	r24, Y+3	; 0x03
    3360:	9c 81       	ldd	r25, Y+4	; 0x04
    3362:	84 30       	cpi	r24, 0x04	; 4
    3364:	91 05       	cpc	r25, r1
    3366:	81 f0       	breq	.+32     	; 0x3388 <DIO_voidSetPortValue+0x7a>
    3368:	13 c0       	rjmp	.+38     	; 0x3390 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    336a:	eb e3       	ldi	r30, 0x3B	; 59
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	8a 81       	ldd	r24, Y+2	; 0x02
    3370:	80 83       	st	Z, r24
    3372:	0e c0       	rjmp	.+28     	; 0x3390 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    3374:	e8 e3       	ldi	r30, 0x38	; 56
    3376:	f0 e0       	ldi	r31, 0x00	; 0
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	80 83       	st	Z, r24
    337c:	09 c0       	rjmp	.+18     	; 0x3390 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    337e:	e5 e3       	ldi	r30, 0x35	; 53
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	80 83       	st	Z, r24
    3386:	04 c0       	rjmp	.+8      	; 0x3390 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    3388:	e2 e3       	ldi	r30, 0x32	; 50
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	80 83       	st	Z, r24
		}
	}

}
    3390:	0f 90       	pop	r0
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <DIO_U8ReadPortValue+0x6>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <DIO_U8ReadPortValue+0x8>
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    33ac:	89 81       	ldd	r24, Y+1	; 0x01
    33ae:	88 23       	and	r24, r24
    33b0:	b9 f1       	breq	.+110    	; 0x3420 <DIO_U8ReadPortValue+0x82>
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	85 30       	cpi	r24, 0x05	; 5
    33b6:	a0 f5       	brcc	.+104    	; 0x3420 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	28 2f       	mov	r18, r24
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	3c 83       	std	Y+4, r19	; 0x04
    33c0:	2b 83       	std	Y+3, r18	; 0x03
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	9c 81       	ldd	r25, Y+4	; 0x04
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	91 05       	cpc	r25, r1
    33ca:	d9 f0       	breq	.+54     	; 0x3402 <DIO_U8ReadPortValue+0x64>
    33cc:	2b 81       	ldd	r18, Y+3	; 0x03
    33ce:	3c 81       	ldd	r19, Y+4	; 0x04
    33d0:	23 30       	cpi	r18, 0x03	; 3
    33d2:	31 05       	cpc	r19, r1
    33d4:	34 f4       	brge	.+12     	; 0x33e2 <DIO_U8ReadPortValue+0x44>
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	9c 81       	ldd	r25, Y+4	; 0x04
    33da:	81 30       	cpi	r24, 0x01	; 1
    33dc:	91 05       	cpc	r25, r1
    33de:	61 f0       	breq	.+24     	; 0x33f8 <DIO_U8ReadPortValue+0x5a>
    33e0:	1f c0       	rjmp	.+62     	; 0x3420 <DIO_U8ReadPortValue+0x82>
    33e2:	2b 81       	ldd	r18, Y+3	; 0x03
    33e4:	3c 81       	ldd	r19, Y+4	; 0x04
    33e6:	23 30       	cpi	r18, 0x03	; 3
    33e8:	31 05       	cpc	r19, r1
    33ea:	81 f0       	breq	.+32     	; 0x340c <DIO_U8ReadPortValue+0x6e>
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	9c 81       	ldd	r25, Y+4	; 0x04
    33f0:	84 30       	cpi	r24, 0x04	; 4
    33f2:	91 05       	cpc	r25, r1
    33f4:	81 f0       	breq	.+32     	; 0x3416 <DIO_U8ReadPortValue+0x78>
    33f6:	14 c0       	rjmp	.+40     	; 0x3420 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    33f8:	e9 e3       	ldi	r30, 0x39	; 57
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	90 81       	ld	r25, Z
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	11 c0       	rjmp	.+34     	; 0x3424 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    3402:	e6 e3       	ldi	r30, 0x36	; 54
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	20 81       	ld	r18, Z
    3408:	2a 83       	std	Y+2, r18	; 0x02
    340a:	0c c0       	rjmp	.+24     	; 0x3424 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    340c:	e3 e3       	ldi	r30, 0x33	; 51
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	30 81       	ld	r19, Z
    3412:	3a 83       	std	Y+2, r19	; 0x02
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    3416:	e0 e3       	ldi	r30, 0x30	; 48
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	80 81       	ld	r24, Z
    341c:	8a 83       	std	Y+2, r24	; 0x02
    341e:	02 c0       	rjmp	.+4      	; 0x3424 <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    3420:	9f ef       	ldi	r25, 0xFF	; 255
    3422:	9a 83       	std	Y+2, r25	; 0x02
    3424:	8a 81       	ldd	r24, Y+2	; 0x02

}
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <DIO_voidControlPullupPin>:

void DIO_voidControlPullupPin(u8 Group_Type,u8 Pin_No , u8 PullUp_Status)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	00 d0       	rcall	.+0      	; 0x343a <DIO_voidControlPullupPin+0x6>
    343a:	0f 92       	push	r0
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	6a 83       	std	Y+2, r22	; 0x02
    3444:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPinDir(Group_Type,Pin_No,Input);
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	6a 81       	ldd	r22, Y+2	; 0x02
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinValue(Group_Type,Pin_No,PullUp_Status);
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	6a 81       	ldd	r22, Y+2	; 0x02
    3454:	4b 81       	ldd	r20, Y+3	; 0x03
    3456:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <ADC_voidInit>:
 */
#include "ADC_Interface.h"
static u16 InterruptData ;  //static??

void ADC_voidInit()
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	00 d0       	rcall	.+0      	; 0x346c <ADC_voidInit+0x6>
    346c:	0f 92       	push	r0
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
	ADCInformation ADCInformationSet ;
	ADCInformationSet.AutoTriggerState=ADC_AutoTriggerState;
    3472:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationSet.DivisionFactor=ADC_DivisionFactor;
    3474:	83 e0       	ldi	r24, 0x03	; 3
    3476:	8b 83       	std	Y+3, r24	; 0x03
	ADCInformationSet.TriggerSource=ADC_TriggerSource;
    3478:	1a 82       	std	Y+2, r1	; 0x02
#if ADC_Mode==Polling
	ADC_voidInitPolling(ADCInformationSet);
    347a:	69 81       	ldd	r22, Y+1	; 0x01
    347c:	7a 81       	ldd	r23, Y+2	; 0x02
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	0e 94 48 1a 	call	0x3490	; 0x3490 <ADC_voidInitPolling>
#elif
	ADC_voidInitInterrupt(ADCInformationSet);
#endif
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	cf 91       	pop	r28
    348c:	df 91       	pop	r29
    348e:	08 95       	ret

00003490 <ADC_voidInitPolling>:
void ADC_voidInitPolling(ADCInformation ADCInfo)
{
    3490:	df 93       	push	r29
    3492:	cf 93       	push	r28
    3494:	00 d0       	rcall	.+0      	; 0x3496 <ADC_voidInitPolling+0x6>
    3496:	0f 92       	push	r0
    3498:	cd b7       	in	r28, 0x3d	; 61
    349a:	de b7       	in	r29, 0x3e	; 62
    349c:	69 83       	std	Y+1, r22	; 0x01
    349e:	7a 83       	std	Y+2, r23	; 0x02
    34a0:	8b 83       	std	Y+3, r24	; 0x03
	/*Voltage Reference Selections*/
#if ReferenceSelect==ADCOff
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    34a2:	a7 e2       	ldi	r26, 0x27	; 39
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e7 e2       	ldi	r30, 0x27	; 39
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	8f 77       	andi	r24, 0x7F	; 127
    34ae:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    34b0:	a7 e2       	ldi	r26, 0x27	; 39
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e7 e2       	ldi	r30, 0x27	; 39
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 64       	ori	r24, 0x40	; 64
    34bc:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    34be:	a7 e2       	ldi	r26, 0x27	; 39
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e7 e2       	ldi	r30, 0x27	; 39
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	8f 7d       	andi	r24, 0xDF	; 223
    34ca:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    34cc:	a6 e2       	ldi	r26, 0x26	; 38
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e6 e2       	ldi	r30, 0x26	; 38
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	80 68       	ori	r24, 0x80	; 128
    34d8:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    34da:	89 81       	ldd	r24, Y+1	; 0x01
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	d1 f4       	brne	.+52     	; 0x3514 <ADC_voidInitPolling+0x84>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    34e0:	a6 e2       	ldi	r26, 0x26	; 38
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e6 e2       	ldi	r30, 0x26	; 38
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	80 62       	ori	r24, 0x20	; 32
    34ec:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	80 7e       	andi	r24, 0xE0	; 224
    34f2:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    34f4:	a0 e5       	ldi	r26, 0x50	; 80
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e0 e5       	ldi	r30, 0x50	; 80
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8f 71       	andi	r24, 0x1F	; 31
    3500:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    3502:	a0 e5       	ldi	r26, 0x50	; 80
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e0 e5       	ldi	r30, 0x50	; 80
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	90 81       	ld	r25, Z
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	89 2b       	or	r24, r25
    3510:	8c 93       	st	X, r24
    3512:	0a c0       	rjmp	.+20     	; 0x3528 <ADC_voidInitPolling+0x98>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	88 23       	and	r24, r24
    3518:	39 f4       	brne	.+14     	; 0x3528 <ADC_voidInitPolling+0x98>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    351a:	a6 e2       	ldi	r26, 0x26	; 38
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	e6 e2       	ldi	r30, 0x26	; 38
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	8f 7d       	andi	r24, 0xDF	; 223
    3526:	8c 93       	st	X, r24
	}


	/*disable interrupt*/
	clear_bit(ADC_SRA,ADCSRA_ADIE);
    3528:	a6 e2       	ldi	r26, 0x26	; 38
    352a:	b0 e0       	ldi	r27, 0x00	; 0
    352c:	e6 e2       	ldi	r30, 0x26	; 38
    352e:	f0 e0       	ldi	r31, 0x00	; 0
    3530:	80 81       	ld	r24, Z
    3532:	87 7f       	andi	r24, 0xF7	; 247
    3534:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    3536:	8b 81       	ldd	r24, Y+3	; 0x03
    3538:	87 70       	andi	r24, 0x07	; 7
    353a:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    353c:	a6 e2       	ldi	r26, 0x26	; 38
    353e:	b0 e0       	ldi	r27, 0x00	; 0
    3540:	e6 e2       	ldi	r30, 0x26	; 38
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	80 81       	ld	r24, Z
    3546:	88 7f       	andi	r24, 0xF8	; 248
    3548:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    354a:	a6 e2       	ldi	r26, 0x26	; 38
    354c:	b0 e0       	ldi	r27, 0x00	; 0
    354e:	e6 e2       	ldi	r30, 0x26	; 38
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	90 81       	ld	r25, Z
    3554:	8b 81       	ldd	r24, Y+3	; 0x03
    3556:	89 2b       	or	r24, r25
    3558:	8c 93       	st	X, r24

}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <ADC_voidReadResultPolling>:


void ADC_voidReadResultPolling(u8 channel, u16 *Result)
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <ADC_voidReadResultPolling+0x6>
    356c:	0f 92       	push	r0
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	89 83       	std	Y+1, r24	; 0x01
    3574:	7b 83       	std	Y+3, r23	; 0x03
    3576:	6a 83       	std	Y+2, r22	; 0x02
	channel&=0x1F;
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	8f 71       	andi	r24, 0x1F	; 31
    357c:	89 83       	std	Y+1, r24	; 0x01
	ADC_MUX&=0xE0;
    357e:	a7 e2       	ldi	r26, 0x27	; 39
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e7 e2       	ldi	r30, 0x27	; 39
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	80 7e       	andi	r24, 0xE0	; 224
    358a:	8c 93       	st	X, r24
	ADC_MUX|=channel; //choose the channel
    358c:	a7 e2       	ldi	r26, 0x27	; 39
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	e7 e2       	ldi	r30, 0x27	; 39
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	90 81       	ld	r25, Z
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	89 2b       	or	r24, r25
    359a:	8c 93       	st	X, r24
	set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    359c:	a6 e2       	ldi	r26, 0x26	; 38
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	e6 e2       	ldi	r30, 0x26	; 38
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	80 64       	ori	r24, 0x40	; 64
    35a8:	8c 93       	st	X, r24
	while(get_bit(ADC_SRA,ADCSRA_ADIF)!=ON);
    35aa:	e6 e2       	ldi	r30, 0x26	; 38
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 81       	ld	r24, Z
    35b0:	82 95       	swap	r24
    35b2:	8f 70       	andi	r24, 0x0F	; 15
    35b4:	88 2f       	mov	r24, r24
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	81 70       	andi	r24, 0x01	; 1
    35ba:	90 70       	andi	r25, 0x00	; 0
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	a9 f3       	breq	.-22     	; 0x35aa <ADC_voidReadResultPolling+0x44>
	*Result=ADC_DATA;
    35c0:	e4 e2       	ldi	r30, 0x24	; 36
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	ea 81       	ldd	r30, Y+2	; 0x02
    35ca:	fb 81       	ldd	r31, Y+3	; 0x03
    35cc:	91 83       	std	Z+1, r25	; 0x01
    35ce:	80 83       	st	Z, r24
	set_bit(ADC_SRA,ADCSRA_ADIF);
    35d0:	a6 e2       	ldi	r26, 0x26	; 38
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	e6 e2       	ldi	r30, 0x26	; 38
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	80 61       	ori	r24, 0x10	; 16
    35dc:	8c 93       	st	X, r24
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <ADC_voidInitInterrupt>:


void ADC_voidInitInterrupt(ADCInformation ADCInfo)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <ADC_voidInitInterrupt+0x6>
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	69 83       	std	Y+1, r22	; 0x01
    35f8:	7a 83       	std	Y+2, r23	; 0x02
    35fa:	8b 83       	std	Y+3, r24	; 0x03
	ADC_MUX=0xFF; //initially to disable the channels until needed
    35fc:	e7 e2       	ldi	r30, 0x27	; 39
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	8f ef       	ldi	r24, 0xFF	; 255
    3602:	80 83       	st	Z, r24
	/*Voltage Reference Selections*/
#if ReferenceSelect==Off
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    3604:	a7 e2       	ldi	r26, 0x27	; 39
    3606:	b0 e0       	ldi	r27, 0x00	; 0
    3608:	e7 e2       	ldi	r30, 0x27	; 39
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	8f 77       	andi	r24, 0x7F	; 127
    3610:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    3612:	a7 e2       	ldi	r26, 0x27	; 39
    3614:	b0 e0       	ldi	r27, 0x00	; 0
    3616:	e7 e2       	ldi	r30, 0x27	; 39
    3618:	f0 e0       	ldi	r31, 0x00	; 0
    361a:	80 81       	ld	r24, Z
    361c:	80 64       	ori	r24, 0x40	; 64
    361e:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    3620:	a7 e2       	ldi	r26, 0x27	; 39
    3622:	b0 e0       	ldi	r27, 0x00	; 0
    3624:	e7 e2       	ldi	r30, 0x27	; 39
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	8f 7d       	andi	r24, 0xDF	; 223
    362c:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    362e:	a6 e2       	ldi	r26, 0x26	; 38
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	e6 e2       	ldi	r30, 0x26	; 38
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	80 68       	ori	r24, 0x80	; 128
    363a:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    363c:	89 81       	ldd	r24, Y+1	; 0x01
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	d1 f4       	brne	.+52     	; 0x3676 <ADC_voidInitInterrupt+0x8c>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    3642:	a6 e2       	ldi	r26, 0x26	; 38
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	e6 e2       	ldi	r30, 0x26	; 38
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	80 62       	ori	r24, 0x20	; 32
    364e:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    3650:	8a 81       	ldd	r24, Y+2	; 0x02
    3652:	80 7e       	andi	r24, 0xE0	; 224
    3654:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    3656:	a0 e5       	ldi	r26, 0x50	; 80
    3658:	b0 e0       	ldi	r27, 0x00	; 0
    365a:	e0 e5       	ldi	r30, 0x50	; 80
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	80 81       	ld	r24, Z
    3660:	8f 71       	andi	r24, 0x1F	; 31
    3662:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    3664:	a0 e5       	ldi	r26, 0x50	; 80
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	e0 e5       	ldi	r30, 0x50	; 80
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	90 81       	ld	r25, Z
    366e:	8a 81       	ldd	r24, Y+2	; 0x02
    3670:	89 2b       	or	r24, r25
    3672:	8c 93       	st	X, r24
    3674:	0a c0       	rjmp	.+20     	; 0x368a <ADC_voidInitInterrupt+0xa0>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	88 23       	and	r24, r24
    367a:	39 f4       	brne	.+14     	; 0x368a <ADC_voidInitInterrupt+0xa0>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    367c:	a6 e2       	ldi	r26, 0x26	; 38
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	e6 e2       	ldi	r30, 0x26	; 38
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	8f 7d       	andi	r24, 0xDF	; 223
    3688:	8c 93       	st	X, r24
	}


	/*enable interrupt*/
	set_bit(ADC_SRA,ADCSRA_ADIE);
    368a:	a6 e2       	ldi	r26, 0x26	; 38
    368c:	b0 e0       	ldi	r27, 0x00	; 0
    368e:	e6 e2       	ldi	r30, 0x26	; 38
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	88 60       	ori	r24, 0x08	; 8
    3696:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    3698:	8b 81       	ldd	r24, Y+3	; 0x03
    369a:	87 70       	andi	r24, 0x07	; 7
    369c:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    369e:	a6 e2       	ldi	r26, 0x26	; 38
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	e6 e2       	ldi	r30, 0x26	; 38
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	88 7f       	andi	r24, 0xF8	; 248
    36aa:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    36ac:	a6 e2       	ldi	r26, 0x26	; 38
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	e6 e2       	ldi	r30, 0x26	; 38
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	90 81       	ld	r25, Z
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	89 2b       	or	r24, r25
    36ba:	8c 93       	st	X, r24
}
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <ADC_voidReadResultInterrupt>:


void ADC_voidReadResultInterrupt(u8 channel)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	0f 92       	push	r0
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	89 83       	std	Y+1, r24	; 0x01
	channel&=0x1F;
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	8f 71       	andi	r24, 0x1F	; 31
    36d8:	89 83       	std	Y+1, r24	; 0x01
		ADC_MUX&=0xE0;
    36da:	a7 e2       	ldi	r26, 0x27	; 39
    36dc:	b0 e0       	ldi	r27, 0x00	; 0
    36de:	e7 e2       	ldi	r30, 0x27	; 39
    36e0:	f0 e0       	ldi	r31, 0x00	; 0
    36e2:	80 81       	ld	r24, Z
    36e4:	80 7e       	andi	r24, 0xE0	; 224
    36e6:	8c 93       	st	X, r24
		ADC_MUX|=channel; //choose the channel
    36e8:	a7 e2       	ldi	r26, 0x27	; 39
    36ea:	b0 e0       	ldi	r27, 0x00	; 0
    36ec:	e7 e2       	ldi	r30, 0x27	; 39
    36ee:	f0 e0       	ldi	r31, 0x00	; 0
    36f0:	90 81       	ld	r25, Z
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	89 2b       	or	r24, r25
    36f6:	8c 93       	st	X, r24
		set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    36f8:	a6 e2       	ldi	r26, 0x26	; 38
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	e6 e2       	ldi	r30, 0x26	; 38
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	80 81       	ld	r24, Z
    3702:	80 64       	ori	r24, 0x40	; 64
    3704:	8c 93       	st	X, r24
}
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <__vector_16>:

void __vector_16()
{
    370e:	1f 92       	push	r1
    3710:	0f 92       	push	r0
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	0f 92       	push	r0
    3716:	11 24       	eor	r1, r1
    3718:	8f 93       	push	r24
    371a:	9f 93       	push	r25
    371c:	ef 93       	push	r30
    371e:	ff 93       	push	r31
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
	InterruptData=ADC_DATA;
    3728:	e4 e2       	ldi	r30, 0x24	; 36
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	80 81       	ld	r24, Z
    372e:	91 81       	ldd	r25, Z+1	; 0x01
    3730:	90 93 a3 01 	sts	0x01A3, r25
    3734:	80 93 a2 01 	sts	0x01A2, r24
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	ff 91       	pop	r31
    373e:	ef 91       	pop	r30
    3740:	9f 91       	pop	r25
    3742:	8f 91       	pop	r24
    3744:	0f 90       	pop	r0
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	0f 90       	pop	r0
    374a:	1f 90       	pop	r1
    374c:	18 95       	reti

0000374e <WaterSensor_voidInit>:
 *      Author: salma
 */

#include "WaterSensor_Interface.h"
void WaterSensor_voidInit()
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	cd b7       	in	r28, 0x3d	; 61
    3754:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(WaterSensorGroup,WaterSensorPin,Input);
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	67 e0       	ldi	r22, 0x07	; 7
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <WaterSensor_voidRead>:
void WaterSensor_voidRead(u16 *WaterRead)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	00 d0       	rcall	.+0      	; 0x376c <WaterSensor_voidRead+0x6>
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	9a 83       	std	Y+2, r25	; 0x02
    3772:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(WaterSensorPin,WaterRead);
    3774:	29 81       	ldd	r18, Y+1	; 0x01
    3776:	3a 81       	ldd	r19, Y+2	; 0x02
    3778:	87 e0       	ldi	r24, 0x07	; 7
    377a:	b9 01       	movw	r22, r18
    377c:	0e 94 b3 1a 	call	0x3566	; 0x3566 <ADC_voidReadResultPolling>
	*WaterRead=((u32)(*WaterRead)*ADCRefmV)/DACRes; //convert out equivalent mV
    3780:	e9 81       	ldd	r30, Y+1	; 0x01
    3782:	fa 81       	ldd	r31, Y+2	; 0x02
    3784:	80 81       	ld	r24, Z
    3786:	91 81       	ldd	r25, Z+1	; 0x01
    3788:	cc 01       	movw	r24, r24
    378a:	a0 e0       	ldi	r26, 0x00	; 0
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	28 e8       	ldi	r18, 0x88	; 136
    3790:	33 e1       	ldi	r19, 0x13	; 19
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 3d 2b 	call	0x567a	; 0x567a <__mulsi3>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	07 2e       	mov	r0, r23
    37a4:	7a e0       	ldi	r23, 0x0A	; 10
    37a6:	b6 95       	lsr	r27
    37a8:	a7 95       	ror	r26
    37aa:	97 95       	ror	r25
    37ac:	87 95       	ror	r24
    37ae:	7a 95       	dec	r23
    37b0:	d1 f7       	brne	.-12     	; 0x37a6 <WaterSensor_voidRead+0x40>
    37b2:	70 2d       	mov	r23, r0
    37b4:	e9 81       	ldd	r30, Y+1	; 0x01
    37b6:	fa 81       	ldd	r31, Y+2	; 0x02
    37b8:	91 83       	std	Z+1, r25	; 0x01
    37ba:	80 83       	st	Z, r24
	*WaterRead= (*WaterRead)/10.00;
    37bc:	e9 81       	ldd	r30, Y+1	; 0x01
    37be:	fa 81       	ldd	r31, Y+2	; 0x02
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	cc 01       	movw	r24, r24
    37c6:	a0 e0       	ldi	r26, 0x00	; 0
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	30 e0       	ldi	r19, 0x00	; 0
    37de:	40 e2       	ldi	r20, 0x20	; 32
    37e0:	51 e4       	ldi	r21, 0x41	; 65
    37e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37e6:	dc 01       	movw	r26, r24
    37e8:	cb 01       	movw	r24, r22
    37ea:	bc 01       	movw	r22, r24
    37ec:	cd 01       	movw	r24, r26
    37ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	e9 81       	ldd	r30, Y+1	; 0x01
    37f8:	fa 81       	ldd	r31, Y+2	; 0x02
    37fa:	91 83       	std	Z+1, r25	; 0x01
    37fc:	80 83       	st	Z, r24
	}
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	cf 91       	pop	r28
    3804:	df 91       	pop	r29
    3806:	08 95       	ret

00003808 <TouchSensor_voidInit>:
 */

#include "TouchSensor_Interface.h"

void TouchSensor_voidInit (u8 Group, u8 pin)
{
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	00 d0       	rcall	.+0      	; 0x380e <TouchSensor_voidInit+0x6>
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	89 83       	std	Y+1, r24	; 0x01
    3814:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,input);
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	6a 81       	ldd	r22, Y+2	; 0x02
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <TouchSensor_u8GetValue>:

u8 TouchSensor_u8GetValue (u8 Group, u8 pin)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	00 d0       	rcall	.+0      	; 0x3830 <TouchSensor_u8GetValue+0x6>
    3830:	0f 92       	push	r0
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	8a 83       	std	Y+2, r24	; 0x02
    3838:	6b 83       	std	Y+3, r22	; 0x03
	u8 TouchSensorState;
	TouchSensorState=DIO_u8ReadPinValue(Group,pin);
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	6b 81       	ldd	r22, Y+3	; 0x03
    383e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
    3842:	89 83       	std	Y+1, r24	; 0x01
	return TouchSensorState;
    3844:	89 81       	ldd	r24, Y+1	; 0x01
}
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	0f 90       	pop	r0
    384c:	cf 91       	pop	r28
    384e:	df 91       	pop	r29
    3850:	08 95       	ret

00003852 <SWITCH_voidInit>:
 *      Author: salma
 */

#include "Switch_Interface.h"
void SWITCH_voidInit (u8 Group, u8 pin)
{
    3852:	df 93       	push	r29
    3854:	cf 93       	push	r28
    3856:	00 d0       	rcall	.+0      	; 0x3858 <SWITCH_voidInit+0x6>
    3858:	cd b7       	in	r28, 0x3d	; 61
    385a:	de b7       	in	r29, 0x3e	; 62
    385c:	89 83       	std	Y+1, r24	; 0x01
    385e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,Input);
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	6a 81       	ldd	r22, Y+2	; 0x02
    3864:	40 e0       	ldi	r20, 0x00	; 0
    3866:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidControlPullupPin(Group,pin,High);
    386a:	89 81       	ldd	r24, Y+1	; 0x01
    386c:	6a 81       	ldd	r22, Y+2	; 0x02
    386e:	41 e0       	ldi	r20, 0x01	; 1
    3870:	0e 94 1a 1a 	call	0x3434	; 0x3434 <DIO_voidControlPullupPin>
}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	cf 91       	pop	r28
    387a:	df 91       	pop	r29
    387c:	08 95       	ret

0000387e <SWITCH_u8GetValue>:

u8 SWITCH_u8GetValue (u8 Group, u8 pin)
{
    387e:	df 93       	push	r29
    3880:	cf 93       	push	r28
    3882:	00 d0       	rcall	.+0      	; 0x3884 <SWITCH_u8GetValue+0x6>
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
    3888:	89 83       	std	Y+1, r24	; 0x01
    388a:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPinValue(Group,pin);
    388c:	89 81       	ldd	r24, Y+1	; 0x01
    388e:	6a 81       	ldd	r22, Y+2	; 0x02
    3890:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
}
    3894:	0f 90       	pop	r0
    3896:	0f 90       	pop	r0
    3898:	cf 91       	pop	r28
    389a:	df 91       	pop	r29
    389c:	08 95       	ret

0000389e <STEPPER_voidInit>:
 */
#include "Stepper_Interface.h"
#include <util/delay.h>

void STEPPER_voidInit ()
{
    389e:	df 93       	push	r29
    38a0:	cf 93       	push	r28
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(StepperGroup,StepperB1,Output);
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	41 e0       	ldi	r20, 0x01	; 1
    38ac:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB2,Output);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	61 e0       	ldi	r22, 0x01	; 1
    38b4:	41 e0       	ldi	r20, 0x01	; 1
    38b6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB3,Output);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	62 e0       	ldi	r22, 0x02	; 2
    38be:	41 e0       	ldi	r20, 0x01	; 1
    38c0:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB4,Output);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	63 e0       	ldi	r22, 0x03	; 3
    38c8:	41 e0       	ldi	r20, 0x01	; 1
    38ca:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <STEPPER_voidCW>:

void STEPPER_voidCW(u16 angle)
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
    38dc:	c2 54       	subi	r28, 0x42	; 66
    38de:	d0 40       	sbci	r29, 0x00	; 0
    38e0:	0f b6       	in	r0, 0x3f	; 63
    38e2:	f8 94       	cli
    38e4:	de bf       	out	0x3e, r29	; 62
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	cd bf       	out	0x3d, r28	; 61
    38ea:	fe 01       	movw	r30, r28
    38ec:	ef 5b       	subi	r30, 0xBF	; 191
    38ee:	ff 4f       	sbci	r31, 0xFF	; 255
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
	u32 NOSteps =(angle/FullStepAngle);
    38f4:	fe 01       	movw	r30, r28
    38f6:	ef 5b       	subi	r30, 0xBF	; 191
    38f8:	ff 4f       	sbci	r31, 0xFF	; 255
    38fa:	80 81       	ld	r24, Z
    38fc:	91 81       	ldd	r25, Z+1	; 0x01
    38fe:	cc 01       	movw	r24, r24
    3900:	a0 e0       	ldi	r26, 0x00	; 0
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	bc 01       	movw	r22, r24
    3912:	cd 01       	movw	r24, r26
    3914:	2c eb       	ldi	r18, 0xBC	; 188
    3916:	3c ec       	ldi	r19, 0xCC	; 204
    3918:	40 e3       	ldi	r20, 0x30	; 48
    391a:	5e e3       	ldi	r21, 0x3E	; 62
    391c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    392c:	dc 01       	movw	r26, r24
    392e:	cb 01       	movw	r24, r22
    3930:	fe 01       	movw	r30, r28
    3932:	fd 96       	adiw	r30, 0x3d	; 61
    3934:	80 83       	st	Z, r24
    3936:	91 83       	std	Z+1, r25	; 0x01
    3938:	a2 83       	std	Z+2, r26	; 0x02
    393a:	b3 83       	std	Z+3, r27	; 0x03
	u16 NOIterations=NOSteps/FUllIteration;
    393c:	fe 01       	movw	r30, r28
    393e:	fd 96       	adiw	r30, 0x3d	; 61
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	a2 81       	ldd	r26, Z+2	; 0x02
    3946:	b3 81       	ldd	r27, Z+3	; 0x03
    3948:	b6 95       	lsr	r27
    394a:	a7 95       	ror	r26
    394c:	97 95       	ror	r25
    394e:	87 95       	ror	r24
    3950:	b6 95       	lsr	r27
    3952:	a7 95       	ror	r26
    3954:	97 95       	ror	r25
    3956:	87 95       	ror	r24
    3958:	9c af       	std	Y+60, r25	; 0x3c
    395a:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    395c:	1a ae       	std	Y+58, r1	; 0x3a
    395e:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3960:	1a ae       	std	Y+58, r1	; 0x3a
    3962:	19 ae       	std	Y+57, r1	; 0x39
    3964:	1d c2       	rjmp	.+1082   	; 0x3da0 <STEPPER_voidCW+0x4cc>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3966:	81 e0       	ldi	r24, 0x01	; 1
    3968:	60 e0       	ldi	r22, 0x00	; 0
    396a:	40 e0       	ldi	r20, 0x00	; 0
    396c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3970:	81 e0       	ldi	r24, 0x01	; 1
    3972:	61 e0       	ldi	r22, 0x01	; 1
    3974:	41 e0       	ldi	r20, 0x01	; 1
    3976:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	62 e0       	ldi	r22, 0x02	; 2
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	63 e0       	ldi	r22, 0x03	; 3
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a0 e2       	ldi	r26, 0x20	; 32
    3994:	b1 e4       	ldi	r27, 0x41	; 65
    3996:	8d ab       	std	Y+53, r24	; 0x35
    3998:	9e ab       	std	Y+54, r25	; 0x36
    399a:	af ab       	std	Y+55, r26	; 0x37
    399c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399e:	6d a9       	ldd	r22, Y+53	; 0x35
    39a0:	7e a9       	ldd	r23, Y+54	; 0x36
    39a2:	8f a9       	ldd	r24, Y+55	; 0x37
    39a4:	98 ad       	ldd	r25, Y+56	; 0x38
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	4a ef       	ldi	r20, 0xFA	; 250
    39ac:	54 e4       	ldi	r21, 0x44	; 68
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	89 ab       	std	Y+49, r24	; 0x31
    39b8:	9a ab       	std	Y+50, r25	; 0x32
    39ba:	ab ab       	std	Y+51, r26	; 0x33
    39bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39be:	69 a9       	ldd	r22, Y+49	; 0x31
    39c0:	7a a9       	ldd	r23, Y+50	; 0x32
    39c2:	8b a9       	ldd	r24, Y+51	; 0x33
    39c4:	9c a9       	ldd	r25, Y+52	; 0x34
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e8       	ldi	r20, 0x80	; 128
    39cc:	5f e3       	ldi	r21, 0x3F	; 63
    39ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39d2:	88 23       	and	r24, r24
    39d4:	2c f4       	brge	.+10     	; 0x39e0 <STEPPER_voidCW+0x10c>
		__ticks = 1;
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 ab       	std	Y+48, r25	; 0x30
    39dc:	8f a7       	std	Y+47, r24	; 0x2f
    39de:	3f c0       	rjmp	.+126    	; 0x3a5e <STEPPER_voidCW+0x18a>
	else if (__tmp > 65535)
    39e0:	69 a9       	ldd	r22, Y+49	; 0x31
    39e2:	7a a9       	ldd	r23, Y+50	; 0x32
    39e4:	8b a9       	ldd	r24, Y+51	; 0x33
    39e6:	9c a9       	ldd	r25, Y+52	; 0x34
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	3f ef       	ldi	r19, 0xFF	; 255
    39ec:	4f e7       	ldi	r20, 0x7F	; 127
    39ee:	57 e4       	ldi	r21, 0x47	; 71
    39f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39f4:	18 16       	cp	r1, r24
    39f6:	4c f5       	brge	.+82     	; 0x3a4a <STEPPER_voidCW+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f8:	6d a9       	ldd	r22, Y+53	; 0x35
    39fa:	7e a9       	ldd	r23, Y+54	; 0x36
    39fc:	8f a9       	ldd	r24, Y+55	; 0x37
    39fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e2       	ldi	r20, 0x20	; 32
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	98 ab       	std	Y+48, r25	; 0x30
    3a1e:	8f a7       	std	Y+47, r24	; 0x2f
    3a20:	0f c0       	rjmp	.+30     	; 0x3a40 <STEPPER_voidCW+0x16c>
    3a22:	88 ec       	ldi	r24, 0xC8	; 200
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	9e a7       	std	Y+46, r25	; 0x2e
    3a28:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <STEPPER_voidCW+0x15a>
    3a32:	9e a7       	std	Y+46, r25	; 0x2e
    3a34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a38:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	98 ab       	std	Y+48, r25	; 0x30
    3a3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a42:	98 a9       	ldd	r25, Y+48	; 0x30
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	69 f7       	brne	.-38     	; 0x3a22 <STEPPER_voidCW+0x14e>
    3a48:	14 c0       	rjmp	.+40     	; 0x3a72 <STEPPER_voidCW+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a50:	9c a9       	ldd	r25, Y+52	; 0x34
    3a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	98 ab       	std	Y+48, r25	; 0x30
    3a5c:	8f a7       	std	Y+47, r24	; 0x2f
    3a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a60:	98 a9       	ldd	r25, Y+48	; 0x30
    3a62:	9c a7       	std	Y+44, r25	; 0x2c
    3a64:	8b a7       	std	Y+43, r24	; 0x2b
    3a66:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a68:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <STEPPER_voidCW+0x196>
    3a6e:	9c a7       	std	Y+44, r25	; 0x2c
    3a70:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	60 e0       	ldi	r22, 0x00	; 0
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	62 e0       	ldi	r22, 0x02	; 2
    3a8a:	41 e0       	ldi	r20, 0x01	; 1
    3a8c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	63 e0       	ldi	r22, 0x03	; 3
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	a0 e2       	ldi	r26, 0x20	; 32
    3aa0:	b1 e4       	ldi	r27, 0x41	; 65
    3aa2:	8f a3       	std	Y+39, r24	; 0x27
    3aa4:	98 a7       	std	Y+40, r25	; 0x28
    3aa6:	a9 a7       	std	Y+41, r26	; 0x29
    3aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    3aac:	78 a5       	ldd	r23, Y+40	; 0x28
    3aae:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	4a ef       	ldi	r20, 0xFA	; 250
    3ab8:	54 e4       	ldi	r21, 0x44	; 68
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	8b a3       	std	Y+35, r24	; 0x23
    3ac4:	9c a3       	std	Y+36, r25	; 0x24
    3ac6:	ad a3       	std	Y+37, r26	; 0x25
    3ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aca:	6b a1       	ldd	r22, Y+35	; 0x23
    3acc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ace:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e8       	ldi	r20, 0x80	; 128
    3ad8:	5f e3       	ldi	r21, 0x3F	; 63
    3ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ade:	88 23       	and	r24, r24
    3ae0:	2c f4       	brge	.+10     	; 0x3aec <STEPPER_voidCW+0x218>
		__ticks = 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9a a3       	std	Y+34, r25	; 0x22
    3ae8:	89 a3       	std	Y+33, r24	; 0x21
    3aea:	3f c0       	rjmp	.+126    	; 0x3b6a <STEPPER_voidCW+0x296>
	else if (__tmp > 65535)
    3aec:	6b a1       	ldd	r22, Y+35	; 0x23
    3aee:	7c a1       	ldd	r23, Y+36	; 0x24
    3af0:	8d a1       	ldd	r24, Y+37	; 0x25
    3af2:	9e a1       	ldd	r25, Y+38	; 0x26
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	4c f5       	brge	.+82     	; 0x3b56 <STEPPER_voidCW+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b04:	6f a1       	ldd	r22, Y+39	; 0x27
    3b06:	78 a5       	ldd	r23, Y+40	; 0x28
    3b08:	89 a5       	ldd	r24, Y+41	; 0x29
    3b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9a a3       	std	Y+34, r25	; 0x22
    3b2a:	89 a3       	std	Y+33, r24	; 0x21
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <STEPPER_voidCW+0x278>
    3b2e:	88 ec       	ldi	r24, 0xC8	; 200
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	98 a3       	std	Y+32, r25	; 0x20
    3b34:	8f 8f       	std	Y+31, r24	; 0x1f
    3b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b38:	98 a1       	ldd	r25, Y+32	; 0x20
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <STEPPER_voidCW+0x266>
    3b3e:	98 a3       	std	Y+32, r25	; 0x20
    3b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	89 a1       	ldd	r24, Y+33	; 0x21
    3b44:	9a a1       	ldd	r25, Y+34	; 0x22
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <STEPPER_voidCW+0x25a>
    3b54:	14 c0       	rjmp	.+40     	; 0x3b7e <STEPPER_voidCW+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b56:	6b a1       	ldd	r22, Y+35	; 0x23
    3b58:	7c a1       	ldd	r23, Y+36	; 0x24
    3b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	9a a3       	std	Y+34, r25	; 0x22
    3b68:	89 a3       	std	Y+33, r24	; 0x21
    3b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b70:	8d 8f       	std	Y+29, r24	; 0x1d
    3b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <STEPPER_voidCW+0x2a2>
    3b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b7c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	60 e0       	ldi	r22, 0x00	; 0
    3b82:	41 e0       	ldi	r20, 0x01	; 1
    3b84:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	61 e0       	ldi	r22, 0x01	; 1
    3b8c:	41 e0       	ldi	r20, 0x01	; 1
    3b8e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	62 e0       	ldi	r22, 0x02	; 2
    3b96:	40 e0       	ldi	r20, 0x00	; 0
    3b98:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	63 e0       	ldi	r22, 0x03	; 3
    3ba0:	41 e0       	ldi	r20, 0x01	; 1
    3ba2:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	a0 e2       	ldi	r26, 0x20	; 32
    3bac:	b1 e4       	ldi	r27, 0x41	; 65
    3bae:	89 8f       	std	Y+25, r24	; 0x19
    3bb0:	9a 8f       	std	Y+26, r25	; 0x1a
    3bb2:	ab 8f       	std	Y+27, r26	; 0x1b
    3bb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bb6:	69 8d       	ldd	r22, Y+25	; 0x19
    3bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	4a ef       	ldi	r20, 0xFA	; 250
    3bc4:	54 e4       	ldi	r21, 0x44	; 68
    3bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bca:	dc 01       	movw	r26, r24
    3bcc:	cb 01       	movw	r24, r22
    3bce:	8d 8b       	std	Y+21, r24	; 0x15
    3bd0:	9e 8b       	std	Y+22, r25	; 0x16
    3bd2:	af 8b       	std	Y+23, r26	; 0x17
    3bd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bda:	8f 89       	ldd	r24, Y+23	; 0x17
    3bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	30 e0       	ldi	r19, 0x00	; 0
    3be2:	40 e8       	ldi	r20, 0x80	; 128
    3be4:	5f e3       	ldi	r21, 0x3F	; 63
    3be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bea:	88 23       	and	r24, r24
    3bec:	2c f4       	brge	.+10     	; 0x3bf8 <STEPPER_voidCW+0x324>
		__ticks = 1;
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	9c 8b       	std	Y+20, r25	; 0x14
    3bf4:	8b 8b       	std	Y+19, r24	; 0x13
    3bf6:	3f c0       	rjmp	.+126    	; 0x3c76 <STEPPER_voidCW+0x3a2>
	else if (__tmp > 65535)
    3bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    3bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    3bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    3c00:	20 e0       	ldi	r18, 0x00	; 0
    3c02:	3f ef       	ldi	r19, 0xFF	; 255
    3c04:	4f e7       	ldi	r20, 0x7F	; 127
    3c06:	57 e4       	ldi	r21, 0x47	; 71
    3c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c0c:	18 16       	cp	r1, r24
    3c0e:	4c f5       	brge	.+82     	; 0x3c62 <STEPPER_voidCW+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c10:	69 8d       	ldd	r22, Y+25	; 0x19
    3c12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e2       	ldi	r20, 0x20	; 32
    3c1e:	51 e4       	ldi	r21, 0x41	; 65
    3c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c24:	dc 01       	movw	r26, r24
    3c26:	cb 01       	movw	r24, r22
    3c28:	bc 01       	movw	r22, r24
    3c2a:	cd 01       	movw	r24, r26
    3c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c30:	dc 01       	movw	r26, r24
    3c32:	cb 01       	movw	r24, r22
    3c34:	9c 8b       	std	Y+20, r25	; 0x14
    3c36:	8b 8b       	std	Y+19, r24	; 0x13
    3c38:	0f c0       	rjmp	.+30     	; 0x3c58 <STEPPER_voidCW+0x384>
    3c3a:	88 ec       	ldi	r24, 0xC8	; 200
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	9a 8b       	std	Y+18, r25	; 0x12
    3c40:	89 8b       	std	Y+17, r24	; 0x11
    3c42:	89 89       	ldd	r24, Y+17	; 0x11
    3c44:	9a 89       	ldd	r25, Y+18	; 0x12
    3c46:	01 97       	sbiw	r24, 0x01	; 1
    3c48:	f1 f7       	brne	.-4      	; 0x3c46 <STEPPER_voidCW+0x372>
    3c4a:	9a 8b       	std	Y+18, r25	; 0x12
    3c4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c4e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c50:	9c 89       	ldd	r25, Y+20	; 0x14
    3c52:	01 97       	sbiw	r24, 0x01	; 1
    3c54:	9c 8b       	std	Y+20, r25	; 0x14
    3c56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c58:	8b 89       	ldd	r24, Y+19	; 0x13
    3c5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3c5c:	00 97       	sbiw	r24, 0x00	; 0
    3c5e:	69 f7       	brne	.-38     	; 0x3c3a <STEPPER_voidCW+0x366>
    3c60:	14 c0       	rjmp	.+40     	; 0x3c8a <STEPPER_voidCW+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c62:	6d 89       	ldd	r22, Y+21	; 0x15
    3c64:	7e 89       	ldd	r23, Y+22	; 0x16
    3c66:	8f 89       	ldd	r24, Y+23	; 0x17
    3c68:	98 8d       	ldd	r25, Y+24	; 0x18
    3c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	9c 8b       	std	Y+20, r25	; 0x14
    3c74:	8b 8b       	std	Y+19, r24	; 0x13
    3c76:	8b 89       	ldd	r24, Y+19	; 0x13
    3c78:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7a:	98 8b       	std	Y+16, r25	; 0x10
    3c7c:	8f 87       	std	Y+15, r24	; 0x0f
    3c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c80:	98 89       	ldd	r25, Y+16	; 0x10
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	f1 f7       	brne	.-4      	; 0x3c82 <STEPPER_voidCW+0x3ae>
    3c86:	98 8b       	std	Y+16, r25	; 0x10
    3c88:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	41 e0       	ldi	r20, 0x01	; 1
    3c90:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3c94:	81 e0       	ldi	r24, 0x01	; 1
    3c96:	61 e0       	ldi	r22, 0x01	; 1
    3c98:	41 e0       	ldi	r20, 0x01	; 1
    3c9a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	62 e0       	ldi	r22, 0x02	; 2
    3ca2:	41 e0       	ldi	r20, 0x01	; 1
    3ca4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	63 e0       	ldi	r22, 0x03	; 3
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	a0 e2       	ldi	r26, 0x20	; 32
    3cb8:	b1 e4       	ldi	r27, 0x41	; 65
    3cba:	8b 87       	std	Y+11, r24	; 0x0b
    3cbc:	9c 87       	std	Y+12, r25	; 0x0c
    3cbe:	ad 87       	std	Y+13, r26	; 0x0d
    3cc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cca:	20 e0       	ldi	r18, 0x00	; 0
    3ccc:	30 e0       	ldi	r19, 0x00	; 0
    3cce:	4a ef       	ldi	r20, 0xFA	; 250
    3cd0:	54 e4       	ldi	r21, 0x44	; 68
    3cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	8f 83       	std	Y+7, r24	; 0x07
    3cdc:	98 87       	std	Y+8, r25	; 0x08
    3cde:	a9 87       	std	Y+9, r26	; 0x09
    3ce0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce4:	78 85       	ldd	r23, Y+8	; 0x08
    3ce6:	89 85       	ldd	r24, Y+9	; 0x09
    3ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e8       	ldi	r20, 0x80	; 128
    3cf0:	5f e3       	ldi	r21, 0x3F	; 63
    3cf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf6:	88 23       	and	r24, r24
    3cf8:	2c f4       	brge	.+10     	; 0x3d04 <STEPPER_voidCW+0x430>
		__ticks = 1;
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
    3d02:	3f c0       	rjmp	.+126    	; 0x3d82 <STEPPER_voidCW+0x4ae>
	else if (__tmp > 65535)
    3d04:	6f 81       	ldd	r22, Y+7	; 0x07
    3d06:	78 85       	ldd	r23, Y+8	; 0x08
    3d08:	89 85       	ldd	r24, Y+9	; 0x09
    3d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	3f ef       	ldi	r19, 0xFF	; 255
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	57 e4       	ldi	r21, 0x47	; 71
    3d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d18:	18 16       	cp	r1, r24
    3d1a:	4c f5       	brge	.+82     	; 0x3d6e <STEPPER_voidCW+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	40 e2       	ldi	r20, 0x20	; 32
    3d2a:	51 e4       	ldi	r21, 0x41	; 65
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	bc 01       	movw	r22, r24
    3d36:	cd 01       	movw	r24, r26
    3d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	9e 83       	std	Y+6, r25	; 0x06
    3d42:	8d 83       	std	Y+5, r24	; 0x05
    3d44:	0f c0       	rjmp	.+30     	; 0x3d64 <STEPPER_voidCW+0x490>
    3d46:	88 ec       	ldi	r24, 0xC8	; 200
    3d48:	90 e0       	ldi	r25, 0x00	; 0
    3d4a:	9c 83       	std	Y+4, r25	; 0x04
    3d4c:	8b 83       	std	Y+3, r24	; 0x03
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	01 97       	sbiw	r24, 0x01	; 1
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <STEPPER_voidCW+0x47e>
    3d56:	9c 83       	std	Y+4, r25	; 0x04
    3d58:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	9e 83       	std	Y+6, r25	; 0x06
    3d62:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d64:	8d 81       	ldd	r24, Y+5	; 0x05
    3d66:	9e 81       	ldd	r25, Y+6	; 0x06
    3d68:	00 97       	sbiw	r24, 0x00	; 0
    3d6a:	69 f7       	brne	.-38     	; 0x3d46 <STEPPER_voidCW+0x472>
    3d6c:	14 c0       	rjmp	.+40     	; 0x3d96 <STEPPER_voidCW+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d70:	78 85       	ldd	r23, Y+8	; 0x08
    3d72:	89 85       	ldd	r24, Y+9	; 0x09
    3d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	9e 83       	std	Y+6, r25	; 0x06
    3d80:	8d 83       	std	Y+5, r24	; 0x05
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	9a 83       	std	Y+2, r25	; 0x02
    3d88:	89 83       	std	Y+1, r24	; 0x01
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	f1 f7       	brne	.-4      	; 0x3d8e <STEPPER_voidCW+0x4ba>
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidCW(u16 angle)
{
	u32 NOSteps =(angle/FullStepAngle);
	u16 NOIterations=NOSteps/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3d96:	89 ad       	ldd	r24, Y+57	; 0x39
    3d98:	9a ad       	ldd	r25, Y+58	; 0x3a
    3d9a:	01 96       	adiw	r24, 0x01	; 1
    3d9c:	9a af       	std	Y+58, r25	; 0x3a
    3d9e:	89 af       	std	Y+57, r24	; 0x39
    3da0:	29 ad       	ldd	r18, Y+57	; 0x39
    3da2:	3a ad       	ldd	r19, Y+58	; 0x3a
    3da4:	8b ad       	ldd	r24, Y+59	; 0x3b
    3da6:	9c ad       	ldd	r25, Y+60	; 0x3c
    3da8:	28 17       	cp	r18, r24
    3daa:	39 07       	cpc	r19, r25
    3dac:	08 f4       	brcc	.+2      	; 0x3db0 <STEPPER_voidCW+0x4dc>
    3dae:	db cd       	rjmp	.-1098   	; 0x3966 <STEPPER_voidCW+0x92>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
		_delay_ms(delay);
	}

}
    3db0:	ce 5b       	subi	r28, 0xBE	; 190
    3db2:	df 4f       	sbci	r29, 0xFF	; 255
    3db4:	0f b6       	in	r0, 0x3f	; 63
    3db6:	f8 94       	cli
    3db8:	de bf       	out	0x3e, r29	; 62
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	cd bf       	out	0x3d, r28	; 61
    3dbe:	cf 91       	pop	r28
    3dc0:	df 91       	pop	r29
    3dc2:	08 95       	ret

00003dc4 <STEPPER_voidACW>:

void STEPPER_voidACW(u16 angle)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	cd b7       	in	r28, 0x3d	; 61
    3dca:	de b7       	in	r29, 0x3e	; 62
    3dcc:	ee 97       	sbiw	r28, 0x3e	; 62
    3dce:	0f b6       	in	r0, 0x3f	; 63
    3dd0:	f8 94       	cli
    3dd2:	de bf       	out	0x3e, r29	; 62
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	cd bf       	out	0x3d, r28	; 61
    3dd8:	9e af       	std	Y+62, r25	; 0x3e
    3dda:	8d af       	std	Y+61, r24	; 0x3d

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
    3ddc:	8d ad       	ldd	r24, Y+61	; 0x3d
    3dde:	9e ad       	ldd	r25, Y+62	; 0x3e
    3de0:	cc 01       	movw	r24, r24
    3de2:	a0 e0       	ldi	r26, 0x00	; 0
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	bc 01       	movw	r22, r24
    3de8:	cd 01       	movw	r24, r26
    3dea:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3dee:	dc 01       	movw	r26, r24
    3df0:	cb 01       	movw	r24, r22
    3df2:	bc 01       	movw	r22, r24
    3df4:	cd 01       	movw	r24, r26
    3df6:	2c eb       	ldi	r18, 0xBC	; 188
    3df8:	3c ec       	ldi	r19, 0xCC	; 204
    3dfa:	40 e3       	ldi	r20, 0x30	; 48
    3dfc:	5e e3       	ldi	r21, 0x3E	; 62
    3dfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	20 e0       	ldi	r18, 0x00	; 0
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	40 e8       	ldi	r20, 0x80	; 128
    3e10:	50 e4       	ldi	r21, 0x40	; 64
    3e12:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e16:	dc 01       	movw	r26, r24
    3e18:	cb 01       	movw	r24, r22
    3e1a:	bc 01       	movw	r22, r24
    3e1c:	cd 01       	movw	r24, r26
    3e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e22:	dc 01       	movw	r26, r24
    3e24:	cb 01       	movw	r24, r22
    3e26:	9c af       	std	Y+60, r25	; 0x3c
    3e28:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    3e2a:	1a ae       	std	Y+58, r1	; 0x3a
    3e2c:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3e2e:	1a ae       	std	Y+58, r1	; 0x3a
    3e30:	19 ae       	std	Y+57, r1	; 0x39
    3e32:	1d c2       	rjmp	.+1082   	; 0x426e <STEPPER_voidACW+0x4aa>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	60 e0       	ldi	r22, 0x00	; 0
    3e38:	40 e0       	ldi	r20, 0x00	; 0
    3e3a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3e3e:	81 e0       	ldi	r24, 0x01	; 1
    3e40:	61 e0       	ldi	r22, 0x01	; 1
    3e42:	41 e0       	ldi	r20, 0x01	; 1
    3e44:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	62 e0       	ldi	r22, 0x02	; 2
    3e4c:	41 e0       	ldi	r20, 0x01	; 1
    3e4e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	63 e0       	ldi	r22, 0x03	; 3
    3e56:	41 e0       	ldi	r20, 0x01	; 1
    3e58:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	a0 e2       	ldi	r26, 0x20	; 32
    3e62:	b1 e4       	ldi	r27, 0x41	; 65
    3e64:	8d ab       	std	Y+53, r24	; 0x35
    3e66:	9e ab       	std	Y+54, r25	; 0x36
    3e68:	af ab       	std	Y+55, r26	; 0x37
    3e6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e6c:	6d a9       	ldd	r22, Y+53	; 0x35
    3e6e:	7e a9       	ldd	r23, Y+54	; 0x36
    3e70:	8f a9       	ldd	r24, Y+55	; 0x37
    3e72:	98 ad       	ldd	r25, Y+56	; 0x38
    3e74:	20 e0       	ldi	r18, 0x00	; 0
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	4a ef       	ldi	r20, 0xFA	; 250
    3e7a:	54 e4       	ldi	r21, 0x44	; 68
    3e7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e80:	dc 01       	movw	r26, r24
    3e82:	cb 01       	movw	r24, r22
    3e84:	89 ab       	std	Y+49, r24	; 0x31
    3e86:	9a ab       	std	Y+50, r25	; 0x32
    3e88:	ab ab       	std	Y+51, r26	; 0x33
    3e8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3e8c:	69 a9       	ldd	r22, Y+49	; 0x31
    3e8e:	7a a9       	ldd	r23, Y+50	; 0x32
    3e90:	8b a9       	ldd	r24, Y+51	; 0x33
    3e92:	9c a9       	ldd	r25, Y+52	; 0x34
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	40 e8       	ldi	r20, 0x80	; 128
    3e9a:	5f e3       	ldi	r21, 0x3F	; 63
    3e9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ea0:	88 23       	and	r24, r24
    3ea2:	2c f4       	brge	.+10     	; 0x3eae <STEPPER_voidACW+0xea>
		__ticks = 1;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	98 ab       	std	Y+48, r25	; 0x30
    3eaa:	8f a7       	std	Y+47, r24	; 0x2f
    3eac:	3f c0       	rjmp	.+126    	; 0x3f2c <STEPPER_voidACW+0x168>
	else if (__tmp > 65535)
    3eae:	69 a9       	ldd	r22, Y+49	; 0x31
    3eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    3eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    3eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	3f ef       	ldi	r19, 0xFF	; 255
    3eba:	4f e7       	ldi	r20, 0x7F	; 127
    3ebc:	57 e4       	ldi	r21, 0x47	; 71
    3ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ec2:	18 16       	cp	r1, r24
    3ec4:	4c f5       	brge	.+82     	; 0x3f18 <STEPPER_voidACW+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ec6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ec8:	7e a9       	ldd	r23, Y+54	; 0x36
    3eca:	8f a9       	ldd	r24, Y+55	; 0x37
    3ecc:	98 ad       	ldd	r25, Y+56	; 0x38
    3ece:	20 e0       	ldi	r18, 0x00	; 0
    3ed0:	30 e0       	ldi	r19, 0x00	; 0
    3ed2:	40 e2       	ldi	r20, 0x20	; 32
    3ed4:	51 e4       	ldi	r21, 0x41	; 65
    3ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eda:	dc 01       	movw	r26, r24
    3edc:	cb 01       	movw	r24, r22
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	98 ab       	std	Y+48, r25	; 0x30
    3eec:	8f a7       	std	Y+47, r24	; 0x2f
    3eee:	0f c0       	rjmp	.+30     	; 0x3f0e <STEPPER_voidACW+0x14a>
    3ef0:	88 ec       	ldi	r24, 0xC8	; 200
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	9e a7       	std	Y+46, r25	; 0x2e
    3ef6:	8d a7       	std	Y+45, r24	; 0x2d
    3ef8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3efa:	9e a5       	ldd	r25, Y+46	; 0x2e
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	f1 f7       	brne	.-4      	; 0x3efc <STEPPER_voidACW+0x138>
    3f00:	9e a7       	std	Y+46, r25	; 0x2e
    3f02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f06:	98 a9       	ldd	r25, Y+48	; 0x30
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	98 ab       	std	Y+48, r25	; 0x30
    3f0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f10:	98 a9       	ldd	r25, Y+48	; 0x30
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	69 f7       	brne	.-38     	; 0x3ef0 <STEPPER_voidACW+0x12c>
    3f16:	14 c0       	rjmp	.+40     	; 0x3f40 <STEPPER_voidACW+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f18:	69 a9       	ldd	r22, Y+49	; 0x31
    3f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	98 ab       	std	Y+48, r25	; 0x30
    3f2a:	8f a7       	std	Y+47, r24	; 0x2f
    3f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f30:	9c a7       	std	Y+44, r25	; 0x2c
    3f32:	8b a7       	std	Y+43, r24	; 0x2b
    3f34:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f36:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <STEPPER_voidACW+0x174>
    3f3c:	9c a7       	std	Y+44, r25	; 0x2c
    3f3e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    3f40:	81 e0       	ldi	r24, 0x01	; 1
    3f42:	60 e0       	ldi	r22, 0x00	; 0
    3f44:	41 e0       	ldi	r20, 0x01	; 1
    3f46:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	61 e0       	ldi	r22, 0x01	; 1
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	62 e0       	ldi	r22, 0x02	; 2
    3f58:	41 e0       	ldi	r20, 0x01	; 1
    3f5a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	63 e0       	ldi	r22, 0x03	; 3
    3f62:	40 e0       	ldi	r20, 0x00	; 0
    3f64:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	a0 e2       	ldi	r26, 0x20	; 32
    3f6e:	b1 e4       	ldi	r27, 0x41	; 65
    3f70:	8f a3       	std	Y+39, r24	; 0x27
    3f72:	98 a7       	std	Y+40, r25	; 0x28
    3f74:	a9 a7       	std	Y+41, r26	; 0x29
    3f76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f78:	6f a1       	ldd	r22, Y+39	; 0x27
    3f7a:	78 a5       	ldd	r23, Y+40	; 0x28
    3f7c:	89 a5       	ldd	r24, Y+41	; 0x29
    3f7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	4a ef       	ldi	r20, 0xFA	; 250
    3f86:	54 e4       	ldi	r21, 0x44	; 68
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	8b a3       	std	Y+35, r24	; 0x23
    3f92:	9c a3       	std	Y+36, r25	; 0x24
    3f94:	ad a3       	std	Y+37, r26	; 0x25
    3f96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3f98:	6b a1       	ldd	r22, Y+35	; 0x23
    3f9a:	7c a1       	ldd	r23, Y+36	; 0x24
    3f9c:	8d a1       	ldd	r24, Y+37	; 0x25
    3f9e:	9e a1       	ldd	r25, Y+38	; 0x26
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e8       	ldi	r20, 0x80	; 128
    3fa6:	5f e3       	ldi	r21, 0x3F	; 63
    3fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fac:	88 23       	and	r24, r24
    3fae:	2c f4       	brge	.+10     	; 0x3fba <STEPPER_voidACW+0x1f6>
		__ticks = 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9a a3       	std	Y+34, r25	; 0x22
    3fb6:	89 a3       	std	Y+33, r24	; 0x21
    3fb8:	3f c0       	rjmp	.+126    	; 0x4038 <STEPPER_voidACW+0x274>
	else if (__tmp > 65535)
    3fba:	6b a1       	ldd	r22, Y+35	; 0x23
    3fbc:	7c a1       	ldd	r23, Y+36	; 0x24
    3fbe:	8d a1       	ldd	r24, Y+37	; 0x25
    3fc0:	9e a1       	ldd	r25, Y+38	; 0x26
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	3f ef       	ldi	r19, 0xFF	; 255
    3fc6:	4f e7       	ldi	r20, 0x7F	; 127
    3fc8:	57 e4       	ldi	r21, 0x47	; 71
    3fca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fce:	18 16       	cp	r1, r24
    3fd0:	4c f5       	brge	.+82     	; 0x4024 <STEPPER_voidACW+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd2:	6f a1       	ldd	r22, Y+39	; 0x27
    3fd4:	78 a5       	ldd	r23, Y+40	; 0x28
    3fd6:	89 a5       	ldd	r24, Y+41	; 0x29
    3fd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e2       	ldi	r20, 0x20	; 32
    3fe0:	51 e4       	ldi	r21, 0x41	; 65
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9a a3       	std	Y+34, r25	; 0x22
    3ff8:	89 a3       	std	Y+33, r24	; 0x21
    3ffa:	0f c0       	rjmp	.+30     	; 0x401a <STEPPER_voidACW+0x256>
    3ffc:	88 ec       	ldi	r24, 0xC8	; 200
    3ffe:	90 e0       	ldi	r25, 0x00	; 0
    4000:	98 a3       	std	Y+32, r25	; 0x20
    4002:	8f 8f       	std	Y+31, r24	; 0x1f
    4004:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4006:	98 a1       	ldd	r25, Y+32	; 0x20
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <STEPPER_voidACW+0x244>
    400c:	98 a3       	std	Y+32, r25	; 0x20
    400e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4010:	89 a1       	ldd	r24, Y+33	; 0x21
    4012:	9a a1       	ldd	r25, Y+34	; 0x22
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	9a a3       	std	Y+34, r25	; 0x22
    4018:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401a:	89 a1       	ldd	r24, Y+33	; 0x21
    401c:	9a a1       	ldd	r25, Y+34	; 0x22
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	69 f7       	brne	.-38     	; 0x3ffc <STEPPER_voidACW+0x238>
    4022:	14 c0       	rjmp	.+40     	; 0x404c <STEPPER_voidACW+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4024:	6b a1       	ldd	r22, Y+35	; 0x23
    4026:	7c a1       	ldd	r23, Y+36	; 0x24
    4028:	8d a1       	ldd	r24, Y+37	; 0x25
    402a:	9e a1       	ldd	r25, Y+38	; 0x26
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	9a a3       	std	Y+34, r25	; 0x22
    4036:	89 a3       	std	Y+33, r24	; 0x21
    4038:	89 a1       	ldd	r24, Y+33	; 0x21
    403a:	9a a1       	ldd	r25, Y+34	; 0x22
    403c:	9e 8f       	std	Y+30, r25	; 0x1e
    403e:	8d 8f       	std	Y+29, r24	; 0x1d
    4040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4042:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <STEPPER_voidACW+0x280>
    4048:	9e 8f       	std	Y+30, r25	; 0x1e
    404a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	41 e0       	ldi	r20, 0x01	; 1
    4052:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	61 e0       	ldi	r22, 0x01	; 1
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	62 e0       	ldi	r22, 0x02	; 2
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    406a:	81 e0       	ldi	r24, 0x01	; 1
    406c:	63 e0       	ldi	r22, 0x03	; 3
    406e:	41 e0       	ldi	r20, 0x01	; 1
    4070:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	a0 e2       	ldi	r26, 0x20	; 32
    407a:	b1 e4       	ldi	r27, 0x41	; 65
    407c:	89 8f       	std	Y+25, r24	; 0x19
    407e:	9a 8f       	std	Y+26, r25	; 0x1a
    4080:	ab 8f       	std	Y+27, r26	; 0x1b
    4082:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4084:	69 8d       	ldd	r22, Y+25	; 0x19
    4086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4088:	8b 8d       	ldd	r24, Y+27	; 0x1b
    408a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	4a ef       	ldi	r20, 0xFA	; 250
    4092:	54 e4       	ldi	r21, 0x44	; 68
    4094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	8d 8b       	std	Y+21, r24	; 0x15
    409e:	9e 8b       	std	Y+22, r25	; 0x16
    40a0:	af 8b       	std	Y+23, r26	; 0x17
    40a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40a4:	6d 89       	ldd	r22, Y+21	; 0x15
    40a6:	7e 89       	ldd	r23, Y+22	; 0x16
    40a8:	8f 89       	ldd	r24, Y+23	; 0x17
    40aa:	98 8d       	ldd	r25, Y+24	; 0x18
    40ac:	20 e0       	ldi	r18, 0x00	; 0
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e8       	ldi	r20, 0x80	; 128
    40b2:	5f e3       	ldi	r21, 0x3F	; 63
    40b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40b8:	88 23       	and	r24, r24
    40ba:	2c f4       	brge	.+10     	; 0x40c6 <STEPPER_voidACW+0x302>
		__ticks = 1;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	9c 8b       	std	Y+20, r25	; 0x14
    40c2:	8b 8b       	std	Y+19, r24	; 0x13
    40c4:	3f c0       	rjmp	.+126    	; 0x4144 <STEPPER_voidACW+0x380>
	else if (__tmp > 65535)
    40c6:	6d 89       	ldd	r22, Y+21	; 0x15
    40c8:	7e 89       	ldd	r23, Y+22	; 0x16
    40ca:	8f 89       	ldd	r24, Y+23	; 0x17
    40cc:	98 8d       	ldd	r25, Y+24	; 0x18
    40ce:	20 e0       	ldi	r18, 0x00	; 0
    40d0:	3f ef       	ldi	r19, 0xFF	; 255
    40d2:	4f e7       	ldi	r20, 0x7F	; 127
    40d4:	57 e4       	ldi	r21, 0x47	; 71
    40d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40da:	18 16       	cp	r1, r24
    40dc:	4c f5       	brge	.+82     	; 0x4130 <STEPPER_voidACW+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40de:	69 8d       	ldd	r22, Y+25	; 0x19
    40e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40e6:	20 e0       	ldi	r18, 0x00	; 0
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	40 e2       	ldi	r20, 0x20	; 32
    40ec:	51 e4       	ldi	r21, 0x41	; 65
    40ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40f2:	dc 01       	movw	r26, r24
    40f4:	cb 01       	movw	r24, r22
    40f6:	bc 01       	movw	r22, r24
    40f8:	cd 01       	movw	r24, r26
    40fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	9c 8b       	std	Y+20, r25	; 0x14
    4104:	8b 8b       	std	Y+19, r24	; 0x13
    4106:	0f c0       	rjmp	.+30     	; 0x4126 <STEPPER_voidACW+0x362>
    4108:	88 ec       	ldi	r24, 0xC8	; 200
    410a:	90 e0       	ldi	r25, 0x00	; 0
    410c:	9a 8b       	std	Y+18, r25	; 0x12
    410e:	89 8b       	std	Y+17, r24	; 0x11
    4110:	89 89       	ldd	r24, Y+17	; 0x11
    4112:	9a 89       	ldd	r25, Y+18	; 0x12
    4114:	01 97       	sbiw	r24, 0x01	; 1
    4116:	f1 f7       	brne	.-4      	; 0x4114 <STEPPER_voidACW+0x350>
    4118:	9a 8b       	std	Y+18, r25	; 0x12
    411a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    411c:	8b 89       	ldd	r24, Y+19	; 0x13
    411e:	9c 89       	ldd	r25, Y+20	; 0x14
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	9c 8b       	std	Y+20, r25	; 0x14
    4124:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4126:	8b 89       	ldd	r24, Y+19	; 0x13
    4128:	9c 89       	ldd	r25, Y+20	; 0x14
    412a:	00 97       	sbiw	r24, 0x00	; 0
    412c:	69 f7       	brne	.-38     	; 0x4108 <STEPPER_voidACW+0x344>
    412e:	14 c0       	rjmp	.+40     	; 0x4158 <STEPPER_voidACW+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4130:	6d 89       	ldd	r22, Y+21	; 0x15
    4132:	7e 89       	ldd	r23, Y+22	; 0x16
    4134:	8f 89       	ldd	r24, Y+23	; 0x17
    4136:	98 8d       	ldd	r25, Y+24	; 0x18
    4138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    413c:	dc 01       	movw	r26, r24
    413e:	cb 01       	movw	r24, r22
    4140:	9c 8b       	std	Y+20, r25	; 0x14
    4142:	8b 8b       	std	Y+19, r24	; 0x13
    4144:	8b 89       	ldd	r24, Y+19	; 0x13
    4146:	9c 89       	ldd	r25, Y+20	; 0x14
    4148:	98 8b       	std	Y+16, r25	; 0x10
    414a:	8f 87       	std	Y+15, r24	; 0x0f
    414c:	8f 85       	ldd	r24, Y+15	; 0x0f
    414e:	98 89       	ldd	r25, Y+16	; 0x10
    4150:	01 97       	sbiw	r24, 0x01	; 1
    4152:	f1 f7       	brne	.-4      	; 0x4150 <STEPPER_voidACW+0x38c>
    4154:	98 8b       	std	Y+16, r25	; 0x10
    4156:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	41 e0       	ldi	r20, 0x01	; 1
    415e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    4162:	81 e0       	ldi	r24, 0x01	; 1
    4164:	61 e0       	ldi	r22, 0x01	; 1
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	62 e0       	ldi	r22, 0x02	; 2
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	63 e0       	ldi	r22, 0x03	; 3
    417a:	41 e0       	ldi	r20, 0x01	; 1
    417c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	a0 e2       	ldi	r26, 0x20	; 32
    4186:	b1 e4       	ldi	r27, 0x41	; 65
    4188:	8b 87       	std	Y+11, r24	; 0x0b
    418a:	9c 87       	std	Y+12, r25	; 0x0c
    418c:	ad 87       	std	Y+13, r26	; 0x0d
    418e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4190:	6b 85       	ldd	r22, Y+11	; 0x0b
    4192:	7c 85       	ldd	r23, Y+12	; 0x0c
    4194:	8d 85       	ldd	r24, Y+13	; 0x0d
    4196:	9e 85       	ldd	r25, Y+14	; 0x0e
    4198:	20 e0       	ldi	r18, 0x00	; 0
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	4a ef       	ldi	r20, 0xFA	; 250
    419e:	54 e4       	ldi	r21, 0x44	; 68
    41a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a4:	dc 01       	movw	r26, r24
    41a6:	cb 01       	movw	r24, r22
    41a8:	8f 83       	std	Y+7, r24	; 0x07
    41aa:	98 87       	std	Y+8, r25	; 0x08
    41ac:	a9 87       	std	Y+9, r26	; 0x09
    41ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41b0:	6f 81       	ldd	r22, Y+7	; 0x07
    41b2:	78 85       	ldd	r23, Y+8	; 0x08
    41b4:	89 85       	ldd	r24, Y+9	; 0x09
    41b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41b8:	20 e0       	ldi	r18, 0x00	; 0
    41ba:	30 e0       	ldi	r19, 0x00	; 0
    41bc:	40 e8       	ldi	r20, 0x80	; 128
    41be:	5f e3       	ldi	r21, 0x3F	; 63
    41c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c4:	88 23       	and	r24, r24
    41c6:	2c f4       	brge	.+10     	; 0x41d2 <STEPPER_voidACW+0x40e>
		__ticks = 1;
    41c8:	81 e0       	ldi	r24, 0x01	; 1
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	9e 83       	std	Y+6, r25	; 0x06
    41ce:	8d 83       	std	Y+5, r24	; 0x05
    41d0:	3f c0       	rjmp	.+126    	; 0x4250 <STEPPER_voidACW+0x48c>
	else if (__tmp > 65535)
    41d2:	6f 81       	ldd	r22, Y+7	; 0x07
    41d4:	78 85       	ldd	r23, Y+8	; 0x08
    41d6:	89 85       	ldd	r24, Y+9	; 0x09
    41d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	3f ef       	ldi	r19, 0xFF	; 255
    41de:	4f e7       	ldi	r20, 0x7F	; 127
    41e0:	57 e4       	ldi	r21, 0x47	; 71
    41e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41e6:	18 16       	cp	r1, r24
    41e8:	4c f5       	brge	.+82     	; 0x423c <STEPPER_voidACW+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    41ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    41f2:	20 e0       	ldi	r18, 0x00	; 0
    41f4:	30 e0       	ldi	r19, 0x00	; 0
    41f6:	40 e2       	ldi	r20, 0x20	; 32
    41f8:	51 e4       	ldi	r21, 0x41	; 65
    41fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fe:	dc 01       	movw	r26, r24
    4200:	cb 01       	movw	r24, r22
    4202:	bc 01       	movw	r22, r24
    4204:	cd 01       	movw	r24, r26
    4206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420a:	dc 01       	movw	r26, r24
    420c:	cb 01       	movw	r24, r22
    420e:	9e 83       	std	Y+6, r25	; 0x06
    4210:	8d 83       	std	Y+5, r24	; 0x05
    4212:	0f c0       	rjmp	.+30     	; 0x4232 <STEPPER_voidACW+0x46e>
    4214:	88 ec       	ldi	r24, 0xC8	; 200
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	9c 83       	std	Y+4, r25	; 0x04
    421a:	8b 83       	std	Y+3, r24	; 0x03
    421c:	8b 81       	ldd	r24, Y+3	; 0x03
    421e:	9c 81       	ldd	r25, Y+4	; 0x04
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <STEPPER_voidACW+0x45c>
    4224:	9c 83       	std	Y+4, r25	; 0x04
    4226:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4228:	8d 81       	ldd	r24, Y+5	; 0x05
    422a:	9e 81       	ldd	r25, Y+6	; 0x06
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	9e 81       	ldd	r25, Y+6	; 0x06
    4236:	00 97       	sbiw	r24, 0x00	; 0
    4238:	69 f7       	brne	.-38     	; 0x4214 <STEPPER_voidACW+0x450>
    423a:	14 c0       	rjmp	.+40     	; 0x4264 <STEPPER_voidACW+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    423c:	6f 81       	ldd	r22, Y+7	; 0x07
    423e:	78 85       	ldd	r23, Y+8	; 0x08
    4240:	89 85       	ldd	r24, Y+9	; 0x09
    4242:	9a 85       	ldd	r25, Y+10	; 0x0a
    4244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4248:	dc 01       	movw	r26, r24
    424a:	cb 01       	movw	r24, r22
    424c:	9e 83       	std	Y+6, r25	; 0x06
    424e:	8d 83       	std	Y+5, r24	; 0x05
    4250:	8d 81       	ldd	r24, Y+5	; 0x05
    4252:	9e 81       	ldd	r25, Y+6	; 0x06
    4254:	9a 83       	std	Y+2, r25	; 0x02
    4256:	89 83       	std	Y+1, r24	; 0x01
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	f1 f7       	brne	.-4      	; 0x425c <STEPPER_voidACW+0x498>
    4260:	9a 83       	std	Y+2, r25	; 0x02
    4262:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidACW(u16 angle)
{

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    4264:	89 ad       	ldd	r24, Y+57	; 0x39
    4266:	9a ad       	ldd	r25, Y+58	; 0x3a
    4268:	01 96       	adiw	r24, 0x01	; 1
    426a:	9a af       	std	Y+58, r25	; 0x3a
    426c:	89 af       	std	Y+57, r24	; 0x39
    426e:	29 ad       	ldd	r18, Y+57	; 0x39
    4270:	3a ad       	ldd	r19, Y+58	; 0x3a
    4272:	8b ad       	ldd	r24, Y+59	; 0x3b
    4274:	9c ad       	ldd	r25, Y+60	; 0x3c
    4276:	28 17       	cp	r18, r24
    4278:	39 07       	cpc	r19, r25
    427a:	08 f4       	brcc	.+2      	; 0x427e <STEPPER_voidACW+0x4ba>
    427c:	db cd       	rjmp	.-1098   	; 0x3e34 <STEPPER_voidACW+0x70>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
		_delay_ms(delay);
	}

}
    427e:	ee 96       	adiw	r28, 0x3e	; 62
    4280:	0f b6       	in	r0, 0x3f	; 63
    4282:	f8 94       	cli
    4284:	de bf       	out	0x3e, r29	; 62
    4286:	0f be       	out	0x3f, r0	; 63
    4288:	cd bf       	out	0x3d, r28	; 61
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <SEVSEG_voidInit>:
 *      Author: salma
 */
#include "SevenSeg_Interface.h"
u8 SevSegValue[10]=SEVSEGVALUE;
void SEVSEG_voidInit()
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	cd b7       	in	r28, 0x3d	; 61
    4296:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SevSeg1,0xff);
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	6f ef       	ldi	r22, 0xFF	; 255
    429c:	0e 94 3f 19 	call	0x327e	; 0x327e <DIO_voidSetPortDir>
	DIO_voidSetPortDir(SevSeg2,0xff);
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	6f ef       	ldi	r22, 0xFF	; 255
    42a4:	0e 94 3f 19 	call	0x327e	; 0x327e <DIO_voidSetPortDir>
	DIO_voidSetPortValue(SevSeg1,OFF);
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	6f ef       	ldi	r22, 0xFF	; 255
    42ac:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    42b0:	82 e0       	ldi	r24, 0x02	; 2
    42b2:	6f ef       	ldi	r22, 0xFF	; 255
    42b4:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
}
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <SEVSEG_voidSetNum>:

void SEVSEG_voidSetNum(u8 num)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <SEVSEG_voidSetNum+0x6>
    42c4:	cd b7       	in	r28, 0x3d	; 61
    42c6:	de b7       	in	r29, 0x3e	; 62
    42c8:	8a 83       	std	Y+2, r24	; 0x02

	if (num<10)
    42ca:	8a 81       	ldd	r24, Y+2	; 0x02
    42cc:	8a 30       	cpi	r24, 0x0A	; 10
    42ce:	80 f4       	brcc	.+32     	; 0x42f0 <SEVSEG_voidSetNum+0x32>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    42d0:	8a 81       	ldd	r24, Y+2	; 0x02
    42d2:	88 2f       	mov	r24, r24
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	fc 01       	movw	r30, r24
    42d8:	e8 59       	subi	r30, 0x98	; 152
    42da:	fe 4f       	sbci	r31, 0xFE	; 254
    42dc:	90 81       	ld	r25, Z
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	69 2f       	mov	r22, r25
    42e2:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,OFF);
    42e6:	82 e0       	ldi	r24, 0x02	; 2
    42e8:	6f ef       	ldi	r22, 0xFF	; 255
    42ea:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
    42ee:	31 c0       	rjmp	.+98     	; 0x4352 <SEVSEG_voidSetNum+0x94>
	}
	else if (num==10)
    42f0:	8a 81       	ldd	r24, Y+2	; 0x02
    42f2:	8a 30       	cpi	r24, 0x0A	; 10
    42f4:	69 f4       	brne	.+26     	; 0x4310 <SEVSEG_voidSetNum+0x52>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[0]);
    42f6:	90 91 68 01 	lds	r25, 0x0168
    42fa:	81 e0       	ldi	r24, 0x01	; 1
    42fc:	69 2f       	mov	r22, r25
    42fe:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
    4302:	90 91 69 01 	lds	r25, 0x0169
    4306:	82 e0       	ldi	r24, 0x02	; 2
    4308:	69 2f       	mov	r22, r25
    430a:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
    430e:	21 c0       	rjmp	.+66     	; 0x4352 <SEVSEG_voidSetNum+0x94>
	}
	else
	{
		u8 counter = 0  ;
    4310:	19 82       	std	Y+1, r1	; 0x01
    4312:	06 c0       	rjmp	.+12     	; 0x4320 <SEVSEG_voidSetNum+0x62>
		while(num>=10)
		{
			counter++;
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	8f 5f       	subi	r24, 0xFF	; 255
    4318:	89 83       	std	Y+1, r24	; 0x01
			num-=10;
    431a:	8a 81       	ldd	r24, Y+2	; 0x02
    431c:	8a 50       	subi	r24, 0x0A	; 10
    431e:	8a 83       	std	Y+2, r24	; 0x02
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
	}
	else
	{
		u8 counter = 0  ;
		while(num>=10)
    4320:	8a 81       	ldd	r24, Y+2	; 0x02
    4322:	8a 30       	cpi	r24, 0x0A	; 10
    4324:	b8 f7       	brcc	.-18     	; 0x4314 <SEVSEG_voidSetNum+0x56>
		{
			counter++;
			num-=10;
		}
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    4326:	8a 81       	ldd	r24, Y+2	; 0x02
    4328:	88 2f       	mov	r24, r24
    432a:	90 e0       	ldi	r25, 0x00	; 0
    432c:	fc 01       	movw	r30, r24
    432e:	e8 59       	subi	r30, 0x98	; 152
    4330:	fe 4f       	sbci	r31, 0xFE	; 254
    4332:	90 81       	ld	r25, Z
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	69 2f       	mov	r22, r25
    4338:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[counter]);
    433c:	89 81       	ldd	r24, Y+1	; 0x01
    433e:	88 2f       	mov	r24, r24
    4340:	90 e0       	ldi	r25, 0x00	; 0
    4342:	fc 01       	movw	r30, r24
    4344:	e8 59       	subi	r30, 0x98	; 152
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	90 81       	ld	r25, Z
    434a:	82 e0       	ldi	r24, 0x02	; 2
    434c:	69 2f       	mov	r22, r25
    434e:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	}
}
    4352:	0f 90       	pop	r0
    4354:	0f 90       	pop	r0
    4356:	cf 91       	pop	r28
    4358:	df 91       	pop	r29
    435a:	08 95       	ret

0000435c <SEVSEG_voidOff>:
void SEVSEG_voidOff ()
{
    435c:	df 93       	push	r29
    435e:	cf 93       	push	r28
    4360:	cd b7       	in	r28, 0x3d	; 61
    4362:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortValue(SevSeg1,OFF);
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	6f ef       	ldi	r22, 0xFF	; 255
    4368:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    436c:	82 e0       	ldi	r24, 0x02	; 2
    436e:	6f ef       	ldi	r22, 0xFF	; 255
    4370:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	}
    4374:	cf 91       	pop	r28
    4376:	df 91       	pop	r29
    4378:	08 95       	ret

0000437a <ServoMotor_voidInit>:
 *      Author: salma
 */
#include "ServoMotor_Interface.h"
#include <util/delay.h>
void ServoMotor_voidInit()
{
    437a:	df 93       	push	r29
    437c:	cf 93       	push	r28
    437e:	cd b7       	in	r28, 0x3d	; 61
    4380:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DIO_GroupD,DIO_Pin5,output);
    4382:	84 e0       	ldi	r24, 0x04	; 4
    4384:	65 e0       	ldi	r22, 0x05	; 5
    4386:	41 e0       	ldi	r20, 0x01	; 1
    4388:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	T1_voidFastPWMServoInit();
    438c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <T1_voidFastPWMServoInit>
}
    4390:	cf 91       	pop	r28
    4392:	df 91       	pop	r29
    4394:	08 95       	ret

00004396 <ServoMotor_voidSetAngle>:
void ServoMotor_voidSetAngle(u8 angle)
{
    4396:	df 93       	push	r29
    4398:	cf 93       	push	r28
    439a:	00 d0       	rcall	.+0      	; 0x439c <ServoMotor_voidSetAngle+0x6>
    439c:	0f 92       	push	r0
    439e:	cd b7       	in	r28, 0x3d	; 61
    43a0:	de b7       	in	r29, 0x3e	; 62
    43a2:	8b 83       	std	Y+3, r24	; 0x03
	u16 position;
	position = 1000 + ((f32)((f32)angle/MaxAngle))*1000;
    43a4:	8b 81       	ldd	r24, Y+3	; 0x03
    43a6:	88 2f       	mov	r24, r24
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	a0 e0       	ldi	r26, 0x00	; 0
    43ac:	b0 e0       	ldi	r27, 0x00	; 0
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	bc 01       	movw	r22, r24
    43bc:	cd 01       	movw	r24, r26
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	44 e3       	ldi	r20, 0x34	; 52
    43c4:	53 e4       	ldi	r21, 0x43	; 67
    43c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	bc 01       	movw	r22, r24
    43d0:	cd 01       	movw	r24, r26
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	4a e7       	ldi	r20, 0x7A	; 122
    43d8:	54 e4       	ldi	r21, 0x44	; 68
    43da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43de:	dc 01       	movw	r26, r24
    43e0:	cb 01       	movw	r24, r22
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	30 e0       	ldi	r19, 0x00	; 0
    43ea:	4a e7       	ldi	r20, 0x7A	; 122
    43ec:	54 e4       	ldi	r21, 0x44	; 68
    43ee:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    43f2:	dc 01       	movw	r26, r24
    43f4:	cb 01       	movw	r24, r22
    43f6:	bc 01       	movw	r22, r24
    43f8:	cd 01       	movw	r24, r26
    43fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43fe:	dc 01       	movw	r26, r24
    4400:	cb 01       	movw	r24, r22
    4402:	9a 83       	std	Y+2, r25	; 0x02
    4404:	89 83       	std	Y+1, r24	; 0x01
	T1_voidFastPWMServoSetAngle(position);
    4406:	89 81       	ldd	r24, Y+1	; 0x01
    4408:	9a 81       	ldd	r25, Y+2	; 0x02
    440a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
}
    440e:	0f 90       	pop	r0
    4410:	0f 90       	pop	r0
    4412:	0f 90       	pop	r0
    4414:	cf 91       	pop	r28
    4416:	df 91       	pop	r29
    4418:	08 95       	ret

0000441a <ServoMotor_voidClockWiseSlow>:

void ServoMotor_voidClockWiseSlow(u8 StartAngle,u8 StopAngle)
{
    441a:	df 93       	push	r29
    441c:	cf 93       	push	r28
    441e:	cd b7       	in	r28, 0x3d	; 61
    4420:	de b7       	in	r29, 0x3e	; 62
    4422:	66 97       	sbiw	r28, 0x16	; 22
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	de bf       	out	0x3e, r29	; 62
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	cd bf       	out	0x3d, r28	; 61
    442e:	8d 8b       	std	Y+21, r24	; 0x15
    4430:	6e 8b       	std	Y+22, r22	; 0x16
	u16 StartAnglePosition;
	u16 StopAnglePosition;

	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
    4432:	8d 89       	ldd	r24, Y+21	; 0x15
    4434:	88 2f       	mov	r24, r24
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	a0 e0       	ldi	r26, 0x00	; 0
    443a:	b0 e0       	ldi	r27, 0x00	; 0
    443c:	bc 01       	movw	r22, r24
    443e:	cd 01       	movw	r24, r26
    4440:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4444:	dc 01       	movw	r26, r24
    4446:	cb 01       	movw	r24, r22
    4448:	bc 01       	movw	r22, r24
    444a:	cd 01       	movw	r24, r26
    444c:	20 e0       	ldi	r18, 0x00	; 0
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	44 e3       	ldi	r20, 0x34	; 52
    4452:	53 e4       	ldi	r21, 0x43	; 67
    4454:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4458:	dc 01       	movw	r26, r24
    445a:	cb 01       	movw	r24, r22
    445c:	bc 01       	movw	r22, r24
    445e:	cd 01       	movw	r24, r26
    4460:	20 e0       	ldi	r18, 0x00	; 0
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	4a e7       	ldi	r20, 0x7A	; 122
    4466:	54 e4       	ldi	r21, 0x44	; 68
    4468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    446c:	dc 01       	movw	r26, r24
    446e:	cb 01       	movw	r24, r22
    4470:	bc 01       	movw	r22, r24
    4472:	cd 01       	movw	r24, r26
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	30 e0       	ldi	r19, 0x00	; 0
    4478:	4a e7       	ldi	r20, 0x7A	; 122
    447a:	54 e4       	ldi	r21, 0x44	; 68
    447c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	bc 01       	movw	r22, r24
    4486:	cd 01       	movw	r24, r26
    4488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448c:	dc 01       	movw	r26, r24
    448e:	cb 01       	movw	r24, r22
    4490:	9c 8b       	std	Y+20, r25	; 0x14
    4492:	8b 8b       	std	Y+19, r24	; 0x13
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
    4494:	8e 89       	ldd	r24, Y+22	; 0x16
    4496:	88 2f       	mov	r24, r24
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	a0 e0       	ldi	r26, 0x00	; 0
    449c:	b0 e0       	ldi	r27, 0x00	; 0
    449e:	bc 01       	movw	r22, r24
    44a0:	cd 01       	movw	r24, r26
    44a2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	bc 01       	movw	r22, r24
    44ac:	cd 01       	movw	r24, r26
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	44 e3       	ldi	r20, 0x34	; 52
    44b4:	53 e4       	ldi	r21, 0x43	; 67
    44b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    44ba:	dc 01       	movw	r26, r24
    44bc:	cb 01       	movw	r24, r22
    44be:	bc 01       	movw	r22, r24
    44c0:	cd 01       	movw	r24, r26
    44c2:	20 e0       	ldi	r18, 0x00	; 0
    44c4:	30 e0       	ldi	r19, 0x00	; 0
    44c6:	4a e7       	ldi	r20, 0x7A	; 122
    44c8:	54 e4       	ldi	r21, 0x44	; 68
    44ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ce:	dc 01       	movw	r26, r24
    44d0:	cb 01       	movw	r24, r22
    44d2:	bc 01       	movw	r22, r24
    44d4:	cd 01       	movw	r24, r26
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	4a e7       	ldi	r20, 0x7A	; 122
    44dc:	54 e4       	ldi	r21, 0x44	; 68
    44de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	bc 01       	movw	r22, r24
    44e8:	cd 01       	movw	r24, r26
    44ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	9a 8b       	std	Y+18, r25	; 0x12
    44f4:	89 8b       	std	Y+17, r24	; 0x11
	for (u16 i =StartAnglePosition ; i<=StopAnglePosition;i+=5){
    44f6:	8b 89       	ldd	r24, Y+19	; 0x13
    44f8:	9c 89       	ldd	r25, Y+20	; 0x14
    44fa:	98 8b       	std	Y+16, r25	; 0x10
    44fc:	8f 87       	std	Y+15, r24	; 0x0f
    44fe:	7b c0       	rjmp	.+246    	; 0x45f6 <ServoMotor_voidClockWiseSlow+0x1dc>
		T1_voidFastPWMServoSetAngle(i);
    4500:	8f 85       	ldd	r24, Y+15	; 0x0f
    4502:	98 89       	ldd	r25, Y+16	; 0x10
    4504:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
    4508:	80 e0       	ldi	r24, 0x00	; 0
    450a:	90 e0       	ldi	r25, 0x00	; 0
    450c:	a0 e2       	ldi	r26, 0x20	; 32
    450e:	b1 e4       	ldi	r27, 0x41	; 65
    4510:	8b 87       	std	Y+11, r24	; 0x0b
    4512:	9c 87       	std	Y+12, r25	; 0x0c
    4514:	ad 87       	std	Y+13, r26	; 0x0d
    4516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4518:	6b 85       	ldd	r22, Y+11	; 0x0b
    451a:	7c 85       	ldd	r23, Y+12	; 0x0c
    451c:	8d 85       	ldd	r24, Y+13	; 0x0d
    451e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4520:	20 e0       	ldi	r18, 0x00	; 0
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	4a ef       	ldi	r20, 0xFA	; 250
    4526:	54 e4       	ldi	r21, 0x44	; 68
    4528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	8f 83       	std	Y+7, r24	; 0x07
    4532:	98 87       	std	Y+8, r25	; 0x08
    4534:	a9 87       	std	Y+9, r26	; 0x09
    4536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4538:	6f 81       	ldd	r22, Y+7	; 0x07
    453a:	78 85       	ldd	r23, Y+8	; 0x08
    453c:	89 85       	ldd	r24, Y+9	; 0x09
    453e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	40 e8       	ldi	r20, 0x80	; 128
    4546:	5f e3       	ldi	r21, 0x3F	; 63
    4548:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    454c:	88 23       	and	r24, r24
    454e:	2c f4       	brge	.+10     	; 0x455a <ServoMotor_voidClockWiseSlow+0x140>
		__ticks = 1;
    4550:	81 e0       	ldi	r24, 0x01	; 1
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9e 83       	std	Y+6, r25	; 0x06
    4556:	8d 83       	std	Y+5, r24	; 0x05
    4558:	3f c0       	rjmp	.+126    	; 0x45d8 <ServoMotor_voidClockWiseSlow+0x1be>
	else if (__tmp > 65535)
    455a:	6f 81       	ldd	r22, Y+7	; 0x07
    455c:	78 85       	ldd	r23, Y+8	; 0x08
    455e:	89 85       	ldd	r24, Y+9	; 0x09
    4560:	9a 85       	ldd	r25, Y+10	; 0x0a
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	3f ef       	ldi	r19, 0xFF	; 255
    4566:	4f e7       	ldi	r20, 0x7F	; 127
    4568:	57 e4       	ldi	r21, 0x47	; 71
    456a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    456e:	18 16       	cp	r1, r24
    4570:	4c f5       	brge	.+82     	; 0x45c4 <ServoMotor_voidClockWiseSlow+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4572:	6b 85       	ldd	r22, Y+11	; 0x0b
    4574:	7c 85       	ldd	r23, Y+12	; 0x0c
    4576:	8d 85       	ldd	r24, Y+13	; 0x0d
    4578:	9e 85       	ldd	r25, Y+14	; 0x0e
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	40 e2       	ldi	r20, 0x20	; 32
    4580:	51 e4       	ldi	r21, 0x41	; 65
    4582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4586:	dc 01       	movw	r26, r24
    4588:	cb 01       	movw	r24, r22
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	9e 83       	std	Y+6, r25	; 0x06
    4598:	8d 83       	std	Y+5, r24	; 0x05
    459a:	0f c0       	rjmp	.+30     	; 0x45ba <ServoMotor_voidClockWiseSlow+0x1a0>
    459c:	88 ec       	ldi	r24, 0xC8	; 200
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	9c 83       	std	Y+4, r25	; 0x04
    45a2:	8b 83       	std	Y+3, r24	; 0x03
    45a4:	8b 81       	ldd	r24, Y+3	; 0x03
    45a6:	9c 81       	ldd	r25, Y+4	; 0x04
    45a8:	01 97       	sbiw	r24, 0x01	; 1
    45aa:	f1 f7       	brne	.-4      	; 0x45a8 <ServoMotor_voidClockWiseSlow+0x18e>
    45ac:	9c 83       	std	Y+4, r25	; 0x04
    45ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	9e 83       	std	Y+6, r25	; 0x06
    45b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ba:	8d 81       	ldd	r24, Y+5	; 0x05
    45bc:	9e 81       	ldd	r25, Y+6	; 0x06
    45be:	00 97       	sbiw	r24, 0x00	; 0
    45c0:	69 f7       	brne	.-38     	; 0x459c <ServoMotor_voidClockWiseSlow+0x182>
    45c2:	14 c0       	rjmp	.+40     	; 0x45ec <ServoMotor_voidClockWiseSlow+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45c4:	6f 81       	ldd	r22, Y+7	; 0x07
    45c6:	78 85       	ldd	r23, Y+8	; 0x08
    45c8:	89 85       	ldd	r24, Y+9	; 0x09
    45ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    45cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d0:	dc 01       	movw	r26, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	9e 83       	std	Y+6, r25	; 0x06
    45d6:	8d 83       	std	Y+5, r24	; 0x05
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	9e 81       	ldd	r25, Y+6	; 0x06
    45dc:	9a 83       	std	Y+2, r25	; 0x02
    45de:	89 83       	std	Y+1, r24	; 0x01
    45e0:	89 81       	ldd	r24, Y+1	; 0x01
    45e2:	9a 81       	ldd	r25, Y+2	; 0x02
    45e4:	01 97       	sbiw	r24, 0x01	; 1
    45e6:	f1 f7       	brne	.-4      	; 0x45e4 <ServoMotor_voidClockWiseSlow+0x1ca>
    45e8:	9a 83       	std	Y+2, r25	; 0x02
    45ea:	89 83       	std	Y+1, r24	; 0x01
	u16 StartAnglePosition;
	u16 StopAnglePosition;

	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
	for (u16 i =StartAnglePosition ; i<=StopAnglePosition;i+=5){
    45ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ee:	98 89       	ldd	r25, Y+16	; 0x10
    45f0:	05 96       	adiw	r24, 0x05	; 5
    45f2:	98 8b       	std	Y+16, r25	; 0x10
    45f4:	8f 87       	std	Y+15, r24	; 0x0f
    45f6:	2f 85       	ldd	r18, Y+15	; 0x0f
    45f8:	38 89       	ldd	r19, Y+16	; 0x10
    45fa:	89 89       	ldd	r24, Y+17	; 0x11
    45fc:	9a 89       	ldd	r25, Y+18	; 0x12
    45fe:	82 17       	cp	r24, r18
    4600:	93 07       	cpc	r25, r19
    4602:	08 f0       	brcs	.+2      	; 0x4606 <ServoMotor_voidClockWiseSlow+0x1ec>
    4604:	7d cf       	rjmp	.-262    	; 0x4500 <ServoMotor_voidClockWiseSlow+0xe6>
		T1_voidFastPWMServoSetAngle(i);
		_delay_ms(10);
	}
}
    4606:	66 96       	adiw	r28, 0x16	; 22
    4608:	0f b6       	in	r0, 0x3f	; 63
    460a:	f8 94       	cli
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	0f be       	out	0x3f, r0	; 63
    4610:	cd bf       	out	0x3d, r28	; 61
    4612:	cf 91       	pop	r28
    4614:	df 91       	pop	r29
    4616:	08 95       	ret

00004618 <ServoMotor_voidAntiClockWiseSlow>:


void ServoMotor_voidAntiClockWiseSlow(u8 StartAngle,u8 StopAngle)
{
    4618:	df 93       	push	r29
    461a:	cf 93       	push	r28
    461c:	cd b7       	in	r28, 0x3d	; 61
    461e:	de b7       	in	r29, 0x3e	; 62
    4620:	66 97       	sbiw	r28, 0x16	; 22
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	f8 94       	cli
    4626:	de bf       	out	0x3e, r29	; 62
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	cd bf       	out	0x3d, r28	; 61
    462c:	8d 8b       	std	Y+21, r24	; 0x15
    462e:	6e 8b       	std	Y+22, r22	; 0x16
	u16 StartAnglePosition;
	u16 StopAnglePosition;
	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
    4630:	8d 89       	ldd	r24, Y+21	; 0x15
    4632:	88 2f       	mov	r24, r24
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	a0 e0       	ldi	r26, 0x00	; 0
    4638:	b0 e0       	ldi	r27, 0x00	; 0
    463a:	bc 01       	movw	r22, r24
    463c:	cd 01       	movw	r24, r26
    463e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4642:	dc 01       	movw	r26, r24
    4644:	cb 01       	movw	r24, r22
    4646:	bc 01       	movw	r22, r24
    4648:	cd 01       	movw	r24, r26
    464a:	20 e0       	ldi	r18, 0x00	; 0
    464c:	30 e0       	ldi	r19, 0x00	; 0
    464e:	44 e3       	ldi	r20, 0x34	; 52
    4650:	53 e4       	ldi	r21, 0x43	; 67
    4652:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4656:	dc 01       	movw	r26, r24
    4658:	cb 01       	movw	r24, r22
    465a:	bc 01       	movw	r22, r24
    465c:	cd 01       	movw	r24, r26
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	30 e0       	ldi	r19, 0x00	; 0
    4662:	4a e7       	ldi	r20, 0x7A	; 122
    4664:	54 e4       	ldi	r21, 0x44	; 68
    4666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466a:	dc 01       	movw	r26, r24
    466c:	cb 01       	movw	r24, r22
    466e:	bc 01       	movw	r22, r24
    4670:	cd 01       	movw	r24, r26
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	4a e7       	ldi	r20, 0x7A	; 122
    4678:	54 e4       	ldi	r21, 0x44	; 68
    467a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	9c 8b       	std	Y+20, r25	; 0x14
    4690:	8b 8b       	std	Y+19, r24	; 0x13
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
    4692:	8e 89       	ldd	r24, Y+22	; 0x16
    4694:	88 2f       	mov	r24, r24
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	a0 e0       	ldi	r26, 0x00	; 0
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	bc 01       	movw	r22, r24
    46aa:	cd 01       	movw	r24, r26
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	44 e3       	ldi	r20, 0x34	; 52
    46b2:	53 e4       	ldi	r21, 0x43	; 67
    46b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	bc 01       	movw	r22, r24
    46be:	cd 01       	movw	r24, r26
    46c0:	20 e0       	ldi	r18, 0x00	; 0
    46c2:	30 e0       	ldi	r19, 0x00	; 0
    46c4:	4a e7       	ldi	r20, 0x7A	; 122
    46c6:	54 e4       	ldi	r21, 0x44	; 68
    46c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	bc 01       	movw	r22, r24
    46d2:	cd 01       	movw	r24, r26
    46d4:	20 e0       	ldi	r18, 0x00	; 0
    46d6:	30 e0       	ldi	r19, 0x00	; 0
    46d8:	4a e7       	ldi	r20, 0x7A	; 122
    46da:	54 e4       	ldi	r21, 0x44	; 68
    46dc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    46e0:	dc 01       	movw	r26, r24
    46e2:	cb 01       	movw	r24, r22
    46e4:	bc 01       	movw	r22, r24
    46e6:	cd 01       	movw	r24, r26
    46e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ec:	dc 01       	movw	r26, r24
    46ee:	cb 01       	movw	r24, r22
    46f0:	9a 8b       	std	Y+18, r25	; 0x12
    46f2:	89 8b       	std	Y+17, r24	; 0x11
	for (u16 i =StartAnglePosition ; i>=StopAnglePosition ;i-=5){
    46f4:	8b 89       	ldd	r24, Y+19	; 0x13
    46f6:	9c 89       	ldd	r25, Y+20	; 0x14
    46f8:	98 8b       	std	Y+16, r25	; 0x10
    46fa:	8f 87       	std	Y+15, r24	; 0x0f
    46fc:	7b c0       	rjmp	.+246    	; 0x47f4 <ServoMotor_voidAntiClockWiseSlow+0x1dc>
		T1_voidFastPWMServoSetAngle(i);
    46fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4700:	98 89       	ldd	r25, Y+16	; 0x10
    4702:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <T1_voidFastPWMServoSetAngle>
    4706:	80 e0       	ldi	r24, 0x00	; 0
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	a0 e2       	ldi	r26, 0x20	; 32
    470c:	b1 e4       	ldi	r27, 0x41	; 65
    470e:	8b 87       	std	Y+11, r24	; 0x0b
    4710:	9c 87       	std	Y+12, r25	; 0x0c
    4712:	ad 87       	std	Y+13, r26	; 0x0d
    4714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4716:	6b 85       	ldd	r22, Y+11	; 0x0b
    4718:	7c 85       	ldd	r23, Y+12	; 0x0c
    471a:	8d 85       	ldd	r24, Y+13	; 0x0d
    471c:	9e 85       	ldd	r25, Y+14	; 0x0e
    471e:	20 e0       	ldi	r18, 0x00	; 0
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	4a ef       	ldi	r20, 0xFA	; 250
    4724:	54 e4       	ldi	r21, 0x44	; 68
    4726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	8f 83       	std	Y+7, r24	; 0x07
    4730:	98 87       	std	Y+8, r25	; 0x08
    4732:	a9 87       	std	Y+9, r26	; 0x09
    4734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4736:	6f 81       	ldd	r22, Y+7	; 0x07
    4738:	78 85       	ldd	r23, Y+8	; 0x08
    473a:	89 85       	ldd	r24, Y+9	; 0x09
    473c:	9a 85       	ldd	r25, Y+10	; 0x0a
    473e:	20 e0       	ldi	r18, 0x00	; 0
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	40 e8       	ldi	r20, 0x80	; 128
    4744:	5f e3       	ldi	r21, 0x3F	; 63
    4746:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    474a:	88 23       	and	r24, r24
    474c:	2c f4       	brge	.+10     	; 0x4758 <ServoMotor_voidAntiClockWiseSlow+0x140>
		__ticks = 1;
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	90 e0       	ldi	r25, 0x00	; 0
    4752:	9e 83       	std	Y+6, r25	; 0x06
    4754:	8d 83       	std	Y+5, r24	; 0x05
    4756:	3f c0       	rjmp	.+126    	; 0x47d6 <ServoMotor_voidAntiClockWiseSlow+0x1be>
	else if (__tmp > 65535)
    4758:	6f 81       	ldd	r22, Y+7	; 0x07
    475a:	78 85       	ldd	r23, Y+8	; 0x08
    475c:	89 85       	ldd	r24, Y+9	; 0x09
    475e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4760:	20 e0       	ldi	r18, 0x00	; 0
    4762:	3f ef       	ldi	r19, 0xFF	; 255
    4764:	4f e7       	ldi	r20, 0x7F	; 127
    4766:	57 e4       	ldi	r21, 0x47	; 71
    4768:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    476c:	18 16       	cp	r1, r24
    476e:	4c f5       	brge	.+82     	; 0x47c2 <ServoMotor_voidAntiClockWiseSlow+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4770:	6b 85       	ldd	r22, Y+11	; 0x0b
    4772:	7c 85       	ldd	r23, Y+12	; 0x0c
    4774:	8d 85       	ldd	r24, Y+13	; 0x0d
    4776:	9e 85       	ldd	r25, Y+14	; 0x0e
    4778:	20 e0       	ldi	r18, 0x00	; 0
    477a:	30 e0       	ldi	r19, 0x00	; 0
    477c:	40 e2       	ldi	r20, 0x20	; 32
    477e:	51 e4       	ldi	r21, 0x41	; 65
    4780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4784:	dc 01       	movw	r26, r24
    4786:	cb 01       	movw	r24, r22
    4788:	bc 01       	movw	r22, r24
    478a:	cd 01       	movw	r24, r26
    478c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4790:	dc 01       	movw	r26, r24
    4792:	cb 01       	movw	r24, r22
    4794:	9e 83       	std	Y+6, r25	; 0x06
    4796:	8d 83       	std	Y+5, r24	; 0x05
    4798:	0f c0       	rjmp	.+30     	; 0x47b8 <ServoMotor_voidAntiClockWiseSlow+0x1a0>
    479a:	88 ec       	ldi	r24, 0xC8	; 200
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	9c 83       	std	Y+4, r25	; 0x04
    47a0:	8b 83       	std	Y+3, r24	; 0x03
    47a2:	8b 81       	ldd	r24, Y+3	; 0x03
    47a4:	9c 81       	ldd	r25, Y+4	; 0x04
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	f1 f7       	brne	.-4      	; 0x47a6 <ServoMotor_voidAntiClockWiseSlow+0x18e>
    47aa:	9c 83       	std	Y+4, r25	; 0x04
    47ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ae:	8d 81       	ldd	r24, Y+5	; 0x05
    47b0:	9e 81       	ldd	r25, Y+6	; 0x06
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	9e 83       	std	Y+6, r25	; 0x06
    47b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ba:	9e 81       	ldd	r25, Y+6	; 0x06
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	69 f7       	brne	.-38     	; 0x479a <ServoMotor_voidAntiClockWiseSlow+0x182>
    47c0:	14 c0       	rjmp	.+40     	; 0x47ea <ServoMotor_voidAntiClockWiseSlow+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c2:	6f 81       	ldd	r22, Y+7	; 0x07
    47c4:	78 85       	ldd	r23, Y+8	; 0x08
    47c6:	89 85       	ldd	r24, Y+9	; 0x09
    47c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47ce:	dc 01       	movw	r26, r24
    47d0:	cb 01       	movw	r24, r22
    47d2:	9e 83       	std	Y+6, r25	; 0x06
    47d4:	8d 83       	std	Y+5, r24	; 0x05
    47d6:	8d 81       	ldd	r24, Y+5	; 0x05
    47d8:	9e 81       	ldd	r25, Y+6	; 0x06
    47da:	9a 83       	std	Y+2, r25	; 0x02
    47dc:	89 83       	std	Y+1, r24	; 0x01
    47de:	89 81       	ldd	r24, Y+1	; 0x01
    47e0:	9a 81       	ldd	r25, Y+2	; 0x02
    47e2:	01 97       	sbiw	r24, 0x01	; 1
    47e4:	f1 f7       	brne	.-4      	; 0x47e2 <ServoMotor_voidAntiClockWiseSlow+0x1ca>
    47e6:	9a 83       	std	Y+2, r25	; 0x02
    47e8:	89 83       	std	Y+1, r24	; 0x01
{
	u16 StartAnglePosition;
	u16 StopAnglePosition;
	StartAnglePosition=1000 + ((f32)((f32)StartAngle/MaxAngle))*1000;
	StopAnglePosition=1000 + ((f32)((f32)StopAngle/MaxAngle))*1000;
	for (u16 i =StartAnglePosition ; i>=StopAnglePosition ;i-=5){
    47ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ec:	98 89       	ldd	r25, Y+16	; 0x10
    47ee:	05 97       	sbiw	r24, 0x05	; 5
    47f0:	98 8b       	std	Y+16, r25	; 0x10
    47f2:	8f 87       	std	Y+15, r24	; 0x0f
    47f4:	2f 85       	ldd	r18, Y+15	; 0x0f
    47f6:	38 89       	ldd	r19, Y+16	; 0x10
    47f8:	89 89       	ldd	r24, Y+17	; 0x11
    47fa:	9a 89       	ldd	r25, Y+18	; 0x12
    47fc:	28 17       	cp	r18, r24
    47fe:	39 07       	cpc	r19, r25
    4800:	08 f0       	brcs	.+2      	; 0x4804 <ServoMotor_voidAntiClockWiseSlow+0x1ec>
    4802:	7d cf       	rjmp	.-262    	; 0x46fe <ServoMotor_voidAntiClockWiseSlow+0xe6>
		T1_voidFastPWMServoSetAngle(i);
		_delay_ms(10);
	}
}
    4804:	66 96       	adiw	r28, 0x16	; 22
    4806:	0f b6       	in	r0, 0x3f	; 63
    4808:	f8 94       	cli
    480a:	de bf       	out	0x3e, r29	; 62
    480c:	0f be       	out	0x3f, r0	; 63
    480e:	cd bf       	out	0x3d, r28	; 61
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	08 95       	ret

00004816 <LED_voidInit>:
 */

#include "Led_Interface.h"
#include <util/delay.h>
void LED_voidInit (u8 Group, u8 pin)
{
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	00 d0       	rcall	.+0      	; 0x481c <LED_voidInit+0x6>
    481c:	cd b7       	in	r28, 0x3d	; 61
    481e:	de b7       	in	r29, 0x3e	; 62
    4820:	89 83       	std	Y+1, r24	; 0x01
    4822:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group, pin, Output);
    4824:	89 81       	ldd	r24, Y+1	; 0x01
    4826:	6a 81       	ldd	r22, Y+2	; 0x02
    4828:	41 e0       	ldi	r20, 0x01	; 1
    482a:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    482e:	0f 90       	pop	r0
    4830:	0f 90       	pop	r0
    4832:	cf 91       	pop	r28
    4834:	df 91       	pop	r29
    4836:	08 95       	ret

00004838 <LED_voidOn>:

void LED_voidOn (u8 Group, u8 pin)
{
    4838:	df 93       	push	r29
    483a:	cf 93       	push	r28
    483c:	00 d0       	rcall	.+0      	; 0x483e <LED_voidOn+0x6>
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	89 83       	std	Y+1, r24	; 0x01
    4844:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, High);
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	6a 81       	ldd	r22, Y+2	; 0x02
    484a:	41 e0       	ldi	r20, 0x01	; 1
    484c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	cf 91       	pop	r28
    4856:	df 91       	pop	r29
    4858:	08 95       	ret

0000485a <LED_voidOff>:

void LED_voidOff (u8 Group, u8 pin)
{
    485a:	df 93       	push	r29
    485c:	cf 93       	push	r28
    485e:	00 d0       	rcall	.+0      	; 0x4860 <LED_voidOff+0x6>
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	89 83       	std	Y+1, r24	; 0x01
    4866:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, Low);
    4868:	89 81       	ldd	r24, Y+1	; 0x01
    486a:	6a 81       	ldd	r22, Y+2	; 0x02
    486c:	40 e0       	ldi	r20, 0x00	; 0
    486e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    4872:	0f 90       	pop	r0
    4874:	0f 90       	pop	r0
    4876:	cf 91       	pop	r28
    4878:	df 91       	pop	r29
    487a:	08 95       	ret

0000487c <LED_voidToggle>:

void LED_voidToggle (u8 Group, u8 pin)
{
    487c:	df 93       	push	r29
    487e:	cf 93       	push	r28
    4880:	00 d0       	rcall	.+0      	; 0x4882 <LED_voidToggle+0x6>
    4882:	cd b7       	in	r28, 0x3d	; 61
    4884:	de b7       	in	r29, 0x3e	; 62
    4886:	89 83       	std	Y+1, r24	; 0x01
    4888:	6a 83       	std	Y+2, r22	; 0x02
	if (DIO_u8ReadPinValue(Group,pin)==High)
    488a:	89 81       	ldd	r24, Y+1	; 0x01
    488c:	6a 81       	ldd	r22, Y+2	; 0x02
    488e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
    4892:	81 30       	cpi	r24, 0x01	; 1
    4894:	29 f4       	brne	.+10     	; 0x48a0 <LED_voidToggle+0x24>
	{
		LED_voidOff(Group,pin);
    4896:	89 81       	ldd	r24, Y+1	; 0x01
    4898:	6a 81       	ldd	r22, Y+2	; 0x02
    489a:	0e 94 2d 24 	call	0x485a	; 0x485a <LED_voidOff>
    489e:	04 c0       	rjmp	.+8      	; 0x48a8 <LED_voidToggle+0x2c>
	}
	else
	{
		LED_voidOn(Group,pin);
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	6a 81       	ldd	r22, Y+2	; 0x02
    48a4:	0e 94 1c 24 	call	0x4838	; 0x4838 <LED_voidOn>
	}

}
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	cf 91       	pop	r28
    48ae:	df 91       	pop	r29
    48b0:	08 95       	ret

000048b2 <LCD_voidSendCommand>:
#include <util/delay.h>
#include "../../MCAL/DIO/DIO_Interface.h"
#include "Lcd_Interface.h"

void LCD_voidSendCommand(u8 command)
{
    48b2:	df 93       	push	r29
    48b4:	cf 93       	push	r28
    48b6:	0f 92       	push	r0
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    48bc:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	60 e0       	ldi	r22, 0x00	; 0
    48c2:	40 e0       	ldi	r20, 0x00	; 0
    48c4:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    48c8:	81 e0       	ldi	r24, 0x01	; 1
    48ca:	61 e0       	ldi	r22, 0x01	; 1
    48cc:	40 e0       	ldi	r20, 0x00	; 0
    48ce:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    48d2:	81 e0       	ldi	r24, 0x01	; 1
    48d4:	62 e0       	ldi	r22, 0x02	; 2
    48d6:	41 e0       	ldi	r20, 0x01	; 1
    48d8:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//Send Command
		DIO_voidSetPortValue(Lcd_DCGroup,command);
    48dc:	83 e0       	ldi	r24, 0x03	; 3
    48de:	69 81       	ldd	r22, Y+1	; 0x01
    48e0:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    48e4:	81 e0       	ldi	r24, 0x01	; 1
    48e6:	62 e0       	ldi	r22, 0x02	; 2
    48e8:	40 e0       	ldi	r20, 0x00	; 0
    48ea:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Lcd_DCGroup,Lcd_D7,get_bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
#endif

}
    48ee:	0f 90       	pop	r0
    48f0:	cf 91       	pop	r28
    48f2:	df 91       	pop	r29
    48f4:	08 95       	ret

000048f6 <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    48f6:	df 93       	push	r29
    48f8:	cf 93       	push	r28
    48fa:	0f 92       	push	r0
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	60 e0       	ldi	r22, 0x00	; 0
    4906:	41 e0       	ldi	r20, 0x01	; 1
    4908:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	61 e0       	ldi	r22, 0x01	; 1
    4910:	40 e0       	ldi	r20, 0x00	; 0
    4912:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    4916:	81 e0       	ldi	r24, 0x01	; 1
    4918:	62 e0       	ldi	r22, 0x02	; 2
    491a:	41 e0       	ldi	r20, 0x01	; 1
    491c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//Send Data
		DIO_voidSetPortValue(Lcd_DCGroup,data);
    4920:	83 e0       	ldi	r24, 0x03	; 3
    4922:	69 81       	ldd	r22, Y+1	; 0x01
    4924:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	62 e0       	ldi	r22, 0x02	; 2
    492c:	40 e0       	ldi	r20, 0x00	; 0
    492e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);

#endif

}
    4932:	0f 90       	pop	r0
    4934:	cf 91       	pop	r28
    4936:	df 91       	pop	r29
    4938:	08 95       	ret

0000493a <LCD_voidInit>:


void LCD_voidInit()
{
    493a:	df 93       	push	r29
    493c:	cf 93       	push	r28
    493e:	cd b7       	in	r28, 0x3d	; 61
    4940:	de b7       	in	r29, 0x3e	; 62
    4942:	e8 97       	sbiw	r28, 0x38	; 56
    4944:	0f b6       	in	r0, 0x3f	; 63
    4946:	f8 94       	cli
    4948:	de bf       	out	0x3e, r29	; 62
    494a:	0f be       	out	0x3f, r0	; 63
    494c:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	41 e0       	ldi	r20, 0x01	; 1
    4954:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	61 e0       	ldi	r22, 0x01	; 1
    495c:	41 e0       	ldi	r20, 0x01	; 1
    495e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    4962:	81 e0       	ldi	r24, 0x01	; 1
    4964:	62 e0       	ldi	r22, 0x02	; 2
    4966:	41 e0       	ldi	r20, 0x01	; 1
    4968:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    496c:	83 e0       	ldi	r24, 0x03	; 3
    496e:	6f ef       	ldi	r22, 0xFF	; 255
    4970:	0e 94 3f 19 	call	0x327e	; 0x327e <DIO_voidSetPortDir>
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	ac e0       	ldi	r26, 0x0C	; 12
    497a:	b2 e4       	ldi	r27, 0x42	; 66
    497c:	8d ab       	std	Y+53, r24	; 0x35
    497e:	9e ab       	std	Y+54, r25	; 0x36
    4980:	af ab       	std	Y+55, r26	; 0x37
    4982:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4984:	6d a9       	ldd	r22, Y+53	; 0x35
    4986:	7e a9       	ldd	r23, Y+54	; 0x36
    4988:	8f a9       	ldd	r24, Y+55	; 0x37
    498a:	98 ad       	ldd	r25, Y+56	; 0x38
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a ef       	ldi	r20, 0xFA	; 250
    4992:	54 e4       	ldi	r21, 0x44	; 68
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	89 ab       	std	Y+49, r24	; 0x31
    499e:	9a ab       	std	Y+50, r25	; 0x32
    49a0:	ab ab       	std	Y+51, r26	; 0x33
    49a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    49a4:	69 a9       	ldd	r22, Y+49	; 0x31
    49a6:	7a a9       	ldd	r23, Y+50	; 0x32
    49a8:	8b a9       	ldd	r24, Y+51	; 0x33
    49aa:	9c a9       	ldd	r25, Y+52	; 0x34
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e8       	ldi	r20, 0x80	; 128
    49b2:	5f e3       	ldi	r21, 0x3F	; 63
    49b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    49b8:	88 23       	and	r24, r24
    49ba:	2c f4       	brge	.+10     	; 0x49c6 <LCD_voidInit+0x8c>
		__ticks = 1;
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	98 ab       	std	Y+48, r25	; 0x30
    49c2:	8f a7       	std	Y+47, r24	; 0x2f
    49c4:	3f c0       	rjmp	.+126    	; 0x4a44 <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    49c6:	69 a9       	ldd	r22, Y+49	; 0x31
    49c8:	7a a9       	ldd	r23, Y+50	; 0x32
    49ca:	8b a9       	ldd	r24, Y+51	; 0x33
    49cc:	9c a9       	ldd	r25, Y+52	; 0x34
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	3f ef       	ldi	r19, 0xFF	; 255
    49d2:	4f e7       	ldi	r20, 0x7F	; 127
    49d4:	57 e4       	ldi	r21, 0x47	; 71
    49d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49da:	18 16       	cp	r1, r24
    49dc:	4c f5       	brge	.+82     	; 0x4a30 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49de:	6d a9       	ldd	r22, Y+53	; 0x35
    49e0:	7e a9       	ldd	r23, Y+54	; 0x36
    49e2:	8f a9       	ldd	r24, Y+55	; 0x37
    49e4:	98 ad       	ldd	r25, Y+56	; 0x38
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e2       	ldi	r20, 0x20	; 32
    49ec:	51 e4       	ldi	r21, 0x41	; 65
    49ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	98 ab       	std	Y+48, r25	; 0x30
    4a04:	8f a7       	std	Y+47, r24	; 0x2f
    4a06:	0f c0       	rjmp	.+30     	; 0x4a26 <LCD_voidInit+0xec>
    4a08:	88 ec       	ldi	r24, 0xC8	; 200
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	9e a7       	std	Y+46, r25	; 0x2e
    4a0e:	8d a7       	std	Y+45, r24	; 0x2d
    4a10:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a12:	9e a5       	ldd	r25, Y+46	; 0x2e
    4a14:	01 97       	sbiw	r24, 0x01	; 1
    4a16:	f1 f7       	brne	.-4      	; 0x4a14 <LCD_voidInit+0xda>
    4a18:	9e a7       	std	Y+46, r25	; 0x2e
    4a1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	98 ab       	std	Y+48, r25	; 0x30
    4a24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a26:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a28:	98 a9       	ldd	r25, Y+48	; 0x30
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	69 f7       	brne	.-38     	; 0x4a08 <LCD_voidInit+0xce>
    4a2e:	14 c0       	rjmp	.+40     	; 0x4a58 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a30:	69 a9       	ldd	r22, Y+49	; 0x31
    4a32:	7a a9       	ldd	r23, Y+50	; 0x32
    4a34:	8b a9       	ldd	r24, Y+51	; 0x33
    4a36:	9c a9       	ldd	r25, Y+52	; 0x34
    4a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	98 ab       	std	Y+48, r25	; 0x30
    4a42:	8f a7       	std	Y+47, r24	; 0x2f
    4a44:	8f a5       	ldd	r24, Y+47	; 0x2f
    4a46:	98 a9       	ldd	r25, Y+48	; 0x30
    4a48:	9c a7       	std	Y+44, r25	; 0x2c
    4a4a:	8b a7       	std	Y+43, r24	; 0x2b
    4a4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4a4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <LCD_voidInit+0x116>
    4a54:	9c a7       	std	Y+44, r25	; 0x2c
    4a56:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    4a58:	88 e3       	ldi	r24, 0x38	; 56
    4a5a:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	a0 e8       	ldi	r26, 0x80	; 128
    4a64:	bf e3       	ldi	r27, 0x3F	; 63
    4a66:	8f a3       	std	Y+39, r24	; 0x27
    4a68:	98 a7       	std	Y+40, r25	; 0x28
    4a6a:	a9 a7       	std	Y+41, r26	; 0x29
    4a6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a6e:	6f a1       	ldd	r22, Y+39	; 0x27
    4a70:	78 a5       	ldd	r23, Y+40	; 0x28
    4a72:	89 a5       	ldd	r24, Y+41	; 0x29
    4a74:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a76:	20 e0       	ldi	r18, 0x00	; 0
    4a78:	30 e0       	ldi	r19, 0x00	; 0
    4a7a:	4a ef       	ldi	r20, 0xFA	; 250
    4a7c:	54 e4       	ldi	r21, 0x44	; 68
    4a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a82:	dc 01       	movw	r26, r24
    4a84:	cb 01       	movw	r24, r22
    4a86:	8b a3       	std	Y+35, r24	; 0x23
    4a88:	9c a3       	std	Y+36, r25	; 0x24
    4a8a:	ad a3       	std	Y+37, r26	; 0x25
    4a8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a8e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a90:	7c a1       	ldd	r23, Y+36	; 0x24
    4a92:	8d a1       	ldd	r24, Y+37	; 0x25
    4a94:	9e a1       	ldd	r25, Y+38	; 0x26
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e8       	ldi	r20, 0x80	; 128
    4a9c:	5f e3       	ldi	r21, 0x3F	; 63
    4a9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aa2:	88 23       	and	r24, r24
    4aa4:	2c f4       	brge	.+10     	; 0x4ab0 <LCD_voidInit+0x176>
		__ticks = 1;
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	9a a3       	std	Y+34, r25	; 0x22
    4aac:	89 a3       	std	Y+33, r24	; 0x21
    4aae:	3f c0       	rjmp	.+126    	; 0x4b2e <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    4ab0:	6b a1       	ldd	r22, Y+35	; 0x23
    4ab2:	7c a1       	ldd	r23, Y+36	; 0x24
    4ab4:	8d a1       	ldd	r24, Y+37	; 0x25
    4ab6:	9e a1       	ldd	r25, Y+38	; 0x26
    4ab8:	20 e0       	ldi	r18, 0x00	; 0
    4aba:	3f ef       	ldi	r19, 0xFF	; 255
    4abc:	4f e7       	ldi	r20, 0x7F	; 127
    4abe:	57 e4       	ldi	r21, 0x47	; 71
    4ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ac4:	18 16       	cp	r1, r24
    4ac6:	4c f5       	brge	.+82     	; 0x4b1a <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ac8:	6f a1       	ldd	r22, Y+39	; 0x27
    4aca:	78 a5       	ldd	r23, Y+40	; 0x28
    4acc:	89 a5       	ldd	r24, Y+41	; 0x29
    4ace:	9a a5       	ldd	r25, Y+42	; 0x2a
    4ad0:	20 e0       	ldi	r18, 0x00	; 0
    4ad2:	30 e0       	ldi	r19, 0x00	; 0
    4ad4:	40 e2       	ldi	r20, 0x20	; 32
    4ad6:	51 e4       	ldi	r21, 0x41	; 65
    4ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	bc 01       	movw	r22, r24
    4ae2:	cd 01       	movw	r24, r26
    4ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	9a a3       	std	Y+34, r25	; 0x22
    4aee:	89 a3       	std	Y+33, r24	; 0x21
    4af0:	0f c0       	rjmp	.+30     	; 0x4b10 <LCD_voidInit+0x1d6>
    4af2:	88 ec       	ldi	r24, 0xC8	; 200
    4af4:	90 e0       	ldi	r25, 0x00	; 0
    4af6:	98 a3       	std	Y+32, r25	; 0x20
    4af8:	8f 8f       	std	Y+31, r24	; 0x1f
    4afa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4afc:	98 a1       	ldd	r25, Y+32	; 0x20
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	f1 f7       	brne	.-4      	; 0x4afe <LCD_voidInit+0x1c4>
    4b02:	98 a3       	std	Y+32, r25	; 0x20
    4b04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b06:	89 a1       	ldd	r24, Y+33	; 0x21
    4b08:	9a a1       	ldd	r25, Y+34	; 0x22
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	9a a3       	std	Y+34, r25	; 0x22
    4b0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b10:	89 a1       	ldd	r24, Y+33	; 0x21
    4b12:	9a a1       	ldd	r25, Y+34	; 0x22
    4b14:	00 97       	sbiw	r24, 0x00	; 0
    4b16:	69 f7       	brne	.-38     	; 0x4af2 <LCD_voidInit+0x1b8>
    4b18:	14 c0       	rjmp	.+40     	; 0x4b42 <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b1a:	6b a1       	ldd	r22, Y+35	; 0x23
    4b1c:	7c a1       	ldd	r23, Y+36	; 0x24
    4b1e:	8d a1       	ldd	r24, Y+37	; 0x25
    4b20:	9e a1       	ldd	r25, Y+38	; 0x26
    4b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b26:	dc 01       	movw	r26, r24
    4b28:	cb 01       	movw	r24, r22
    4b2a:	9a a3       	std	Y+34, r25	; 0x22
    4b2c:	89 a3       	std	Y+33, r24	; 0x21
    4b2e:	89 a1       	ldd	r24, Y+33	; 0x21
    4b30:	9a a1       	ldd	r25, Y+34	; 0x22
    4b32:	9e 8f       	std	Y+30, r25	; 0x1e
    4b34:	8d 8f       	std	Y+29, r24	; 0x1d
    4b36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b3a:	01 97       	sbiw	r24, 0x01	; 1
    4b3c:	f1 f7       	brne	.-4      	; 0x4b3a <LCD_voidInit+0x200>
    4b3e:	9e 8f       	std	Y+30, r25	; 0x1e
    4b40:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    4b42:	8f e0       	ldi	r24, 0x0F	; 15
    4b44:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
    4b48:	80 e0       	ldi	r24, 0x00	; 0
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	a0 e8       	ldi	r26, 0x80	; 128
    4b4e:	bf e3       	ldi	r27, 0x3F	; 63
    4b50:	89 8f       	std	Y+25, r24	; 0x19
    4b52:	9a 8f       	std	Y+26, r25	; 0x1a
    4b54:	ab 8f       	std	Y+27, r26	; 0x1b
    4b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b58:	69 8d       	ldd	r22, Y+25	; 0x19
    4b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b60:	20 e0       	ldi	r18, 0x00	; 0
    4b62:	30 e0       	ldi	r19, 0x00	; 0
    4b64:	4a ef       	ldi	r20, 0xFA	; 250
    4b66:	54 e4       	ldi	r21, 0x44	; 68
    4b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	8d 8b       	std	Y+21, r24	; 0x15
    4b72:	9e 8b       	std	Y+22, r25	; 0x16
    4b74:	af 8b       	std	Y+23, r26	; 0x17
    4b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b78:	6d 89       	ldd	r22, Y+21	; 0x15
    4b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    4b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    4b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e8       	ldi	r20, 0x80	; 128
    4b86:	5f e3       	ldi	r21, 0x3F	; 63
    4b88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b8c:	88 23       	and	r24, r24
    4b8e:	2c f4       	brge	.+10     	; 0x4b9a <LCD_voidInit+0x260>
		__ticks = 1;
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	9c 8b       	std	Y+20, r25	; 0x14
    4b96:	8b 8b       	std	Y+19, r24	; 0x13
    4b98:	3f c0       	rjmp	.+126    	; 0x4c18 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    4b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    4b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    4b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    4ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ba2:	20 e0       	ldi	r18, 0x00	; 0
    4ba4:	3f ef       	ldi	r19, 0xFF	; 255
    4ba6:	4f e7       	ldi	r20, 0x7F	; 127
    4ba8:	57 e4       	ldi	r21, 0x47	; 71
    4baa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bae:	18 16       	cp	r1, r24
    4bb0:	4c f5       	brge	.+82     	; 0x4c04 <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    4bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4bba:	20 e0       	ldi	r18, 0x00	; 0
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	40 e2       	ldi	r20, 0x20	; 32
    4bc0:	51 e4       	ldi	r21, 0x41	; 65
    4bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc6:	dc 01       	movw	r26, r24
    4bc8:	cb 01       	movw	r24, r22
    4bca:	bc 01       	movw	r22, r24
    4bcc:	cd 01       	movw	r24, r26
    4bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd2:	dc 01       	movw	r26, r24
    4bd4:	cb 01       	movw	r24, r22
    4bd6:	9c 8b       	std	Y+20, r25	; 0x14
    4bd8:	8b 8b       	std	Y+19, r24	; 0x13
    4bda:	0f c0       	rjmp	.+30     	; 0x4bfa <LCD_voidInit+0x2c0>
    4bdc:	88 ec       	ldi	r24, 0xC8	; 200
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	9a 8b       	std	Y+18, r25	; 0x12
    4be2:	89 8b       	std	Y+17, r24	; 0x11
    4be4:	89 89       	ldd	r24, Y+17	; 0x11
    4be6:	9a 89       	ldd	r25, Y+18	; 0x12
    4be8:	01 97       	sbiw	r24, 0x01	; 1
    4bea:	f1 f7       	brne	.-4      	; 0x4be8 <LCD_voidInit+0x2ae>
    4bec:	9a 8b       	std	Y+18, r25	; 0x12
    4bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf4:	01 97       	sbiw	r24, 0x01	; 1
    4bf6:	9c 8b       	std	Y+20, r25	; 0x14
    4bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    4bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	69 f7       	brne	.-38     	; 0x4bdc <LCD_voidInit+0x2a2>
    4c02:	14 c0       	rjmp	.+40     	; 0x4c2c <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c04:	6d 89       	ldd	r22, Y+21	; 0x15
    4c06:	7e 89       	ldd	r23, Y+22	; 0x16
    4c08:	8f 89       	ldd	r24, Y+23	; 0x17
    4c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    4c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22
    4c14:	9c 8b       	std	Y+20, r25	; 0x14
    4c16:	8b 8b       	std	Y+19, r24	; 0x13
    4c18:	8b 89       	ldd	r24, Y+19	; 0x13
    4c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    4c1c:	98 8b       	std	Y+16, r25	; 0x10
    4c1e:	8f 87       	std	Y+15, r24	; 0x0f
    4c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c22:	98 89       	ldd	r25, Y+16	; 0x10
    4c24:	01 97       	sbiw	r24, 0x01	; 1
    4c26:	f1 f7       	brne	.-4      	; 0x4c24 <LCD_voidInit+0x2ea>
    4c28:	98 8b       	std	Y+16, r25	; 0x10
    4c2a:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	b0 e4       	ldi	r27, 0x40	; 64
    4c3a:	8b 87       	std	Y+11, r24	; 0x0b
    4c3c:	9c 87       	std	Y+12, r25	; 0x0c
    4c3e:	ad 87       	std	Y+13, r26	; 0x0d
    4c40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c42:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c44:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c46:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c48:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c4a:	20 e0       	ldi	r18, 0x00	; 0
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	4a ef       	ldi	r20, 0xFA	; 250
    4c50:	54 e4       	ldi	r21, 0x44	; 68
    4c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c56:	dc 01       	movw	r26, r24
    4c58:	cb 01       	movw	r24, r22
    4c5a:	8f 83       	std	Y+7, r24	; 0x07
    4c5c:	98 87       	std	Y+8, r25	; 0x08
    4c5e:	a9 87       	std	Y+9, r26	; 0x09
    4c60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c62:	6f 81       	ldd	r22, Y+7	; 0x07
    4c64:	78 85       	ldd	r23, Y+8	; 0x08
    4c66:	89 85       	ldd	r24, Y+9	; 0x09
    4c68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6a:	20 e0       	ldi	r18, 0x00	; 0
    4c6c:	30 e0       	ldi	r19, 0x00	; 0
    4c6e:	40 e8       	ldi	r20, 0x80	; 128
    4c70:	5f e3       	ldi	r21, 0x3F	; 63
    4c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c76:	88 23       	and	r24, r24
    4c78:	2c f4       	brge	.+10     	; 0x4c84 <LCD_voidInit+0x34a>
		__ticks = 1;
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	9e 83       	std	Y+6, r25	; 0x06
    4c80:	8d 83       	std	Y+5, r24	; 0x05
    4c82:	3f c0       	rjmp	.+126    	; 0x4d02 <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    4c84:	6f 81       	ldd	r22, Y+7	; 0x07
    4c86:	78 85       	ldd	r23, Y+8	; 0x08
    4c88:	89 85       	ldd	r24, Y+9	; 0x09
    4c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8c:	20 e0       	ldi	r18, 0x00	; 0
    4c8e:	3f ef       	ldi	r19, 0xFF	; 255
    4c90:	4f e7       	ldi	r20, 0x7F	; 127
    4c92:	57 e4       	ldi	r21, 0x47	; 71
    4c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c98:	18 16       	cp	r1, r24
    4c9a:	4c f5       	brge	.+82     	; 0x4cee <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	40 e2       	ldi	r20, 0x20	; 32
    4caa:	51 e4       	ldi	r21, 0x41	; 65
    4cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb0:	dc 01       	movw	r26, r24
    4cb2:	cb 01       	movw	r24, r22
    4cb4:	bc 01       	movw	r22, r24
    4cb6:	cd 01       	movw	r24, r26
    4cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	9e 83       	std	Y+6, r25	; 0x06
    4cc2:	8d 83       	std	Y+5, r24	; 0x05
    4cc4:	0f c0       	rjmp	.+30     	; 0x4ce4 <LCD_voidInit+0x3aa>
    4cc6:	88 ec       	ldi	r24, 0xC8	; 200
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	9c 83       	std	Y+4, r25	; 0x04
    4ccc:	8b 83       	std	Y+3, r24	; 0x03
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    4cd2:	01 97       	sbiw	r24, 0x01	; 1
    4cd4:	f1 f7       	brne	.-4      	; 0x4cd2 <LCD_voidInit+0x398>
    4cd6:	9c 83       	std	Y+4, r25	; 0x04
    4cd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cda:	8d 81       	ldd	r24, Y+5	; 0x05
    4cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cde:	01 97       	sbiw	r24, 0x01	; 1
    4ce0:	9e 83       	std	Y+6, r25	; 0x06
    4ce2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	69 f7       	brne	.-38     	; 0x4cc6 <LCD_voidInit+0x38c>
    4cec:	14 c0       	rjmp	.+40     	; 0x4d16 <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cee:	6f 81       	ldd	r22, Y+7	; 0x07
    4cf0:	78 85       	ldd	r23, Y+8	; 0x08
    4cf2:	89 85       	ldd	r24, Y+9	; 0x09
    4cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	cb 01       	movw	r24, r22
    4cfe:	9e 83       	std	Y+6, r25	; 0x06
    4d00:	8d 83       	std	Y+5, r24	; 0x05
    4d02:	8d 81       	ldd	r24, Y+5	; 0x05
    4d04:	9e 81       	ldd	r25, Y+6	; 0x06
    4d06:	9a 83       	std	Y+2, r25	; 0x02
    4d08:	89 83       	std	Y+1, r24	; 0x01
    4d0a:	89 81       	ldd	r24, Y+1	; 0x01
    4d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0e:	01 97       	sbiw	r24, 0x01	; 1
    4d10:	f1 f7       	brne	.-4      	; 0x4d0e <LCD_voidInit+0x3d4>
    4d12:	9a 83       	std	Y+2, r25	; 0x02
    4d14:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    4d16:	86 e0       	ldi	r24, 0x06	; 6
    4d18:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    4d1c:	e8 96       	adiw	r28, 0x38	; 56
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	f8 94       	cli
    4d22:	de bf       	out	0x3e, r29	; 62
    4d24:	0f be       	out	0x3f, r0	; 63
    4d26:	cd bf       	out	0x3d, r28	; 61
    4d28:	cf 91       	pop	r28
    4d2a:	df 91       	pop	r29
    4d2c:	08 95       	ret

00004d2e <LCD_voidSendString>:


void LCD_voidSendString(u8 String[])
{
    4d2e:	df 93       	push	r29
    4d30:	cf 93       	push	r28
    4d32:	00 d0       	rcall	.+0      	; 0x4d34 <LCD_voidSendString+0x6>
    4d34:	0f 92       	push	r0
    4d36:	cd b7       	in	r28, 0x3d	; 61
    4d38:	de b7       	in	r29, 0x3e	; 62
    4d3a:	9b 83       	std	Y+3, r25	; 0x03
    4d3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    4d3e:	19 82       	std	Y+1, r1	; 0x01
    4d40:	0e c0       	rjmp	.+28     	; 0x4d5e <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    4d42:	89 81       	ldd	r24, Y+1	; 0x01
    4d44:	28 2f       	mov	r18, r24
    4d46:	30 e0       	ldi	r19, 0x00	; 0
    4d48:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4c:	fc 01       	movw	r30, r24
    4d4e:	e2 0f       	add	r30, r18
    4d50:	f3 1f       	adc	r31, r19
    4d52:	80 81       	ld	r24, Z
    4d54:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <LCD_voidSendData>
		i++;
    4d58:	89 81       	ldd	r24, Y+1	; 0x01
    4d5a:	8f 5f       	subi	r24, 0xFF	; 255
    4d5c:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 String[])
{
	u8 i = 0 ;
	while(String[i]!='\0')
    4d5e:	89 81       	ldd	r24, Y+1	; 0x01
    4d60:	28 2f       	mov	r18, r24
    4d62:	30 e0       	ldi	r19, 0x00	; 0
    4d64:	8a 81       	ldd	r24, Y+2	; 0x02
    4d66:	9b 81       	ldd	r25, Y+3	; 0x03
    4d68:	fc 01       	movw	r30, r24
    4d6a:	e2 0f       	add	r30, r18
    4d6c:	f3 1f       	adc	r31, r19
    4d6e:	80 81       	ld	r24, Z
    4d70:	88 23       	and	r24, r24
    4d72:	39 f7       	brne	.-50     	; 0x4d42 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    4d74:	0f 90       	pop	r0
    4d76:	0f 90       	pop	r0
    4d78:	0f 90       	pop	r0
    4d7a:	cf 91       	pop	r28
    4d7c:	df 91       	pop	r29
    4d7e:	08 95       	ret

00004d80 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    4d80:	df 93       	push	r29
    4d82:	cf 93       	push	r28
    4d84:	00 d0       	rcall	.+0      	; 0x4d86 <LCD_voidSetPos+0x6>
    4d86:	0f 92       	push	r0
    4d88:	cd b7       	in	r28, 0x3d	; 61
    4d8a:	de b7       	in	r29, 0x3e	; 62
    4d8c:	8a 83       	std	Y+2, r24	; 0x02
    4d8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    4d90:	8a 81       	ldd	r24, Y+2	; 0x02
    4d92:	88 23       	and	r24, r24
    4d94:	19 f4       	brne	.+6      	; 0x4d9c <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    4d96:	8b 81       	ldd	r24, Y+3	; 0x03
    4d98:	89 83       	std	Y+1, r24	; 0x01
    4d9a:	06 c0       	rjmp	.+12     	; 0x4da8 <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    4d9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d9e:	81 30       	cpi	r24, 0x01	; 1
    4da0:	19 f4       	brne	.+6      	; 0x4da8 <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    4da2:	8b 81       	ldd	r24, Y+3	; 0x03
    4da4:	80 5c       	subi	r24, 0xC0	; 192
    4da6:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	80 68       	ori	r24, 0x80	; 128
    4dac:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
}
    4db0:	0f 90       	pop	r0
    4db2:	0f 90       	pop	r0
    4db4:	0f 90       	pop	r0
    4db6:	cf 91       	pop	r28
    4db8:	df 91       	pop	r29
    4dba:	08 95       	ret

00004dbc <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    4dbc:	df 93       	push	r29
    4dbe:	cf 93       	push	r28
    4dc0:	cd b7       	in	r28, 0x3d	; 61
    4dc2:	de b7       	in	r29, 0x3e	; 62
    4dc4:	27 97       	sbiw	r28, 0x07	; 7
    4dc6:	0f b6       	in	r0, 0x3f	; 63
    4dc8:	f8 94       	cli
    4dca:	de bf       	out	0x3e, r29	; 62
    4dcc:	0f be       	out	0x3f, r0	; 63
    4dce:	cd bf       	out	0x3d, r28	; 61
    4dd0:	8b 83       	std	Y+3, r24	; 0x03
    4dd2:	7d 83       	std	Y+5, r23	; 0x05
    4dd4:	6c 83       	std	Y+4, r22	; 0x04
    4dd6:	4e 83       	std	Y+6, r20	; 0x06
    4dd8:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    4dda:	8b 81       	ldd	r24, Y+3	; 0x03
    4ddc:	88 2f       	mov	r24, r24
    4dde:	90 e0       	ldi	r25, 0x00	; 0
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	88 0f       	add	r24, r24
    4de6:	99 1f       	adc	r25, r25
    4de8:	88 0f       	add	r24, r24
    4dea:	99 1f       	adc	r25, r25
    4dec:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    4dee:	8a 81       	ldd	r24, Y+2	; 0x02
    4df0:	80 64       	ori	r24, 0x40	; 64
    4df2:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    4df6:	19 82       	std	Y+1, r1	; 0x01
    4df8:	0e c0       	rjmp	.+28     	; 0x4e16 <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    4dfa:	89 81       	ldd	r24, Y+1	; 0x01
    4dfc:	28 2f       	mov	r18, r24
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	8c 81       	ldd	r24, Y+4	; 0x04
    4e02:	9d 81       	ldd	r25, Y+5	; 0x05
    4e04:	fc 01       	movw	r30, r24
    4e06:	e2 0f       	add	r30, r18
    4e08:	f3 1f       	adc	r31, r19
    4e0a:	80 81       	ld	r24, Z
    4e0c:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    4e10:	89 81       	ldd	r24, Y+1	; 0x01
    4e12:	8f 5f       	subi	r24, 0xFF	; 255
    4e14:	89 83       	std	Y+1, r24	; 0x01
    4e16:	89 81       	ldd	r24, Y+1	; 0x01
    4e18:	88 30       	cpi	r24, 0x08	; 8
    4e1a:	78 f3       	brcs	.-34     	; 0x4dfa <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    4e1c:	8e 81       	ldd	r24, Y+6	; 0x06
    4e1e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e20:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    4e24:	8b 81       	ldd	r24, Y+3	; 0x03
    4e26:	0e 94 7b 24 	call	0x48f6	; 0x48f6 <LCD_voidSendData>
}
    4e2a:	27 96       	adiw	r28, 0x07	; 7
    4e2c:	0f b6       	in	r0, 0x3f	; 63
    4e2e:	f8 94       	cli
    4e30:	de bf       	out	0x3e, r29	; 62
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	cd bf       	out	0x3d, r28	; 61
    4e36:	cf 91       	pop	r28
    4e38:	df 91       	pop	r29
    4e3a:	08 95       	ret

00004e3c <LCD_voidClear>:

void LCD_voidClear()
{
    4e3c:	df 93       	push	r29
    4e3e:	cf 93       	push	r28
    4e40:	cd b7       	in	r28, 0x3d	; 61
    4e42:	de b7       	in	r29, 0x3e	; 62
    4e44:	2e 97       	sbiw	r28, 0x0e	; 14
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	f8 94       	cli
    4e4a:	de bf       	out	0x3e, r29	; 62
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4e50:	81 e0       	ldi	r24, 0x01	; 1
    4e52:	0e 94 59 24 	call	0x48b2	; 0x48b2 <LCD_voidSendCommand>
    4e56:	80 e0       	ldi	r24, 0x00	; 0
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	a0 e0       	ldi	r26, 0x00	; 0
    4e5c:	b0 e4       	ldi	r27, 0x40	; 64
    4e5e:	8b 87       	std	Y+11, r24	; 0x0b
    4e60:	9c 87       	std	Y+12, r25	; 0x0c
    4e62:	ad 87       	std	Y+13, r26	; 0x0d
    4e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e6e:	20 e0       	ldi	r18, 0x00	; 0
    4e70:	30 e0       	ldi	r19, 0x00	; 0
    4e72:	4a ef       	ldi	r20, 0xFA	; 250
    4e74:	54 e4       	ldi	r21, 0x44	; 68
    4e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e7a:	dc 01       	movw	r26, r24
    4e7c:	cb 01       	movw	r24, r22
    4e7e:	8f 83       	std	Y+7, r24	; 0x07
    4e80:	98 87       	std	Y+8, r25	; 0x08
    4e82:	a9 87       	std	Y+9, r26	; 0x09
    4e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e86:	6f 81       	ldd	r22, Y+7	; 0x07
    4e88:	78 85       	ldd	r23, Y+8	; 0x08
    4e8a:	89 85       	ldd	r24, Y+9	; 0x09
    4e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	40 e8       	ldi	r20, 0x80	; 128
    4e94:	5f e3       	ldi	r21, 0x3F	; 63
    4e96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e9a:	88 23       	and	r24, r24
    4e9c:	2c f4       	brge	.+10     	; 0x4ea8 <LCD_voidClear+0x6c>
		__ticks = 1;
    4e9e:	81 e0       	ldi	r24, 0x01	; 1
    4ea0:	90 e0       	ldi	r25, 0x00	; 0
    4ea2:	9e 83       	std	Y+6, r25	; 0x06
    4ea4:	8d 83       	std	Y+5, r24	; 0x05
    4ea6:	3f c0       	rjmp	.+126    	; 0x4f26 <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    4ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    4eaa:	78 85       	ldd	r23, Y+8	; 0x08
    4eac:	89 85       	ldd	r24, Y+9	; 0x09
    4eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    4eb0:	20 e0       	ldi	r18, 0x00	; 0
    4eb2:	3f ef       	ldi	r19, 0xFF	; 255
    4eb4:	4f e7       	ldi	r20, 0x7F	; 127
    4eb6:	57 e4       	ldi	r21, 0x47	; 71
    4eb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ebc:	18 16       	cp	r1, r24
    4ebe:	4c f5       	brge	.+82     	; 0x4f12 <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ec8:	20 e0       	ldi	r18, 0x00	; 0
    4eca:	30 e0       	ldi	r19, 0x00	; 0
    4ecc:	40 e2       	ldi	r20, 0x20	; 32
    4ece:	51 e4       	ldi	r21, 0x41	; 65
    4ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	bc 01       	movw	r22, r24
    4eda:	cd 01       	movw	r24, r26
    4edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ee0:	dc 01       	movw	r26, r24
    4ee2:	cb 01       	movw	r24, r22
    4ee4:	9e 83       	std	Y+6, r25	; 0x06
    4ee6:	8d 83       	std	Y+5, r24	; 0x05
    4ee8:	0f c0       	rjmp	.+30     	; 0x4f08 <LCD_voidClear+0xcc>
    4eea:	88 ec       	ldi	r24, 0xC8	; 200
    4eec:	90 e0       	ldi	r25, 0x00	; 0
    4eee:	9c 83       	std	Y+4, r25	; 0x04
    4ef0:	8b 83       	std	Y+3, r24	; 0x03
    4ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	f1 f7       	brne	.-4      	; 0x4ef6 <LCD_voidClear+0xba>
    4efa:	9c 83       	std	Y+4, r25	; 0x04
    4efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4efe:	8d 81       	ldd	r24, Y+5	; 0x05
    4f00:	9e 81       	ldd	r25, Y+6	; 0x06
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	9e 83       	std	Y+6, r25	; 0x06
    4f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f08:	8d 81       	ldd	r24, Y+5	; 0x05
    4f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0c:	00 97       	sbiw	r24, 0x00	; 0
    4f0e:	69 f7       	brne	.-38     	; 0x4eea <LCD_voidClear+0xae>
    4f10:	14 c0       	rjmp	.+40     	; 0x4f3a <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f12:	6f 81       	ldd	r22, Y+7	; 0x07
    4f14:	78 85       	ldd	r23, Y+8	; 0x08
    4f16:	89 85       	ldd	r24, Y+9	; 0x09
    4f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	9e 83       	std	Y+6, r25	; 0x06
    4f24:	8d 83       	std	Y+5, r24	; 0x05
    4f26:	8d 81       	ldd	r24, Y+5	; 0x05
    4f28:	9e 81       	ldd	r25, Y+6	; 0x06
    4f2a:	9a 83       	std	Y+2, r25	; 0x02
    4f2c:	89 83       	std	Y+1, r24	; 0x01
    4f2e:	89 81       	ldd	r24, Y+1	; 0x01
    4f30:	9a 81       	ldd	r25, Y+2	; 0x02
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <LCD_voidClear+0xf6>
    4f36:	9a 83       	std	Y+2, r25	; 0x02
    4f38:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    4f3a:	2e 96       	adiw	r28, 0x0e	; 14
    4f3c:	0f b6       	in	r0, 0x3f	; 63
    4f3e:	f8 94       	cli
    4f40:	de bf       	out	0x3e, r29	; 62
    4f42:	0f be       	out	0x3f, r0	; 63
    4f44:	cd bf       	out	0x3d, r28	; 61
    4f46:	cf 91       	pop	r28
    4f48:	df 91       	pop	r29
    4f4a:	08 95       	ret

00004f4c <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    4f4c:	0f 93       	push	r16
    4f4e:	1f 93       	push	r17
    4f50:	df 93       	push	r29
    4f52:	cf 93       	push	r28
    4f54:	cd b7       	in	r28, 0x3d	; 61
    4f56:	de b7       	in	r29, 0x3e	; 62
    4f58:	a0 97       	sbiw	r28, 0x20	; 32
    4f5a:	0f b6       	in	r0, 0x3f	; 63
    4f5c:	f8 94       	cli
    4f5e:	de bf       	out	0x3e, r29	; 62
    4f60:	0f be       	out	0x3f, r0	; 63
    4f62:	cd bf       	out	0x3d, r28	; 61
    4f64:	6d 8f       	std	Y+29, r22	; 0x1d
    4f66:	7e 8f       	std	Y+30, r23	; 0x1e
    4f68:	8f 8f       	std	Y+31, r24	; 0x1f
    4f6a:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    4f6c:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    4f6e:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    4f70:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    4f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f76:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f78:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f7a:	bb 23       	and	r27, r27
    4f7c:	c4 f4       	brge	.+48     	; 0x4fae <LCD_voidSendNumber+0x62>
        num = -num;
    4f7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f82:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f84:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f86:	b0 95       	com	r27
    4f88:	a0 95       	com	r26
    4f8a:	90 95       	com	r25
    4f8c:	81 95       	neg	r24
    4f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    4f90:	af 4f       	sbci	r26, 0xFF	; 255
    4f92:	bf 4f       	sbci	r27, 0xFF	; 255
    4f94:	8d 8f       	std	Y+29, r24	; 0x1d
    4f96:	9e 8f       	std	Y+30, r25	; 0x1e
    4f98:	af 8f       	std	Y+31, r26	; 0x1f
    4f9a:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    4fa4:	8d e2       	ldi	r24, 0x2D	; 45
    4fa6:	89 87       	std	Y+9, r24	; 0x09
        length++;
    4fa8:	8f 81       	ldd	r24, Y+7	; 0x07
    4faa:	8f 5f       	subi	r24, 0xFF	; 255
    4fac:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    4fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fb2:	af 8d       	ldd	r26, Y+31	; 0x1f
    4fb4:	b8 a1       	ldd	r27, Y+32	; 0x20
    4fb6:	89 83       	std	Y+1, r24	; 0x01
    4fb8:	9a 83       	std	Y+2, r25	; 0x02
    4fba:	ab 83       	std	Y+3, r26	; 0x03
    4fbc:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    4fbe:	89 81       	ldd	r24, Y+1	; 0x01
    4fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fc2:	ab 81       	ldd	r26, Y+3	; 0x03
    4fc4:	bc 81       	ldd	r27, Y+4	; 0x04
    4fc6:	2a e0       	ldi	r18, 0x0A	; 10
    4fc8:	30 e0       	ldi	r19, 0x00	; 0
    4fca:	40 e0       	ldi	r20, 0x00	; 0
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	0e 94 83 2b 	call	0x5706	; 0x5706 <__udivmodsi4>
    4fd6:	da 01       	movw	r26, r20
    4fd8:	c9 01       	movw	r24, r18
    4fda:	89 83       	std	Y+1, r24	; 0x01
    4fdc:	9a 83       	std	Y+2, r25	; 0x02
    4fde:	ab 83       	std	Y+3, r26	; 0x03
    4fe0:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    4fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    4fe4:	8f 5f       	subi	r24, 0xFF	; 255
    4fe6:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    4fe8:	89 81       	ldd	r24, Y+1	; 0x01
    4fea:	9a 81       	ldd	r25, Y+2	; 0x02
    4fec:	ab 81       	ldd	r26, Y+3	; 0x03
    4fee:	bc 81       	ldd	r27, Y+4	; 0x04
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	a1 05       	cpc	r26, r1
    4ff4:	b1 05       	cpc	r27, r1
    4ff6:	19 f7       	brne	.-58     	; 0x4fbe <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    4ff8:	8f 81       	ldd	r24, Y+7	; 0x07
    4ffa:	81 50       	subi	r24, 0x01	; 1
    4ffc:	88 87       	std	Y+8, r24	; 0x08
    4ffe:	30 c0       	rjmp	.+96     	; 0x5060 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    5000:	88 85       	ldd	r24, Y+8	; 0x08
    5002:	08 2f       	mov	r16, r24
    5004:	11 27       	eor	r17, r17
    5006:	07 fd       	sbrc	r16, 7
    5008:	10 95       	com	r17
    500a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    500c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    500e:	af 8d       	ldd	r26, Y+31	; 0x1f
    5010:	b8 a1       	ldd	r27, Y+32	; 0x20
    5012:	2a e0       	ldi	r18, 0x0A	; 10
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	40 e0       	ldi	r20, 0x00	; 0
    5018:	50 e0       	ldi	r21, 0x00	; 0
    501a:	bc 01       	movw	r22, r24
    501c:	cd 01       	movw	r24, r26
    501e:	0e 94 a5 2b 	call	0x574a	; 0x574a <__divmodsi4>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	28 2f       	mov	r18, r24
    5028:	20 5d       	subi	r18, 0xD0	; 208
    502a:	ce 01       	movw	r24, r28
    502c:	09 96       	adiw	r24, 0x09	; 9
    502e:	fc 01       	movw	r30, r24
    5030:	e0 0f       	add	r30, r16
    5032:	f1 1f       	adc	r31, r17
    5034:	20 83       	st	Z, r18
        num /= 10;
    5036:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5038:	9e 8d       	ldd	r25, Y+30	; 0x1e
    503a:	af 8d       	ldd	r26, Y+31	; 0x1f
    503c:	b8 a1       	ldd	r27, Y+32	; 0x20
    503e:	2a e0       	ldi	r18, 0x0A	; 10
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	40 e0       	ldi	r20, 0x00	; 0
    5044:	50 e0       	ldi	r21, 0x00	; 0
    5046:	bc 01       	movw	r22, r24
    5048:	cd 01       	movw	r24, r26
    504a:	0e 94 a5 2b 	call	0x574a	; 0x574a <__divmodsi4>
    504e:	da 01       	movw	r26, r20
    5050:	c9 01       	movw	r24, r18
    5052:	8d 8f       	std	Y+29, r24	; 0x1d
    5054:	9e 8f       	std	Y+30, r25	; 0x1e
    5056:	af 8f       	std	Y+31, r26	; 0x1f
    5058:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    505a:	88 85       	ldd	r24, Y+8	; 0x08
    505c:	81 50       	subi	r24, 0x01	; 1
    505e:	88 87       	std	Y+8, r24	; 0x08
    5060:	88 85       	ldd	r24, Y+8	; 0x08
    5062:	28 2f       	mov	r18, r24
    5064:	33 27       	eor	r19, r19
    5066:	27 fd       	sbrc	r18, 7
    5068:	30 95       	com	r19
    506a:	8e 81       	ldd	r24, Y+6	; 0x06
    506c:	88 2f       	mov	r24, r24
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	28 17       	cp	r18, r24
    5072:	39 07       	cpc	r19, r25
    5074:	2c f6       	brge	.-118    	; 0x5000 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    5076:	8f 81       	ldd	r24, Y+7	; 0x07
    5078:	28 2f       	mov	r18, r24
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	ce 01       	movw	r24, r28
    507e:	09 96       	adiw	r24, 0x09	; 9
    5080:	fc 01       	movw	r30, r24
    5082:	e2 0f       	add	r30, r18
    5084:	f3 1f       	adc	r31, r19
    5086:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    5088:	ce 01       	movw	r24, r28
    508a:	09 96       	adiw	r24, 0x09	; 9
    508c:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <LCD_voidSendString>
}
    5090:	a0 96       	adiw	r28, 0x20	; 32
    5092:	0f b6       	in	r0, 0x3f	; 63
    5094:	f8 94       	cli
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	cd bf       	out	0x3d, r28	; 61
    509c:	cf 91       	pop	r28
    509e:	df 91       	pop	r29
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	08 95       	ret

000050a6 <LM35_voidInit>:

#include "LM35_Interface.h"
#include <util/delay.h>
#include "LM35_Config.h"
void LM35_voidInit()
{
    50a6:	df 93       	push	r29
    50a8:	cf 93       	push	r28
    50aa:	cd b7       	in	r28, 0x3d	; 61
    50ac:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LM35Group,LM35Pin,Input);
    50ae:	81 e0       	ldi	r24, 0x01	; 1
    50b0:	63 e0       	ldi	r22, 0x03	; 3
    50b2:	40 e0       	ldi	r20, 0x00	; 0
    50b4:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    50b8:	cf 91       	pop	r28
    50ba:	df 91       	pop	r29
    50bc:	08 95       	ret

000050be <LM35_voidRead>:

void LM35_voidRead(u16 *temp)
{
    50be:	df 93       	push	r29
    50c0:	cf 93       	push	r28
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <LM35_voidRead+0x6>
    50c4:	cd b7       	in	r28, 0x3d	; 61
    50c6:	de b7       	in	r29, 0x3e	; 62
    50c8:	9a 83       	std	Y+2, r25	; 0x02
    50ca:	89 83       	std	Y+1, r24	; 0x01
	ADC_voidReadResultPolling(LM35Pin,temp);
    50cc:	29 81       	ldd	r18, Y+1	; 0x01
    50ce:	3a 81       	ldd	r19, Y+2	; 0x02
    50d0:	83 e0       	ldi	r24, 0x03	; 3
    50d2:	b9 01       	movw	r22, r18
    50d4:	0e 94 b3 1a 	call	0x3566	; 0x3566 <ADC_voidReadResultPolling>
	*temp=((u32)(*temp)*ADCRefmV)/DACRes; //convert ot equevilant mV
    50d8:	e9 81       	ldd	r30, Y+1	; 0x01
    50da:	fa 81       	ldd	r31, Y+2	; 0x02
    50dc:	80 81       	ld	r24, Z
    50de:	91 81       	ldd	r25, Z+1	; 0x01
    50e0:	cc 01       	movw	r24, r24
    50e2:	a0 e0       	ldi	r26, 0x00	; 0
    50e4:	b0 e0       	ldi	r27, 0x00	; 0
    50e6:	28 e8       	ldi	r18, 0x88	; 136
    50e8:	33 e1       	ldi	r19, 0x13	; 19
    50ea:	40 e0       	ldi	r20, 0x00	; 0
    50ec:	50 e0       	ldi	r21, 0x00	; 0
    50ee:	bc 01       	movw	r22, r24
    50f0:	cd 01       	movw	r24, r26
    50f2:	0e 94 3d 2b 	call	0x567a	; 0x567a <__mulsi3>
    50f6:	dc 01       	movw	r26, r24
    50f8:	cb 01       	movw	r24, r22
    50fa:	07 2e       	mov	r0, r23
    50fc:	7a e0       	ldi	r23, 0x0A	; 10
    50fe:	b6 95       	lsr	r27
    5100:	a7 95       	ror	r26
    5102:	97 95       	ror	r25
    5104:	87 95       	ror	r24
    5106:	7a 95       	dec	r23
    5108:	d1 f7       	brne	.-12     	; 0x50fe <LM35_voidRead+0x40>
    510a:	70 2d       	mov	r23, r0
    510c:	e9 81       	ldd	r30, Y+1	; 0x01
    510e:	fa 81       	ldd	r31, Y+2	; 0x02
    5110:	91 83       	std	Z+1, r25	; 0x01
    5112:	80 83       	st	Z, r24
	*temp= (*temp)/10.00;
    5114:	e9 81       	ldd	r30, Y+1	; 0x01
    5116:	fa 81       	ldd	r31, Y+2	; 0x02
    5118:	80 81       	ld	r24, Z
    511a:	91 81       	ldd	r25, Z+1	; 0x01
    511c:	cc 01       	movw	r24, r24
    511e:	a0 e0       	ldi	r26, 0x00	; 0
    5120:	b0 e0       	ldi	r27, 0x00	; 0
    5122:	bc 01       	movw	r22, r24
    5124:	cd 01       	movw	r24, r26
    5126:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    512a:	dc 01       	movw	r26, r24
    512c:	cb 01       	movw	r24, r22
    512e:	bc 01       	movw	r22, r24
    5130:	cd 01       	movw	r24, r26
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	40 e2       	ldi	r20, 0x20	; 32
    5138:	51 e4       	ldi	r21, 0x41	; 65
    513a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    513e:	dc 01       	movw	r26, r24
    5140:	cb 01       	movw	r24, r22
    5142:	bc 01       	movw	r22, r24
    5144:	cd 01       	movw	r24, r26
    5146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514a:	dc 01       	movw	r26, r24
    514c:	cb 01       	movw	r24, r22
    514e:	e9 81       	ldd	r30, Y+1	; 0x01
    5150:	fa 81       	ldd	r31, Y+2	; 0x02
    5152:	91 83       	std	Z+1, r25	; 0x01
    5154:	80 83       	st	Z, r24
}
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	cf 91       	pop	r28
    515c:	df 91       	pop	r29
    515e:	08 95       	ret

00005160 <LDR_voidInit>:
 */

#include "LDR_Interface.h"

void LDR_voidInit()
{
    5160:	df 93       	push	r29
    5162:	cf 93       	push	r28
    5164:	00 d0       	rcall	.+0      	; 0x5166 <LDR_voidInit+0x6>
    5166:	0f 92       	push	r0
    5168:	cd b7       	in	r28, 0x3d	; 61
    516a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LDRGroup,LDRPin,Input);
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	64 e0       	ldi	r22, 0x04	; 4
    5170:	40 e0       	ldi	r20, 0x00	; 0
    5172:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	ADCInformation ADCInformationLDR;
	ADCInformationLDR.AutoTriggerState=LDR_ADC_AutoTriggerState;
    5176:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationLDR.TriggerSource=LDR_ADC_TriggerSource;
    5178:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationLDR.DivisionFactor=LDR_ADC_DivisionFactor;
    517a:	83 e0       	ldi	r24, 0x03	; 3
    517c:	8b 83       	std	Y+3, r24	; 0x03
#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
    517e:	69 81       	ldd	r22, Y+1	; 0x01
    5180:	7a 81       	ldd	r23, Y+2	; 0x02
    5182:	8b 81       	ldd	r24, Y+3	; 0x03
    5184:	0e 94 48 1a 	call	0x3490	; 0x3490 <ADC_voidInitPolling>
#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	cf 91       	pop	r28
    5190:	df 91       	pop	r29
    5192:	08 95       	ret

00005194 <LDR_voidRead>:

void LDR_voidRead(u16 *Light)
{
    5194:	df 93       	push	r29
    5196:	cf 93       	push	r28
    5198:	00 d0       	rcall	.+0      	; 0x519a <LDR_voidRead+0x6>
    519a:	cd b7       	in	r28, 0x3d	; 61
    519c:	de b7       	in	r29, 0x3e	; 62
    519e:	9a 83       	std	Y+2, r25	; 0x02
    51a0:	89 83       	std	Y+1, r24	; 0x01
#if LDRMode==Polling
	ADC_voidReadResultPolling(LDRPin,Light);
    51a2:	29 81       	ldd	r18, Y+1	; 0x01
    51a4:	3a 81       	ldd	r19, Y+2	; 0x02
    51a6:	84 e0       	ldi	r24, 0x04	; 4
    51a8:	b9 01       	movw	r22, r18
    51aa:	0e 94 b3 1a 	call	0x3566	; 0x3566 <ADC_voidReadResultPolling>
	*Light=((u32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV
    51ae:	e9 81       	ldd	r30, Y+1	; 0x01
    51b0:	fa 81       	ldd	r31, Y+2	; 0x02
    51b2:	80 81       	ld	r24, Z
    51b4:	91 81       	ldd	r25, Z+1	; 0x01
    51b6:	cc 01       	movw	r24, r24
    51b8:	a0 e0       	ldi	r26, 0x00	; 0
    51ba:	b0 e0       	ldi	r27, 0x00	; 0
    51bc:	28 e8       	ldi	r18, 0x88	; 136
    51be:	33 e1       	ldi	r19, 0x13	; 19
    51c0:	40 e0       	ldi	r20, 0x00	; 0
    51c2:	50 e0       	ldi	r21, 0x00	; 0
    51c4:	bc 01       	movw	r22, r24
    51c6:	cd 01       	movw	r24, r26
    51c8:	0e 94 3d 2b 	call	0x567a	; 0x567a <__mulsi3>
    51cc:	dc 01       	movw	r26, r24
    51ce:	cb 01       	movw	r24, r22
    51d0:	07 2e       	mov	r0, r23
    51d2:	7a e0       	ldi	r23, 0x0A	; 10
    51d4:	b6 95       	lsr	r27
    51d6:	a7 95       	ror	r26
    51d8:	97 95       	ror	r25
    51da:	87 95       	ror	r24
    51dc:	7a 95       	dec	r23
    51de:	d1 f7       	brne	.-12     	; 0x51d4 <LDR_voidRead+0x40>
    51e0:	70 2d       	mov	r23, r0
    51e2:	e9 81       	ldd	r30, Y+1	; 0x01
    51e4:	fa 81       	ldd	r31, Y+2	; 0x02
    51e6:	91 83       	std	Z+1, r25	; 0x01
    51e8:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    51ea:	0f 90       	pop	r0
    51ec:	0f 90       	pop	r0
    51ee:	cf 91       	pop	r28
    51f0:	df 91       	pop	r29
    51f2:	08 95       	ret

000051f4 <KEYPAD_voidInit>:
#include "Keypad_Interface.h"
#include "../../Common/definition.h"
u8 keypad_value1[Row][Column]= KEYPAD_ARR1;
u8 keypad_value2[Row][Column]=KEYPAD_ARR2;
void KEYPAD_voidInit()
{
    51f4:	df 93       	push	r29
    51f6:	cf 93       	push	r28
    51f8:	cd b7       	in	r28, 0x3d	; 61
    51fa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(KeypadGroup,0xF0);
    51fc:	84 e0       	ldi	r24, 0x04	; 4
    51fe:	60 ef       	ldi	r22, 0xF0	; 240
    5200:	0e 94 3f 19 	call	0x327e	; 0x327e <DIO_voidSetPortDir>
	DIO_voidSetPortValue(KeypadGroup,0xFF);
    5204:	84 e0       	ldi	r24, 0x04	; 4
    5206:	6f ef       	ldi	r22, 0xFF	; 255
    5208:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
}
    520c:	cf 91       	pop	r28
    520e:	df 91       	pop	r29
    5210:	08 95       	ret

00005212 <KEYPAD_u8GetValue1>:

u8 KEYPAD_u8GetValue1()
{
    5212:	df 93       	push	r29
    5214:	cf 93       	push	r28
    5216:	00 d0       	rcall	.+0      	; 0x5218 <KEYPAD_u8GetValue1+0x6>
    5218:	0f 92       	push	r0
    521a:	cd b7       	in	r28, 0x3d	; 61
    521c:	de b7       	in	r29, 0x3e	; 62
	u8 C , R ;
	for(C=0;C<Column;C++)
    521e:	1a 82       	std	Y+2, r1	; 0x02
    5220:	38 c0       	rjmp	.+112    	; 0x5292 <KEYPAD_u8GetValue1+0x80>
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
    5222:	84 e0       	ldi	r24, 0x04	; 4
    5224:	6f ef       	ldi	r22, 0xFF	; 255
    5226:	0e 94 87 19 	call	0x330e	; 0x330e <DIO_voidSetPortValue>
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    522a:	8a 81       	ldd	r24, Y+2	; 0x02
    522c:	98 2f       	mov	r25, r24
    522e:	9c 5f       	subi	r25, 0xFC	; 252
    5230:	84 e0       	ldi	r24, 0x04	; 4
    5232:	69 2f       	mov	r22, r25
    5234:	40 e0       	ldi	r20, 0x00	; 0
    5236:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    523a:	19 82       	std	Y+1, r1	; 0x01
    523c:	1c c0       	rjmp	.+56     	; 0x5276 <KEYPAD_u8GetValue1+0x64>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    523e:	84 e0       	ldi	r24, 0x04	; 4
    5240:	69 81       	ldd	r22, Y+1	; 0x01
    5242:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
    5246:	88 23       	and	r24, r24
    5248:	99 f4       	brne	.+38     	; 0x5270 <KEYPAD_u8GetValue1+0x5e>
			{
				return keypad_value1[R][C];
    524a:	89 81       	ldd	r24, Y+1	; 0x01
    524c:	48 2f       	mov	r20, r24
    524e:	50 e0       	ldi	r21, 0x00	; 0
    5250:	8a 81       	ldd	r24, Y+2	; 0x02
    5252:	28 2f       	mov	r18, r24
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	ca 01       	movw	r24, r20
    5258:	88 0f       	add	r24, r24
    525a:	99 1f       	adc	r25, r25
    525c:	88 0f       	add	r24, r24
    525e:	99 1f       	adc	r25, r25
    5260:	82 0f       	add	r24, r18
    5262:	93 1f       	adc	r25, r19
    5264:	fc 01       	movw	r30, r24
    5266:	ee 58       	subi	r30, 0x8E	; 142
    5268:	fe 4f       	sbci	r31, 0xFE	; 254
    526a:	80 81       	ld	r24, Z
    526c:	8b 83       	std	Y+3, r24	; 0x03
    526e:	16 c0       	rjmp	.+44     	; 0x529c <KEYPAD_u8GetValue1+0x8a>
	u8 C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    5270:	89 81       	ldd	r24, Y+1	; 0x01
    5272:	8f 5f       	subi	r24, 0xFF	; 255
    5274:	89 83       	std	Y+1, r24	; 0x01
    5276:	89 81       	ldd	r24, Y+1	; 0x01
    5278:	84 30       	cpi	r24, 0x04	; 4
    527a:	08 f3       	brcs	.-62     	; 0x523e <KEYPAD_u8GetValue1+0x2c>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
    527c:	8a 81       	ldd	r24, Y+2	; 0x02
    527e:	98 2f       	mov	r25, r24
    5280:	9c 5f       	subi	r25, 0xFC	; 252
    5282:	84 e0       	ldi	r24, 0x04	; 4
    5284:	69 2f       	mov	r22, r25
    5286:	41 e0       	ldi	r20, 0x01	; 1
    5288:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}

u8 KEYPAD_u8GetValue1()
{
	u8 C , R ;
	for(C=0;C<Column;C++)
    528c:	8a 81       	ldd	r24, Y+2	; 0x02
    528e:	8f 5f       	subi	r24, 0xFF	; 255
    5290:	8a 83       	std	Y+2, r24	; 0x02
    5292:	8a 81       	ldd	r24, Y+2	; 0x02
    5294:	84 30       	cpi	r24, 0x04	; 4
    5296:	28 f2       	brcs	.-118    	; 0x5222 <KEYPAD_u8GetValue1+0x10>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
	}
	return Unpressed ;
    5298:	8f ef       	ldi	r24, 0xFF	; 255
    529a:	8b 83       	std	Y+3, r24	; 0x03
    529c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	0f 90       	pop	r0
    52a4:	cf 91       	pop	r28
    52a6:	df 91       	pop	r29
    52a8:	08 95       	ret

000052aa <KEYPAD_charGetValue2>:

char KEYPAD_charGetValue2()
{
    52aa:	df 93       	push	r29
    52ac:	cf 93       	push	r28
    52ae:	00 d0       	rcall	.+0      	; 0x52b0 <KEYPAD_charGetValue2+0x6>
    52b0:	00 d0       	rcall	.+0      	; 0x52b2 <KEYPAD_charGetValue2+0x8>
    52b2:	0f 92       	push	r0
    52b4:	cd b7       	in	r28, 0x3d	; 61
    52b6:	de b7       	in	r29, 0x3e	; 62
	int C , R ;
	for(C=0;C<Column;C++)
    52b8:	1c 82       	std	Y+4, r1	; 0x04
    52ba:	1b 82       	std	Y+3, r1	; 0x03
    52bc:	39 c0       	rjmp	.+114    	; 0x5330 <KEYPAD_charGetValue2+0x86>
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    52be:	8b 81       	ldd	r24, Y+3	; 0x03
    52c0:	98 2f       	mov	r25, r24
    52c2:	9c 5f       	subi	r25, 0xFC	; 252
    52c4:	84 e0       	ldi	r24, 0x04	; 4
    52c6:	69 2f       	mov	r22, r25
    52c8:	40 e0       	ldi	r20, 0x00	; 0
    52ca:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    52ce:	1a 82       	std	Y+2, r1	; 0x02
    52d0:	19 82       	std	Y+1, r1	; 0x01
    52d2:	1c c0       	rjmp	.+56     	; 0x530c <KEYPAD_charGetValue2+0x62>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    52d4:	99 81       	ldd	r25, Y+1	; 0x01
    52d6:	84 e0       	ldi	r24, 0x04	; 4
    52d8:	69 2f       	mov	r22, r25
    52da:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
    52de:	88 23       	and	r24, r24
    52e0:	81 f4       	brne	.+32     	; 0x5302 <KEYPAD_charGetValue2+0x58>
			{
				return keypad_value1[R][C];
    52e2:	89 81       	ldd	r24, Y+1	; 0x01
    52e4:	9a 81       	ldd	r25, Y+2	; 0x02
    52e6:	2b 81       	ldd	r18, Y+3	; 0x03
    52e8:	3c 81       	ldd	r19, Y+4	; 0x04
    52ea:	88 0f       	add	r24, r24
    52ec:	99 1f       	adc	r25, r25
    52ee:	88 0f       	add	r24, r24
    52f0:	99 1f       	adc	r25, r25
    52f2:	82 0f       	add	r24, r18
    52f4:	93 1f       	adc	r25, r19
    52f6:	fc 01       	movw	r30, r24
    52f8:	ee 58       	subi	r30, 0x8E	; 142
    52fa:	fe 4f       	sbci	r31, 0xFE	; 254
    52fc:	80 81       	ld	r24, Z
    52fe:	8d 83       	std	Y+5, r24	; 0x05
    5300:	1e c0       	rjmp	.+60     	; 0x533e <KEYPAD_charGetValue2+0x94>
{
	int C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    5302:	89 81       	ldd	r24, Y+1	; 0x01
    5304:	9a 81       	ldd	r25, Y+2	; 0x02
    5306:	01 96       	adiw	r24, 0x01	; 1
    5308:	9a 83       	std	Y+2, r25	; 0x02
    530a:	89 83       	std	Y+1, r24	; 0x01
    530c:	89 81       	ldd	r24, Y+1	; 0x01
    530e:	9a 81       	ldd	r25, Y+2	; 0x02
    5310:	84 30       	cpi	r24, 0x04	; 4
    5312:	91 05       	cpc	r25, r1
    5314:	fc f2       	brlt	.-66     	; 0x52d4 <KEYPAD_charGetValue2+0x2a>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    5316:	8b 81       	ldd	r24, Y+3	; 0x03
    5318:	98 2f       	mov	r25, r24
    531a:	9c 5f       	subi	r25, 0xFC	; 252
    531c:	84 e0       	ldi	r24, 0x04	; 4
    531e:	69 2f       	mov	r22, r25
    5320:	40 e0       	ldi	r20, 0x00	; 0
    5322:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}

char KEYPAD_charGetValue2()
{
	int C , R ;
	for(C=0;C<Column;C++)
    5326:	8b 81       	ldd	r24, Y+3	; 0x03
    5328:	9c 81       	ldd	r25, Y+4	; 0x04
    532a:	01 96       	adiw	r24, 0x01	; 1
    532c:	9c 83       	std	Y+4, r25	; 0x04
    532e:	8b 83       	std	Y+3, r24	; 0x03
    5330:	8b 81       	ldd	r24, Y+3	; 0x03
    5332:	9c 81       	ldd	r25, Y+4	; 0x04
    5334:	84 30       	cpi	r24, 0x04	; 4
    5336:	91 05       	cpc	r25, r1
    5338:	14 f2       	brlt	.-124    	; 0x52be <KEYPAD_charGetValue2+0x14>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
	}
	return Unpressed ;
    533a:	8f ef       	ldi	r24, 0xFF	; 255
    533c:	8d 83       	std	Y+5, r24	; 0x05
    533e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5340:	0f 90       	pop	r0
    5342:	0f 90       	pop	r0
    5344:	0f 90       	pop	r0
    5346:	0f 90       	pop	r0
    5348:	0f 90       	pop	r0
    534a:	cf 91       	pop	r28
    534c:	df 91       	pop	r29
    534e:	08 95       	ret

00005350 <GasSensor_voidAnalogInit>:
 */

#include "GasSensor_Interface.h"

void GasSensor_voidAnalogInit()
{
    5350:	df 93       	push	r29
    5352:	cf 93       	push	r28
    5354:	00 d0       	rcall	.+0      	; 0x5356 <GasSensor_voidAnalogInit+0x6>
    5356:	0f 92       	push	r0
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	65 e0       	ldi	r22, 0x05	; 5
    5360:	40 e0       	ldi	r20, 0x00	; 0
    5362:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	ADCInformation ADCInformationGasSensor;
	ADCInformationGasSensor.AutoTriggerState=GasSensor_ADC_AutoTriggerState;
    5366:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationGasSensor.TriggerSource=GasSensor_ADC_TriggerSource;
    5368:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationGasSensor.DivisionFactor=GasSensor_ADC_DivisionFactor;
    536a:	83 e0       	ldi	r24, 0x03	; 3
    536c:	8b 83       	std	Y+3, r24	; 0x03
#if GasSensorMode==Polling
	ADC_voidInitPolling(ADCInformationGasSensor);
    536e:	69 81       	ldd	r22, Y+1	; 0x01
    5370:	7a 81       	ldd	r23, Y+2	; 0x02
    5372:	8b 81       	ldd	r24, Y+3	; 0x03
    5374:	0e 94 48 1a 	call	0x3490	; 0x3490 <ADC_voidInitPolling>
#elif GasSensorMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	cf 91       	pop	r28
    5380:	df 91       	pop	r29
    5382:	08 95       	ret

00005384 <GasSensor_voidDigitalInit>:

void GasSensor_voidDigitalInit()
{
    5384:	df 93       	push	r29
    5386:	cf 93       	push	r28
    5388:	cd b7       	in	r28, 0x3d	; 61
    538a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	65 e0       	ldi	r22, 0x05	; 5
    5390:	40 e0       	ldi	r20, 0x00	; 0
    5392:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    5396:	cf 91       	pop	r28
    5398:	df 91       	pop	r29
    539a:	08 95       	ret

0000539c <GasSensor_f32ReadAnalog>:

void GasSensor_f32ReadAnalog(u16 read)
{
    539c:	df 93       	push	r29
    539e:	cf 93       	push	r28
    53a0:	00 d0       	rcall	.+0      	; 0x53a2 <GasSensor_f32ReadAnalog+0x6>
    53a2:	cd b7       	in	r28, 0x3d	; 61
    53a4:	de b7       	in	r29, 0x3e	; 62
    53a6:	9a 83       	std	Y+2, r25	; 0x02
    53a8:	89 83       	std	Y+1, r24	; 0x01


}
    53aa:	0f 90       	pop	r0
    53ac:	0f 90       	pop	r0
    53ae:	cf 91       	pop	r28
    53b0:	df 91       	pop	r29
    53b2:	08 95       	ret

000053b4 <GasSensor_u8DigitalState>:

u8 GasSensor_u8DigitalState()
{
    53b4:	df 93       	push	r29
    53b6:	cf 93       	push	r28
    53b8:	cd b7       	in	r28, 0x3d	; 61
    53ba:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8ReadPinValue(GasSensorGroup,GasSensorPin);
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	65 e0       	ldi	r22, 0x05	; 5
    53c0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
}
    53c4:	cf 91       	pop	r28
    53c6:	df 91       	pop	r29
    53c8:	08 95       	ret

000053ca <DCMotor_voidInit>:

#include "DCMotor_Interface.h"


void DCMotor_voidInit()
{
    53ca:	df 93       	push	r29
    53cc:	cf 93       	push	r28
    53ce:	cd b7       	in	r28, 0x3d	; 61
    53d0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB1,Output);
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	60 e0       	ldi	r22, 0x00	; 0
    53d6:	41 e0       	ldi	r20, 0x01	; 1
    53d8:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB2,Output);
    53dc:	81 e0       	ldi	r24, 0x01	; 1
    53de:	61 e0       	ldi	r22, 0x01	; 1
    53e0:	41 e0       	ldi	r20, 0x01	; 1
    53e2:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB3,Output);
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	62 e0       	ldi	r22, 0x02	; 2
    53ea:	41 e0       	ldi	r20, 0x01	; 1
    53ec:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB4,Output);
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	63 e0       	ldi	r22, 0x03	; 3
    53f4:	41 e0       	ldi	r20, 0x01	; 1
    53f6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    53fa:	cf 91       	pop	r28
    53fc:	df 91       	pop	r29
    53fe:	08 95       	ret

00005400 <DCMotor_voidOnMaxSpeed>:

void DCMotor_voidOnMaxSpeed(u8 Dir)
{
    5400:	df 93       	push	r29
    5402:	cf 93       	push	r28
    5404:	0f 92       	push	r0
    5406:	cd b7       	in	r28, 0x3d	; 61
    5408:	de b7       	in	r29, 0x3e	; 62
    540a:	89 83       	std	Y+1, r24	; 0x01
	if (Dir==clock_wise)
    540c:	89 81       	ldd	r24, Y+1	; 0x01
    540e:	88 23       	and	r24, r24
    5410:	a9 f4       	brne	.+42     	; 0x543c <DCMotor_voidOnMaxSpeed+0x3c>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,High);
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	60 e0       	ldi	r22, 0x00	; 0
    5416:	41 e0       	ldi	r20, 0x01	; 1
    5418:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,High);
    541c:	81 e0       	ldi	r24, 0x01	; 1
    541e:	63 e0       	ldi	r22, 0x03	; 3
    5420:	41 e0       	ldi	r20, 0x01	; 1
    5422:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    5426:	81 e0       	ldi	r24, 0x01	; 1
    5428:	61 e0       	ldi	r22, 0x01	; 1
    542a:	40 e0       	ldi	r20, 0x00	; 0
    542c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    5430:	81 e0       	ldi	r24, 0x01	; 1
    5432:	62 e0       	ldi	r22, 0x02	; 2
    5434:	40 e0       	ldi	r20, 0x00	; 0
    5436:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
    543a:	17 c0       	rjmp	.+46     	; 0x546a <DCMotor_voidOnMaxSpeed+0x6a>
	}
	else if(Dir==anti_clock_wise)
    543c:	89 81       	ldd	r24, Y+1	; 0x01
    543e:	81 30       	cpi	r24, 0x01	; 1
    5440:	a1 f4       	brne	.+40     	; 0x546a <DCMotor_voidOnMaxSpeed+0x6a>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    5442:	81 e0       	ldi	r24, 0x01	; 1
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	40 e0       	ldi	r20, 0x00	; 0
    5448:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	63 e0       	ldi	r22, 0x03	; 3
    5450:	40 e0       	ldi	r20, 0x00	; 0
    5452:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,High);
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	61 e0       	ldi	r22, 0x01	; 1
    545a:	41 e0       	ldi	r20, 0x01	; 1
    545c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,High);
    5460:	81 e0       	ldi	r24, 0x01	; 1
    5462:	62 e0       	ldi	r22, 0x02	; 2
    5464:	41 e0       	ldi	r20, 0x01	; 1
    5466:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	}
}
    546a:	0f 90       	pop	r0
    546c:	cf 91       	pop	r28
    546e:	df 91       	pop	r29
    5470:	08 95       	ret

00005472 <DCMotor_voidOff>:

void DCMotor_voidOff()
{
    5472:	df 93       	push	r29
    5474:	cf 93       	push	r28
    5476:	cd b7       	in	r28, 0x3d	; 61
    5478:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    547a:	81 e0       	ldi	r24, 0x01	; 1
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	40 e0       	ldi	r20, 0x00	; 0
    5480:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	63 e0       	ldi	r22, 0x03	; 3
    5488:	40 e0       	ldi	r20, 0x00	; 0
    548a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    548e:	81 e0       	ldi	r24, 0x01	; 1
    5490:	61 e0       	ldi	r22, 0x01	; 1
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    5498:	81 e0       	ldi	r24, 0x01	; 1
    549a:	62 e0       	ldi	r22, 0x02	; 2
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    54a2:	cf 91       	pop	r28
    54a4:	df 91       	pop	r29
    54a6:	08 95       	ret

000054a8 <BUZZER_voidInit>:
 *      Author: salma
 */
#include "Buzzer_Interface.h"
#include <util/delay.h>
void BUZZER_voidInit ()
{
    54a8:	df 93       	push	r29
    54aa:	cf 93       	push	r28
    54ac:	cd b7       	in	r28, 0x3d	; 61
    54ae:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(BuzzerGruop,BuzzerPin,Output);
    54b0:	81 e0       	ldi	r24, 0x01	; 1
    54b2:	61 e0       	ldi	r22, 0x01	; 1
    54b4:	41 e0       	ldi	r20, 0x01	; 1
    54b6:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
}
    54ba:	cf 91       	pop	r28
    54bc:	df 91       	pop	r29
    54be:	08 95       	ret

000054c0 <BUZZER_voidOn>:

void BUZZER_voidOn ()
{
    54c0:	df 93       	push	r29
    54c2:	cf 93       	push	r28
    54c4:	cd b7       	in	r28, 0x3d	; 61
    54c6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,High);
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	61 e0       	ldi	r22, 0x01	; 1
    54cc:	41 e0       	ldi	r20, 0x01	; 1
    54ce:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    54d2:	cf 91       	pop	r28
    54d4:	df 91       	pop	r29
    54d6:	08 95       	ret

000054d8 <BUZZER_voidOff>:

void BUZZER_voidOff ()
{
    54d8:	df 93       	push	r29
    54da:	cf 93       	push	r28
    54dc:	cd b7       	in	r28, 0x3d	; 61
    54de:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,Low);
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	61 e0       	ldi	r22, 0x01	; 1
    54e4:	40 e0       	ldi	r20, 0x00	; 0
    54e6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <DIO_voidSetPinValue>
}
    54ea:	cf 91       	pop	r28
    54ec:	df 91       	pop	r29
    54ee:	08 95       	ret

000054f0 <BUZZER_voidToggle>:

void BUZZER_voidToggle ()
{
    54f0:	df 93       	push	r29
    54f2:	cf 93       	push	r28
    54f4:	cd b7       	in	r28, 0x3d	; 61
    54f6:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8ReadPinValue(BuzzerGruop,BuzzerPin)==High)
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	61 e0       	ldi	r22, 0x01	; 1
    54fc:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <DIO_u8ReadPinValue>
    5500:	81 30       	cpi	r24, 0x01	; 1
    5502:	19 f4       	brne	.+6      	; 0x550a <BUZZER_voidToggle+0x1a>
	{
		BUZZER_voidOff();
    5504:	0e 94 6c 2a 	call	0x54d8	; 0x54d8 <BUZZER_voidOff>
    5508:	02 c0       	rjmp	.+4      	; 0x550e <BUZZER_voidToggle+0x1e>
	}
	else
	{
		BUZZER_voidOn();
    550a:	0e 94 60 2a 	call	0x54c0	; 0x54c0 <BUZZER_voidOn>
	}
}
    550e:	cf 91       	pop	r28
    5510:	df 91       	pop	r29
    5512:	08 95       	ret

00005514 <BluetoothModule_voidInit>:
 */

#include "BluetoothModule_Interface.h"

void BluetoothModule_voidInit()
{
    5514:	df 93       	push	r29
    5516:	cf 93       	push	r28
    5518:	cd b7       	in	r28, 0x3d	; 61
    551a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(UARTGroup,TX,output);
    551c:	84 e0       	ldi	r24, 0x04	; 4
    551e:	61 e0       	ldi	r22, 0x01	; 1
    5520:	41 e0       	ldi	r20, 0x01	; 1
    5522:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	DIO_voidSetPinDir(UARTGroup,RX,input);
    5526:	84 e0       	ldi	r24, 0x04	; 4
    5528:	60 e0       	ldi	r22, 0x00	; 0
    552a:	40 e0       	ldi	r20, 0x00	; 0
    552c:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	UART_voidInit(9600);
    5530:	60 e8       	ldi	r22, 0x80	; 128
    5532:	75 e2       	ldi	r23, 0x25	; 37
    5534:	80 e0       	ldi	r24, 0x00	; 0
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
}
    553c:	cf 91       	pop	r28
    553e:	df 91       	pop	r29
    5540:	08 95       	ret

00005542 <BluetoothModule_u8RecieveData>:

u8 BluetoothModule_u8RecieveData()
{
    5542:	df 93       	push	r29
    5544:	cf 93       	push	r28
    5546:	cd b7       	in	r28, 0x3d	; 61
    5548:	de b7       	in	r29, 0x3e	; 62
	return UART_u8RecieveData();
    554a:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_u8RecieveData>
}
    554e:	cf 91       	pop	r28
    5550:	df 91       	pop	r29
    5552:	08 95       	ret

00005554 <main>:
#include <util/delay.h>

void led1 ();
void led2 ();
void main()
{
    5554:	df 93       	push	r29
    5556:	cf 93       	push	r28
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DIO_GroupB,DIO_Pin3,output);
    555c:	82 e0       	ldi	r24, 0x02	; 2
    555e:	63 e0       	ldi	r22, 0x03	; 3
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <DIO_voidSetPinDir>
	LED_voidInit(DIO_GroupA,DIO_Pin0);
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	60 e0       	ldi	r22, 0x00	; 0
    556a:	0e 94 0b 24 	call	0x4816	; 0x4816 <LED_voidInit>
	LED_voidInit(DIO_GroupA,DIO_Pin1);
    556e:	81 e0       	ldi	r24, 0x01	; 1
    5570:	61 e0       	ldi	r22, 0x01	; 1
    5572:	0e 94 0b 24 	call	0x4816	; 0x4816 <LED_voidInit>
	LED_voidInit(DIO_GroupD,DIO_Pin7);
    5576:	84 e0       	ldi	r24, 0x04	; 4
    5578:	67 e0       	ldi	r22, 0x07	; 7
    557a:	0e 94 0b 24 	call	0x4816	; 0x4816 <LED_voidInit>
	T2_voidCallBackFuncNormalMode(led1);
    557e:	85 ed       	ldi	r24, 0xD5	; 213
    5580:	9a e2       	ldi	r25, 0x2A	; 42
    5582:	0e 94 27 08 	call	0x104e	; 0x104e <T2_voidCallBackFuncNormalMode>
	T1_voidCallBackFuncNormalMode(led2);
    5586:	89 e0       	ldi	r24, 0x09	; 9
    5588:	9b e2       	ldi	r25, 0x2B	; 43
    558a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <T1_voidCallBackFuncNormalMode>
	T2_voidCTCModeInit(CTC_OC0_Tog,prescaler8,100,enable);
    558e:	82 e0       	ldi	r24, 0x02	; 2
    5590:	62 e0       	ldi	r22, 0x02	; 2
    5592:	44 e6       	ldi	r20, 0x64	; 100
    5594:	21 e0       	ldi	r18, 0x01	; 1
    5596:	0e 94 70 08 	call	0x10e0	; 0x10e0 <T2_voidCTCModeInit>
	//T0_voidPWMModeInit(FastPWM,PWM_OC0_nonInverting,prescaler8,50);
	//T1_voidFastPWMFixedTop(FastPWM_8Bit,prescaler8,NonInverting,75);
	T1_voidNormalModeInit(prescaler8,0,enable);
    559a:	82 e0       	ldi	r24, 0x02	; 2
    559c:	60 e0       	ldi	r22, 0x00	; 0
    559e:	41 e0       	ldi	r20, 0x01	; 1
    55a0:	0e 94 24 0a 	call	0x1448	; 0x1448 <T1_voidNormalModeInit>
	GIE_voidEnable();
    55a4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <GIE_voidEnable>
    55a8:	ff cf       	rjmp	.-2      	; 0x55a8 <main+0x54>

000055aa <led1>:

}


void led1 ()
{
    55aa:	df 93       	push	r29
    55ac:	cf 93       	push	r28
    55ae:	cd b7       	in	r28, 0x3d	; 61
    55b0:	de b7       	in	r29, 0x3e	; 62
	static u32 couter=0;
	if (couter%2000==0)
    55b2:	80 91 a4 01 	lds	r24, 0x01A4
    55b6:	90 91 a5 01 	lds	r25, 0x01A5
    55ba:	a0 91 a6 01 	lds	r26, 0x01A6
    55be:	b0 91 a7 01 	lds	r27, 0x01A7
    55c2:	20 ed       	ldi	r18, 0xD0	; 208
    55c4:	37 e0       	ldi	r19, 0x07	; 7
    55c6:	40 e0       	ldi	r20, 0x00	; 0
    55c8:	50 e0       	ldi	r21, 0x00	; 0
    55ca:	bc 01       	movw	r22, r24
    55cc:	cd 01       	movw	r24, r26
    55ce:	0e 94 83 2b 	call	0x5706	; 0x5706 <__udivmodsi4>
    55d2:	dc 01       	movw	r26, r24
    55d4:	cb 01       	movw	r24, r22
    55d6:	00 97       	sbiw	r24, 0x00	; 0
    55d8:	a1 05       	cpc	r26, r1
    55da:	b1 05       	cpc	r27, r1
    55dc:	21 f4       	brne	.+8      	; 0x55e6 <led1+0x3c>
	{
		LED_voidToggle(DIO_GroupA,DIO_Pin0);
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	60 e0       	ldi	r22, 0x00	; 0
    55e2:	0e 94 3e 24 	call	0x487c	; 0x487c <LED_voidToggle>
	}
	couter++;
    55e6:	80 91 a4 01 	lds	r24, 0x01A4
    55ea:	90 91 a5 01 	lds	r25, 0x01A5
    55ee:	a0 91 a6 01 	lds	r26, 0x01A6
    55f2:	b0 91 a7 01 	lds	r27, 0x01A7
    55f6:	01 96       	adiw	r24, 0x01	; 1
    55f8:	a1 1d       	adc	r26, r1
    55fa:	b1 1d       	adc	r27, r1
    55fc:	80 93 a4 01 	sts	0x01A4, r24
    5600:	90 93 a5 01 	sts	0x01A5, r25
    5604:	a0 93 a6 01 	sts	0x01A6, r26
    5608:	b0 93 a7 01 	sts	0x01A7, r27
}
    560c:	cf 91       	pop	r28
    560e:	df 91       	pop	r29
    5610:	08 95       	ret

00005612 <led2>:

void led2 ()
{
    5612:	df 93       	push	r29
    5614:	cf 93       	push	r28
    5616:	cd b7       	in	r28, 0x3d	; 61
    5618:	de b7       	in	r29, 0x3e	; 62
	static u32 couter2=0;
	if (couter2%20==0)
    561a:	80 91 a8 01 	lds	r24, 0x01A8
    561e:	90 91 a9 01 	lds	r25, 0x01A9
    5622:	a0 91 aa 01 	lds	r26, 0x01AA
    5626:	b0 91 ab 01 	lds	r27, 0x01AB
    562a:	24 e1       	ldi	r18, 0x14	; 20
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	40 e0       	ldi	r20, 0x00	; 0
    5630:	50 e0       	ldi	r21, 0x00	; 0
    5632:	bc 01       	movw	r22, r24
    5634:	cd 01       	movw	r24, r26
    5636:	0e 94 83 2b 	call	0x5706	; 0x5706 <__udivmodsi4>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	a1 05       	cpc	r26, r1
    5642:	b1 05       	cpc	r27, r1
    5644:	21 f4       	brne	.+8      	; 0x564e <led2+0x3c>
	{
		LED_voidToggle(DIO_GroupA,DIO_Pin1);
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	61 e0       	ldi	r22, 0x01	; 1
    564a:	0e 94 3e 24 	call	0x487c	; 0x487c <LED_voidToggle>
	}
	couter2++;
    564e:	80 91 a8 01 	lds	r24, 0x01A8
    5652:	90 91 a9 01 	lds	r25, 0x01A9
    5656:	a0 91 aa 01 	lds	r26, 0x01AA
    565a:	b0 91 ab 01 	lds	r27, 0x01AB
    565e:	01 96       	adiw	r24, 0x01	; 1
    5660:	a1 1d       	adc	r26, r1
    5662:	b1 1d       	adc	r27, r1
    5664:	80 93 a8 01 	sts	0x01A8, r24
    5668:	90 93 a9 01 	sts	0x01A9, r25
    566c:	a0 93 aa 01 	sts	0x01AA, r26
    5670:	b0 93 ab 01 	sts	0x01AB, r27
}
    5674:	cf 91       	pop	r28
    5676:	df 91       	pop	r29
    5678:	08 95       	ret

0000567a <__mulsi3>:
    567a:	62 9f       	mul	r22, r18
    567c:	d0 01       	movw	r26, r0
    567e:	73 9f       	mul	r23, r19
    5680:	f0 01       	movw	r30, r0
    5682:	82 9f       	mul	r24, r18
    5684:	e0 0d       	add	r30, r0
    5686:	f1 1d       	adc	r31, r1
    5688:	64 9f       	mul	r22, r20
    568a:	e0 0d       	add	r30, r0
    568c:	f1 1d       	adc	r31, r1
    568e:	92 9f       	mul	r25, r18
    5690:	f0 0d       	add	r31, r0
    5692:	83 9f       	mul	r24, r19
    5694:	f0 0d       	add	r31, r0
    5696:	74 9f       	mul	r23, r20
    5698:	f0 0d       	add	r31, r0
    569a:	65 9f       	mul	r22, r21
    569c:	f0 0d       	add	r31, r0
    569e:	99 27       	eor	r25, r25
    56a0:	72 9f       	mul	r23, r18
    56a2:	b0 0d       	add	r27, r0
    56a4:	e1 1d       	adc	r30, r1
    56a6:	f9 1f       	adc	r31, r25
    56a8:	63 9f       	mul	r22, r19
    56aa:	b0 0d       	add	r27, r0
    56ac:	e1 1d       	adc	r30, r1
    56ae:	f9 1f       	adc	r31, r25
    56b0:	bd 01       	movw	r22, r26
    56b2:	cf 01       	movw	r24, r30
    56b4:	11 24       	eor	r1, r1
    56b6:	08 95       	ret

000056b8 <__udivmodhi4>:
    56b8:	aa 1b       	sub	r26, r26
    56ba:	bb 1b       	sub	r27, r27
    56bc:	51 e1       	ldi	r21, 0x11	; 17
    56be:	07 c0       	rjmp	.+14     	; 0x56ce <__udivmodhi4_ep>

000056c0 <__udivmodhi4_loop>:
    56c0:	aa 1f       	adc	r26, r26
    56c2:	bb 1f       	adc	r27, r27
    56c4:	a6 17       	cp	r26, r22
    56c6:	b7 07       	cpc	r27, r23
    56c8:	10 f0       	brcs	.+4      	; 0x56ce <__udivmodhi4_ep>
    56ca:	a6 1b       	sub	r26, r22
    56cc:	b7 0b       	sbc	r27, r23

000056ce <__udivmodhi4_ep>:
    56ce:	88 1f       	adc	r24, r24
    56d0:	99 1f       	adc	r25, r25
    56d2:	5a 95       	dec	r21
    56d4:	a9 f7       	brne	.-22     	; 0x56c0 <__udivmodhi4_loop>
    56d6:	80 95       	com	r24
    56d8:	90 95       	com	r25
    56da:	bc 01       	movw	r22, r24
    56dc:	cd 01       	movw	r24, r26
    56de:	08 95       	ret

000056e0 <__divmodhi4>:
    56e0:	97 fb       	bst	r25, 7
    56e2:	09 2e       	mov	r0, r25
    56e4:	07 26       	eor	r0, r23
    56e6:	0a d0       	rcall	.+20     	; 0x56fc <__divmodhi4_neg1>
    56e8:	77 fd       	sbrc	r23, 7
    56ea:	04 d0       	rcall	.+8      	; 0x56f4 <__divmodhi4_neg2>
    56ec:	e5 df       	rcall	.-54     	; 0x56b8 <__udivmodhi4>
    56ee:	06 d0       	rcall	.+12     	; 0x56fc <__divmodhi4_neg1>
    56f0:	00 20       	and	r0, r0
    56f2:	1a f4       	brpl	.+6      	; 0x56fa <__divmodhi4_exit>

000056f4 <__divmodhi4_neg2>:
    56f4:	70 95       	com	r23
    56f6:	61 95       	neg	r22
    56f8:	7f 4f       	sbci	r23, 0xFF	; 255

000056fa <__divmodhi4_exit>:
    56fa:	08 95       	ret

000056fc <__divmodhi4_neg1>:
    56fc:	f6 f7       	brtc	.-4      	; 0x56fa <__divmodhi4_exit>
    56fe:	90 95       	com	r25
    5700:	81 95       	neg	r24
    5702:	9f 4f       	sbci	r25, 0xFF	; 255
    5704:	08 95       	ret

00005706 <__udivmodsi4>:
    5706:	a1 e2       	ldi	r26, 0x21	; 33
    5708:	1a 2e       	mov	r1, r26
    570a:	aa 1b       	sub	r26, r26
    570c:	bb 1b       	sub	r27, r27
    570e:	fd 01       	movw	r30, r26
    5710:	0d c0       	rjmp	.+26     	; 0x572c <__udivmodsi4_ep>

00005712 <__udivmodsi4_loop>:
    5712:	aa 1f       	adc	r26, r26
    5714:	bb 1f       	adc	r27, r27
    5716:	ee 1f       	adc	r30, r30
    5718:	ff 1f       	adc	r31, r31
    571a:	a2 17       	cp	r26, r18
    571c:	b3 07       	cpc	r27, r19
    571e:	e4 07       	cpc	r30, r20
    5720:	f5 07       	cpc	r31, r21
    5722:	20 f0       	brcs	.+8      	; 0x572c <__udivmodsi4_ep>
    5724:	a2 1b       	sub	r26, r18
    5726:	b3 0b       	sbc	r27, r19
    5728:	e4 0b       	sbc	r30, r20
    572a:	f5 0b       	sbc	r31, r21

0000572c <__udivmodsi4_ep>:
    572c:	66 1f       	adc	r22, r22
    572e:	77 1f       	adc	r23, r23
    5730:	88 1f       	adc	r24, r24
    5732:	99 1f       	adc	r25, r25
    5734:	1a 94       	dec	r1
    5736:	69 f7       	brne	.-38     	; 0x5712 <__udivmodsi4_loop>
    5738:	60 95       	com	r22
    573a:	70 95       	com	r23
    573c:	80 95       	com	r24
    573e:	90 95       	com	r25
    5740:	9b 01       	movw	r18, r22
    5742:	ac 01       	movw	r20, r24
    5744:	bd 01       	movw	r22, r26
    5746:	cf 01       	movw	r24, r30
    5748:	08 95       	ret

0000574a <__divmodsi4>:
    574a:	97 fb       	bst	r25, 7
    574c:	09 2e       	mov	r0, r25
    574e:	05 26       	eor	r0, r21
    5750:	0e d0       	rcall	.+28     	; 0x576e <__divmodsi4_neg1>
    5752:	57 fd       	sbrc	r21, 7
    5754:	04 d0       	rcall	.+8      	; 0x575e <__divmodsi4_neg2>
    5756:	d7 df       	rcall	.-82     	; 0x5706 <__udivmodsi4>
    5758:	0a d0       	rcall	.+20     	; 0x576e <__divmodsi4_neg1>
    575a:	00 1c       	adc	r0, r0
    575c:	38 f4       	brcc	.+14     	; 0x576c <__divmodsi4_exit>

0000575e <__divmodsi4_neg2>:
    575e:	50 95       	com	r21
    5760:	40 95       	com	r20
    5762:	30 95       	com	r19
    5764:	21 95       	neg	r18
    5766:	3f 4f       	sbci	r19, 0xFF	; 255
    5768:	4f 4f       	sbci	r20, 0xFF	; 255
    576a:	5f 4f       	sbci	r21, 0xFF	; 255

0000576c <__divmodsi4_exit>:
    576c:	08 95       	ret

0000576e <__divmodsi4_neg1>:
    576e:	f6 f7       	brtc	.-4      	; 0x576c <__divmodsi4_exit>
    5770:	90 95       	com	r25
    5772:	80 95       	com	r24
    5774:	70 95       	com	r23
    5776:	61 95       	neg	r22
    5778:	7f 4f       	sbci	r23, 0xFF	; 255
    577a:	8f 4f       	sbci	r24, 0xFF	; 255
    577c:	9f 4f       	sbci	r25, 0xFF	; 255
    577e:	08 95       	ret

00005780 <__prologue_saves__>:
    5780:	2f 92       	push	r2
    5782:	3f 92       	push	r3
    5784:	4f 92       	push	r4
    5786:	5f 92       	push	r5
    5788:	6f 92       	push	r6
    578a:	7f 92       	push	r7
    578c:	8f 92       	push	r8
    578e:	9f 92       	push	r9
    5790:	af 92       	push	r10
    5792:	bf 92       	push	r11
    5794:	cf 92       	push	r12
    5796:	df 92       	push	r13
    5798:	ef 92       	push	r14
    579a:	ff 92       	push	r15
    579c:	0f 93       	push	r16
    579e:	1f 93       	push	r17
    57a0:	cf 93       	push	r28
    57a2:	df 93       	push	r29
    57a4:	cd b7       	in	r28, 0x3d	; 61
    57a6:	de b7       	in	r29, 0x3e	; 62
    57a8:	ca 1b       	sub	r28, r26
    57aa:	db 0b       	sbc	r29, r27
    57ac:	0f b6       	in	r0, 0x3f	; 63
    57ae:	f8 94       	cli
    57b0:	de bf       	out	0x3e, r29	; 62
    57b2:	0f be       	out	0x3f, r0	; 63
    57b4:	cd bf       	out	0x3d, r28	; 61
    57b6:	09 94       	ijmp

000057b8 <__epilogue_restores__>:
    57b8:	2a 88       	ldd	r2, Y+18	; 0x12
    57ba:	39 88       	ldd	r3, Y+17	; 0x11
    57bc:	48 88       	ldd	r4, Y+16	; 0x10
    57be:	5f 84       	ldd	r5, Y+15	; 0x0f
    57c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    57c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    57c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    57c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    57c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    57ca:	b9 84       	ldd	r11, Y+9	; 0x09
    57cc:	c8 84       	ldd	r12, Y+8	; 0x08
    57ce:	df 80       	ldd	r13, Y+7	; 0x07
    57d0:	ee 80       	ldd	r14, Y+6	; 0x06
    57d2:	fd 80       	ldd	r15, Y+5	; 0x05
    57d4:	0c 81       	ldd	r16, Y+4	; 0x04
    57d6:	1b 81       	ldd	r17, Y+3	; 0x03
    57d8:	aa 81       	ldd	r26, Y+2	; 0x02
    57da:	b9 81       	ldd	r27, Y+1	; 0x01
    57dc:	ce 0f       	add	r28, r30
    57de:	d1 1d       	adc	r29, r1
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	de bf       	out	0x3e, r29	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	cd bf       	out	0x3d, r28	; 61
    57ea:	ed 01       	movw	r28, r26
    57ec:	08 95       	ret

000057ee <_exit>:
    57ee:	f8 94       	cli

000057f0 <__stop_program>:
    57f0:	ff cf       	rjmp	.-2      	; 0x57f0 <__stop_program>
