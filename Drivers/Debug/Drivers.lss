
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00004cc6  00004d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800192  00800192  00004e8c  2**0
                  ALLOC
  3 .stab         00007284  00000000  00000000  00004e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003492  00000000  00000000  0000c110  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000f742  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000f934  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000130c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0001429c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0001445c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00014752  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000150c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 cb 11 	jmp	0x2396	; 0x2396 <__vector_1>
       8:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__vector_2>
       c:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__vector_6>
      1c:	0c 94 78 0a 	jmp	0x14f0	; 0x14f0 <__vector_7>
      20:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__vector_8>
      24:	0c 94 4e 08 	jmp	0x109c	; 0x109c <__vector_9>
      28:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_10>
      2c:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <main>
      8a:	0c 94 61 26 	jmp	0x4cc2	; 0x4cc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 52 26 	jmp	0x4ca4	; 0x4ca4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3a 26 	jmp	0x4c74	; 0x4c74 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 56 26 	jmp	0x4cac	; 0x4cac <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 32 26 	jmp	0x4c64	; 0x4c64 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4e 26 	jmp	0x4c9c	; 0x4c9c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
 */

#include "UART_Interface.h"

void UART_voidInit(u32 BoudRate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_voidInit+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	69 83       	std	Y+1, r22	; 0x01
     e3c:	7a 83       	std	Y+2, r23	; 0x02
     e3e:	8b 83       	std	Y+3, r24	; 0x03
     e40:	9c 83       	std	Y+4, r25	; 0x04
	/*Set boud rate*/
	clear_bit(UART_UBRRH,UBRRH_URSEL);
     e42:	a0 e4       	ldi	r26, 0x40	; 64
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e0 e4       	ldi	r30, 0x40	; 64
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8f 77       	andi	r24, 0x7F	; 127
     e4e:	8c 93       	st	X, r24
	UART_UBRRH=0;
     e50:	e0 e4       	ldi	r30, 0x40	; 64
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	10 82       	st	Z, r1
	UART_UBRRL=BoudRate;
     e56:	e9 e2       	ldi	r30, 0x29	; 41
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	80 83       	st	Z, r24

	/*Interrupts*/
#if TXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_TXCIE);
     e5e:	aa e2       	ldi	r26, 0x2A	; 42
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	ea e2       	ldi	r30, 0x2A	; 42
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7b       	andi	r24, 0xBF	; 191
     e6a:	8c 93       	st	X, r24
#elif TXIEState==enable
	set_bit(UART_UCSRB,UCSRB_TXCIE);
#endif

#if RXIEState==disable
	clear_bit(UART_UCSRB,UCSRB_RXCIE);
     e6c:	aa e2       	ldi	r26, 0x2A	; 42
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e2       	ldi	r30, 0x2A	; 42
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	8f 77       	andi	r24, 0x7F	; 127
     e78:	8c 93       	st	X, r24
#elif RXIEState==enable
	set_bit(UART_UCSRB,UCSRB_RXCIE);
#endif

#if UDIEState==disable
	clear_bit(UART_UCSRB,UCSRB_UDRIE);
     e7a:	aa e2       	ldi	r26, 0x2A	; 42
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea e2       	ldi	r30, 0x2A	; 42
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8f 7d       	andi	r24, 0xDF	; 223
     e86:	8c 93       	st	X, r24
#elif UDIEState==enable
	set_bit(UART_UCSRB,UCSRB_UDRIE);
#endif

	/*Async*/
	set_bit(UART_UCSRC,UCSRC_URSEL);
     e88:	a0 e4       	ldi	r26, 0x40	; 64
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e0 e4       	ldi	r30, 0x40	; 64
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 68       	ori	r24, 0x80	; 128
     e94:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UMSEL);
     e96:	a0 e4       	ldi	r26, 0x40	; 64
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e0 e4       	ldi	r30, 0x40	; 64
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8f 7b       	andi	r24, 0xBF	; 191
     ea2:	8c 93       	st	X, r24

	/*parity*/
#if ParityEnable==enable
#if Parity==odd
	set_bit(UART_UCSRC,UCSRC_UPM0);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 61       	ori	r24, 0x10	; 16
     eb0:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UPM1);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 62       	ori	r24, 0x20	; 32
     ebe:	8c 93       	st	X, r24
	clear_bit(UART_UCSRC,UCSRC_UPM1);
#endif

	/*Stop bits*/
#if NoStopBits==1
	clear_bit(UART_UCSRC,UCSRC_USBS);
     ec0:	a0 e4       	ldi	r26, 0x40	; 64
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e0 e4       	ldi	r30, 0x40	; 64
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24
#elif DataSize==7
	clear_bit(UART_UCSRC,UCSRC_UCSZ0);
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
#elif DataSize==8
	set_bit(UART_UCSRC,UCSRC_UCSZ0);
     ece:	a0 e4       	ldi	r26, 0x40	; 64
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e0 e4       	ldi	r30, 0x40	; 64
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 60       	ori	r24, 0x02	; 2
     eda:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
     edc:	a0 e4       	ldi	r26, 0x40	; 64
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e0 e4       	ldi	r30, 0x40	; 64
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	84 60       	ori	r24, 0x04	; 4
     ee8:	8c 93       	st	X, r24
	clear_bit(UART_UCSRB,UCSRB_UCSZ2);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8b 7f       	andi	r24, 0xFB	; 251
     ef6:	8c 93       	st	X, r24
	set_bit(UART_UCSRC,UCSRC_UCSZ1);
	set_bit(UART_UCSRB,UCSRB_UCSZ2);
#else
#error "Invalid Option"
#endif
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <UART_voidSendData>:

void UART_voidSendData(u8 Data)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	0f 92       	push	r0
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f12:	eb e2       	ldi	r30, 0x2B	; 43
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	82 95       	swap	r24
     f1a:	86 95       	lsr	r24
     f1c:	87 70       	andi	r24, 0x07	; 7
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	81 70       	andi	r24, 0x01	; 1
     f24:	90 70       	andi	r25, 0x00	; 0
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	a1 f3       	breq	.-24     	; 0xf12 <UART_voidSendData+0xc>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f2a:	ab e2       	ldi	r26, 0x2B	; 43
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e2       	ldi	r30, 0x2B	; 43
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 62       	ori	r24, 0x20	; 32
     f36:	8c 93       	st	X, r24
	UART_UDR=Data;
     f38:	ec e2       	ldi	r30, 0x2C	; 44
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	80 83       	st	Z, r24
	set_bit(UART_UCSRB,UCSRB_TXEN);
     f40:	aa e2       	ldi	r26, 0x2A	; 42
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ea e2       	ldi	r30, 0x2A	; 42
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	88 60       	ori	r24, 0x08	; 8
     f4c:	8c 93       	st	X, r24

}
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_u8RecieveData>:

u8 UART_u8RecieveData()
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	0f 92       	push	r0
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	u8 RecievedData;
	while (get_bit(UART_UCSRA,UCSRA_UDRE)==Full);
     f60:	eb e2       	ldi	r30, 0x2B	; 43
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	82 95       	swap	r24
     f68:	86 95       	lsr	r24
     f6a:	87 70       	andi	r24, 0x07	; 7
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	81 70       	andi	r24, 0x01	; 1
     f72:	90 70       	andi	r25, 0x00	; 0
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	a1 f3       	breq	.-24     	; 0xf60 <UART_u8RecieveData+0xa>
	set_bit(UART_UCSRA,UCSRA_UDRE);
     f78:	ab e2       	ldi	r26, 0x2B	; 43
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e2       	ldi	r30, 0x2B	; 43
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 62       	ori	r24, 0x20	; 32
     f84:	8c 93       	st	X, r24
	set_bit(UART_UCSRB,UCSRB_RXEN);
     f86:	aa e2       	ldi	r26, 0x2A	; 42
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea e2       	ldi	r30, 0x2A	; 42
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	80 61       	ori	r24, 0x10	; 16
     f92:	8c 93       	st	X, r24
	while (get_bit(UART_UCSRA,UCSRA_RXC)==Low);
     f94:	eb e2       	ldi	r30, 0x2B	; 43
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	88 23       	and	r24, r24
     f9c:	dc f7       	brge	.-10     	; 0xf94 <UART_u8RecieveData+0x3e>
	set_bit(UART_UCSRA,UCSRA_RXC);
     f9e:	ab e2       	ldi	r26, 0x2B	; 43
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	eb e2       	ldi	r30, 0x2B	; 43
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	80 68       	ori	r24, 0x80	; 128
     faa:	8c 93       	st	X, r24
	RecievedData=UART_UDR;
     fac:	ec e2       	ldi	r30, 0x2C	; 44
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	89 83       	std	Y+1, r24	; 0x01
	return RecievedData;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <T1_voidNormalModeInit>:



/*******************************Normal Mode Functions*******************************************/
void T1_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <T1_voidNormalModeInit+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	6a 83       	std	Y+2, r22	; 0x02
     fce:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
     fd0:	af e4       	ldi	r26, 0x4F	; 79
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ef e4       	ldi	r30, 0x4F	; 79
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	8e 7f       	andi	r24, 0xFE	; 254
     fdc:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
     fde:	af e4       	ldi	r26, 0x4F	; 79
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ef e4       	ldi	r30, 0x4F	; 79
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
     fec:	ae e4       	ldi	r26, 0x4E	; 78
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ee e4       	ldi	r30, 0x4E	; 78
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	87 7f       	andi	r24, 0xF7	; 247
     ff8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
     ffa:	ae e4       	ldi	r26, 0x4E	; 78
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ee e4       	ldi	r30, 0x4E	; 78
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8f 7e       	andi	r24, 0xEF	; 239
    1006:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	87 70       	andi	r24, 0x07	; 7
    100c:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    100e:	ae e4       	ldi	r26, 0x4E	; 78
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	ee e4       	ldi	r30, 0x4E	; 78
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 7f       	andi	r24, 0xF8	; 248
    101a:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    101c:	ae e4       	ldi	r26, 0x4E	; 78
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ee e4       	ldi	r30, 0x4E	; 78
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	90 81       	ld	r25, Z
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	89 2b       	or	r24, r25
    102a:	8c 93       	st	X, r24
	T1_TCNT1=PreloadValue;
    102c:	ec e4       	ldi	r30, 0x4C	; 76
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 2f       	mov	r24, r24
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	91 83       	std	Z+1, r25	; 0x01
    1038:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	41 f4       	brne	.+16     	; 0x1050 <T1_voidNormalModeInit+0x92>
	{
		set_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1040:	a9 e5       	ldi	r26, 0x59	; 89
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e9 e5       	ldi	r30, 0x59	; 89
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24
    104e:	0a c0       	rjmp	.+20     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	}
	else if(InterruptState ==disable)
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	39 f4       	brne	.+14     	; 0x1064 <T1_voidNormalModeInit+0xa6>
	{
		clear_bit(T1_TIMSK,T1_TIMSK_TOIE1);
    1056:	a9 e5       	ldi	r26, 0x59	; 89
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e9 e5       	ldi	r30, 0x59	; 89
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8b 7f       	andi	r24, 0xFB	; 251
    1062:	8c 93       	st	X, r24
	}

}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <T1_voidCallBackFuncNormalMode>:


void T1_voidCallBackFuncNormalMode(void (*Normalpf)(void))
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <T1_voidCallBackFuncNormalMode+0x6>
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(Normalpf!=NULL)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	31 f0       	breq	.+12     	; 0x1092 <T1_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPf=Normalpf;
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	90 93 95 01 	sts	0x0195, r25
    108e:	80 93 94 01 	sts	0x0194, r24
	}
}
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <__vector_9>:


void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	if (GlobalOVPf!=NULL)
    10c6:	80 91 94 01 	lds	r24, 0x0194
    10ca:	90 91 95 01 	lds	r25, 0x0195
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	29 f0       	breq	.+10     	; 0x10dc <__vector_9+0x40>
	{
		GlobalOVPf();
    10d2:	e0 91 94 01 	lds	r30, 0x0194
    10d6:	f0 91 95 01 	lds	r31, 0x0195
    10da:	09 95       	icall
	}

}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	0f 90       	pop	r0
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	0f 90       	pop	r0
    10fe:	1f 90       	pop	r1
    1100:	18 95       	reti

00001102 <T1_voidClearTimerModeInit>:



/********************************CTC Functions****************************************************/
void T1_voidClearTimerModeInit(u8 Prescaller,u8 CompareUnit,u16 CompareValueA,u16 CompareValueB,u8 Interruptstate,u8 OC1AState ,u8 OC1BState)
{
    1102:	cf 92       	push	r12
    1104:	ef 92       	push	r14
    1106:	0f 93       	push	r16
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	29 97       	sbiw	r28, 0x09	; 9
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	f8 94       	cli
    1116:	de bf       	out	0x3e, r29	; 62
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	cd bf       	out	0x3d, r28	; 61
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	6a 83       	std	Y+2, r22	; 0x02
    1120:	5c 83       	std	Y+4, r21	; 0x04
    1122:	4b 83       	std	Y+3, r20	; 0x03
    1124:	3e 83       	std	Y+6, r19	; 0x06
    1126:	2d 83       	std	Y+5, r18	; 0x05
    1128:	0f 83       	std	Y+7, r16	; 0x07
    112a:	e8 86       	std	Y+8, r14	; 0x08
    112c:	c9 86       	std	Y+9, r12	; 0x09
	//select mode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    112e:	af e4       	ldi	r26, 0x4F	; 79
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	ef e4       	ldi	r30, 0x4F	; 79
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8e 7f       	andi	r24, 0xFE	; 254
    113a:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    113c:	af e4       	ldi	r26, 0x4F	; 79
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	ef e4       	ldi	r30, 0x4F	; 79
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8d 7f       	andi	r24, 0xFD	; 253
    1148:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    114a:	ae e4       	ldi	r26, 0x4E	; 78
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	ee e4       	ldi	r30, 0x4E	; 78
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	88 60       	ori	r24, 0x08	; 8
    1156:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1158:	ae e4       	ldi	r26, 0x4E	; 78
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	ee e4       	ldi	r30, 0x4E	; 78
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	80 61       	ori	r24, 0x10	; 16
    1164:	8c 93       	st	X, r24
	//TCCR1A
	if (CompareUnit==CTC_UnitA)
    1166:	8a 81       	ldd	r24, Y+2	; 0x02
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <T1_voidClearTimerModeInit+0x6c>
    116c:	64 c0       	rjmp	.+200    	; 0x1236 <T1_voidClearTimerModeInit+0x134>
	{
		T1_OCR1A=CompareValueA;
    116e:	ea e4       	ldi	r30, 0x4A	; 74
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	41 f4       	brne	.+16     	; 0x1190 <T1_voidClearTimerModeInit+0x8e>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1180:	a9 e5       	ldi	r26, 0x59	; 89
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e5       	ldi	r30, 0x59	; 89
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	80 61       	ori	r24, 0x10	; 16
    118c:	8c 93       	st	X, r24
    118e:	0a c0       	rjmp	.+20     	; 0x11a4 <T1_voidClearTimerModeInit+0xa2>
		}
		else if (Interruptstate==disable)
    1190:	8f 81       	ldd	r24, Y+7	; 0x07
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	39 f4       	brne	.+14     	; 0x11a4 <T1_voidClearTimerModeInit+0xa2>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1196:	a9 e5       	ldi	r26, 0x59	; 89
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e9 e5       	ldi	r30, 0x59	; 89
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	8f 7e       	andi	r24, 0xEF	; 239
    11a2:	8c 93       	st	X, r24
		}
		if(OC1AState==CTC_OC1A_Disconnect)
    11a4:	88 85       	ldd	r24, Y+8	; 0x08
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	79 f4       	brne	.+30     	; 0x11c8 <T1_voidClearTimerModeInit+0xc6>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11aa:	af e4       	ldi	r26, 0x4F	; 79
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ef e4       	ldi	r30, 0x4F	; 79
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	8f 7b       	andi	r24, 0xBF	; 191
    11b6:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11b8:	af e4       	ldi	r26, 0x4F	; 79
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ef e4       	ldi	r30, 0x4F	; 79
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 77       	andi	r24, 0x7F	; 127
    11c4:	8c 93       	st	X, r24
    11c6:	60 c1       	rjmp	.+704    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_Tog)
    11c8:	88 85       	ldd	r24, Y+8	; 0x08
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	79 f4       	brne	.+30     	; 0x11ec <T1_voidClearTimerModeInit+0xea>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11ce:	af e4       	ldi	r26, 0x4F	; 79
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ef e4       	ldi	r30, 0x4F	; 79
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	80 64       	ori	r24, 0x40	; 64
    11da:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    11dc:	af e4       	ldi	r26, 0x4F	; 79
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e4       	ldi	r30, 0x4F	; 79
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	8c 93       	st	X, r24
    11ea:	4e c1       	rjmp	.+668    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_CLr)
    11ec:	88 85       	ldd	r24, Y+8	; 0x08
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	79 f4       	brne	.+30     	; 0x1210 <T1_voidClearTimerModeInit+0x10e>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	8f 7b       	andi	r24, 0xBF	; 191
    11fe:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24
    120e:	3c c1       	rjmp	.+632    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1AState==CTC_OC1A_Set)
    1210:	88 85       	ldd	r24, Y+8	; 0x08
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	09 f0       	breq	.+2      	; 0x1218 <T1_voidClearTimerModeInit+0x116>
    1216:	38 c1       	rjmp	.+624    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1218:	af e4       	ldi	r26, 0x4F	; 79
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 64       	ori	r24, 0x40	; 64
    1224:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1226:	af e4       	ldi	r26, 0x4F	; 79
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	ef e4       	ldi	r30, 0x4F	; 79
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 68       	ori	r24, 0x80	; 128
    1232:	8c 93       	st	X, r24
    1234:	29 c1       	rjmp	.+594    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
	}
	else if (CompareUnit==CTC_UnitB)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	09 f0       	breq	.+2      	; 0x123e <T1_voidClearTimerModeInit+0x13c>
    123c:	64 c0       	rjmp	.+200    	; 0x1306 <T1_voidClearTimerModeInit+0x204>
	{
		T1_OCR1B=CompareValueB;
    123e:	e8 e4       	ldi	r30, 0x48	; 72
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	91 83       	std	Z+1, r25	; 0x01
    1248:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    124a:	8f 81       	ldd	r24, Y+7	; 0x07
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	41 f4       	brne	.+16     	; 0x1260 <T1_voidClearTimerModeInit+0x15e>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    1250:	a9 e5       	ldi	r26, 0x59	; 89
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e9 e5       	ldi	r30, 0x59	; 89
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	8c 93       	st	X, r24
    125e:	0a c0       	rjmp	.+20     	; 0x1274 <T1_voidClearTimerModeInit+0x172>
		}
		else if (Interruptstate==disable)
    1260:	8f 81       	ldd	r24, Y+7	; 0x07
    1262:	82 30       	cpi	r24, 0x02	; 2
    1264:	39 f4       	brne	.+14     	; 0x1274 <T1_voidClearTimerModeInit+0x172>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    1266:	a9 e5       	ldi	r26, 0x59	; 89
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e9 e5       	ldi	r30, 0x59	; 89
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	8c 93       	st	X, r24
		}
		if(OC1BState==CTC_OC1B_Disconnect)
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	81 30       	cpi	r24, 0x01	; 1
    1278:	79 f4       	brne	.+30     	; 0x1298 <T1_voidClearTimerModeInit+0x196>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    127a:	af e4       	ldi	r26, 0x4F	; 79
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	ef e4       	ldi	r30, 0x4F	; 79
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8f 7e       	andi	r24, 0xEF	; 239
    1286:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1288:	af e4       	ldi	r26, 0x4F	; 79
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	ef e4       	ldi	r30, 0x4F	; 79
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	8f 7d       	andi	r24, 0xDF	; 223
    1294:	8c 93       	st	X, r24
    1296:	f8 c0       	rjmp	.+496    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_Tog)
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	79 f4       	brne	.+30     	; 0x12bc <T1_voidClearTimerModeInit+0x1ba>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    129e:	af e4       	ldi	r26, 0x4F	; 79
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	ef e4       	ldi	r30, 0x4F	; 79
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	80 61       	ori	r24, 0x10	; 16
    12aa:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12ac:	af e4       	ldi	r26, 0x4F	; 79
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	ef e4       	ldi	r30, 0x4F	; 79
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	8c 93       	st	X, r24
    12ba:	e6 c0       	rjmp	.+460    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_CLr)
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	79 f4       	brne	.+30     	; 0x12e0 <T1_voidClearTimerModeInit+0x1de>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    12c2:	af e4       	ldi	r26, 0x4F	; 79
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	ef e4       	ldi	r30, 0x4F	; 79
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	8f 7e       	andi	r24, 0xEF	; 239
    12ce:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12d0:	af e4       	ldi	r26, 0x4F	; 79
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ef e4       	ldi	r30, 0x4F	; 79
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	80 62       	ori	r24, 0x20	; 32
    12dc:	8c 93       	st	X, r24
    12de:	d4 c0       	rjmp	.+424    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
		else if (OC1BState==CTC_OC1B_Set)
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <T1_voidClearTimerModeInit+0x1e6>
    12e6:	d0 c0       	rjmp	.+416    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    12e8:	af e4       	ldi	r26, 0x4F	; 79
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	ef e4       	ldi	r30, 0x4F	; 79
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 61       	ori	r24, 0x10	; 16
    12f4:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 62       	ori	r24, 0x20	; 32
    1302:	8c 93       	st	X, r24
    1304:	c1 c0       	rjmp	.+386    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
		}
	}
	else if (CompareUnit==CTC_BothUnits)
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	09 f0       	breq	.+2      	; 0x130e <T1_voidClearTimerModeInit+0x20c>
    130c:	bd c0       	rjmp	.+378    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
	{
		T1_OCR1A=CompareValueA;
    130e:	ea e4       	ldi	r30, 0x4A	; 74
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
		T1_OCR1B=CompareValueB;
    131a:	e8 e4       	ldi	r30, 0x48	; 72
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	80 83       	st	Z, r24
		if (Interruptstate==enable)
    1326:	8f 81       	ldd	r24, Y+7	; 0x07
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	79 f4       	brne	.+30     	; 0x134a <T1_voidClearTimerModeInit+0x248>
		{
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	80 61       	ori	r24, 0x10	; 16
    1338:	8c 93       	st	X, r24
			set_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    133a:	a9 e5       	ldi	r26, 0x59	; 89
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e9 e5       	ldi	r30, 0x59	; 89
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	8c 93       	st	X, r24
    1348:	11 c0       	rjmp	.+34     	; 0x136c <T1_voidClearTimerModeInit+0x26a>
		}
		else if (Interruptstate==disable)
    134a:	8f 81       	ldd	r24, Y+7	; 0x07
    134c:	82 30       	cpi	r24, 0x02	; 2
    134e:	71 f4       	brne	.+28     	; 0x136c <T1_voidClearTimerModeInit+0x26a>
		{
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1A);
    1350:	a9 e5       	ldi	r26, 0x59	; 89
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e9 e5       	ldi	r30, 0x59	; 89
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	8f 7e       	andi	r24, 0xEF	; 239
    135c:	8c 93       	st	X, r24
			clear_bit(T1_TIMSK,T1_TIMSK_OCIE1B);
    135e:	a9 e5       	ldi	r26, 0x59	; 89
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e9 e5       	ldi	r30, 0x59	; 89
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	87 7f       	andi	r24, 0xF7	; 247
    136a:	8c 93       	st	X, r24
		}
		if(OC1AState==CTC_OC1A_Disconnect)
    136c:	88 85       	ldd	r24, Y+8	; 0x08
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	79 f4       	brne	.+30     	; 0x1390 <T1_voidClearTimerModeInit+0x28e>
		{//disconnect  pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1372:	af e4       	ldi	r26, 0x4F	; 79
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7b       	andi	r24, 0xBF	; 191
    137e:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1380:	af e4       	ldi	r26, 0x4F	; 79
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ef e4       	ldi	r30, 0x4F	; 79
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8f 77       	andi	r24, 0x7F	; 127
    138c:	8c 93       	st	X, r24
    138e:	35 c0       	rjmp	.+106    	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_Tog)
    1390:	88 85       	ldd	r24, Y+8	; 0x08
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	79 f4       	brne	.+30     	; 0x13b4 <T1_voidClearTimerModeInit+0x2b2>
		{	//Tog Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    1396:	af e4       	ldi	r26, 0x4F	; 79
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	ef e4       	ldi	r30, 0x4F	; 79
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 64       	ori	r24, 0x40	; 64
    13a2:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13a4:	af e4       	ldi	r26, 0x4F	; 79
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	ef e4       	ldi	r30, 0x4F	; 79
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 77       	andi	r24, 0x7F	; 127
    13b0:	8c 93       	st	X, r24
    13b2:	23 c0       	rjmp	.+70     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_CLr)
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	83 30       	cpi	r24, 0x03	; 3
    13b8:	79 f4       	brne	.+30     	; 0x13d8 <T1_voidClearTimerModeInit+0x2d6>
		{
			//clr Pin OC0
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    13ba:	af e4       	ldi	r26, 0x4F	; 79
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	ef e4       	ldi	r30, 0x4F	; 79
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8f 7b       	andi	r24, 0xBF	; 191
    13c6:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13c8:	af e4       	ldi	r26, 0x4F	; 79
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	ef e4       	ldi	r30, 0x4F	; 79
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	80 68       	ori	r24, 0x80	; 128
    13d4:	8c 93       	st	X, r24
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		}
		else if (OC1AState==CTC_OC1A_Set)
    13d8:	88 85       	ldd	r24, Y+8	; 0x08
    13da:	84 30       	cpi	r24, 0x04	; 4
    13dc:	71 f4       	brne	.+28     	; 0x13fa <T1_voidClearTimerModeInit+0x2f8>
		{
			//set Pin OC0
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    13de:	af e4       	ldi	r26, 0x4F	; 79
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	ef e4       	ldi	r30, 0x4F	; 79
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	80 64       	ori	r24, 0x40	; 64
    13ea:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    13ec:	af e4       	ldi	r26, 0x4F	; 79
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e4       	ldi	r30, 0x4F	; 79
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	80 68       	ori	r24, 0x80	; 128
    13f8:	8c 93       	st	X, r24
		}
		if(OC1BState==CTC_OC1B_Disconnect)
    13fa:	89 85       	ldd	r24, Y+9	; 0x09
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	79 f4       	brne	.+30     	; 0x141e <T1_voidClearTimerModeInit+0x31c>
				{//disconnect  pin OC0
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1400:	af e4       	ldi	r26, 0x4F	; 79
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	ef e4       	ldi	r30, 0x4F	; 79
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 7e       	andi	r24, 0xEF	; 239
    140c:	8c 93       	st	X, r24
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    140e:	af e4       	ldi	r26, 0x4F	; 79
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	ef e4       	ldi	r30, 0x4F	; 79
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 7d       	andi	r24, 0xDF	; 223
    141a:	8c 93       	st	X, r24
    141c:	35 c0       	rjmp	.+106    	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_Tog)
    141e:	89 85       	ldd	r24, Y+9	; 0x09
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	79 f4       	brne	.+30     	; 0x1442 <T1_voidClearTimerModeInit+0x340>
				{	//Tog Pin OC0
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1424:	af e4       	ldi	r26, 0x4F	; 79
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	ef e4       	ldi	r30, 0x4F	; 79
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 61       	ori	r24, 0x10	; 16
    1430:	8c 93       	st	X, r24
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1432:	af e4       	ldi	r26, 0x4F	; 79
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	ef e4       	ldi	r30, 0x4F	; 79
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	8f 7d       	andi	r24, 0xDF	; 223
    143e:	8c 93       	st	X, r24
    1440:	23 c0       	rjmp	.+70     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_CLr)
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	83 30       	cpi	r24, 0x03	; 3
    1446:	79 f4       	brne	.+30     	; 0x1466 <T1_voidClearTimerModeInit+0x364>
				{
					//clr Pin OC0
					clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1448:	af e4       	ldi	r26, 0x4F	; 79
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ef e4       	ldi	r30, 0x4F	; 79
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	8f 7e       	andi	r24, 0xEF	; 239
    1454:	8c 93       	st	X, r24
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1456:	af e4       	ldi	r26, 0x4F	; 79
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	ef e4       	ldi	r30, 0x4F	; 79
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	80 62       	ori	r24, 0x20	; 32
    1462:	8c 93       	st	X, r24
    1464:	11 c0       	rjmp	.+34     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				}
				else if (OC1BState==CTC_OC1B_Set)
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	71 f4       	brne	.+28     	; 0x1488 <T1_voidClearTimerModeInit+0x386>
				{
					//set Pin OC0
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    146c:	af e4       	ldi	r26, 0x4F	; 79
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	ef e4       	ldi	r30, 0x4F	; 79
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 61       	ori	r24, 0x10	; 16
    1478:	8c 93       	st	X, r24
					set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    147a:	af e4       	ldi	r26, 0x4F	; 79
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ef e4       	ldi	r30, 0x4F	; 79
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	80 62       	ori	r24, 0x20	; 32
    1486:	8c 93       	st	X, r24
				}
	}
	Prescaller&=0x07;
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	87 70       	andi	r24, 0x07	; 7
    148c:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    148e:	ae e4       	ldi	r26, 0x4E	; 78
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	ee e4       	ldi	r30, 0x4E	; 78
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    149c:	ae e4       	ldi	r26, 0x4E	; 78
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	ee e4       	ldi	r30, 0x4E	; 78
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	90 81       	ld	r25, Z
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	89 2b       	or	r24, r25
    14aa:	8c 93       	st	X, r24
}
    14ac:	29 96       	adiw	r28, 0x09	; 9
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	0f 91       	pop	r16
    14be:	ef 90       	pop	r14
    14c0:	cf 90       	pop	r12
    14c2:	08 95       	ret

000014c4 <T1_voidCallBackFuncCTCModeA>:


void T1_voidCallBackFuncCTCModeA(void (*CTCApf)(void))
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <T1_voidCallBackFuncCTCModeA+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	if(CTCApf!=NULL)
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	31 f0       	breq	.+12     	; 0x14e6 <T1_voidCallBackFuncCTCModeA+0x22>
	{
		GlobalCTCAPf=CTCApf;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	90 93 97 01 	sts	0x0197, r25
    14e2:	80 93 96 01 	sts	0x0196, r24
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <__vector_7>:


void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    14f0:	1f 92       	push	r1
    14f2:	0f 92       	push	r0
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	0f 92       	push	r0
    14f8:	11 24       	eor	r1, r1
    14fa:	2f 93       	push	r18
    14fc:	3f 93       	push	r19
    14fe:	4f 93       	push	r20
    1500:	5f 93       	push	r21
    1502:	6f 93       	push	r22
    1504:	7f 93       	push	r23
    1506:	8f 93       	push	r24
    1508:	9f 93       	push	r25
    150a:	af 93       	push	r26
    150c:	bf 93       	push	r27
    150e:	ef 93       	push	r30
    1510:	ff 93       	push	r31
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCAPf!=NULL)
    151a:	80 91 96 01 	lds	r24, 0x0196
    151e:	90 91 97 01 	lds	r25, 0x0197
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	29 f0       	breq	.+10     	; 0x1530 <__vector_7+0x40>
	{
		GlobalCTCAPf();
    1526:	e0 91 96 01 	lds	r30, 0x0196
    152a:	f0 91 97 01 	lds	r31, 0x0197
    152e:	09 95       	icall
	}
}
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	ff 91       	pop	r31
    1536:	ef 91       	pop	r30
    1538:	bf 91       	pop	r27
    153a:	af 91       	pop	r26
    153c:	9f 91       	pop	r25
    153e:	8f 91       	pop	r24
    1540:	7f 91       	pop	r23
    1542:	6f 91       	pop	r22
    1544:	5f 91       	pop	r21
    1546:	4f 91       	pop	r20
    1548:	3f 91       	pop	r19
    154a:	2f 91       	pop	r18
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <T1_voidCallBackFuncCTCModeB>:


void T1_voidCallBackFuncCTCModeB(void (*CTCBpf)(void))
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <T1_voidCallBackFuncCTCModeB+0x6>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9a 83       	std	Y+2, r25	; 0x02
    1562:	89 83       	std	Y+1, r24	; 0x01
	if(CTCBpf!=NULL)
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	31 f0       	breq	.+12     	; 0x1578 <T1_voidCallBackFuncCTCModeB+0x22>
	{
		GlobalCTCBPf=CTCBpf;
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	90 93 99 01 	sts	0x0199, r25
    1574:	80 93 98 01 	sts	0x0198, r24
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	cf 91       	pop	r28
    157e:	df 91       	pop	r29
    1580:	08 95       	ret

00001582 <__vector_8>:


void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1582:	1f 92       	push	r1
    1584:	0f 92       	push	r0
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	0f 92       	push	r0
    158a:	11 24       	eor	r1, r1
    158c:	2f 93       	push	r18
    158e:	3f 93       	push	r19
    1590:	4f 93       	push	r20
    1592:	5f 93       	push	r21
    1594:	6f 93       	push	r22
    1596:	7f 93       	push	r23
    1598:	8f 93       	push	r24
    159a:	9f 93       	push	r25
    159c:	af 93       	push	r26
    159e:	bf 93       	push	r27
    15a0:	ef 93       	push	r30
    15a2:	ff 93       	push	r31
    15a4:	df 93       	push	r29
    15a6:	cf 93       	push	r28
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62

	if (GlobalCTCBPf!=NULL)
    15ac:	80 91 98 01 	lds	r24, 0x0198
    15b0:	90 91 99 01 	lds	r25, 0x0199
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <__vector_8+0x40>
	{
		GlobalCTCBPf();
    15b8:	e0 91 98 01 	lds	r30, 0x0198
    15bc:	f0 91 99 01 	lds	r31, 0x0199
    15c0:	09 95       	icall
	}
}
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <T1_voidFastPWM>:



/*******************************Fast PWM*********************************/
void T1_voidFastPWM(u8 Type,u8 CompareUnit ,u8 PWMMode , u8 DutyCycle, u8 PreScaller )
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <T1_voidFastPWM+0xa>
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <T1_voidFastPWM+0xc>
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	6a 83       	std	Y+2, r22	; 0x02
    15fe:	4b 83       	std	Y+3, r20	; 0x03
    1600:	2c 83       	std	Y+4, r18	; 0x04
    1602:	0d 83       	std	Y+5, r16	; 0x05
	//prescaller
	PreScaller&=0x07;
    1604:	8d 81       	ldd	r24, Y+5	; 0x05
    1606:	87 70       	andi	r24, 0x07	; 7
    1608:	8d 83       	std	Y+5, r24	; 0x05
	T1_TCCR1B&=0xF8;
    160a:	ae e4       	ldi	r26, 0x4E	; 78
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ee e4       	ldi	r30, 0x4E	; 78
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	88 7f       	andi	r24, 0xF8	; 248
    1616:	8c 93       	st	X, r24
	T1_TCCR1B|=PreScaller;
    1618:	ae e4       	ldi	r26, 0x4E	; 78
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ee e4       	ldi	r30, 0x4E	; 78
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	90 81       	ld	r25, Z
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	89 2b       	or	r24, r25
    1626:	8c 93       	st	X, r24
	//select mode
	if (Type==FastPWM_8Bit)
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	88 23       	and	r24, r24
    162c:	e9 f4       	brne	.+58     	; 0x1668 <T1_voidFastPWM+0x80>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    162e:	af e4       	ldi	r26, 0x4F	; 79
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e4       	ldi	r30, 0x4F	; 79
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	81 60       	ori	r24, 0x01	; 1
    163a:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    163c:	af e4       	ldi	r26, 0x4F	; 79
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	ef e4       	ldi	r30, 0x4F	; 79
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8d 7f       	andi	r24, 0xFD	; 253
    1648:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    164a:	ae e4       	ldi	r26, 0x4E	; 78
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ee e4       	ldi	r30, 0x4E	; 78
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 60       	ori	r24, 0x08	; 8
    1656:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1658:	ae e4       	ldi	r26, 0x4E	; 78
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	ee e4       	ldi	r30, 0x4E	; 78
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8f 7e       	andi	r24, 0xEF	; 239
    1664:	8c 93       	st	X, r24
    1666:	7f c0       	rjmp	.+254    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_9Bit)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	e9 f4       	brne	.+58     	; 0x16a8 <T1_voidFastPWM+0xc0>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    166e:	af e4       	ldi	r26, 0x4F	; 79
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e4       	ldi	r30, 0x4F	; 79
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8e 7f       	andi	r24, 0xFE	; 254
    167a:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    167c:	af e4       	ldi	r26, 0x4F	; 79
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ef e4       	ldi	r30, 0x4F	; 79
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	82 60       	ori	r24, 0x02	; 2
    1688:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    168a:	ae e4       	ldi	r26, 0x4E	; 78
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	ee e4       	ldi	r30, 0x4E	; 78
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 60       	ori	r24, 0x08	; 8
    1696:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1698:	ae e4       	ldi	r26, 0x4E	; 78
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	ee e4       	ldi	r30, 0x4E	; 78
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	8f 7e       	andi	r24, 0xEF	; 239
    16a4:	8c 93       	st	X, r24
    16a6:	5f c0       	rjmp	.+190    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_10Bit)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	e9 f4       	brne	.+58     	; 0x16e8 <T1_voidFastPWM+0x100>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    16ae:	af e4       	ldi	r26, 0x4F	; 79
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ef e4       	ldi	r30, 0x4F	; 79
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    16bc:	af e4       	ldi	r26, 0x4F	; 79
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ef e4       	ldi	r30, 0x4F	; 79
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    16ca:	ae e4       	ldi	r26, 0x4E	; 78
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ee e4       	ldi	r30, 0x4E	; 78
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	88 60       	ori	r24, 0x08	; 8
    16d6:	8c 93       	st	X, r24
		clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    16d8:	ae e4       	ldi	r26, 0x4E	; 78
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	ee e4       	ldi	r30, 0x4E	; 78
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7e       	andi	r24, 0xEF	; 239
    16e4:	8c 93       	st	X, r24
    16e6:	3f c0       	rjmp	.+126    	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_ICR1)
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	83 30       	cpi	r24, 0x03	; 3
    16ec:	e9 f4       	brne	.+58     	; 0x1728 <T1_voidFastPWM+0x140>
	{
		clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    16ee:	af e4       	ldi	r26, 0x4F	; 79
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	8e 7f       	andi	r24, 0xFE	; 254
    16fa:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    16fc:	af e4       	ldi	r26, 0x4F	; 79
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ef e4       	ldi	r30, 0x4F	; 79
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	82 60       	ori	r24, 0x02	; 2
    1708:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    170a:	ae e4       	ldi	r26, 0x4E	; 78
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ee e4       	ldi	r30, 0x4E	; 78
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1718:	ae e4       	ldi	r26, 0x4E	; 78
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	ee e4       	ldi	r30, 0x4E	; 78
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 61       	ori	r24, 0x10	; 16
    1724:	8c 93       	st	X, r24
    1726:	1f c0       	rjmp	.+62     	; 0x1766 <T1_voidFastPWM+0x17e>
	}
	else if (Type==FastPWM_OCR1A)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	e1 f4       	brne	.+56     	; 0x1766 <T1_voidFastPWM+0x17e>
	{
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    172e:	af e4       	ldi	r26, 0x4F	; 79
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	ef e4       	ldi	r30, 0x4F	; 79
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	81 60       	ori	r24, 0x01	; 1
    173a:	8c 93       	st	X, r24
		set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    173c:	af e4       	ldi	r26, 0x4F	; 79
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ef e4       	ldi	r30, 0x4F	; 79
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	82 60       	ori	r24, 0x02	; 2
    1748:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    174a:	ae e4       	ldi	r26, 0x4E	; 78
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ee e4       	ldi	r30, 0x4E	; 78
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 60       	ori	r24, 0x08	; 8
    1756:	8c 93       	st	X, r24
		set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    1758:	ae e4       	ldi	r26, 0x4E	; 78
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ee e4       	ldi	r30, 0x4E	; 78
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 61       	ori	r24, 0x10	; 16
    1764:	8c 93       	st	X, r24
	}

	//select compare unit & mode
	if (CompareUnit==PWM_UnitA)
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <T1_voidFastPWM+0x186>
    176c:	65 c0       	rjmp	.+202    	; 0x1838 <T1_voidFastPWM+0x250>
	{
		T1_OCR1A=(65535*DutyCycle)/100;
    176e:	0a e4       	ldi	r16, 0x4A	; 74
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	88 2f       	mov	r24, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 e0       	ldi	r26, 0x00	; 0
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	2f ef       	ldi	r18, 0xFF	; 255
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__mulsi3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	24 e6       	ldi	r18, 0x64	; 100
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	50 e0       	ldi	r21, 0x00	; 0
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    17a0:	da 01       	movw	r26, r20
    17a2:	c9 01       	movw	r24, r18
    17a4:	f8 01       	movw	r30, r16
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1A_Disconnect)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	79 f4       	brne	.+30     	; 0x17ce <T1_voidFastPWM+0x1e6>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17b0:	af e4       	ldi	r26, 0x4F	; 79
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	ef e4       	ldi	r30, 0x4F	; 79
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	8f 7b       	andi	r24, 0xBF	; 191
    17bc:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    17be:	af e4       	ldi	r26, 0x4F	; 79
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e4       	ldi	r30, 0x4F	; 79
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 77       	andi	r24, 0x7F	; 127
    17ca:	8c 93       	st	X, r24
    17cc:	35 c0       	rjmp	.+106    	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Tog)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	82 30       	cpi	r24, 0x02	; 2
    17d2:	79 f4       	brne	.+30     	; 0x17f2 <T1_voidFastPWM+0x20a>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17d4:	af e4       	ldi	r26, 0x4F	; 79
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ef e4       	ldi	r30, 0x4F	; 79
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	80 64       	ori	r24, 0x40	; 64
    17e0:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ef e4       	ldi	r30, 0x4F	; 79
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8f 77       	andi	r24, 0x7F	; 127
    17ee:	8c 93       	st	X, r24
    17f0:	23 c0       	rjmp	.+70     	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_CLr)
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	79 f4       	brne	.+30     	; 0x1816 <T1_voidFastPWM+0x22e>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    17f8:	af e4       	ldi	r26, 0x4F	; 79
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ef e4       	ldi	r30, 0x4F	; 79
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	8f 7b       	andi	r24, 0xBF	; 191
    1804:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    1806:	af e4       	ldi	r26, 0x4F	; 79
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ef e4       	ldi	r30, 0x4F	; 79
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	8c 93       	st	X, r24
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <T1_voidFastPWM+0x250>
		}
		else if (PWMMode==PWM_OC1A_Set)
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	71 f4       	brne	.+28     	; 0x1838 <T1_voidFastPWM+0x250>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A0);
    181c:	af e4       	ldi	r26, 0x4F	; 79
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ef e4       	ldi	r30, 0x4F	; 79
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1A1);
    182a:	af e4       	ldi	r26, 0x4F	; 79
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ef e4       	ldi	r30, 0x4F	; 79
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	80 68       	ori	r24, 0x80	; 128
    1836:	8c 93       	st	X, r24
		}
	}
	if (CompareUnit==PWM_UnitB)
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	82 30       	cpi	r24, 0x02	; 2
    183c:	09 f0       	breq	.+2      	; 0x1840 <T1_voidFastPWM+0x258>
    183e:	65 c0       	rjmp	.+202    	; 0x190a <T1_voidFastPWM+0x322>
	{
		T1_OCR1B=(65535*DutyCycle)/100;
    1840:	08 e4       	ldi	r16, 0x48	; 72
    1842:	10 e0       	ldi	r17, 0x00	; 0
    1844:	8c 81       	ldd	r24, Y+4	; 0x04
    1846:	88 2f       	mov	r24, r24
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	50 e0       	ldi	r21, 0x00	; 0
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__mulsi3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	24 e6       	ldi	r18, 0x64	; 100
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    1872:	da 01       	movw	r26, r20
    1874:	c9 01       	movw	r24, r18
    1876:	f8 01       	movw	r30, r16
    1878:	91 83       	std	Z+1, r25	; 0x01
    187a:	80 83       	st	Z, r24
		if (PWMMode==PWM_OC1B_Disconnect)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	79 f4       	brne	.+30     	; 0x18a0 <T1_voidFastPWM+0x2b8>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7e       	andi	r24, 0xEF	; 239
    188e:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    1890:	af e4       	ldi	r26, 0x4F	; 79
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	ef e4       	ldi	r30, 0x4F	; 79
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 7d       	andi	r24, 0xDF	; 223
    189c:	8c 93       	st	X, r24
    189e:	35 c0       	rjmp	.+106    	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Tog)
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	79 f4       	brne	.+30     	; 0x18c4 <T1_voidFastPWM+0x2dc>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18a6:	af e4       	ldi	r26, 0x4F	; 79
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	ef e4       	ldi	r30, 0x4F	; 79
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 61       	ori	r24, 0x10	; 16
    18b2:	8c 93       	st	X, r24
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18b4:	af e4       	ldi	r26, 0x4F	; 79
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ef e4       	ldi	r30, 0x4F	; 79
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	8f 7d       	andi	r24, 0xDF	; 223
    18c0:	8c 93       	st	X, r24
    18c2:	23 c0       	rjmp	.+70     	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_CLr)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	83 30       	cpi	r24, 0x03	; 3
    18c8:	79 f4       	brne	.+30     	; 0x18e8 <T1_voidFastPWM+0x300>
		{
			clear_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18ca:	af e4       	ldi	r26, 0x4F	; 79
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ef e4       	ldi	r30, 0x4F	; 79
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 7e       	andi	r24, 0xEF	; 239
    18d6:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18d8:	af e4       	ldi	r26, 0x4F	; 79
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ef e4       	ldi	r30, 0x4F	; 79
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 62       	ori	r24, 0x20	; 32
    18e4:	8c 93       	st	X, r24
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <T1_voidFastPWM+0x322>
		}
		else if (PWMMode==PWM_OC1B_Set)
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	71 f4       	brne	.+28     	; 0x190a <T1_voidFastPWM+0x322>
		{
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B0);
    18ee:	af e4       	ldi	r26, 0x4F	; 79
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	ef e4       	ldi	r30, 0x4F	; 79
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	80 61       	ori	r24, 0x10	; 16
    18fa:	8c 93       	st	X, r24
			set_bit(T1_TCCR1A,T1_TCCR1A_COM1B1);
    18fc:	af e4       	ldi	r26, 0x4F	; 79
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	ef e4       	ldi	r30, 0x4F	; 79
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	80 62       	ori	r24, 0x20	; 32
    1908:	8c 93       	st	X, r24
		}
	}

}
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	08 95       	ret

0000191e <T1_voidFastPWMServo>:



/****************************Servo Functions*************************/
void T1_voidFastPWMServo(u8 angle)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <T1_voidFastPWMServo+0x6>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	8a 83       	std	Y+2, r24	; 0x02
	u8 Prescaller=prescaler8;
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	89 83       	std	Y+1, r24	; 0x01
	Prescaller&=0x07;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	87 70       	andi	r24, 0x07	; 7
    1932:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    1934:	ae e4       	ldi	r26, 0x4E	; 78
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	ee e4       	ldi	r30, 0x4E	; 78
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 7f       	andi	r24, 0xF8	; 248
    1940:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	90 81       	ld	r25, Z
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	89 2b       	or	r24, r25
    1950:	8c 93       	st	X, r24
	//select mode 14 (ICR1)
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    1952:	af e4       	ldi	r26, 0x4F	; 79
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	ef e4       	ldi	r30, 0x4F	; 79
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8e 7f       	andi	r24, 0xFE	; 254
    195e:	8c 93       	st	X, r24
	set_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    1960:	af e4       	ldi	r26, 0x4F	; 79
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	ef e4       	ldi	r30, 0x4F	; 79
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	82 60       	ori	r24, 0x02	; 2
    196c:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 60       	ori	r24, 0x08	; 8
    197a:	8c 93       	st	X, r24
	set_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    197c:	ae e4       	ldi	r26, 0x4E	; 78
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	ee e4       	ldi	r30, 0x4E	; 78
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 61       	ori	r24, 0x10	; 16
    1988:	8c 93       	st	X, r24
	//Set the Top Value
	T1_ICR1=Servo_value;
    198a:	e8 e4       	ldi	r30, 0x48	; 72
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8f e1       	ldi	r24, 0x1F	; 31
    1990:	9e e4       	ldi	r25, 0x4E	; 78
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24

	//set the angle
	T1_OCR1A=angle;
    1996:	ea e4       	ldi	r30, 0x4A	; 74
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	88 2f       	mov	r24, r24
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	80 83       	st	Z, r24
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <T1_voidICUInit>:



/***********************ICU functions*******************************/
void T1_voidICUInit(void)
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
	u8 Prescaller=prescaler8;
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	89 83       	std	Y+1, r24	; 0x01
	//NormalMode
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM10);
    19bc:	af e4       	ldi	r26, 0x4F	; 79
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e4       	ldi	r30, 0x4F	; 79
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8e 7f       	andi	r24, 0xFE	; 254
    19c8:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1A,T1_TCCR1A_WGM11);
    19ca:	af e4       	ldi	r26, 0x4F	; 79
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ef e4       	ldi	r30, 0x4F	; 79
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8d 7f       	andi	r24, 0xFD	; 253
    19d6:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM12);
    19d8:	ae e4       	ldi	r26, 0x4E	; 78
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	ee e4       	ldi	r30, 0x4E	; 78
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	87 7f       	andi	r24, 0xF7	; 247
    19e4:	8c 93       	st	X, r24
	clear_bit(T1_TCCR1B,T1_TCCR1B_WGM13);
    19e6:	ae e4       	ldi	r26, 0x4E	; 78
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	ee e4       	ldi	r30, 0x4E	; 78
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 7e       	andi	r24, 0xEF	; 239
    19f2:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	87 70       	andi	r24, 0x07	; 7
    19f8:	89 83       	std	Y+1, r24	; 0x01
	T1_TCCR1B&=0xF8;
    19fa:	ae e4       	ldi	r26, 0x4E	; 78
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ee e4       	ldi	r30, 0x4E	; 78
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	88 7f       	andi	r24, 0xF8	; 248
    1a06:	8c 93       	st	X, r24
	T1_TCCR1B|=Prescaller;
    1a08:	ae e4       	ldi	r26, 0x4E	; 78
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	ee e4       	ldi	r30, 0x4E	; 78
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	90 81       	ld	r25, Z
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	89 2b       	or	r24, r25
    1a16:	8c 93       	st	X, r24
	//Set ICU Bit to Rising
	set_bit(T1_TCCR1B,T1_TCCR1B_ICES1);
    1a18:	ae e4       	ldi	r26, 0x4E	; 78
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	ee e4       	ldi	r30, 0x4E	; 78
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 64       	ori	r24, 0x40	; 64
    1a24:	8c 93       	st	X, r24
	//Enable ICU Interrupt
	set_bit(T1_TIMSK,T1_TIMSK_TICIE1);
    1a26:	a9 e5       	ldi	r26, 0x59	; 89
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e9 e5       	ldi	r30, 0x59	; 89
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 62       	ori	r24, 0x20	; 32
    1a32:	8c 93       	st	X, r24
	}
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <T1_voidCallBackFuncICUMode>:


void T1_voidCallBackFuncICUMode(void (*ICUpf)(void))
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <T1_voidCallBackFuncICUMode+0x6>
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
	if(ICUpf!=NULL)
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	00 97       	sbiw	r24, 0x00	; 0
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <T1_voidCallBackFuncICUMode+0x22>
	{
		GlobalICUPf=ICUpf;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	9a 81       	ldd	r25, Y+2	; 0x02
    1a56:	90 93 93 01 	sts	0x0193, r25
    1a5a:	80 93 92 01 	sts	0x0192, r24
	}
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <__vector_6>:


void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    1a68:	1f 92       	push	r1
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	0f 92       	push	r0
    1a70:	11 24       	eor	r1, r1
    1a72:	2f 93       	push	r18
    1a74:	3f 93       	push	r19
    1a76:	4f 93       	push	r20
    1a78:	5f 93       	push	r21
    1a7a:	6f 93       	push	r22
    1a7c:	7f 93       	push	r23
    1a7e:	8f 93       	push	r24
    1a80:	9f 93       	push	r25
    1a82:	af 93       	push	r26
    1a84:	bf 93       	push	r27
    1a86:	ef 93       	push	r30
    1a88:	ff 93       	push	r31
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62

	if (GlobalICUPf!=NULL)
    1a92:	80 91 92 01 	lds	r24, 0x0192
    1a96:	90 91 93 01 	lds	r25, 0x0193
    1a9a:	00 97       	sbiw	r24, 0x00	; 0
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <__vector_6+0x40>
	{
		GlobalICUPf();
    1a9e:	e0 91 92 01 	lds	r30, 0x0192
    1aa2:	f0 91 93 01 	lds	r31, 0x0193
    1aa6:	09 95       	icall
	}

}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	bf 91       	pop	r27
    1ab2:	af 91       	pop	r26
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <T0_voidNormalModeInit>:



/*************************************Normal Mode functions***************************/
void T0_voidNormalModeInit(u8 Prescaller,u8 PreloadValue,u8 InterruptState)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <T0_voidNormalModeInit+0x6>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
    1ade:	4b 83       	std	Y+3, r20	; 0x03
	//select mode
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1ae0:	a3 e5       	ldi	r26, 0x53	; 83
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e3 e5       	ldi	r30, 0x53	; 83
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	8f 7b       	andi	r24, 0xBF	; 191
    1aec:	8c 93       	st	X, r24
	clear_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1aee:	a3 e5       	ldi	r26, 0x53	; 83
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e3 e5       	ldi	r30, 0x53	; 83
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	87 7f       	andi	r24, 0xF7	; 247
    1afa:	8c 93       	st	X, r24
	//Prescaller
	Prescaller&=0x07;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	87 70       	andi	r24, 0x07	; 7
    1b00:	89 83       	std	Y+1, r24	; 0x01
	T0_TCCR0&=0xF8;
    1b02:	a3 e5       	ldi	r26, 0x53	; 83
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e3 e5       	ldi	r30, 0x53	; 83
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	88 7f       	andi	r24, 0xF8	; 248
    1b0e:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1b10:	a3 e5       	ldi	r26, 0x53	; 83
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e3 e5       	ldi	r30, 0x53	; 83
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	90 81       	ld	r25, Z
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	89 2b       	or	r24, r25
    1b1e:	8c 93       	st	X, r24
	T0_TCNT0=PreloadValue;
    1b20:	e2 e5       	ldi	r30, 0x52	; 82
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	41 f4       	brne	.+16     	; 0x1b3e <T0_voidNormalModeInit+0x70>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1b2e:	a9 e5       	ldi	r26, 0x59	; 89
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	81 60       	ori	r24, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
    1b3c:	0a c0       	rjmp	.+20     	; 0x1b52 <T0_voidNormalModeInit+0x84>
	}
	else if(InterruptState ==disable)
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	82 30       	cpi	r24, 0x02	; 2
    1b42:	39 f4       	brne	.+14     	; 0x1b52 <T0_voidNormalModeInit+0x84>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1b44:	a9 e5       	ldi	r26, 0x59	; 89
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e9 e5       	ldi	r30, 0x59	; 89
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	8c 93       	st	X, r24
	}

}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <T0_voidCallBackFuncNormalMode>:


void T0_voidCallBackFuncNormalMode(void (*OVpf)(void))
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	00 d0       	rcall	.+0      	; 0x1b64 <T0_voidCallBackFuncNormalMode+0x6>
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
	if (OVpf!=NULL)
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	31 f0       	breq	.+12     	; 0x1b80 <T0_voidCallBackFuncNormalMode+0x22>
	{
		GlobalOVPF=OVpf;
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	90 93 9b 01 	sts	0x019B, r25
    1b7c:	80 93 9a 01 	sts	0x019A, r24
	}
}
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <__vector_11>:


void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1b8a:	1f 92       	push	r1
    1b8c:	0f 92       	push	r0
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	0f 92       	push	r0
    1b92:	11 24       	eor	r1, r1
    1b94:	2f 93       	push	r18
    1b96:	3f 93       	push	r19
    1b98:	4f 93       	push	r20
    1b9a:	5f 93       	push	r21
    1b9c:	6f 93       	push	r22
    1b9e:	7f 93       	push	r23
    1ba0:	8f 93       	push	r24
    1ba2:	9f 93       	push	r25
    1ba4:	af 93       	push	r26
    1ba6:	bf 93       	push	r27
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
	if(GlobalOVPF!=NULL)
    1bb4:	80 91 9a 01 	lds	r24, 0x019A
    1bb8:	90 91 9b 01 	lds	r25, 0x019B
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <__vector_11+0x40>
	{
		GlobalOVPF();
    1bc0:	e0 91 9a 01 	lds	r30, 0x019A
    1bc4:	f0 91 9b 01 	lds	r31, 0x019B
    1bc8:	09 95       	icall
	}
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	ff 91       	pop	r31
    1bd0:	ef 91       	pop	r30
    1bd2:	bf 91       	pop	r27
    1bd4:	af 91       	pop	r26
    1bd6:	9f 91       	pop	r25
    1bd8:	8f 91       	pop	r24
    1bda:	7f 91       	pop	r23
    1bdc:	6f 91       	pop	r22
    1bde:	5f 91       	pop	r21
    1be0:	4f 91       	pop	r20
    1be2:	3f 91       	pop	r19
    1be4:	2f 91       	pop	r18
    1be6:	0f 90       	pop	r0
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	0f 90       	pop	r0
    1bec:	1f 90       	pop	r1
    1bee:	18 95       	reti

00001bf0 <T0_voidClearTimerModeInit>:



/**************************************CTC*****************************************/
void T0_voidClearTimerModeInit(u8 OC0State ,u8 Prescaller,u8 CompareValue , u8 InterruptState)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <T0_voidClearTimerModeInit+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <T0_voidClearTimerModeInit+0x8>
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	6a 83       	std	Y+2, r22	; 0x02
    1c00:	4b 83       	std	Y+3, r20	; 0x03
    1c02:	2c 83       	std	Y+4, r18	; 0x04
	clear_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1c04:	a3 e5       	ldi	r26, 0x53	; 83
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e3 e5       	ldi	r30, 0x53	; 83
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8f 7b       	andi	r24, 0xBF	; 191
    1c10:	8c 93       	st	X, r24
	set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1c12:	a3 e5       	ldi	r26, 0x53	; 83
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e3 e5       	ldi	r30, 0x53	; 83
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	88 60       	ori	r24, 0x08	; 8
    1c1e:	8c 93       	st	X, r24
	if(OC0State==CTC_OC0_Disconnect)
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	81 30       	cpi	r24, 0x01	; 1
    1c24:	79 f4       	brne	.+30     	; 0x1c44 <T0_voidClearTimerModeInit+0x54>
	{//disconnect  pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 7e       	andi	r24, 0xEF	; 239
    1c32:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c34:	a3 e5       	ldi	r26, 0x53	; 83
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e3 e5       	ldi	r30, 0x53	; 83
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	8f 7d       	andi	r24, 0xDF	; 223
    1c40:	8c 93       	st	X, r24
    1c42:	35 c0       	rjmp	.+106    	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Tog)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	79 f4       	brne	.+30     	; 0x1c68 <T0_voidClearTimerModeInit+0x78>
	{	//Tog Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c4a:	a3 e5       	ldi	r26, 0x53	; 83
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e3 e5       	ldi	r30, 0x53	; 83
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	8c 93       	st	X, r24
		clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c58:	a3 e5       	ldi	r26, 0x53	; 83
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e3 e5       	ldi	r30, 0x53	; 83
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7d       	andi	r24, 0xDF	; 223
    1c64:	8c 93       	st	X, r24
    1c66:	23 c0       	rjmp	.+70     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_CLr)
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	79 f4       	brne	.+30     	; 0x1c8c <T0_voidClearTimerModeInit+0x9c>
	{
		//clr Pin OC0
		clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c6e:	a3 e5       	ldi	r26, 0x53	; 83
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e3 e5       	ldi	r30, 0x53	; 83
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	8f 7e       	andi	r24, 0xEF	; 239
    1c7a:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1c7c:	a3 e5       	ldi	r26, 0x53	; 83
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e3 e5       	ldi	r30, 0x53	; 83
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	80 62       	ori	r24, 0x20	; 32
    1c88:	8c 93       	st	X, r24
    1c8a:	11 c0       	rjmp	.+34     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	}
	else if (OC0State==CTC_OC0_Set)
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	84 30       	cpi	r24, 0x04	; 4
    1c90:	71 f4       	brne	.+28     	; 0x1cae <T0_voidClearTimerModeInit+0xbe>
	{
		//set Pin OC0
		set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1c92:	a3 e5       	ldi	r26, 0x53	; 83
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e3 e5       	ldi	r30, 0x53	; 83
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 61       	ori	r24, 0x10	; 16
    1c9e:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1ca0:	a3 e5       	ldi	r26, 0x53	; 83
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e3 e5       	ldi	r30, 0x53	; 83
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	8c 93       	st	X, r24
	}
	//Prescaller
	Prescaller&=0x07;
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	87 70       	andi	r24, 0x07	; 7
    1cb2:	8a 83       	std	Y+2, r24	; 0x02
	T0_TCCR0&=0xF8;
    1cb4:	a3 e5       	ldi	r26, 0x53	; 83
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e3 e5       	ldi	r30, 0x53	; 83
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	88 7f       	andi	r24, 0xF8	; 248
    1cc0:	8c 93       	st	X, r24
	T0_TCCR0|=Prescaller;
    1cc2:	a3 e5       	ldi	r26, 0x53	; 83
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	e3 e5       	ldi	r30, 0x53	; 83
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	90 81       	ld	r25, Z
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	89 2b       	or	r24, r25
    1cd0:	8c 93       	st	X, r24
	//Output compare
	T0_OCR0 = CompareValue;
    1cd2:	ec e5       	ldi	r30, 0x5C	; 92
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	80 83       	st	Z, r24
	if(InterruptState ==enable)
    1cda:	8c 81       	ldd	r24, Y+4	; 0x04
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	41 f4       	brne	.+16     	; 0x1cf0 <T0_voidClearTimerModeInit+0x100>
	{
		set_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1ce0:	a9 e5       	ldi	r26, 0x59	; 89
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e9 e5       	ldi	r30, 0x59	; 89
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	81 60       	ori	r24, 0x01	; 1
    1cec:	8c 93       	st	X, r24
    1cee:	0a c0       	rjmp	.+20     	; 0x1d04 <T0_voidClearTimerModeInit+0x114>
	}
	else if(InterruptState ==disable)
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	39 f4       	brne	.+14     	; 0x1d04 <T0_voidClearTimerModeInit+0x114>
	{
		clear_bit(T0_TIMSK,T0_TIMSK_TOIE0);
    1cf6:	a9 e5       	ldi	r26, 0x59	; 89
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e9 e5       	ldi	r30, 0x59	; 89
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	8e 7f       	andi	r24, 0xFE	; 254
    1d02:	8c 93       	st	X, r24
	}

}
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <T0_voidCallBackFuncClearTimerMode>:


void T0_voidCallBackFuncClearTimerMode(void (*CTCpf)(void))
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <T0_voidCallBackFuncClearTimerMode+0x6>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	if (CTCpf!=NULL)
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <T0_voidCallBackFuncClearTimerMode+0x22>
	{
		GlobalCTCPF=CTCpf;
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	90 93 9d 01 	sts	0x019D, r25
    1d30:	80 93 9c 01 	sts	0x019C, r24
	}
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <__vector_10>:


void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1d3e:	1f 92       	push	r1
    1d40:	0f 92       	push	r0
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	0f 92       	push	r0
    1d46:	11 24       	eor	r1, r1
    1d48:	2f 93       	push	r18
    1d4a:	3f 93       	push	r19
    1d4c:	4f 93       	push	r20
    1d4e:	5f 93       	push	r21
    1d50:	6f 93       	push	r22
    1d52:	7f 93       	push	r23
    1d54:	8f 93       	push	r24
    1d56:	9f 93       	push	r25
    1d58:	af 93       	push	r26
    1d5a:	bf 93       	push	r27
    1d5c:	ef 93       	push	r30
    1d5e:	ff 93       	push	r31
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
	if(GlobalCTCPF!=NULL)
    1d68:	80 91 9c 01 	lds	r24, 0x019C
    1d6c:	90 91 9d 01 	lds	r25, 0x019D
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	29 f0       	breq	.+10     	; 0x1d7e <__vector_10+0x40>
	{
		GlobalCTCPF();
    1d74:	e0 91 9c 01 	lds	r30, 0x019C
    1d78:	f0 91 9d 01 	lds	r31, 0x019D
    1d7c:	09 95       	icall
	}
}
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	ff 91       	pop	r31
    1d84:	ef 91       	pop	r30
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	3f 91       	pop	r19
    1d98:	2f 91       	pop	r18
    1d9a:	0f 90       	pop	r0
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	0f 90       	pop	r0
    1da0:	1f 90       	pop	r1
    1da2:	18 95       	reti

00001da4 <T0_voidPWMModeInit>:



/**************************************PWM**************************************/
void T0_voidPWMModeInit(u8 PWMType, u8 OC0State ,u8 Prescaller, u8 DutyCycle)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <T0_voidPWMModeInit+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <T0_voidPWMModeInit+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	6a 83       	std	Y+2, r22	; 0x02
    1db4:	4b 83       	std	Y+3, r20	; 0x03
    1db6:	2c 83       	std	Y+4, r18	; 0x04
	if (PWMType==FastPWM)
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f0       	breq	.+2      	; 0x1dc0 <T0_voidPWMModeInit+0x1c>
    1dbe:	8f c0       	rjmp	.+286    	; 0x1ede <T0_voidPWMModeInit+0x13a>
	{
		//fast PWM
		set_bit(T0_TCCR0,T0_TCCR0_WGM00);
    1dc0:	a3 e5       	ldi	r26, 0x53	; 83
    1dc2:	b0 e0       	ldi	r27, 0x00	; 0
    1dc4:	e3 e5       	ldi	r30, 0x53	; 83
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 64       	ori	r24, 0x40	; 64
    1dcc:	8c 93       	st	X, r24
		set_bit(T0_TCCR0,T0_TCCR0_WGM01);
    1dce:	a3 e5       	ldi	r26, 0x53	; 83
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e3 e5       	ldi	r30, 0x53	; 83
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	88 60       	ori	r24, 0x08	; 8
    1dda:	8c 93       	st	X, r24
		if (OC0State==PWM_OC0_Disconnect)
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	81 30       	cpi	r24, 0x01	; 1
    1de0:	79 f4       	brne	.+30     	; 0x1e00 <T0_voidPWMModeInit+0x5c>
		{
			//disconnect  pin OC0
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1de2:	a3 e5       	ldi	r26, 0x53	; 83
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	e3 e5       	ldi	r30, 0x53	; 83
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8f 7e       	andi	r24, 0xEF	; 239
    1dee:	8c 93       	st	X, r24
			clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1df0:	a3 e5       	ldi	r26, 0x53	; 83
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e3 e5       	ldi	r30, 0x53	; 83
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 7d       	andi	r24, 0xDF	; 223
    1dfc:	8c 93       	st	X, r24
    1dfe:	5c c0       	rjmp	.+184    	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_nonInverting)
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	49 f5       	brne	.+82     	; 0x1e58 <T0_voidPWMModeInit+0xb4>
		{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1e06:	a3 e5       	ldi	r26, 0x53	; 83
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e3 e5       	ldi	r30, 0x53	; 83
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 7e       	andi	r24, 0xEF	; 239
    1e12:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1e14:	a3 e5       	ldi	r26, 0x53	; 83
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e3 e5       	ldi	r30, 0x53	; 83
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 62       	ori	r24, 0x20	; 32
    1e20:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1e22:	ec e5       	ldi	r30, 0x5C	; 92
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	48 2f       	mov	r20, r24
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	ca 01       	movw	r24, r20
    1e2e:	9c 01       	movw	r18, r24
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	c9 01       	movw	r24, r18
    1e36:	96 95       	lsr	r25
    1e38:	98 2f       	mov	r25, r24
    1e3a:	88 27       	eor	r24, r24
    1e3c:	97 95       	ror	r25
    1e3e:	87 95       	ror	r24
    1e40:	82 1b       	sub	r24, r18
    1e42:	93 0b       	sbc	r25, r19
    1e44:	84 0f       	add	r24, r20
    1e46:	95 1f       	adc	r25, r21
    1e48:	24 e6       	ldi	r18, 0x64	; 100
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__divmodhi4>
    1e52:	cb 01       	movw	r24, r22
    1e54:	80 83       	st	Z, r24
    1e56:	30 c0       	rjmp	.+96     	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		}
		else if (OC0State==PWM_OC0_Inverting)
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	83 30       	cpi	r24, 0x03	; 3
    1e5c:	69 f5       	brne	.+90     	; 0x1eb8 <T0_voidPWMModeInit+0x114>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	80 61       	ori	r24, 0x10	; 16
    1e6a:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1e6c:	a3 e5       	ldi	r26, 0x53	; 83
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e3 e5       	ldi	r30, 0x53	; 83
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	80 62       	ori	r24, 0x20	; 32
    1e78:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1e7a:	ec e5       	ldi	r30, 0x5C	; 92
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	28 2f       	mov	r18, r24
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	82 1b       	sub	r24, r18
    1e8a:	93 0b       	sbc	r25, r19
    1e8c:	24 e6       	ldi	r18, 0x64	; 100
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	b9 01       	movw	r22, r18
    1e92:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__divmodhi4>
    1e96:	cb 01       	movw	r24, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	ca 01       	movw	r24, r20
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	96 95       	lsr	r25
    1ea6:	98 2f       	mov	r25, r24
    1ea8:	88 27       	eor	r24, r24
    1eaa:	97 95       	ror	r25
    1eac:	87 95       	ror	r24
    1eae:	82 1b       	sub	r24, r18
    1eb0:	93 0b       	sbc	r25, r19
    1eb2:	84 0f       	add	r24, r20
    1eb4:	95 1f       	adc	r25, r21
    1eb6:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	87 70       	andi	r24, 0x07	; 7
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1ebe:	a3 e5       	ldi	r26, 0x53	; 83
    1ec0:	b0 e0       	ldi	r27, 0x00	; 0
    1ec2:	e3 e5       	ldi	r30, 0x53	; 83
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 7f       	andi	r24, 0xF8	; 248
    1eca:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1ecc:	a3 e5       	ldi	r26, 0x53	; 83
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e3 e5       	ldi	r30, 0x53	; 83
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	90 81       	ld	r25, Z
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	89 2b       	or	r24, r25
    1eda:	8c 93       	st	X, r24
    1edc:	84 c0       	rjmp	.+264    	; 0x1fe6 <T0_voidPWMModeInit+0x242>
	}
	else if (PWMType==PhaseCorrectPWM)
    1ede:	89 81       	ldd	r24, Y+1	; 0x01
    1ee0:	82 30       	cpi	r24, 0x02	; 2
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <T0_voidPWMModeInit+0x142>
    1ee4:	80 c0       	rjmp	.+256    	; 0x1fe6 <T0_voidPWMModeInit+0x242>
	{
		if (OC0State==PWM_OC0_Disconnect)
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	81 30       	cpi	r24, 0x01	; 1
    1eea:	79 f4       	brne	.+30     	; 0x1f0a <T0_voidPWMModeInit+0x166>
			{
				//disconnect  pin OC0
				clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1eec:	a3 e5       	ldi	r26, 0x53	; 83
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e3 e5       	ldi	r30, 0x53	; 83
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	8f 7e       	andi	r24, 0xEF	; 239
    1ef8:	8c 93       	st	X, r24
				clear_bit(T0_TCCR0,T0_TCCR0_COM01);
    1efa:	a3 e5       	ldi	r26, 0x53	; 83
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e3 e5       	ldi	r30, 0x53	; 83
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	8c 93       	st	X, r24
    1f08:	5c c0       	rjmp	.+184    	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_nonInverting)
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	49 f5       	brne	.+82     	; 0x1f62 <T0_voidPWMModeInit+0x1be>
			{
			//non-inverting mode
			clear_bit(T0_TCCR0,T0_TCCR0_COM00);
    1f10:	a3 e5       	ldi	r26, 0x53	; 83
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e3 e5       	ldi	r30, 0x53	; 83
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	8f 7e       	andi	r24, 0xEF	; 239
    1f1c:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1f1e:	a3 e5       	ldi	r26, 0x53	; 83
    1f20:	b0 e0       	ldi	r27, 0x00	; 0
    1f22:	e3 e5       	ldi	r30, 0x53	; 83
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	80 81       	ld	r24, Z
    1f28:	80 62       	ori	r24, 0x20	; 32
    1f2a:	8c 93       	st	X, r24
			T0_OCR0=(255*DutyCycle)/100;
    1f2c:	ec e5       	ldi	r30, 0x5C	; 92
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	8c 81       	ldd	r24, Y+4	; 0x04
    1f32:	48 2f       	mov	r20, r24
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	ca 01       	movw	r24, r20
    1f38:	9c 01       	movw	r18, r24
    1f3a:	22 0f       	add	r18, r18
    1f3c:	33 1f       	adc	r19, r19
    1f3e:	c9 01       	movw	r24, r18
    1f40:	96 95       	lsr	r25
    1f42:	98 2f       	mov	r25, r24
    1f44:	88 27       	eor	r24, r24
    1f46:	97 95       	ror	r25
    1f48:	87 95       	ror	r24
    1f4a:	82 1b       	sub	r24, r18
    1f4c:	93 0b       	sbc	r25, r19
    1f4e:	84 0f       	add	r24, r20
    1f50:	95 1f       	adc	r25, r21
    1f52:	24 e6       	ldi	r18, 0x64	; 100
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	b9 01       	movw	r22, r18
    1f58:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__divmodhi4>
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	80 83       	st	Z, r24
    1f60:	30 c0       	rjmp	.+96     	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
			}
		else if (OC0State==PWM_OC0_Inverting)
    1f62:	8a 81       	ldd	r24, Y+2	; 0x02
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	69 f5       	brne	.+90     	; 0x1fc2 <T0_voidPWMModeInit+0x21e>
		{
			//inverting mode
			set_bit(T0_TCCR0,T0_TCCR0_COM00);
    1f68:	a3 e5       	ldi	r26, 0x53	; 83
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e3 e5       	ldi	r30, 0x53	; 83
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	80 61       	ori	r24, 0x10	; 16
    1f74:	8c 93       	st	X, r24
			set_bit(T0_TCCR0,T0_TCCR0_COM01);
    1f76:	a3 e5       	ldi	r26, 0x53	; 83
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	e3 e5       	ldi	r30, 0x53	; 83
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 62       	ori	r24, 0x20	; 32
    1f82:	8c 93       	st	X, r24
			T0_OCR0=255*((1-DutyCycle)/100);
    1f84:	ec e5       	ldi	r30, 0x5C	; 92
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	82 1b       	sub	r24, r18
    1f94:	93 0b       	sbc	r25, r19
    1f96:	24 e6       	ldi	r18, 0x64	; 100
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__divmodhi4>
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	ac 01       	movw	r20, r24
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	9c 01       	movw	r18, r24
    1fa8:	22 0f       	add	r18, r18
    1faa:	33 1f       	adc	r19, r19
    1fac:	c9 01       	movw	r24, r18
    1fae:	96 95       	lsr	r25
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	88 27       	eor	r24, r24
    1fb4:	97 95       	ror	r25
    1fb6:	87 95       	ror	r24
    1fb8:	82 1b       	sub	r24, r18
    1fba:	93 0b       	sbc	r25, r19
    1fbc:	84 0f       	add	r24, r20
    1fbe:	95 1f       	adc	r25, r21
    1fc0:	80 83       	st	Z, r24
		}

		//Prescaller
		Prescaller&=0x07;
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	87 70       	andi	r24, 0x07	; 7
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
		T0_TCCR0&=0xF8;
    1fc8:	a3 e5       	ldi	r26, 0x53	; 83
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e3 e5       	ldi	r30, 0x53	; 83
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 7f       	andi	r24, 0xF8	; 248
    1fd4:	8c 93       	st	X, r24
		T0_TCCR0|=Prescaller;
    1fd6:	a3 e5       	ldi	r26, 0x53	; 83
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e3 e5       	ldi	r30, 0x53	; 83
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	90 81       	ld	r25, Z
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	89 2b       	or	r24, r25
    1fe4:	8c 93       	st	X, r24
	}

}
    1fe6:	0f 90       	pop	r0
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <SPI_voidinit>:
#include "SPI_Interface.h"



void SPI_voidinit(void)
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
#if SPI_InterrptE==disable
	clear_bit(SPI_SPCR,SPCR_SPIE);
    1ffc:	ad e2       	ldi	r26, 0x2D	; 45
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	ed e2       	ldi	r30, 0x2D	; 45
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	8f 77       	andi	r24, 0x7F	; 127
    2008:	8c 93       	st	X, r24
#endif

#if SPI_DataOrder==DataorderLSB
	set_bit(SPI_SPCR,SPCR_DORD);
#elif SPI_DataOrder==DataorderMSB
	clear_bit(SPI_SPCR,SPCR_DORD);
    200a:	ad e2       	ldi	r26, 0x2D	; 45
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	ed e2       	ldi	r30, 0x2D	; 45
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8f 7d       	andi	r24, 0xDF	; 223
    2016:	8c 93       	st	X, r24
#endif


	set_bit(SPI_SPCR,SPCR_SPE);
    2018:	ad e2       	ldi	r26, 0x2D	; 45
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ed e2       	ldi	r30, 0x2D	; 45
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
#if SPI_State==Master
	set_bit(SPI_SPCR,SPCR_MSTR);
    2026:	ad e2       	ldi	r26, 0x2D	; 45
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	ed e2       	ldi	r30, 0x2D	; 45
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	80 61       	ori	r24, 0x10	; 16
    2032:	8c 93       	st	X, r24
#elif SPI_State==Slave
	clear_bit(SPI_SPCR,SPCR_MSTR);
#endif

#if SPI_ClkPolarity==Rising
	clear_bit(SPI_SPCR,SPCR_CPOL);
    2034:	ad e2       	ldi	r26, 0x2D	; 45
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	ed e2       	ldi	r30, 0x2D	; 45
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	87 7f       	andi	r24, 0xF7	; 247
    2040:	8c 93       	st	X, r24
#elif SPI_ClkPolarity==Falling
	set_bit(SPI_SPCR,SPCR_CPOL);
#endif

#if SPI_ClkPhase==TxRx
	clear_bit(SPI_SPCR,SPCR_CPHA);
    2042:	ad e2       	ldi	r26, 0x2D	; 45
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	ed e2       	ldi	r30, 0x2D	; 45
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8b 7f       	andi	r24, 0xFB	; 251
    204e:	8c 93       	st	X, r24
	set_bit(SPI_SPCR,SPCR_CPHA);
#endif


#if SPI_Frequency==F4
	clear_bit(SPI_SPSR,SPSR_SPI2X);
    2050:	ae e2       	ldi	r26, 0x2E	; 46
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	ee e2       	ldi	r30, 0x2E	; 46
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8e 7f       	andi	r24, 0xFE	; 254
    205c:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR0);
    205e:	ad e2       	ldi	r26, 0x2D	; 45
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	ed e2       	ldi	r30, 0x2D	; 45
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	8e 7f       	andi	r24, 0xFE	; 254
    206a:	8c 93       	st	X, r24
	clear_bit(SPI_SPCR,SPCR_SPR1);
    206c:	ad e2       	ldi	r26, 0x2D	; 45
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ed e2       	ldi	r30, 0x2D	; 45
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	8d 7f       	andi	r24, 0xFD	; 253
    2078:	8c 93       	st	X, r24
	set_bit(SPI_SPSR,SPSR_SPI2X);
	clear_bit(SPI_SPCR,SPCR_SPR0);
	set_bit(SPI_SPCR,SPCR_SPR1);
#endif

}
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <SPI_u8sendReceiveByte>:




u8 SPI_u8sendReceiveByte(u8 data)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPI_SPDR = data;
    208c:	ef e2       	ldi	r30, 0x2F	; 47
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(!get_bit(SPI_SPSR,SPSR_SPIF)){}
    2094:	ee e2       	ldi	r30, 0x2E	; 46
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	88 23       	and	r24, r24
    209c:	dc f7       	brge	.-10     	; 0x2094 <SPI_u8sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPI_SPDR;
    209e:	ef e2       	ldi	r30, 0x2F	; 47
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
}
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <SPI_voidsendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_voidsendString(const u8 *str)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <SPI_voidsendString+0x6>
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <SPI_voidsendString+0x8>
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	9c 83       	std	Y+4, r25	; 0x04
    20ba:	8b 83       	std	Y+3, r24	; 0x03
	u8 i = 0;
    20bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 received_data = 0;
    20be:	19 82       	std	Y+1, r1	; 0x01
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <SPI_voidsendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	28 2f       	mov	r18, r24
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	9c 81       	ldd	r25, Y+4	; 0x04
    20cc:	fc 01       	movw	r30, r24
    20ce:	e2 0f       	add	r30, r18
    20d0:	f3 1f       	adc	r31, r19
    20d2:	80 81       	ld	r24, Z
    20d4:	0e 94 40 10 	call	0x2080	; 0x2080 <SPI_u8sendReceiveByte>
    20d8:	89 83       	std	Y+1, r24	; 0x01
		i++;
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	8f 5f       	subi	r24, 0xFF	; 255
    20de:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	fc 01       	movw	r30, r24
    20ec:	e2 0f       	add	r30, r18
    20ee:	f3 1f       	adc	r31, r19
    20f0:	80 81       	ld	r24, Z
    20f2:	88 23       	and	r24, r24
    20f4:	31 f7       	brne	.-52     	; 0x20c2 <SPI_voidsendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_u8sendReceiveByte(str[i]);
		i++;
	}
}
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <SPI_voidreceiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_voidreceiveString(u8 *str)
{
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	00 d0       	rcall	.+0      	; 0x210e <SPI_voidreceiveString+0xa>
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	9b 83       	std	Y+3, r25	; 0x03
    2116:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2118:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	8c 01       	movw	r16, r24
    2126:	02 0f       	add	r16, r18
    2128:	13 1f       	adc	r17, r19
    212a:	8f ef       	ldi	r24, 0xFF	; 255
    212c:	0e 94 40 10 	call	0x2080	; 0x2080 <SPI_u8sendReceiveByte>
    2130:	f8 01       	movw	r30, r16
    2132:	80 83       	st	Z, r24
    2134:	10 c0       	rjmp	.+32     	; 0x2156 <SPI_voidreceiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	8f 5f       	subi	r24, 0xFF	; 255
    213a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	9b 81       	ldd	r25, Y+3	; 0x03
    2146:	8c 01       	movw	r16, r24
    2148:	02 0f       	add	r16, r18
    214a:	13 1f       	adc	r17, r19
    214c:	8f ef       	ldi	r24, 0xFF	; 255
    214e:	0e 94 40 10 	call	0x2080	; 0x2080 <SPI_u8sendReceiveByte>
    2152:	f8 01       	movw	r30, r16
    2154:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	9b 81       	ldd	r25, Y+3	; 0x03
    2160:	fc 01       	movw	r30, r24
    2162:	e2 0f       	add	r30, r18
    2164:	f3 1f       	adc	r31, r19
    2166:	80 81       	ld	r24, Z
    2168:	83 32       	cpi	r24, 0x23	; 35
    216a:	29 f7       	brne	.-54     	; 0x2136 <SPI_voidreceiveString+0x32>
		i++;
		str[i] = SPI_u8sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	10 82       	st	Z, r1
}
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	1f 91       	pop	r17
    218a:	0f 91       	pop	r16
    218c:	08 95       	ret

0000218e <GIE_voidEnable>:
#define GIE_SREG    *((volatile u8*)0x5F)
#define GIE_I       7


void GIE_voidEnable()
{
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	set_bit(GIE_SREG,GIE_I);
    2196:	af e5       	ldi	r26, 0x5F	; 95
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	ef e5       	ldi	r30, 0x5F	; 95
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	80 68       	ori	r24, 0x80	; 128
    21a2:	8c 93       	st	X, r24
}
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <GIE_voidDisable>:

void GIE_voidDisable()
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
	clear_bit(GIE_SREG,GIE_I);
    21b2:	af e5       	ldi	r26, 0x5F	; 95
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	ef e5       	ldi	r30, 0x5F	; 95
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8f 77       	andi	r24, 0x7F	; 127
    21be:	8c 93       	st	X, r24
}
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <EXTI_voidInitINT0>:
#include "EXTI_Interface.h"
void (*EXTI0_ISR)();
void (*EXTI1_ISR)();
void (*EXTI2_ISR)();
void EXTI_voidInitINT0(u8 sense)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	0f 92       	push	r0
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	79 f4       	brne	.+30     	; 0x21f6 <EXTI_voidInitINT0+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    21d8:	a5 e5       	ldi	r26, 0x55	; 85
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e5 e5       	ldi	r30, 0x55	; 85
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	8e 7f       	andi	r24, 0xFE	; 254
    21e4:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    21e6:	a5 e5       	ldi	r26, 0x55	; 85
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e5 e5       	ldi	r30, 0x55	; 85
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8d 7f       	andi	r24, 0xFD	; 253
    21f2:	8c 93       	st	X, r24
    21f4:	35 c0       	rjmp	.+106    	; 0x2260 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==AnyCahnge)
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	82 30       	cpi	r24, 0x02	; 2
    21fa:	79 f4       	brne	.+30     	; 0x221a <EXTI_voidInitINT0+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    21fc:	a5 e5       	ldi	r26, 0x55	; 85
    21fe:	b0 e0       	ldi	r27, 0x00	; 0
    2200:	e5 e5       	ldi	r30, 0x55	; 85
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	81 60       	ori	r24, 0x01	; 1
    2208:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC01);
    220a:	a5 e5       	ldi	r26, 0x55	; 85
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e5 e5       	ldi	r30, 0x55	; 85
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	8d 7f       	andi	r24, 0xFD	; 253
    2216:	8c 93       	st	X, r24
    2218:	23 c0       	rjmp	.+70     	; 0x2260 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Falling)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	79 f4       	brne	.+30     	; 0x223e <EXTI_voidInitINT0+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC00);
    2220:	a5 e5       	ldi	r26, 0x55	; 85
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e5 e5       	ldi	r30, 0x55	; 85
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	8e 7f       	andi	r24, 0xFE	; 254
    222c:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    222e:	a5 e5       	ldi	r26, 0x55	; 85
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e5 e5       	ldi	r30, 0x55	; 85
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	8c 93       	st	X, r24
    223c:	11 c0       	rjmp	.+34     	; 0x2260 <EXTI_voidInitINT0+0x9a>
	}
	else if(sense==Rising)
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	84 30       	cpi	r24, 0x04	; 4
    2242:	71 f4       	brne	.+28     	; 0x2260 <EXTI_voidInitINT0+0x9a>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC00);
    2244:	a5 e5       	ldi	r26, 0x55	; 85
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e5 e5       	ldi	r30, 0x55	; 85
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	81 60       	ori	r24, 0x01	; 1
    2250:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC01);
    2252:	a5 e5       	ldi	r26, 0x55	; 85
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e5 e5       	ldi	r30, 0x55	; 85
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	82 60       	ori	r24, 0x02	; 2
    225e:	8c 93       	st	X, r24
	}
	else
	{
		//error
	}
	set_bit(EXTI_GICR,EXTI_INT0);
    2260:	ab e5       	ldi	r26, 0x5B	; 91
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	eb e5       	ldi	r30, 0x5B	; 91
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	80 64       	ori	r24, 0x40	; 64
    226c:	8c 93       	st	X, r24

}
    226e:	0f 90       	pop	r0
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <EXTI_voidInitINT1>:

void EXTI_voidInitINT1(u8 sense)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	0f 92       	push	r0
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
    2280:	89 83       	std	Y+1, r24	; 0x01
	if (sense==LowLevel)
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	79 f4       	brne	.+30     	; 0x22a6 <EXTI_voidInitINT1+0x30>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    2288:	a5 e5       	ldi	r26, 0x55	; 85
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e5 e5       	ldi	r30, 0x55	; 85
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8b 7f       	andi	r24, 0xFB	; 251
    2294:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    2296:	a5 e5       	ldi	r26, 0x55	; 85
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e5 e5       	ldi	r30, 0x55	; 85
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	87 7f       	andi	r24, 0xF7	; 247
    22a2:	8c 93       	st	X, r24
    22a4:	35 c0       	rjmp	.+106    	; 0x2310 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==AnyCahnge)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	82 30       	cpi	r24, 0x02	; 2
    22aa:	79 f4       	brne	.+30     	; 0x22ca <EXTI_voidInitINT1+0x54>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    22ac:	a5 e5       	ldi	r26, 0x55	; 85
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e5 e5       	ldi	r30, 0x55	; 85
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	84 60       	ori	r24, 0x04	; 4
    22b8:	8c 93       	st	X, r24
		clear_bit(EXTI_MCUCR,EXTI_ISC11);
    22ba:	a5 e5       	ldi	r26, 0x55	; 85
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e5       	ldi	r30, 0x55	; 85
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	87 7f       	andi	r24, 0xF7	; 247
    22c6:	8c 93       	st	X, r24
    22c8:	23 c0       	rjmp	.+70     	; 0x2310 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Falling)
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	83 30       	cpi	r24, 0x03	; 3
    22ce:	79 f4       	brne	.+30     	; 0x22ee <EXTI_voidInitINT1+0x78>
	{
		clear_bit(EXTI_MCUCR,EXTI_ISC10);
    22d0:	a5 e5       	ldi	r26, 0x55	; 85
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	e5 e5       	ldi	r30, 0x55	; 85
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	8b 7f       	andi	r24, 0xFB	; 251
    22dc:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    22de:	a5 e5       	ldi	r26, 0x55	; 85
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e5 e5       	ldi	r30, 0x55	; 85
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	88 60       	ori	r24, 0x08	; 8
    22ea:	8c 93       	st	X, r24
    22ec:	11 c0       	rjmp	.+34     	; 0x2310 <EXTI_voidInitINT1+0x9a>
	}
	else if(sense==Rising)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	a9 f4       	brne	.+42     	; 0x231e <EXTI_voidInitINT1+0xa8>
	{
		set_bit(EXTI_MCUCR,EXTI_ISC10);
    22f4:	a5 e5       	ldi	r26, 0x55	; 85
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e5 e5       	ldi	r30, 0x55	; 85
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	84 60       	ori	r24, 0x04	; 4
    2300:	8c 93       	st	X, r24
		set_bit(EXTI_MCUCR,EXTI_ISC11);
    2302:	a5 e5       	ldi	r26, 0x55	; 85
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e5 e5       	ldi	r30, 0x55	; 85
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	88 60       	ori	r24, 0x08	; 8
    230e:	8c 93       	st	X, r24
	}
	else
	{
		return;
	}
	set_bit(EXTI_GICR,EXTI_INT1);
    2310:	ab e5       	ldi	r26, 0x5B	; 91
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	eb e5       	ldi	r30, 0x5B	; 91
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	80 68       	ori	r24, 0x80	; 128
    231c:	8c 93       	st	X, r24
}
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <EXTI_voidInitINT2>:

void EXTI_voidInitINT2(u8 sense)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
	if(sense==Rising)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	84 30       	cpi	r24, 0x04	; 4
    2336:	41 f4       	brne	.+16     	; 0x2348 <EXTI_voidInitINT2+0x22>
	{
		set_bit(EXTI_MCUCSR,EXTI_ISC2);
    2338:	a4 e5       	ldi	r26, 0x54	; 84
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e4 e5       	ldi	r30, 0x54	; 84
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	80 64       	ori	r24, 0x40	; 64
    2344:	8c 93       	st	X, r24
    2346:	0a c0       	rjmp	.+20     	; 0x235c <EXTI_voidInitINT2+0x36>
	}
	else if (sense==Rising)
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	84 30       	cpi	r24, 0x04	; 4
    234c:	39 f4       	brne	.+14     	; 0x235c <EXTI_voidInitINT2+0x36>
	{
		clear_bit(EXTI_MCUCSR,EXTI_ISC2);
    234e:	a4 e5       	ldi	r26, 0x54	; 84
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e4 e5       	ldi	r30, 0x54	; 84
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8f 7b       	andi	r24, 0xBF	; 191
    235a:	8c 93       	st	X, r24
	}
	else
	{

	}
	set_bit(EXTI_GICR,EXTI_INT2);
    235c:	ab e5       	ldi	r26, 0x5B	; 91
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	eb e5       	ldi	r30, 0x5B	; 91
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	80 62       	ori	r24, 0x20	; 32
    2368:	8c 93       	st	X, r24
}
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <EXTI0_CallBack>:

void EXTI0_CallBack(void (*ptr)())
{
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	00 d0       	rcall	.+0      	; 0x2378 <EXTI0_CallBack+0x6>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    EXTI0_ISR = ptr;
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	90 93 a5 01 	sts	0x01A5, r25
    2388:	80 93 a4 01 	sts	0x01A4, r24
}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <__vector_1>:
void __vector_1()
{
    2396:	1f 92       	push	r1
    2398:	0f 92       	push	r0
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	0f 92       	push	r0
    239e:	11 24       	eor	r1, r1
    23a0:	2f 93       	push	r18
    23a2:	3f 93       	push	r19
    23a4:	4f 93       	push	r20
    23a6:	5f 93       	push	r21
    23a8:	6f 93       	push	r22
    23aa:	7f 93       	push	r23
    23ac:	8f 93       	push	r24
    23ae:	9f 93       	push	r25
    23b0:	af 93       	push	r26
    23b2:	bf 93       	push	r27
    23b4:	ef 93       	push	r30
    23b6:	ff 93       	push	r31
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
	EXTI0_ISR();
    23c0:	e0 91 a4 01 	lds	r30, 0x01A4
    23c4:	f0 91 a5 01 	lds	r31, 0x01A5
    23c8:	09 95       	icall
}
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	ff 91       	pop	r31
    23d0:	ef 91       	pop	r30
    23d2:	bf 91       	pop	r27
    23d4:	af 91       	pop	r26
    23d6:	9f 91       	pop	r25
    23d8:	8f 91       	pop	r24
    23da:	7f 91       	pop	r23
    23dc:	6f 91       	pop	r22
    23de:	5f 91       	pop	r21
    23e0:	4f 91       	pop	r20
    23e2:	3f 91       	pop	r19
    23e4:	2f 91       	pop	r18
    23e6:	0f 90       	pop	r0
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	0f 90       	pop	r0
    23ec:	1f 90       	pop	r1
    23ee:	18 95       	reti

000023f0 <EXTI1_CallBack>:
void EXTI1_CallBack (void (*ptr)())
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <EXTI1_CallBack+0x6>
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	9a 83       	std	Y+2, r25	; 0x02
    23fc:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_ISR = *ptr;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	90 93 a3 01 	sts	0x01A3, r25
    2406:	80 93 a2 01 	sts	0x01A2, r24
}
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	cf 91       	pop	r28
    2410:	df 91       	pop	r29
    2412:	08 95       	ret

00002414 <__vector_2>:
void __vector_2()
{
    2414:	1f 92       	push	r1
    2416:	0f 92       	push	r0
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	0f 92       	push	r0
    241c:	11 24       	eor	r1, r1
    241e:	2f 93       	push	r18
    2420:	3f 93       	push	r19
    2422:	4f 93       	push	r20
    2424:	5f 93       	push	r21
    2426:	6f 93       	push	r22
    2428:	7f 93       	push	r23
    242a:	8f 93       	push	r24
    242c:	9f 93       	push	r25
    242e:	af 93       	push	r26
    2430:	bf 93       	push	r27
    2432:	ef 93       	push	r30
    2434:	ff 93       	push	r31
    2436:	df 93       	push	r29
    2438:	cf 93       	push	r28
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
	EXTI1_ISR();
    243e:	e0 91 a2 01 	lds	r30, 0x01A2
    2442:	f0 91 a3 01 	lds	r31, 0x01A3
    2446:	09 95       	icall
}
    2448:	cf 91       	pop	r28
    244a:	df 91       	pop	r29
    244c:	ff 91       	pop	r31
    244e:	ef 91       	pop	r30
    2450:	bf 91       	pop	r27
    2452:	af 91       	pop	r26
    2454:	9f 91       	pop	r25
    2456:	8f 91       	pop	r24
    2458:	7f 91       	pop	r23
    245a:	6f 91       	pop	r22
    245c:	5f 91       	pop	r21
    245e:	4f 91       	pop	r20
    2460:	3f 91       	pop	r19
    2462:	2f 91       	pop	r18
    2464:	0f 90       	pop	r0
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	0f 90       	pop	r0
    246a:	1f 90       	pop	r1
    246c:	18 95       	reti

0000246e <EXTI2_CallBack>:
void EXTI2_CallBack (void (*ptr)())
{
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	00 d0       	rcall	.+0      	; 0x2474 <EXTI2_CallBack+0x6>
    2474:	cd b7       	in	r28, 0x3d	; 61
    2476:	de b7       	in	r29, 0x3e	; 62
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_ISR = *ptr;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	90 93 a1 01 	sts	0x01A1, r25
    2484:	80 93 a0 01 	sts	0x01A0, r24
}
    2488:	0f 90       	pop	r0
    248a:	0f 90       	pop	r0
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <__vector_3>:
void __vector_3()
{
    2492:	1f 92       	push	r1
    2494:	0f 92       	push	r0
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	0f 92       	push	r0
    249a:	11 24       	eor	r1, r1
    249c:	2f 93       	push	r18
    249e:	3f 93       	push	r19
    24a0:	4f 93       	push	r20
    24a2:	5f 93       	push	r21
    24a4:	6f 93       	push	r22
    24a6:	7f 93       	push	r23
    24a8:	8f 93       	push	r24
    24aa:	9f 93       	push	r25
    24ac:	af 93       	push	r26
    24ae:	bf 93       	push	r27
    24b0:	ef 93       	push	r30
    24b2:	ff 93       	push	r31
    24b4:	df 93       	push	r29
    24b6:	cf 93       	push	r28
    24b8:	cd b7       	in	r28, 0x3d	; 61
    24ba:	de b7       	in	r29, 0x3e	; 62
	EXTI2_ISR();
    24bc:	e0 91 a0 01 	lds	r30, 0x01A0
    24c0:	f0 91 a1 01 	lds	r31, 0x01A1
    24c4:	09 95       	icall
}
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	ff 91       	pop	r31
    24cc:	ef 91       	pop	r30
    24ce:	bf 91       	pop	r27
    24d0:	af 91       	pop	r26
    24d2:	9f 91       	pop	r25
    24d4:	8f 91       	pop	r24
    24d6:	7f 91       	pop	r23
    24d8:	6f 91       	pop	r22
    24da:	5f 91       	pop	r21
    24dc:	4f 91       	pop	r20
    24de:	3f 91       	pop	r19
    24e0:	2f 91       	pop	r18
    24e2:	0f 90       	pop	r0
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	0f 90       	pop	r0
    24e8:	1f 90       	pop	r1
    24ea:	18 95       	reti

000024ec <DIO_voidSetPinDir>:
#include "DIO_Praivte.h"
#include "DIO_Interface.h"


void DIO_voidSetPinDir(u8 Group_Type, u8 Pin_No, u8 DirStatus)
{
    24ec:	df 93       	push	r29
    24ee:	cf 93       	push	r28
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	27 97       	sbiw	r28, 0x07	; 7
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	de bf       	out	0x3e, r29	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	cd bf       	out	0x3d, r28	; 61
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	6a 83       	std	Y+2, r22	; 0x02
    2504:	4b 83       	std	Y+3, r20	; 0x03
	//
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	88 23       	and	r24, r24
    250a:	09 f4       	brne	.+2      	; 0x250e <DIO_voidSetPinDir+0x22>
    250c:	f4 c0       	rjmp	.+488    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	85 30       	cpi	r24, 0x05	; 5
    2512:	08 f0       	brcs	.+2      	; 0x2516 <DIO_voidSetPinDir+0x2a>
    2514:	f0 c0       	rjmp	.+480    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	88 30       	cpi	r24, 0x08	; 8
    251a:	08 f0       	brcs	.+2      	; 0x251e <DIO_voidSetPinDir+0x32>
    251c:	ec c0       	rjmp	.+472    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(DirStatus==Input)
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	88 23       	and	r24, r24
    2522:	09 f0       	breq	.+2      	; 0x2526 <DIO_voidSetPinDir+0x3a>
    2524:	75 c0       	rjmp	.+234    	; 0x2610 <DIO_voidSetPinDir+0x124>
		{
			switch(Group_Type)
    2526:	89 81       	ldd	r24, Y+1	; 0x01
    2528:	28 2f       	mov	r18, r24
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	3f 83       	std	Y+7, r19	; 0x07
    252e:	2e 83       	std	Y+6, r18	; 0x06
    2530:	8e 81       	ldd	r24, Y+6	; 0x06
    2532:	9f 81       	ldd	r25, Y+7	; 0x07
    2534:	82 30       	cpi	r24, 0x02	; 2
    2536:	91 05       	cpc	r25, r1
    2538:	61 f1       	breq	.+88     	; 0x2592 <DIO_voidSetPinDir+0xa6>
    253a:	2e 81       	ldd	r18, Y+6	; 0x06
    253c:	3f 81       	ldd	r19, Y+7	; 0x07
    253e:	23 30       	cpi	r18, 0x03	; 3
    2540:	31 05       	cpc	r19, r1
    2542:	34 f4       	brge	.+12     	; 0x2550 <DIO_voidSetPinDir+0x64>
    2544:	8e 81       	ldd	r24, Y+6	; 0x06
    2546:	9f 81       	ldd	r25, Y+7	; 0x07
    2548:	81 30       	cpi	r24, 0x01	; 1
    254a:	91 05       	cpc	r25, r1
    254c:	69 f0       	breq	.+26     	; 0x2568 <DIO_voidSetPinDir+0x7c>
    254e:	d3 c0       	rjmp	.+422    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
    2550:	2e 81       	ldd	r18, Y+6	; 0x06
    2552:	3f 81       	ldd	r19, Y+7	; 0x07
    2554:	23 30       	cpi	r18, 0x03	; 3
    2556:	31 05       	cpc	r19, r1
    2558:	89 f1       	breq	.+98     	; 0x25bc <DIO_voidSetPinDir+0xd0>
    255a:	8e 81       	ldd	r24, Y+6	; 0x06
    255c:	9f 81       	ldd	r25, Y+7	; 0x07
    255e:	84 30       	cpi	r24, 0x04	; 4
    2560:	91 05       	cpc	r25, r1
    2562:	09 f4       	brne	.+2      	; 0x2566 <DIO_voidSetPinDir+0x7a>
    2564:	40 c0       	rjmp	.+128    	; 0x25e6 <DIO_voidSetPinDir+0xfa>
    2566:	c7 c0       	rjmp	.+398    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA&=~(1<<Pin_No);break;
    2568:	aa e3       	ldi	r26, 0x3A	; 58
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	ea e3       	ldi	r30, 0x3A	; 58
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	48 2f       	mov	r20, r24
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	02 2e       	mov	r0, r18
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <DIO_voidSetPinDir+0x9a>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	0a 94       	dec	r0
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <DIO_voidSetPinDir+0x96>
    258a:	80 95       	com	r24
    258c:	84 23       	and	r24, r20
    258e:	8c 93       	st	X, r24
    2590:	b2 c0       	rjmp	.+356    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB&=~(1<<Pin_No);break;
    2592:	a7 e3       	ldi	r26, 0x37	; 55
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e7 e3       	ldi	r30, 0x37	; 55
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	48 2f       	mov	r20, r24
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	28 2f       	mov	r18, r24
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	02 2e       	mov	r0, r18
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <DIO_voidSetPinDir+0xc4>
    25ac:	88 0f       	add	r24, r24
    25ae:	99 1f       	adc	r25, r25
    25b0:	0a 94       	dec	r0
    25b2:	e2 f7       	brpl	.-8      	; 0x25ac <DIO_voidSetPinDir+0xc0>
    25b4:	80 95       	com	r24
    25b6:	84 23       	and	r24, r20
    25b8:	8c 93       	st	X, r24
    25ba:	9d c0       	rjmp	.+314    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC&=~(1<<Pin_No);break;
    25bc:	a4 e3       	ldi	r26, 0x34	; 52
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	e4 e3       	ldi	r30, 0x34	; 52
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	48 2f       	mov	r20, r24
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	02 2e       	mov	r0, r18
    25d4:	02 c0       	rjmp	.+4      	; 0x25da <DIO_voidSetPinDir+0xee>
    25d6:	88 0f       	add	r24, r24
    25d8:	99 1f       	adc	r25, r25
    25da:	0a 94       	dec	r0
    25dc:	e2 f7       	brpl	.-8      	; 0x25d6 <DIO_voidSetPinDir+0xea>
    25de:	80 95       	com	r24
    25e0:	84 23       	and	r24, r20
    25e2:	8c 93       	st	X, r24
    25e4:	88 c0       	rjmp	.+272    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD&=~(1<<Pin_No);break;
    25e6:	a1 e3       	ldi	r26, 0x31	; 49
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e1 e3       	ldi	r30, 0x31	; 49
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	48 2f       	mov	r20, r24
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	02 2e       	mov	r0, r18
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <DIO_voidSetPinDir+0x118>
    2600:	88 0f       	add	r24, r24
    2602:	99 1f       	adc	r25, r25
    2604:	0a 94       	dec	r0
    2606:	e2 f7       	brpl	.-8      	; 0x2600 <DIO_voidSetPinDir+0x114>
    2608:	80 95       	com	r24
    260a:	84 23       	and	r24, r20
    260c:	8c 93       	st	X, r24
    260e:	73 c0       	rjmp	.+230    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			}
		}
		else if (DirStatus==Output)
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	81 30       	cpi	r24, 0x01	; 1
    2614:	09 f0       	breq	.+2      	; 0x2618 <DIO_voidSetPinDir+0x12c>
    2616:	6f c0       	rjmp	.+222    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
		{
			switch(Group_Type)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	3d 83       	std	Y+5, r19	; 0x05
    2620:	2c 83       	std	Y+4, r18	; 0x04
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	9d 81       	ldd	r25, Y+5	; 0x05
    2626:	82 30       	cpi	r24, 0x02	; 2
    2628:	91 05       	cpc	r25, r1
    262a:	51 f1       	breq	.+84     	; 0x2680 <DIO_voidSetPinDir+0x194>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	23 30       	cpi	r18, 0x03	; 3
    2632:	31 05       	cpc	r19, r1
    2634:	34 f4       	brge	.+12     	; 0x2642 <DIO_voidSetPinDir+0x156>
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	81 30       	cpi	r24, 0x01	; 1
    263c:	91 05       	cpc	r25, r1
    263e:	61 f0       	breq	.+24     	; 0x2658 <DIO_voidSetPinDir+0x16c>
    2640:	5a c0       	rjmp	.+180    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
    2642:	2c 81       	ldd	r18, Y+4	; 0x04
    2644:	3d 81       	ldd	r19, Y+5	; 0x05
    2646:	23 30       	cpi	r18, 0x03	; 3
    2648:	31 05       	cpc	r19, r1
    264a:	71 f1       	breq	.+92     	; 0x26a8 <DIO_voidSetPinDir+0x1bc>
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	9d 81       	ldd	r25, Y+5	; 0x05
    2650:	84 30       	cpi	r24, 0x04	; 4
    2652:	91 05       	cpc	r25, r1
    2654:	e9 f1       	breq	.+122    	; 0x26d0 <DIO_voidSetPinDir+0x1e4>
    2656:	4f c0       	rjmp	.+158    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			{
			case DIO_GroupA: DIO_DDRA|=(1<<Pin_No);break;
    2658:	aa e3       	ldi	r26, 0x3A	; 58
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	ea e3       	ldi	r30, 0x3A	; 58
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	80 81       	ld	r24, Z
    2662:	48 2f       	mov	r20, r24
    2664:	8a 81       	ldd	r24, Y+2	; 0x02
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	02 2e       	mov	r0, r18
    2670:	02 c0       	rjmp	.+4      	; 0x2676 <DIO_voidSetPinDir+0x18a>
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	0a 94       	dec	r0
    2678:	e2 f7       	brpl	.-8      	; 0x2672 <DIO_voidSetPinDir+0x186>
    267a:	84 2b       	or	r24, r20
    267c:	8c 93       	st	X, r24
    267e:	3b c0       	rjmp	.+118    	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupB: DIO_DDRB|=(1<<Pin_No);break;
    2680:	a7 e3       	ldi	r26, 0x37	; 55
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	e7 e3       	ldi	r30, 0x37	; 55
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	48 2f       	mov	r20, r24
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	02 2e       	mov	r0, r18
    2698:	02 c0       	rjmp	.+4      	; 0x269e <DIO_voidSetPinDir+0x1b2>
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	0a 94       	dec	r0
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <DIO_voidSetPinDir+0x1ae>
    26a2:	84 2b       	or	r24, r20
    26a4:	8c 93       	st	X, r24
    26a6:	27 c0       	rjmp	.+78     	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupC: DIO_DDRC|=(1<<Pin_No);break;
    26a8:	a4 e3       	ldi	r26, 0x34	; 52
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	e4 e3       	ldi	r30, 0x34	; 52
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	48 2f       	mov	r20, r24
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	28 2f       	mov	r18, r24
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	02 2e       	mov	r0, r18
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <DIO_voidSetPinDir+0x1da>
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	0a 94       	dec	r0
    26c8:	e2 f7       	brpl	.-8      	; 0x26c2 <DIO_voidSetPinDir+0x1d6>
    26ca:	84 2b       	or	r24, r20
    26cc:	8c 93       	st	X, r24
    26ce:	13 c0       	rjmp	.+38     	; 0x26f6 <DIO_voidSetPinDir+0x20a>
			case DIO_GroupD: DIO_DDRD|=(1<<Pin_No);break;
    26d0:	a1 e3       	ldi	r26, 0x31	; 49
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	e1 e3       	ldi	r30, 0x31	; 49
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	48 2f       	mov	r20, r24
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	02 2e       	mov	r0, r18
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <DIO_voidSetPinDir+0x202>
    26ea:	88 0f       	add	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	0a 94       	dec	r0
    26f0:	e2 f7       	brpl	.-8      	; 0x26ea <DIO_voidSetPinDir+0x1fe>
    26f2:	84 2b       	or	r24, r20
    26f4:	8c 93       	st	X, r24
			}
		}
	}


}
    26f6:	27 96       	adiw	r28, 0x07	; 7
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <DIO_voidSetPinValue>:



void DIO_voidSetPinValue(u8 Group_Type, u8 Pin_No, u8 Value)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	27 97       	sbiw	r28, 0x07	; 7
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	6a 83       	std	Y+2, r22	; 0x02
    2720:	4b 83       	std	Y+3, r20	; 0x03
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	88 23       	and	r24, r24
    2726:	09 f4       	brne	.+2      	; 0x272a <DIO_voidSetPinValue+0x22>
    2728:	f4 c0       	rjmp	.+488    	; 0x2912 <DIO_voidSetPinValue+0x20a>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	85 30       	cpi	r24, 0x05	; 5
    272e:	08 f0       	brcs	.+2      	; 0x2732 <DIO_voidSetPinValue+0x2a>
    2730:	f0 c0       	rjmp	.+480    	; 0x2912 <DIO_voidSetPinValue+0x20a>
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	88 30       	cpi	r24, 0x08	; 8
    2736:	08 f0       	brcs	.+2      	; 0x273a <DIO_voidSetPinValue+0x32>
    2738:	ec c0       	rjmp	.+472    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		if(Value==Low)
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	88 23       	and	r24, r24
    273e:	09 f0       	breq	.+2      	; 0x2742 <DIO_voidSetPinValue+0x3a>
    2740:	75 c0       	rjmp	.+234    	; 0x282c <DIO_voidSetPinValue+0x124>
		{
			switch(Group_Type)
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	3f 83       	std	Y+7, r19	; 0x07
    274a:	2e 83       	std	Y+6, r18	; 0x06
    274c:	8e 81       	ldd	r24, Y+6	; 0x06
    274e:	9f 81       	ldd	r25, Y+7	; 0x07
    2750:	82 30       	cpi	r24, 0x02	; 2
    2752:	91 05       	cpc	r25, r1
    2754:	61 f1       	breq	.+88     	; 0x27ae <DIO_voidSetPinValue+0xa6>
    2756:	2e 81       	ldd	r18, Y+6	; 0x06
    2758:	3f 81       	ldd	r19, Y+7	; 0x07
    275a:	23 30       	cpi	r18, 0x03	; 3
    275c:	31 05       	cpc	r19, r1
    275e:	34 f4       	brge	.+12     	; 0x276c <DIO_voidSetPinValue+0x64>
    2760:	8e 81       	ldd	r24, Y+6	; 0x06
    2762:	9f 81       	ldd	r25, Y+7	; 0x07
    2764:	81 30       	cpi	r24, 0x01	; 1
    2766:	91 05       	cpc	r25, r1
    2768:	69 f0       	breq	.+26     	; 0x2784 <DIO_voidSetPinValue+0x7c>
    276a:	d3 c0       	rjmp	.+422    	; 0x2912 <DIO_voidSetPinValue+0x20a>
    276c:	2e 81       	ldd	r18, Y+6	; 0x06
    276e:	3f 81       	ldd	r19, Y+7	; 0x07
    2770:	23 30       	cpi	r18, 0x03	; 3
    2772:	31 05       	cpc	r19, r1
    2774:	89 f1       	breq	.+98     	; 0x27d8 <DIO_voidSetPinValue+0xd0>
    2776:	8e 81       	ldd	r24, Y+6	; 0x06
    2778:	9f 81       	ldd	r25, Y+7	; 0x07
    277a:	84 30       	cpi	r24, 0x04	; 4
    277c:	91 05       	cpc	r25, r1
    277e:	09 f4       	brne	.+2      	; 0x2782 <DIO_voidSetPinValue+0x7a>
    2780:	40 c0       	rjmp	.+128    	; 0x2802 <DIO_voidSetPinValue+0xfa>
    2782:	c7 c0       	rjmp	.+398    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA&=~(1<<Pin_No);break;
    2784:	ab e3       	ldi	r26, 0x3B	; 59
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	eb e3       	ldi	r30, 0x3B	; 59
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	48 2f       	mov	r20, r24
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 2e       	mov	r0, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <DIO_voidSetPinValue+0x9a>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	0a 94       	dec	r0
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <DIO_voidSetPinValue+0x96>
    27a6:	80 95       	com	r24
    27a8:	84 23       	and	r24, r20
    27aa:	8c 93       	st	X, r24
    27ac:	b2 c0       	rjmp	.+356    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB&=~(1<<Pin_No);break;
    27ae:	a8 e3       	ldi	r26, 0x38	; 56
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e8 e3       	ldi	r30, 0x38	; 56
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	48 2f       	mov	r20, r24
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	28 2f       	mov	r18, r24
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	02 2e       	mov	r0, r18
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <DIO_voidSetPinValue+0xc4>
    27c8:	88 0f       	add	r24, r24
    27ca:	99 1f       	adc	r25, r25
    27cc:	0a 94       	dec	r0
    27ce:	e2 f7       	brpl	.-8      	; 0x27c8 <DIO_voidSetPinValue+0xc0>
    27d0:	80 95       	com	r24
    27d2:	84 23       	and	r24, r20
    27d4:	8c 93       	st	X, r24
    27d6:	9d c0       	rjmp	.+314    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC&=~(1<<Pin_No);break;
    27d8:	a5 e3       	ldi	r26, 0x35	; 53
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e5 e3       	ldi	r30, 0x35	; 53
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	48 2f       	mov	r20, r24
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	02 2e       	mov	r0, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <DIO_voidSetPinValue+0xee>
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	0a 94       	dec	r0
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <DIO_voidSetPinValue+0xea>
    27fa:	80 95       	com	r24
    27fc:	84 23       	and	r24, r20
    27fe:	8c 93       	st	X, r24
    2800:	88 c0       	rjmp	.+272    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD&=~(1<<Pin_No);break;
    2802:	a2 e3       	ldi	r26, 0x32	; 50
    2804:	b0 e0       	ldi	r27, 0x00	; 0
    2806:	e2 e3       	ldi	r30, 0x32	; 50
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	48 2f       	mov	r20, r24
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	28 2f       	mov	r18, r24
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	02 2e       	mov	r0, r18
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <DIO_voidSetPinValue+0x118>
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	0a 94       	dec	r0
    2822:	e2 f7       	brpl	.-8      	; 0x281c <DIO_voidSetPinValue+0x114>
    2824:	80 95       	com	r24
    2826:	84 23       	and	r24, r20
    2828:	8c 93       	st	X, r24
    282a:	73 c0       	rjmp	.+230    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			}
		}
		else if (Value==High)
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	81 30       	cpi	r24, 0x01	; 1
    2830:	09 f0       	breq	.+2      	; 0x2834 <DIO_voidSetPinValue+0x12c>
    2832:	6f c0       	rjmp	.+222    	; 0x2912 <DIO_voidSetPinValue+0x20a>
		{
			switch(Group_Type)
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	3d 83       	std	Y+5, r19	; 0x05
    283c:	2c 83       	std	Y+4, r18	; 0x04
    283e:	8c 81       	ldd	r24, Y+4	; 0x04
    2840:	9d 81       	ldd	r25, Y+5	; 0x05
    2842:	82 30       	cpi	r24, 0x02	; 2
    2844:	91 05       	cpc	r25, r1
    2846:	51 f1       	breq	.+84     	; 0x289c <DIO_voidSetPinValue+0x194>
    2848:	2c 81       	ldd	r18, Y+4	; 0x04
    284a:	3d 81       	ldd	r19, Y+5	; 0x05
    284c:	23 30       	cpi	r18, 0x03	; 3
    284e:	31 05       	cpc	r19, r1
    2850:	34 f4       	brge	.+12     	; 0x285e <DIO_voidSetPinValue+0x156>
    2852:	8c 81       	ldd	r24, Y+4	; 0x04
    2854:	9d 81       	ldd	r25, Y+5	; 0x05
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	91 05       	cpc	r25, r1
    285a:	61 f0       	breq	.+24     	; 0x2874 <DIO_voidSetPinValue+0x16c>
    285c:	5a c0       	rjmp	.+180    	; 0x2912 <DIO_voidSetPinValue+0x20a>
    285e:	2c 81       	ldd	r18, Y+4	; 0x04
    2860:	3d 81       	ldd	r19, Y+5	; 0x05
    2862:	23 30       	cpi	r18, 0x03	; 3
    2864:	31 05       	cpc	r19, r1
    2866:	71 f1       	breq	.+92     	; 0x28c4 <DIO_voidSetPinValue+0x1bc>
    2868:	8c 81       	ldd	r24, Y+4	; 0x04
    286a:	9d 81       	ldd	r25, Y+5	; 0x05
    286c:	84 30       	cpi	r24, 0x04	; 4
    286e:	91 05       	cpc	r25, r1
    2870:	e9 f1       	breq	.+122    	; 0x28ec <DIO_voidSetPinValue+0x1e4>
    2872:	4f c0       	rjmp	.+158    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			{
			case DIO_GroupA: DIO_PORTA|=(1<<Pin_No);break;
    2874:	ab e3       	ldi	r26, 0x3B	; 59
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	eb e3       	ldi	r30, 0x3B	; 59
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	48 2f       	mov	r20, r24
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	02 2e       	mov	r0, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <DIO_voidSetPinValue+0x18a>
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	0a 94       	dec	r0
    2894:	e2 f7       	brpl	.-8      	; 0x288e <DIO_voidSetPinValue+0x186>
    2896:	84 2b       	or	r24, r20
    2898:	8c 93       	st	X, r24
    289a:	3b c0       	rjmp	.+118    	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupB: DIO_PORTB|=(1<<Pin_No);break;
    289c:	a8 e3       	ldi	r26, 0x38	; 56
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e8 e3       	ldi	r30, 0x38	; 56
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	48 2f       	mov	r20, r24
    28a8:	8a 81       	ldd	r24, Y+2	; 0x02
    28aa:	28 2f       	mov	r18, r24
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	81 e0       	ldi	r24, 0x01	; 1
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	02 2e       	mov	r0, r18
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <DIO_voidSetPinValue+0x1b2>
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	0a 94       	dec	r0
    28bc:	e2 f7       	brpl	.-8      	; 0x28b6 <DIO_voidSetPinValue+0x1ae>
    28be:	84 2b       	or	r24, r20
    28c0:	8c 93       	st	X, r24
    28c2:	27 c0       	rjmp	.+78     	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupC: DIO_PORTC|=(1<<Pin_No);break;
    28c4:	a5 e3       	ldi	r26, 0x35	; 53
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e5 e3       	ldi	r30, 0x35	; 53
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	48 2f       	mov	r20, r24
    28d0:	8a 81       	ldd	r24, Y+2	; 0x02
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 2e       	mov	r0, r18
    28dc:	02 c0       	rjmp	.+4      	; 0x28e2 <DIO_voidSetPinValue+0x1da>
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	0a 94       	dec	r0
    28e4:	e2 f7       	brpl	.-8      	; 0x28de <DIO_voidSetPinValue+0x1d6>
    28e6:	84 2b       	or	r24, r20
    28e8:	8c 93       	st	X, r24
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <DIO_voidSetPinValue+0x20a>
			case DIO_GroupD: DIO_PORTD|=(1<<Pin_No);break;
    28ec:	a2 e3       	ldi	r26, 0x32	; 50
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e2 e3       	ldi	r30, 0x32	; 50
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	48 2f       	mov	r20, r24
    28f8:	8a 81       	ldd	r24, Y+2	; 0x02
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	02 2e       	mov	r0, r18
    2904:	02 c0       	rjmp	.+4      	; 0x290a <DIO_voidSetPinValue+0x202>
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	0a 94       	dec	r0
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <DIO_voidSetPinValue+0x1fe>
    290e:	84 2b       	or	r24, r20
    2910:	8c 93       	st	X, r24
			}
		}
	}
}
    2912:	27 96       	adiw	r28, 0x07	; 7
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <DIO_u8ReadPinValue>:
u8 DIO_u8ReadPinValue(u8 Group_Type, u8 Pin_No)
{
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <DIO_u8ReadPinValue+0x6>
    292a:	00 d0       	rcall	.+0      	; 0x292c <DIO_u8ReadPinValue+0x8>
    292c:	0f 92       	push	r0
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	6a 83       	std	Y+2, r22	; 0x02

	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD)
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	88 23       	and	r24, r24
    293a:	09 f4       	brne	.+2      	; 0x293e <DIO_u8ReadPinValue+0x1a>
    293c:	5e c1       	rjmp	.+700    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	85 30       	cpi	r24, 0x05	; 5
    2942:	08 f0       	brcs	.+2      	; 0x2946 <DIO_u8ReadPinValue+0x22>
    2944:	5a c1       	rjmp	.+692    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
    2946:	8a 81       	ldd	r24, Y+2	; 0x02
    2948:	88 30       	cpi	r24, 0x08	; 8
    294a:	08 f0       	brcs	.+2      	; 0x294e <DIO_u8ReadPinValue+0x2a>
    294c:	56 c1       	rjmp	.+684    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
			&& (Pin_No>=DIO_Pin0 && Pin_No<=DIO_Pin7) )
	{
		switch(Group_Type)
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	28 2f       	mov	r18, r24
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	3d 83       	std	Y+5, r19	; 0x05
    2956:	2c 83       	std	Y+4, r18	; 0x04
    2958:	4c 81       	ldd	r20, Y+4	; 0x04
    295a:	5d 81       	ldd	r21, Y+5	; 0x05
    295c:	42 30       	cpi	r20, 0x02	; 2
    295e:	51 05       	cpc	r21, r1
    2960:	09 f4       	brne	.+2      	; 0x2964 <DIO_u8ReadPinValue+0x40>
    2962:	65 c0       	rjmp	.+202    	; 0x2a2e <DIO_u8ReadPinValue+0x10a>
    2964:	8c 81       	ldd	r24, Y+4	; 0x04
    2966:	9d 81       	ldd	r25, Y+5	; 0x05
    2968:	83 30       	cpi	r24, 0x03	; 3
    296a:	91 05       	cpc	r25, r1
    296c:	34 f4       	brge	.+12     	; 0x297a <DIO_u8ReadPinValue+0x56>
    296e:	2c 81       	ldd	r18, Y+4	; 0x04
    2970:	3d 81       	ldd	r19, Y+5	; 0x05
    2972:	21 30       	cpi	r18, 0x01	; 1
    2974:	31 05       	cpc	r19, r1
    2976:	71 f0       	breq	.+28     	; 0x2994 <DIO_u8ReadPinValue+0x70>
    2978:	40 c1       	rjmp	.+640    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
    297a:	4c 81       	ldd	r20, Y+4	; 0x04
    297c:	5d 81       	ldd	r21, Y+5	; 0x05
    297e:	43 30       	cpi	r20, 0x03	; 3
    2980:	51 05       	cpc	r21, r1
    2982:	09 f4       	brne	.+2      	; 0x2986 <DIO_u8ReadPinValue+0x62>
    2984:	a1 c0       	rjmp	.+322    	; 0x2ac8 <DIO_u8ReadPinValue+0x1a4>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	91 05       	cpc	r25, r1
    298e:	09 f4       	brne	.+2      	; 0x2992 <DIO_u8ReadPinValue+0x6e>
    2990:	e8 c0       	rjmp	.+464    	; 0x2b62 <DIO_u8ReadPinValue+0x23e>
    2992:	33 c1       	rjmp	.+614    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
		{
		case DIO_GroupA:
			if(get_bit(DIO_DDRA,Pin_No)==Input)
    2994:	ea e3       	ldi	r30, 0x3A	; 58
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	88 2f       	mov	r24, r24
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	a9 01       	movw	r20, r18
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <DIO_u8ReadPinValue+0x88>
    29a8:	55 95       	asr	r21
    29aa:	47 95       	ror	r20
    29ac:	8a 95       	dec	r24
    29ae:	e2 f7       	brpl	.-8      	; 0x29a8 <DIO_u8ReadPinValue+0x84>
    29b0:	ca 01       	movw	r24, r20
    29b2:	81 70       	andi	r24, 0x01	; 1
    29b4:	90 70       	andi	r25, 0x00	; 0
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	99 f4       	brne	.+38     	; 0x29e0 <DIO_u8ReadPinValue+0xbc>
			{
				return((DIO_PINA>>Pin_No)&1);
    29ba:	e9 e3       	ldi	r30, 0x39	; 57
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	80 81       	ld	r24, Z
    29c0:	28 2f       	mov	r18, r24
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	8a 81       	ldd	r24, Y+2	; 0x02
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a9 01       	movw	r20, r18
    29cc:	02 c0       	rjmp	.+4      	; 0x29d2 <DIO_u8ReadPinValue+0xae>
    29ce:	55 95       	asr	r21
    29d0:	47 95       	ror	r20
    29d2:	8a 95       	dec	r24
    29d4:	e2 f7       	brpl	.-8      	; 0x29ce <DIO_u8ReadPinValue+0xaa>
    29d6:	ca 01       	movw	r24, r20
    29d8:	58 2f       	mov	r21, r24
    29da:	51 70       	andi	r21, 0x01	; 1
    29dc:	5b 83       	std	Y+3, r21	; 0x03
    29de:	0f c1       	rjmp	.+542    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRA,Pin_No)==Output)
    29e0:	ea e3       	ldi	r30, 0x3A	; 58
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	88 2f       	mov	r24, r24
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a9 01       	movw	r20, r18
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <DIO_u8ReadPinValue+0xd4>
    29f4:	55 95       	asr	r21
    29f6:	47 95       	ror	r20
    29f8:	8a 95       	dec	r24
    29fa:	e2 f7       	brpl	.-8      	; 0x29f4 <DIO_u8ReadPinValue+0xd0>
    29fc:	ca 01       	movw	r24, r20
    29fe:	81 70       	andi	r24, 0x01	; 1
    2a00:	90 70       	andi	r25, 0x00	; 0
    2a02:	88 23       	and	r24, r24
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <DIO_u8ReadPinValue+0xe4>
    2a06:	f9 c0       	rjmp	.+498    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTA>>Pin_No)&1);
    2a08:	eb e3       	ldi	r30, 0x3B	; 59
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	8a 81       	ldd	r24, Y+2	; 0x02
    2a14:	88 2f       	mov	r24, r24
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a9 01       	movw	r20, r18
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <DIO_u8ReadPinValue+0xfc>
    2a1c:	55 95       	asr	r21
    2a1e:	47 95       	ror	r20
    2a20:	8a 95       	dec	r24
    2a22:	e2 f7       	brpl	.-8      	; 0x2a1c <DIO_u8ReadPinValue+0xf8>
    2a24:	ca 01       	movw	r24, r20
    2a26:	58 2f       	mov	r21, r24
    2a28:	51 70       	andi	r21, 0x01	; 1
    2a2a:	5b 83       	std	Y+3, r21	; 0x03
    2a2c:	e8 c0       	rjmp	.+464    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupB:
			if(get_bit(DIO_DDRB,Pin_No)==Input)
    2a2e:	e7 e3       	ldi	r30, 0x37	; 55
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	80 81       	ld	r24, Z
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3a:	88 2f       	mov	r24, r24
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a9 01       	movw	r20, r18
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <DIO_u8ReadPinValue+0x122>
    2a42:	55 95       	asr	r21
    2a44:	47 95       	ror	r20
    2a46:	8a 95       	dec	r24
    2a48:	e2 f7       	brpl	.-8      	; 0x2a42 <DIO_u8ReadPinValue+0x11e>
    2a4a:	ca 01       	movw	r24, r20
    2a4c:	81 70       	andi	r24, 0x01	; 1
    2a4e:	90 70       	andi	r25, 0x00	; 0
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	99 f4       	brne	.+38     	; 0x2a7a <DIO_u8ReadPinValue+0x156>
			{
				return((DIO_PINB>>Pin_No)&1);
    2a54:	e6 e3       	ldi	r30, 0x36	; 54
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	88 2f       	mov	r24, r24
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	a9 01       	movw	r20, r18
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <DIO_u8ReadPinValue+0x148>
    2a68:	55 95       	asr	r21
    2a6a:	47 95       	ror	r20
    2a6c:	8a 95       	dec	r24
    2a6e:	e2 f7       	brpl	.-8      	; 0x2a68 <DIO_u8ReadPinValue+0x144>
    2a70:	ca 01       	movw	r24, r20
    2a72:	58 2f       	mov	r21, r24
    2a74:	51 70       	andi	r21, 0x01	; 1
    2a76:	5b 83       	std	Y+3, r21	; 0x03
    2a78:	c2 c0       	rjmp	.+388    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRB,Pin_No)==Output)
    2a7a:	e7 e3       	ldi	r30, 0x37	; 55
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	88 2f       	mov	r24, r24
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a9 01       	movw	r20, r18
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <DIO_u8ReadPinValue+0x16e>
    2a8e:	55 95       	asr	r21
    2a90:	47 95       	ror	r20
    2a92:	8a 95       	dec	r24
    2a94:	e2 f7       	brpl	.-8      	; 0x2a8e <DIO_u8ReadPinValue+0x16a>
    2a96:	ca 01       	movw	r24, r20
    2a98:	81 70       	andi	r24, 0x01	; 1
    2a9a:	90 70       	andi	r25, 0x00	; 0
    2a9c:	88 23       	and	r24, r24
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <DIO_u8ReadPinValue+0x17e>
    2aa0:	ac c0       	rjmp	.+344    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTB>>Pin_No)&1);
    2aa2:	e8 e3       	ldi	r30, 0x38	; 56
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	88 2f       	mov	r24, r24
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	a9 01       	movw	r20, r18
    2ab4:	02 c0       	rjmp	.+4      	; 0x2aba <DIO_u8ReadPinValue+0x196>
    2ab6:	55 95       	asr	r21
    2ab8:	47 95       	ror	r20
    2aba:	8a 95       	dec	r24
    2abc:	e2 f7       	brpl	.-8      	; 0x2ab6 <DIO_u8ReadPinValue+0x192>
    2abe:	ca 01       	movw	r24, r20
    2ac0:	58 2f       	mov	r21, r24
    2ac2:	51 70       	andi	r21, 0x01	; 1
    2ac4:	5b 83       	std	Y+3, r21	; 0x03
    2ac6:	9b c0       	rjmp	.+310    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupC:
			if(get_bit(DIO_DDRC,Pin_No)==Input)
    2ac8:	e4 e3       	ldi	r30, 0x34	; 52
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	88 2f       	mov	r24, r24
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a9 01       	movw	r20, r18
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <DIO_u8ReadPinValue+0x1bc>
    2adc:	55 95       	asr	r21
    2ade:	47 95       	ror	r20
    2ae0:	8a 95       	dec	r24
    2ae2:	e2 f7       	brpl	.-8      	; 0x2adc <DIO_u8ReadPinValue+0x1b8>
    2ae4:	ca 01       	movw	r24, r20
    2ae6:	81 70       	andi	r24, 0x01	; 1
    2ae8:	90 70       	andi	r25, 0x00	; 0
    2aea:	00 97       	sbiw	r24, 0x00	; 0
    2aec:	99 f4       	brne	.+38     	; 0x2b14 <DIO_u8ReadPinValue+0x1f0>
			{
				return((DIO_PINC>>Pin_No)&1);
    2aee:	e3 e3       	ldi	r30, 0x33	; 51
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a9 01       	movw	r20, r18
    2b00:	02 c0       	rjmp	.+4      	; 0x2b06 <DIO_u8ReadPinValue+0x1e2>
    2b02:	55 95       	asr	r21
    2b04:	47 95       	ror	r20
    2b06:	8a 95       	dec	r24
    2b08:	e2 f7       	brpl	.-8      	; 0x2b02 <DIO_u8ReadPinValue+0x1de>
    2b0a:	ca 01       	movw	r24, r20
    2b0c:	58 2f       	mov	r21, r24
    2b0e:	51 70       	andi	r21, 0x01	; 1
    2b10:	5b 83       	std	Y+3, r21	; 0x03
    2b12:	75 c0       	rjmp	.+234    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRC,Pin_No)==Output)
    2b14:	e4 e3       	ldi	r30, 0x34	; 52
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	88 2f       	mov	r24, r24
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a9 01       	movw	r20, r18
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <DIO_u8ReadPinValue+0x208>
    2b28:	55 95       	asr	r21
    2b2a:	47 95       	ror	r20
    2b2c:	8a 95       	dec	r24
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <DIO_u8ReadPinValue+0x204>
    2b30:	ca 01       	movw	r24, r20
    2b32:	81 70       	andi	r24, 0x01	; 1
    2b34:	90 70       	andi	r25, 0x00	; 0
    2b36:	88 23       	and	r24, r24
    2b38:	09 f4       	brne	.+2      	; 0x2b3c <DIO_u8ReadPinValue+0x218>
    2b3a:	5f c0       	rjmp	.+190    	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTC>>Pin_No)&1);
    2b3c:	e5 e3       	ldi	r30, 0x35	; 53
    2b3e:	f0 e0       	ldi	r31, 0x00	; 0
    2b40:	80 81       	ld	r24, Z
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	a9 01       	movw	r20, r18
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <DIO_u8ReadPinValue+0x230>
    2b50:	55 95       	asr	r21
    2b52:	47 95       	ror	r20
    2b54:	8a 95       	dec	r24
    2b56:	e2 f7       	brpl	.-8      	; 0x2b50 <DIO_u8ReadPinValue+0x22c>
    2b58:	ca 01       	movw	r24, r20
    2b5a:	58 2f       	mov	r21, r24
    2b5c:	51 70       	andi	r21, 0x01	; 1
    2b5e:	5b 83       	std	Y+3, r21	; 0x03
    2b60:	4e c0       	rjmp	.+156    	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			break;
		case DIO_GroupD:
			if(get_bit(DIO_DDRD,Pin_No)==Input)
    2b62:	e1 e3       	ldi	r30, 0x31	; 49
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	a9 01       	movw	r20, r18
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <DIO_u8ReadPinValue+0x256>
    2b76:	55 95       	asr	r21
    2b78:	47 95       	ror	r20
    2b7a:	8a 95       	dec	r24
    2b7c:	e2 f7       	brpl	.-8      	; 0x2b76 <DIO_u8ReadPinValue+0x252>
    2b7e:	ca 01       	movw	r24, r20
    2b80:	81 70       	andi	r24, 0x01	; 1
    2b82:	90 70       	andi	r25, 0x00	; 0
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	99 f4       	brne	.+38     	; 0x2bae <DIO_u8ReadPinValue+0x28a>
			{
				return((DIO_PIND>>Pin_No)&1);
    2b88:	e0 e3       	ldi	r30, 0x30	; 48
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a9 01       	movw	r20, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_u8ReadPinValue+0x27c>
    2b9c:	55 95       	asr	r21
    2b9e:	47 95       	ror	r20
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_u8ReadPinValue+0x278>
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	58 2f       	mov	r21, r24
    2ba8:	51 70       	andi	r21, 0x01	; 1
    2baa:	5b 83       	std	Y+3, r21	; 0x03
    2bac:	28 c0       	rjmp	.+80     	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			else if(get_bit(DIO_DDRD,Pin_No)==Output)
    2bae:	e1 e3       	ldi	r30, 0x31	; 49
    2bb0:	f0 e0       	ldi	r31, 0x00	; 0
    2bb2:	80 81       	ld	r24, Z
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bba:	88 2f       	mov	r24, r24
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a9 01       	movw	r20, r18
    2bc0:	02 c0       	rjmp	.+4      	; 0x2bc6 <DIO_u8ReadPinValue+0x2a2>
    2bc2:	55 95       	asr	r21
    2bc4:	47 95       	ror	r20
    2bc6:	8a 95       	dec	r24
    2bc8:	e2 f7       	brpl	.-8      	; 0x2bc2 <DIO_u8ReadPinValue+0x29e>
    2bca:	ca 01       	movw	r24, r20
    2bcc:	81 70       	andi	r24, 0x01	; 1
    2bce:	90 70       	andi	r25, 0x00	; 0
    2bd0:	88 23       	and	r24, r24
    2bd2:	99 f0       	breq	.+38     	; 0x2bfa <DIO_u8ReadPinValue+0x2d6>
			{
				return((DIO_PORTD>>Pin_No)&1);
    2bd4:	e2 e3       	ldi	r30, 0x32	; 50
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	a9 01       	movw	r20, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <DIO_u8ReadPinValue+0x2c8>
    2be8:	55 95       	asr	r21
    2bea:	47 95       	ror	r20
    2bec:	8a 95       	dec	r24
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <DIO_u8ReadPinValue+0x2c4>
    2bf0:	ca 01       	movw	r24, r20
    2bf2:	58 2f       	mov	r21, r24
    2bf4:	51 70       	andi	r21, 0x01	; 1
    2bf6:	5b 83       	std	Y+3, r21	; 0x03
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_u8ReadPinValue+0x2da>
			}
			break;
		}
	}
	return -1;
    2bfa:	8f ef       	ldi	r24, 0xFF	; 255
    2bfc:	8b 83       	std	Y+3, r24	; 0x03
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	0f 90       	pop	r0
    2c0a:	cf 91       	pop	r28
    2c0c:	df 91       	pop	r29
    2c0e:	08 95       	ret

00002c10 <DIO_voidSetPortDir>:


void DIO_voidSetPortDir(u8 Group_Type , u8 DirStatus)
{
    2c10:	df 93       	push	r29
    2c12:	cf 93       	push	r28
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <DIO_voidSetPortDir+0x6>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <DIO_voidSetPortDir+0x8>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
    2c1c:	89 83       	std	Y+1, r24	; 0x01
    2c1e:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	88 23       	and	r24, r24
    2c24:	b1 f1       	breq	.+108    	; 0x2c92 <DIO_voidSetPortDir+0x82>
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	85 30       	cpi	r24, 0x05	; 5
    2c2a:	98 f5       	brcc	.+102    	; 0x2c92 <DIO_voidSetPortDir+0x82>
	{
		switch(Group_Type)
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	3c 83       	std	Y+4, r19	; 0x04
    2c34:	2b 83       	std	Y+3, r18	; 0x03
    2c36:	8b 81       	ldd	r24, Y+3	; 0x03
    2c38:	9c 81       	ldd	r25, Y+4	; 0x04
    2c3a:	82 30       	cpi	r24, 0x02	; 2
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	d9 f0       	breq	.+54     	; 0x2c76 <DIO_voidSetPortDir+0x66>
    2c40:	2b 81       	ldd	r18, Y+3	; 0x03
    2c42:	3c 81       	ldd	r19, Y+4	; 0x04
    2c44:	23 30       	cpi	r18, 0x03	; 3
    2c46:	31 05       	cpc	r19, r1
    2c48:	34 f4       	brge	.+12     	; 0x2c56 <DIO_voidSetPortDir+0x46>
    2c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	91 05       	cpc	r25, r1
    2c52:	61 f0       	breq	.+24     	; 0x2c6c <DIO_voidSetPortDir+0x5c>
    2c54:	1e c0       	rjmp	.+60     	; 0x2c92 <DIO_voidSetPortDir+0x82>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	23 30       	cpi	r18, 0x03	; 3
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	81 f0       	breq	.+32     	; 0x2c80 <DIO_voidSetPortDir+0x70>
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	84 30       	cpi	r24, 0x04	; 4
    2c66:	91 05       	cpc	r25, r1
    2c68:	81 f0       	breq	.+32     	; 0x2c8a <DIO_voidSetPortDir+0x7a>
    2c6a:	13 c0       	rjmp	.+38     	; 0x2c92 <DIO_voidSetPortDir+0x82>
		{
		case DIO_GroupA:DIO_DDRA=DirStatus;break;
    2c6c:	ea e3       	ldi	r30, 0x3A	; 58
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	80 83       	st	Z, r24
    2c74:	0e c0       	rjmp	.+28     	; 0x2c92 <DIO_voidSetPortDir+0x82>
		case DIO_GroupB:DIO_DDRB=DirStatus;break;
    2c76:	e7 e3       	ldi	r30, 0x37	; 55
    2c78:	f0 e0       	ldi	r31, 0x00	; 0
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	80 83       	st	Z, r24
    2c7e:	09 c0       	rjmp	.+18     	; 0x2c92 <DIO_voidSetPortDir+0x82>
		case DIO_GroupC:DIO_DDRC=DirStatus;break;
    2c80:	e4 e3       	ldi	r30, 0x34	; 52
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	80 83       	st	Z, r24
    2c88:	04 c0       	rjmp	.+8      	; 0x2c92 <DIO_voidSetPortDir+0x82>
		case DIO_GroupD:DIO_DDRD=DirStatus;break;
    2c8a:	e1 e3       	ldi	r30, 0x31	; 49
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c90:	80 83       	st	Z, r24
		}
	}

}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <DIO_voidSetPortValue>:



void DIO_voidSetPortValue(u8 Group_Type , u8 Value)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <DIO_voidSetPortValue+0x6>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <DIO_voidSetPortValue+0x8>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	6a 83       	std	Y+2, r22	; 0x02
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	88 23       	and	r24, r24
    2cb4:	b1 f1       	breq	.+108    	; 0x2d22 <DIO_voidSetPortValue+0x82>
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	85 30       	cpi	r24, 0x05	; 5
    2cba:	98 f5       	brcc	.+102    	; 0x2d22 <DIO_voidSetPortValue+0x82>
	{
		switch(Group_Type)
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	3c 83       	std	Y+4, r19	; 0x04
    2cc4:	2b 83       	std	Y+3, r18	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	82 30       	cpi	r24, 0x02	; 2
    2ccc:	91 05       	cpc	r25, r1
    2cce:	d9 f0       	breq	.+54     	; 0x2d06 <DIO_voidSetPortValue+0x66>
    2cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd4:	23 30       	cpi	r18, 0x03	; 3
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	34 f4       	brge	.+12     	; 0x2ce6 <DIO_voidSetPortValue+0x46>
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	61 f0       	breq	.+24     	; 0x2cfc <DIO_voidSetPortValue+0x5c>
    2ce4:	1e c0       	rjmp	.+60     	; 0x2d22 <DIO_voidSetPortValue+0x82>
    2ce6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ce8:	3c 81       	ldd	r19, Y+4	; 0x04
    2cea:	23 30       	cpi	r18, 0x03	; 3
    2cec:	31 05       	cpc	r19, r1
    2cee:	81 f0       	breq	.+32     	; 0x2d10 <DIO_voidSetPortValue+0x70>
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	84 30       	cpi	r24, 0x04	; 4
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	81 f0       	breq	.+32     	; 0x2d1a <DIO_voidSetPortValue+0x7a>
    2cfa:	13 c0       	rjmp	.+38     	; 0x2d22 <DIO_voidSetPortValue+0x82>
		{
		case DIO_GroupA:DIO_PORTA=Value;break;
    2cfc:	eb e3       	ldi	r30, 0x3B	; 59
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	80 83       	st	Z, r24
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <DIO_voidSetPortValue+0x82>
		case DIO_GroupB:DIO_PORTB=Value;break;
    2d06:	e8 e3       	ldi	r30, 0x38	; 56
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	80 83       	st	Z, r24
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <DIO_voidSetPortValue+0x82>
		case DIO_GroupC:DIO_PORTC=Value;break;
    2d10:	e5 e3       	ldi	r30, 0x35	; 53
    2d12:	f0 e0       	ldi	r31, 0x00	; 0
    2d14:	8a 81       	ldd	r24, Y+2	; 0x02
    2d16:	80 83       	st	Z, r24
    2d18:	04 c0       	rjmp	.+8      	; 0x2d22 <DIO_voidSetPortValue+0x82>
		case DIO_GroupD:DIO_PORTD=Value;break;
    2d1a:	e2 e3       	ldi	r30, 0x32	; 50
    2d1c:	f0 e0       	ldi	r31, 0x00	; 0
    2d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d20:	80 83       	st	Z, r24
		}
	}

}
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret

00002d30 <DIO_U8ReadPortValue>:


u8 DIO_U8ReadPortValue(u8 Group_Type)
{
    2d30:	df 93       	push	r29
    2d32:	cf 93       	push	r28
    2d34:	00 d0       	rcall	.+0      	; 0x2d36 <DIO_U8ReadPortValue+0x6>
    2d36:	00 d0       	rcall	.+0      	; 0x2d38 <DIO_U8ReadPortValue+0x8>
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	89 83       	std	Y+1, r24	; 0x01
	if((Group_Type>=DIO_GroupA && Group_Type<=DIO_GroupD))
    2d3e:	89 81       	ldd	r24, Y+1	; 0x01
    2d40:	88 23       	and	r24, r24
    2d42:	b9 f1       	breq	.+110    	; 0x2db2 <DIO_U8ReadPortValue+0x82>
    2d44:	89 81       	ldd	r24, Y+1	; 0x01
    2d46:	85 30       	cpi	r24, 0x05	; 5
    2d48:	a0 f5       	brcc	.+104    	; 0x2db2 <DIO_U8ReadPortValue+0x82>
	{
	switch(Group_Type)
    2d4a:	89 81       	ldd	r24, Y+1	; 0x01
    2d4c:	28 2f       	mov	r18, r24
    2d4e:	30 e0       	ldi	r19, 0x00	; 0
    2d50:	3c 83       	std	Y+4, r19	; 0x04
    2d52:	2b 83       	std	Y+3, r18	; 0x03
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	9c 81       	ldd	r25, Y+4	; 0x04
    2d58:	82 30       	cpi	r24, 0x02	; 2
    2d5a:	91 05       	cpc	r25, r1
    2d5c:	d9 f0       	breq	.+54     	; 0x2d94 <DIO_U8ReadPortValue+0x64>
    2d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2d60:	3c 81       	ldd	r19, Y+4	; 0x04
    2d62:	23 30       	cpi	r18, 0x03	; 3
    2d64:	31 05       	cpc	r19, r1
    2d66:	34 f4       	brge	.+12     	; 0x2d74 <DIO_U8ReadPortValue+0x44>
    2d68:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6c:	81 30       	cpi	r24, 0x01	; 1
    2d6e:	91 05       	cpc	r25, r1
    2d70:	61 f0       	breq	.+24     	; 0x2d8a <DIO_U8ReadPortValue+0x5a>
    2d72:	1f c0       	rjmp	.+62     	; 0x2db2 <DIO_U8ReadPortValue+0x82>
    2d74:	2b 81       	ldd	r18, Y+3	; 0x03
    2d76:	3c 81       	ldd	r19, Y+4	; 0x04
    2d78:	23 30       	cpi	r18, 0x03	; 3
    2d7a:	31 05       	cpc	r19, r1
    2d7c:	81 f0       	breq	.+32     	; 0x2d9e <DIO_U8ReadPortValue+0x6e>
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	9c 81       	ldd	r25, Y+4	; 0x04
    2d82:	84 30       	cpi	r24, 0x04	; 4
    2d84:	91 05       	cpc	r25, r1
    2d86:	81 f0       	breq	.+32     	; 0x2da8 <DIO_U8ReadPortValue+0x78>
    2d88:	14 c0       	rjmp	.+40     	; 0x2db2 <DIO_U8ReadPortValue+0x82>
		{
		case DIO_GroupA:return (DIO_PINA);break;
    2d8a:	e9 e3       	ldi	r30, 0x39	; 57
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	90 81       	ld	r25, Z
    2d90:	9a 83       	std	Y+2, r25	; 0x02
    2d92:	11 c0       	rjmp	.+34     	; 0x2db6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupB:return (DIO_PINB);break;
    2d94:	e6 e3       	ldi	r30, 0x36	; 54
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	20 81       	ld	r18, Z
    2d9a:	2a 83       	std	Y+2, r18	; 0x02
    2d9c:	0c c0       	rjmp	.+24     	; 0x2db6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupC:return (DIO_PINC);break;
    2d9e:	e3 e3       	ldi	r30, 0x33	; 51
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	30 81       	ld	r19, Z
    2da4:	3a 83       	std	Y+2, r19	; 0x02
    2da6:	07 c0       	rjmp	.+14     	; 0x2db6 <DIO_U8ReadPortValue+0x86>
		case DIO_GroupD:return (DIO_PIND);break;
    2da8:	e0 e3       	ldi	r30, 0x30	; 48
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8a 83       	std	Y+2, r24	; 0x02
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <DIO_U8ReadPortValue+0x86>
		}
	}
	return -1;
    2db2:	9f ef       	ldi	r25, 0xFF	; 255
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02

}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	cf 91       	pop	r28
    2dc2:	df 91       	pop	r29
    2dc4:	08 95       	ret

00002dc6 <DIO_voidControlPullupPin>:

void DIO_voidControlPullupPin(u8 Group_Type,u8 Pin_No , u8 PullUp_Status)
{
    2dc6:	df 93       	push	r29
    2dc8:	cf 93       	push	r28
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <DIO_voidControlPullupPin+0x6>
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	89 83       	std	Y+1, r24	; 0x01
    2dd4:	6a 83       	std	Y+2, r22	; 0x02
    2dd6:	4b 83       	std	Y+3, r20	; 0x03
	DIO_voidSetPinDir(Group_Type,Pin_No,Input);
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	6a 81       	ldd	r22, Y+2	; 0x02
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinValue(Group_Type,Pin_No,PullUp_Status);
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	6a 81       	ldd	r22, Y+2	; 0x02
    2de6:	4b 81       	ldd	r20, Y+3	; 0x03
    2de8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <ADC_voidInitPolling>:
 *      Author: salma
 */
#include "ADC_Interface.h"
static u16 InterruptData ;  //static??
void ADC_voidInitPolling(ADCInformation ADCInfo)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <ADC_voidInitPolling+0x6>
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	69 83       	std	Y+1, r22	; 0x01
    2e06:	7a 83       	std	Y+2, r23	; 0x02
    2e08:	8b 83       	std	Y+3, r24	; 0x03
	/*Voltage Reference Selections*/
#if ReferenceSelect==ADCOff
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    2e0a:	a7 e2       	ldi	r26, 0x27	; 39
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e7 e2       	ldi	r30, 0x27	; 39
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	8f 77       	andi	r24, 0x7F	; 127
    2e16:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    2e18:	a7 e2       	ldi	r26, 0x27	; 39
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	e7 e2       	ldi	r30, 0x27	; 39
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	80 64       	ori	r24, 0x40	; 64
    2e24:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    2e26:	a7 e2       	ldi	r26, 0x27	; 39
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	e7 e2       	ldi	r30, 0x27	; 39
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7d       	andi	r24, 0xDF	; 223
    2e32:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    2e34:	a6 e2       	ldi	r26, 0x26	; 38
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	e6 e2       	ldi	r30, 0x26	; 38
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	80 68       	ori	r24, 0x80	; 128
    2e40:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	81 30       	cpi	r24, 0x01	; 1
    2e46:	d1 f4       	brne	.+52     	; 0x2e7c <ADC_voidInitPolling+0x84>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    2e48:	a6 e2       	ldi	r26, 0x26	; 38
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e6 e2       	ldi	r30, 0x26	; 38
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	80 62       	ori	r24, 0x20	; 32
    2e54:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	80 7e       	andi	r24, 0xE0	; 224
    2e5a:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    2e5c:	a0 e5       	ldi	r26, 0x50	; 80
    2e5e:	b0 e0       	ldi	r27, 0x00	; 0
    2e60:	e0 e5       	ldi	r30, 0x50	; 80
    2e62:	f0 e0       	ldi	r31, 0x00	; 0
    2e64:	80 81       	ld	r24, Z
    2e66:	8f 71       	andi	r24, 0x1F	; 31
    2e68:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    2e6a:	a0 e5       	ldi	r26, 0x50	; 80
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e0 e5       	ldi	r30, 0x50	; 80
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	90 81       	ld	r25, Z
    2e74:	8a 81       	ldd	r24, Y+2	; 0x02
    2e76:	89 2b       	or	r24, r25
    2e78:	8c 93       	st	X, r24
    2e7a:	0a c0       	rjmp	.+20     	; 0x2e90 <ADC_voidInitPolling+0x98>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	88 23       	and	r24, r24
    2e80:	39 f4       	brne	.+14     	; 0x2e90 <ADC_voidInitPolling+0x98>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    2e82:	a6 e2       	ldi	r26, 0x26	; 38
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e6 e2       	ldi	r30, 0x26	; 38
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	8f 7d       	andi	r24, 0xDF	; 223
    2e8e:	8c 93       	st	X, r24
	}


	/*disable interrupt*/
	clear_bit(ADC_SRA,ADCSRA_ADIE);
    2e90:	a6 e2       	ldi	r26, 0x26	; 38
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e6 e2       	ldi	r30, 0x26	; 38
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	87 7f       	andi	r24, 0xF7	; 247
    2e9c:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    2e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea0:	87 70       	andi	r24, 0x07	; 7
    2ea2:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    2ea4:	a6 e2       	ldi	r26, 0x26	; 38
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e6 e2       	ldi	r30, 0x26	; 38
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	88 7f       	andi	r24, 0xF8	; 248
    2eb0:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    2eb2:	a6 e2       	ldi	r26, 0x26	; 38
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e6 e2       	ldi	r30, 0x26	; 38
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	90 81       	ld	r25, Z
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	89 2b       	or	r24, r25
    2ec0:	8c 93       	st	X, r24

}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <ADC_voidReadResultPolling>:


void ADC_voidReadResultPolling(u8 channel, u16 *Result)
{
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	00 d0       	rcall	.+0      	; 0x2ed4 <ADC_voidReadResultPolling+0x6>
    2ed4:	0f 92       	push	r0
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	7b 83       	std	Y+3, r23	; 0x03
    2ede:	6a 83       	std	Y+2, r22	; 0x02
	channel&=0x1F;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	8f 71       	andi	r24, 0x1F	; 31
    2ee4:	89 83       	std	Y+1, r24	; 0x01
	ADC_MUX&=0xE0;
    2ee6:	a7 e2       	ldi	r26, 0x27	; 39
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e7 e2       	ldi	r30, 0x27	; 39
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	80 7e       	andi	r24, 0xE0	; 224
    2ef2:	8c 93       	st	X, r24
	ADC_MUX|=channel; //choose the channel
    2ef4:	a7 e2       	ldi	r26, 0x27	; 39
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	e7 e2       	ldi	r30, 0x27	; 39
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	90 81       	ld	r25, Z
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	89 2b       	or	r24, r25
    2f02:	8c 93       	st	X, r24
	set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    2f04:	a6 e2       	ldi	r26, 0x26	; 38
    2f06:	b0 e0       	ldi	r27, 0x00	; 0
    2f08:	e6 e2       	ldi	r30, 0x26	; 38
    2f0a:	f0 e0       	ldi	r31, 0x00	; 0
    2f0c:	80 81       	ld	r24, Z
    2f0e:	80 64       	ori	r24, 0x40	; 64
    2f10:	8c 93       	st	X, r24
	while(get_bit(ADC_SRA,ADCSRA_ADIF)!=ON);
    2f12:	e6 e2       	ldi	r30, 0x26	; 38
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	82 95       	swap	r24
    2f1a:	8f 70       	andi	r24, 0x0F	; 15
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	81 70       	andi	r24, 0x01	; 1
    2f22:	90 70       	andi	r25, 0x00	; 0
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	a9 f3       	breq	.-22     	; 0x2f12 <ADC_voidReadResultPolling+0x44>
	*Result=ADC_DATA;
    2f28:	e4 e2       	ldi	r30, 0x24	; 36
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	91 81       	ldd	r25, Z+1	; 0x01
    2f30:	ea 81       	ldd	r30, Y+2	; 0x02
    2f32:	fb 81       	ldd	r31, Y+3	; 0x03
    2f34:	91 83       	std	Z+1, r25	; 0x01
    2f36:	80 83       	st	Z, r24
	set_bit(ADC_SRA,ADCSRA_ADIF);
    2f38:	a6 e2       	ldi	r26, 0x26	; 38
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e6 e2       	ldi	r30, 0x26	; 38
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	80 61       	ori	r24, 0x10	; 16
    2f44:	8c 93       	st	X, r24
}
    2f46:	0f 90       	pop	r0
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	08 95       	ret

00002f52 <ADC_voidInitInterrupt>:


void ADC_voidInitInterrupt(ADCInformation ADCInfo)
{
    2f52:	df 93       	push	r29
    2f54:	cf 93       	push	r28
    2f56:	00 d0       	rcall	.+0      	; 0x2f58 <ADC_voidInitInterrupt+0x6>
    2f58:	0f 92       	push	r0
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	69 83       	std	Y+1, r22	; 0x01
    2f60:	7a 83       	std	Y+2, r23	; 0x02
    2f62:	8b 83       	std	Y+3, r24	; 0x03
	ADC_MUX=0xFF; //initially to disable the channels until needed
    2f64:	e7 e2       	ldi	r30, 0x27	; 39
    2f66:	f0 e0       	ldi	r31, 0x00	; 0
    2f68:	8f ef       	ldi	r24, 0xFF	; 255
    2f6a:	80 83       	st	Z, r24
	/*Voltage Reference Selections*/
#if ReferenceSelect==Off
	clear_bit(ADC_MUX,ADMUX_REFS1);
	clear_bit(ADC_MUX,ADMUX_REFS0);
#elif ReferenceSelect==BothExternal
	clear_bit(ADC_MUX,ADMUX_REFS1);
    2f6c:	a7 e2       	ldi	r26, 0x27	; 39
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e7 e2       	ldi	r30, 0x27	; 39
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	8f 77       	andi	r24, 0x7F	; 127
    2f78:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_REFS0);
    2f7a:	a7 e2       	ldi	r26, 0x27	; 39
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	e7 e2       	ldi	r30, 0x27	; 39
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 64       	ori	r24, 0x40	; 64
    2f86:	8c 93       	st	X, r24
#endif


	/*data adjustment*/
#if DataAdjustmant==Right
	clear_bit(ADC_MUX,ADMUX_ADLAR);
    2f88:	a7 e2       	ldi	r26, 0x27	; 39
    2f8a:	b0 e0       	ldi	r27, 0x00	; 0
    2f8c:	e7 e2       	ldi	r30, 0x27	; 39
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	80 81       	ld	r24, Z
    2f92:	8f 7d       	andi	r24, 0xDF	; 223
    2f94:	8c 93       	st	X, r24
	set_bit(ADC_MUX,ADMUX_ADLAR);
#endif


	/*Enable ADC*/
	set_bit(ADC_SRA,ADCSRA_ADEN);
    2f96:	a6 e2       	ldi	r26, 0x26	; 38
    2f98:	b0 e0       	ldi	r27, 0x00	; 0
    2f9a:	e6 e2       	ldi	r30, 0x26	; 38
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 81       	ld	r24, Z
    2fa0:	80 68       	ori	r24, 0x80	; 128
    2fa2:	8c 93       	st	X, r24


	/*autotrigger*/
	if (ADCInfo.AutoTriggerState==ON)
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	d1 f4       	brne	.+52     	; 0x2fde <ADC_voidInitInterrupt+0x8c>
	{
		set_bit(ADC_SRA,ADCSRA_ADATE);
    2faa:	a6 e2       	ldi	r26, 0x26	; 38
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	e6 e2       	ldi	r30, 0x26	; 38
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	80 62       	ori	r24, 0x20	; 32
    2fb6:	8c 93       	st	X, r24
		ADCInfo.TriggerSource&=0xE0; //11100000
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	80 7e       	andi	r24, 0xE0	; 224
    2fbc:	8a 83       	std	Y+2, r24	; 0x02
		ADC_SFIOR&=0x1F; //00011111
    2fbe:	a0 e5       	ldi	r26, 0x50	; 80
    2fc0:	b0 e0       	ldi	r27, 0x00	; 0
    2fc2:	e0 e5       	ldi	r30, 0x50	; 80
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 81       	ld	r24, Z
    2fc8:	8f 71       	andi	r24, 0x1F	; 31
    2fca:	8c 93       	st	X, r24
		ADC_SFIOR|=ADCInfo.TriggerSource;
    2fcc:	a0 e5       	ldi	r26, 0x50	; 80
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e0 e5       	ldi	r30, 0x50	; 80
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	90 81       	ld	r25, Z
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	89 2b       	or	r24, r25
    2fda:	8c 93       	st	X, r24
    2fdc:	0a c0       	rjmp	.+20     	; 0x2ff2 <ADC_voidInitInterrupt+0xa0>
	}
	else if(ADCInfo.AutoTriggerState==OFF)
    2fde:	89 81       	ldd	r24, Y+1	; 0x01
    2fe0:	88 23       	and	r24, r24
    2fe2:	39 f4       	brne	.+14     	; 0x2ff2 <ADC_voidInitInterrupt+0xa0>
	{
		clear_bit(ADC_SRA,ADCSRA_ADATE);
    2fe4:	a6 e2       	ldi	r26, 0x26	; 38
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e6 e2       	ldi	r30, 0x26	; 38
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	8f 7d       	andi	r24, 0xDF	; 223
    2ff0:	8c 93       	st	X, r24
	}


	/*enable interrupt*/
	set_bit(ADC_SRA,ADCSRA_ADIE);
    2ff2:	a6 e2       	ldi	r26, 0x26	; 38
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e6 e2       	ldi	r30, 0x26	; 38
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	88 60       	ori	r24, 0x08	; 8
    2ffe:	8c 93       	st	X, r24


    /*prescaler*/
	ADCInfo.DivisionFactor&=0x07; //00000111
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	87 70       	andi	r24, 0x07	; 7
    3004:	8b 83       	std	Y+3, r24	; 0x03
	ADC_SRA&=0xF8;  //11111000
    3006:	a6 e2       	ldi	r26, 0x26	; 38
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e6 e2       	ldi	r30, 0x26	; 38
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	88 7f       	andi	r24, 0xF8	; 248
    3012:	8c 93       	st	X, r24
	ADC_SRA|=ADCInfo.DivisionFactor;
    3014:	a6 e2       	ldi	r26, 0x26	; 38
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e6 e2       	ldi	r30, 0x26	; 38
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	90 81       	ld	r25, Z
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	89 2b       	or	r24, r25
    3022:	8c 93       	st	X, r24
}
    3024:	0f 90       	pop	r0
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <ADC_voidReadResultInterrupt>:


void ADC_voidReadResultInterrupt(u8 channel)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	0f 92       	push	r0
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	89 83       	std	Y+1, r24	; 0x01
	channel&=0x1F;
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	8f 71       	andi	r24, 0x1F	; 31
    3040:	89 83       	std	Y+1, r24	; 0x01
		ADC_MUX&=0xE0;
    3042:	a7 e2       	ldi	r26, 0x27	; 39
    3044:	b0 e0       	ldi	r27, 0x00	; 0
    3046:	e7 e2       	ldi	r30, 0x27	; 39
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	80 7e       	andi	r24, 0xE0	; 224
    304e:	8c 93       	st	X, r24
		ADC_MUX|=channel; //choose the channel
    3050:	a7 e2       	ldi	r26, 0x27	; 39
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	e7 e2       	ldi	r30, 0x27	; 39
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	90 81       	ld	r25, Z
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	89 2b       	or	r24, r25
    305e:	8c 93       	st	X, r24
		set_bit(ADC_SRA,ADCSRA_ADSC);  //start conversion
    3060:	a6 e2       	ldi	r26, 0x26	; 38
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	e6 e2       	ldi	r30, 0x26	; 38
    3066:	f0 e0       	ldi	r31, 0x00	; 0
    3068:	80 81       	ld	r24, Z
    306a:	80 64       	ori	r24, 0x40	; 64
    306c:	8c 93       	st	X, r24
}
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <__vector_16>:

void __vector_16()
{
    3076:	1f 92       	push	r1
    3078:	0f 92       	push	r0
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	0f 92       	push	r0
    307e:	11 24       	eor	r1, r1
    3080:	8f 93       	push	r24
    3082:	9f 93       	push	r25
    3084:	ef 93       	push	r30
    3086:	ff 93       	push	r31
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
	InterruptData=ADC_DATA;
    3090:	e4 e2       	ldi	r30, 0x24	; 36
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	90 93 9f 01 	sts	0x019F, r25
    309c:	80 93 9e 01 	sts	0x019E, r24
}
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	ff 91       	pop	r31
    30a6:	ef 91       	pop	r30
    30a8:	9f 91       	pop	r25
    30aa:	8f 91       	pop	r24
    30ac:	0f 90       	pop	r0
    30ae:	0f be       	out	0x3f, r0	; 63
    30b0:	0f 90       	pop	r0
    30b2:	1f 90       	pop	r1
    30b4:	18 95       	reti

000030b6 <SWITCH_voidInit>:
 *      Author: salma
 */

#include "Switch_Interface.h"
void SWITCH_voidInit (u8 Group, u8 pin)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <SWITCH_voidInit+0x6>
    30bc:	cd b7       	in	r28, 0x3d	; 61
    30be:	de b7       	in	r29, 0x3e	; 62
    30c0:	89 83       	std	Y+1, r24	; 0x01
    30c2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group,pin,Input);
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	6a 81       	ldd	r22, Y+2	; 0x02
    30c8:	40 e0       	ldi	r20, 0x00	; 0
    30ca:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidControlPullupPin(Group,pin,High);
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	6a 81       	ldd	r22, Y+2	; 0x02
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <DIO_voidControlPullupPin>
}
    30d8:	0f 90       	pop	r0
    30da:	0f 90       	pop	r0
    30dc:	cf 91       	pop	r28
    30de:	df 91       	pop	r29
    30e0:	08 95       	ret

000030e2 <SWITCH_u8GetValue>:

u8 SWITCH_u8GetValue (u8 Group, u8 pin)
{
    30e2:	df 93       	push	r29
    30e4:	cf 93       	push	r28
    30e6:	00 d0       	rcall	.+0      	; 0x30e8 <SWITCH_u8GetValue+0x6>
    30e8:	cd b7       	in	r28, 0x3d	; 61
    30ea:	de b7       	in	r29, 0x3e	; 62
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_u8ReadPinValue(Group,pin);
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	6a 81       	ldd	r22, Y+2	; 0x02
    30f4:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
}
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <STEPPER_voidInit>:
 */
#include "Stepper_Interface.h"
#include <util/delay.h>

void STEPPER_voidInit ()
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(StepperGroup,StepperB1,Output);
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	60 e0       	ldi	r22, 0x00	; 0
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB2,Output);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	61 e0       	ldi	r22, 0x01	; 1
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB3,Output);
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(StepperGroup,StepperB4,Output);
    3128:	81 e0       	ldi	r24, 0x01	; 1
    312a:	63 e0       	ldi	r22, 0x03	; 3
    312c:	41 e0       	ldi	r20, 0x01	; 1
    312e:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
}
    3132:	cf 91       	pop	r28
    3134:	df 91       	pop	r29
    3136:	08 95       	ret

00003138 <STEPPER_voidCW>:

void STEPPER_voidCW(u16 angle)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	cd b7       	in	r28, 0x3d	; 61
    313e:	de b7       	in	r29, 0x3e	; 62
    3140:	c2 54       	subi	r28, 0x42	; 66
    3142:	d0 40       	sbci	r29, 0x00	; 0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	fe 01       	movw	r30, r28
    3150:	ef 5b       	subi	r30, 0xBF	; 191
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	91 83       	std	Z+1, r25	; 0x01
    3156:	80 83       	st	Z, r24
	u32 NOSteps =(angle/FullStepAngle);
    3158:	fe 01       	movw	r30, r28
    315a:	ef 5b       	subi	r30, 0xBF	; 191
    315c:	ff 4f       	sbci	r31, 0xFF	; 255
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	cc 01       	movw	r24, r24
    3164:	a0 e0       	ldi	r26, 0x00	; 0
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	bc 01       	movw	r22, r24
    3176:	cd 01       	movw	r24, r26
    3178:	2c eb       	ldi	r18, 0xBC	; 188
    317a:	3c ec       	ldi	r19, 0xCC	; 204
    317c:	40 e3       	ldi	r20, 0x30	; 48
    317e:	5e e3       	ldi	r21, 0x3E	; 62
    3180:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	bc 01       	movw	r22, r24
    318a:	cd 01       	movw	r24, r26
    318c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3190:	dc 01       	movw	r26, r24
    3192:	cb 01       	movw	r24, r22
    3194:	fe 01       	movw	r30, r28
    3196:	fd 96       	adiw	r30, 0x3d	; 61
    3198:	80 83       	st	Z, r24
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	a2 83       	std	Z+2, r26	; 0x02
    319e:	b3 83       	std	Z+3, r27	; 0x03
	u16 NOIterations=NOSteps/FUllIteration;
    31a0:	fe 01       	movw	r30, r28
    31a2:	fd 96       	adiw	r30, 0x3d	; 61
    31a4:	80 81       	ld	r24, Z
    31a6:	91 81       	ldd	r25, Z+1	; 0x01
    31a8:	a2 81       	ldd	r26, Z+2	; 0x02
    31aa:	b3 81       	ldd	r27, Z+3	; 0x03
    31ac:	b6 95       	lsr	r27
    31ae:	a7 95       	ror	r26
    31b0:	97 95       	ror	r25
    31b2:	87 95       	ror	r24
    31b4:	b6 95       	lsr	r27
    31b6:	a7 95       	ror	r26
    31b8:	97 95       	ror	r25
    31ba:	87 95       	ror	r24
    31bc:	9c af       	std	Y+60, r25	; 0x3c
    31be:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    31c0:	1a ae       	std	Y+58, r1	; 0x3a
    31c2:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    31c4:	1a ae       	std	Y+58, r1	; 0x3a
    31c6:	19 ae       	std	Y+57, r1	; 0x39
    31c8:	1d c2       	rjmp	.+1082   	; 0x3604 <STEPPER_voidCW+0x4cc>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	41 e0       	ldi	r20, 0x01	; 1
    31da:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	62 e0       	ldi	r22, 0x02	; 2
    31e2:	41 e0       	ldi	r20, 0x01	; 1
    31e4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	63 e0       	ldi	r22, 0x03	; 3
    31ec:	41 e0       	ldi	r20, 0x01	; 1
    31ee:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e2       	ldi	r26, 0x20	; 32
    31f8:	b1 e4       	ldi	r27, 0x41	; 65
    31fa:	8d ab       	std	Y+53, r24	; 0x35
    31fc:	9e ab       	std	Y+54, r25	; 0x36
    31fe:	af ab       	std	Y+55, r26	; 0x37
    3200:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6d a9       	ldd	r22, Y+53	; 0x35
    3204:	7e a9       	ldd	r23, Y+54	; 0x36
    3206:	8f a9       	ldd	r24, Y+55	; 0x37
    3208:	98 ad       	ldd	r25, Y+56	; 0x38
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a ef       	ldi	r20, 0xFA	; 250
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	89 ab       	std	Y+49, r24	; 0x31
    321c:	9a ab       	std	Y+50, r25	; 0x32
    321e:	ab ab       	std	Y+51, r26	; 0x33
    3220:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3222:	69 a9       	ldd	r22, Y+49	; 0x31
    3224:	7a a9       	ldd	r23, Y+50	; 0x32
    3226:	8b a9       	ldd	r24, Y+51	; 0x33
    3228:	9c a9       	ldd	r25, Y+52	; 0x34
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <STEPPER_voidCW+0x10c>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	98 ab       	std	Y+48, r25	; 0x30
    3240:	8f a7       	std	Y+47, r24	; 0x2f
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <STEPPER_voidCW+0x18a>
	else if (__tmp > 65535)
    3244:	69 a9       	ldd	r22, Y+49	; 0x31
    3246:	7a a9       	ldd	r23, Y+50	; 0x32
    3248:	8b a9       	ldd	r24, Y+51	; 0x33
    324a:	9c a9       	ldd	r25, Y+52	; 0x34
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <STEPPER_voidCW+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6d a9       	ldd	r22, Y+53	; 0x35
    325e:	7e a9       	ldd	r23, Y+54	; 0x36
    3260:	8f a9       	ldd	r24, Y+55	; 0x37
    3262:	98 ad       	ldd	r25, Y+56	; 0x38
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	98 ab       	std	Y+48, r25	; 0x30
    3282:	8f a7       	std	Y+47, r24	; 0x2f
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <STEPPER_voidCW+0x16c>
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9e a7       	std	Y+46, r25	; 0x2e
    328c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3290:	9e a5       	ldd	r25, Y+46	; 0x2e
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <STEPPER_voidCW+0x15a>
    3296:	9e a7       	std	Y+46, r25	; 0x2e
    3298:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8f a5       	ldd	r24, Y+47	; 0x2f
    329c:	98 a9       	ldd	r25, Y+48	; 0x30
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	98 ab       	std	Y+48, r25	; 0x30
    32a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32a6:	98 a9       	ldd	r25, Y+48	; 0x30
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <STEPPER_voidCW+0x14e>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <STEPPER_voidCW+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	69 a9       	ldd	r22, Y+49	; 0x31
    32b0:	7a a9       	ldd	r23, Y+50	; 0x32
    32b2:	8b a9       	ldd	r24, Y+51	; 0x33
    32b4:	9c a9       	ldd	r25, Y+52	; 0x34
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	98 ab       	std	Y+48, r25	; 0x30
    32c0:	8f a7       	std	Y+47, r24	; 0x2f
    32c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c4:	98 a9       	ldd	r25, Y+48	; 0x30
    32c6:	9c a7       	std	Y+44, r25	; 0x2c
    32c8:	8b a7       	std	Y+43, r24	; 0x2b
    32ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    32cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <STEPPER_voidCW+0x196>
    32d2:	9c a7       	std	Y+44, r25	; 0x2c
    32d4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	40 e0       	ldi	r20, 0x00	; 0
    32e6:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	62 e0       	ldi	r22, 0x02	; 2
    32ee:	41 e0       	ldi	r20, 0x01	; 1
    32f0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	63 e0       	ldi	r22, 0x03	; 3
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	a0 e2       	ldi	r26, 0x20	; 32
    3304:	b1 e4       	ldi	r27, 0x41	; 65
    3306:	8f a3       	std	Y+39, r24	; 0x27
    3308:	98 a7       	std	Y+40, r25	; 0x28
    330a:	a9 a7       	std	Y+41, r26	; 0x29
    330c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    330e:	6f a1       	ldd	r22, Y+39	; 0x27
    3310:	78 a5       	ldd	r23, Y+40	; 0x28
    3312:	89 a5       	ldd	r24, Y+41	; 0x29
    3314:	9a a5       	ldd	r25, Y+42	; 0x2a
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a ef       	ldi	r20, 0xFA	; 250
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	8b a3       	std	Y+35, r24	; 0x23
    3328:	9c a3       	std	Y+36, r25	; 0x24
    332a:	ad a3       	std	Y+37, r26	; 0x25
    332c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    332e:	6b a1       	ldd	r22, Y+35	; 0x23
    3330:	7c a1       	ldd	r23, Y+36	; 0x24
    3332:	8d a1       	ldd	r24, Y+37	; 0x25
    3334:	9e a1       	ldd	r25, Y+38	; 0x26
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	40 e8       	ldi	r20, 0x80	; 128
    333c:	5f e3       	ldi	r21, 0x3F	; 63
    333e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3342:	88 23       	and	r24, r24
    3344:	2c f4       	brge	.+10     	; 0x3350 <STEPPER_voidCW+0x218>
		__ticks = 1;
    3346:	81 e0       	ldi	r24, 0x01	; 1
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	9a a3       	std	Y+34, r25	; 0x22
    334c:	89 a3       	std	Y+33, r24	; 0x21
    334e:	3f c0       	rjmp	.+126    	; 0x33ce <STEPPER_voidCW+0x296>
	else if (__tmp > 65535)
    3350:	6b a1       	ldd	r22, Y+35	; 0x23
    3352:	7c a1       	ldd	r23, Y+36	; 0x24
    3354:	8d a1       	ldd	r24, Y+37	; 0x25
    3356:	9e a1       	ldd	r25, Y+38	; 0x26
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	4c f5       	brge	.+82     	; 0x33ba <STEPPER_voidCW+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3368:	6f a1       	ldd	r22, Y+39	; 0x27
    336a:	78 a5       	ldd	r23, Y+40	; 0x28
    336c:	89 a5       	ldd	r24, Y+41	; 0x29
    336e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	40 e2       	ldi	r20, 0x20	; 32
    3376:	51 e4       	ldi	r21, 0x41	; 65
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	bc 01       	movw	r22, r24
    3382:	cd 01       	movw	r24, r26
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	9a a3       	std	Y+34, r25	; 0x22
    338e:	89 a3       	std	Y+33, r24	; 0x21
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <STEPPER_voidCW+0x278>
    3392:	88 ec       	ldi	r24, 0xC8	; 200
    3394:	90 e0       	ldi	r25, 0x00	; 0
    3396:	98 a3       	std	Y+32, r25	; 0x20
    3398:	8f 8f       	std	Y+31, r24	; 0x1f
    339a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    339c:	98 a1       	ldd	r25, Y+32	; 0x20
    339e:	01 97       	sbiw	r24, 0x01	; 1
    33a0:	f1 f7       	brne	.-4      	; 0x339e <STEPPER_voidCW+0x266>
    33a2:	98 a3       	std	Y+32, r25	; 0x20
    33a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33a6:	89 a1       	ldd	r24, Y+33	; 0x21
    33a8:	9a a1       	ldd	r25, Y+34	; 0x22
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	9a a3       	std	Y+34, r25	; 0x22
    33ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b0:	89 a1       	ldd	r24, Y+33	; 0x21
    33b2:	9a a1       	ldd	r25, Y+34	; 0x22
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	69 f7       	brne	.-38     	; 0x3392 <STEPPER_voidCW+0x25a>
    33b8:	14 c0       	rjmp	.+40     	; 0x33e2 <STEPPER_voidCW+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ba:	6b a1       	ldd	r22, Y+35	; 0x23
    33bc:	7c a1       	ldd	r23, Y+36	; 0x24
    33be:	8d a1       	ldd	r24, Y+37	; 0x25
    33c0:	9e a1       	ldd	r25, Y+38	; 0x26
    33c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	9a a3       	std	Y+34, r25	; 0x22
    33cc:	89 a3       	std	Y+33, r24	; 0x21
    33ce:	89 a1       	ldd	r24, Y+33	; 0x21
    33d0:	9a a1       	ldd	r25, Y+34	; 0x22
    33d2:	9e 8f       	std	Y+30, r25	; 0x1e
    33d4:	8d 8f       	std	Y+29, r24	; 0x1d
    33d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <STEPPER_voidCW+0x2a2>
    33de:	9e 8f       	std	Y+30, r25	; 0x1e
    33e0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    33e2:	81 e0       	ldi	r24, 0x01	; 1
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	61 e0       	ldi	r22, 0x01	; 1
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	62 e0       	ldi	r22, 0x02	; 2
    33fa:	40 e0       	ldi	r20, 0x00	; 0
    33fc:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	63 e0       	ldi	r22, 0x03	; 3
    3404:	41 e0       	ldi	r20, 0x01	; 1
    3406:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    340a:	80 e0       	ldi	r24, 0x00	; 0
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a0 e2       	ldi	r26, 0x20	; 32
    3410:	b1 e4       	ldi	r27, 0x41	; 65
    3412:	89 8f       	std	Y+25, r24	; 0x19
    3414:	9a 8f       	std	Y+26, r25	; 0x1a
    3416:	ab 8f       	std	Y+27, r26	; 0x1b
    3418:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    341a:	69 8d       	ldd	r22, Y+25	; 0x19
    341c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    341e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3420:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4a ef       	ldi	r20, 0xFA	; 250
    3428:	54 e4       	ldi	r21, 0x44	; 68
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	8d 8b       	std	Y+21, r24	; 0x15
    3434:	9e 8b       	std	Y+22, r25	; 0x16
    3436:	af 8b       	std	Y+23, r26	; 0x17
    3438:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    343a:	6d 89       	ldd	r22, Y+21	; 0x15
    343c:	7e 89       	ldd	r23, Y+22	; 0x16
    343e:	8f 89       	ldd	r24, Y+23	; 0x17
    3440:	98 8d       	ldd	r25, Y+24	; 0x18
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    344e:	88 23       	and	r24, r24
    3450:	2c f4       	brge	.+10     	; 0x345c <STEPPER_voidCW+0x324>
		__ticks = 1;
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	9c 8b       	std	Y+20, r25	; 0x14
    3458:	8b 8b       	std	Y+19, r24	; 0x13
    345a:	3f c0       	rjmp	.+126    	; 0x34da <STEPPER_voidCW+0x3a2>
	else if (__tmp > 65535)
    345c:	6d 89       	ldd	r22, Y+21	; 0x15
    345e:	7e 89       	ldd	r23, Y+22	; 0x16
    3460:	8f 89       	ldd	r24, Y+23	; 0x17
    3462:	98 8d       	ldd	r25, Y+24	; 0x18
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	3f ef       	ldi	r19, 0xFF	; 255
    3468:	4f e7       	ldi	r20, 0x7F	; 127
    346a:	57 e4       	ldi	r21, 0x47	; 71
    346c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3470:	18 16       	cp	r1, r24
    3472:	4c f5       	brge	.+82     	; 0x34c6 <STEPPER_voidCW+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3474:	69 8d       	ldd	r22, Y+25	; 0x19
    3476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    347a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9c 8b       	std	Y+20, r25	; 0x14
    349a:	8b 8b       	std	Y+19, r24	; 0x13
    349c:	0f c0       	rjmp	.+30     	; 0x34bc <STEPPER_voidCW+0x384>
    349e:	88 ec       	ldi	r24, 0xC8	; 200
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9a 8b       	std	Y+18, r25	; 0x12
    34a4:	89 8b       	std	Y+17, r24	; 0x11
    34a6:	89 89       	ldd	r24, Y+17	; 0x11
    34a8:	9a 89       	ldd	r25, Y+18	; 0x12
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <STEPPER_voidCW+0x372>
    34ae:	9a 8b       	std	Y+18, r25	; 0x12
    34b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34b2:	8b 89       	ldd	r24, Y+19	; 0x13
    34b4:	9c 89       	ldd	r25, Y+20	; 0x14
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	9c 8b       	std	Y+20, r25	; 0x14
    34ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34bc:	8b 89       	ldd	r24, Y+19	; 0x13
    34be:	9c 89       	ldd	r25, Y+20	; 0x14
    34c0:	00 97       	sbiw	r24, 0x00	; 0
    34c2:	69 f7       	brne	.-38     	; 0x349e <STEPPER_voidCW+0x366>
    34c4:	14 c0       	rjmp	.+40     	; 0x34ee <STEPPER_voidCW+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c6:	6d 89       	ldd	r22, Y+21	; 0x15
    34c8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d2:	dc 01       	movw	r26, r24
    34d4:	cb 01       	movw	r24, r22
    34d6:	9c 8b       	std	Y+20, r25	; 0x14
    34d8:	8b 8b       	std	Y+19, r24	; 0x13
    34da:	8b 89       	ldd	r24, Y+19	; 0x13
    34dc:	9c 89       	ldd	r25, Y+20	; 0x14
    34de:	98 8b       	std	Y+16, r25	; 0x10
    34e0:	8f 87       	std	Y+15, r24	; 0x0f
    34e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    34e4:	98 89       	ldd	r25, Y+16	; 0x10
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	f1 f7       	brne	.-4      	; 0x34e6 <STEPPER_voidCW+0x3ae>
    34ea:	98 8b       	std	Y+16, r25	; 0x10
    34ec:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	41 e0       	ldi	r20, 0x01	; 1
    34f4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	61 e0       	ldi	r22, 0x01	; 1
    34fc:	41 e0       	ldi	r20, 0x01	; 1
    34fe:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	62 e0       	ldi	r22, 0x02	; 2
    3506:	41 e0       	ldi	r20, 0x01	; 1
    3508:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	63 e0       	ldi	r22, 0x03	; 3
    3510:	40 e0       	ldi	r20, 0x00	; 0
    3512:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	a0 e2       	ldi	r26, 0x20	; 32
    351c:	b1 e4       	ldi	r27, 0x41	; 65
    351e:	8b 87       	std	Y+11, r24	; 0x0b
    3520:	9c 87       	std	Y+12, r25	; 0x0c
    3522:	ad 87       	std	Y+13, r26	; 0x0d
    3524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3526:	6b 85       	ldd	r22, Y+11	; 0x0b
    3528:	7c 85       	ldd	r23, Y+12	; 0x0c
    352a:	8d 85       	ldd	r24, Y+13	; 0x0d
    352c:	9e 85       	ldd	r25, Y+14	; 0x0e
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	30 e0       	ldi	r19, 0x00	; 0
    3532:	4a ef       	ldi	r20, 0xFA	; 250
    3534:	54 e4       	ldi	r21, 0x44	; 68
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8f 83       	std	Y+7, r24	; 0x07
    3540:	98 87       	std	Y+8, r25	; 0x08
    3542:	a9 87       	std	Y+9, r26	; 0x09
    3544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	40 e8       	ldi	r20, 0x80	; 128
    3554:	5f e3       	ldi	r21, 0x3F	; 63
    3556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355a:	88 23       	and	r24, r24
    355c:	2c f4       	brge	.+10     	; 0x3568 <STEPPER_voidCW+0x430>
		__ticks = 1;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	9e 83       	std	Y+6, r25	; 0x06
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	3f c0       	rjmp	.+126    	; 0x35e6 <STEPPER_voidCW+0x4ae>
	else if (__tmp > 65535)
    3568:	6f 81       	ldd	r22, Y+7	; 0x07
    356a:	78 85       	ldd	r23, Y+8	; 0x08
    356c:	89 85       	ldd	r24, Y+9	; 0x09
    356e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	3f ef       	ldi	r19, 0xFF	; 255
    3574:	4f e7       	ldi	r20, 0x7F	; 127
    3576:	57 e4       	ldi	r21, 0x47	; 71
    3578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    357c:	18 16       	cp	r1, r24
    357e:	4c f5       	brge	.+82     	; 0x35d2 <STEPPER_voidCW+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	6b 85       	ldd	r22, Y+11	; 0x0b
    3582:	7c 85       	ldd	r23, Y+12	; 0x0c
    3584:	8d 85       	ldd	r24, Y+13	; 0x0d
    3586:	9e 85       	ldd	r25, Y+14	; 0x0e
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9e 83       	std	Y+6, r25	; 0x06
    35a6:	8d 83       	std	Y+5, r24	; 0x05
    35a8:	0f c0       	rjmp	.+30     	; 0x35c8 <STEPPER_voidCW+0x490>
    35aa:	88 ec       	ldi	r24, 0xC8	; 200
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	9c 83       	std	Y+4, r25	; 0x04
    35b0:	8b 83       	std	Y+3, r24	; 0x03
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	9c 81       	ldd	r25, Y+4	; 0x04
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <STEPPER_voidCW+0x47e>
    35ba:	9c 83       	std	Y+4, r25	; 0x04
    35bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35be:	8d 81       	ldd	r24, Y+5	; 0x05
    35c0:	9e 81       	ldd	r25, Y+6	; 0x06
    35c2:	01 97       	sbiw	r24, 0x01	; 1
    35c4:	9e 83       	std	Y+6, r25	; 0x06
    35c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ca:	9e 81       	ldd	r25, Y+6	; 0x06
    35cc:	00 97       	sbiw	r24, 0x00	; 0
    35ce:	69 f7       	brne	.-38     	; 0x35aa <STEPPER_voidCW+0x472>
    35d0:	14 c0       	rjmp	.+40     	; 0x35fa <STEPPER_voidCW+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d2:	6f 81       	ldd	r22, Y+7	; 0x07
    35d4:	78 85       	ldd	r23, Y+8	; 0x08
    35d6:	89 85       	ldd	r24, Y+9	; 0x09
    35d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9e 83       	std	Y+6, r25	; 0x06
    35e4:	8d 83       	std	Y+5, r24	; 0x05
    35e6:	8d 81       	ldd	r24, Y+5	; 0x05
    35e8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <STEPPER_voidCW+0x4ba>
    35f6:	9a 83       	std	Y+2, r25	; 0x02
    35f8:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidCW(u16 angle)
{
	u32 NOSteps =(angle/FullStepAngle);
	u16 NOIterations=NOSteps/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    35fa:	89 ad       	ldd	r24, Y+57	; 0x39
    35fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	9a af       	std	Y+58, r25	; 0x3a
    3602:	89 af       	std	Y+57, r24	; 0x39
    3604:	29 ad       	ldd	r18, Y+57	; 0x39
    3606:	3a ad       	ldd	r19, Y+58	; 0x3a
    3608:	8b ad       	ldd	r24, Y+59	; 0x3b
    360a:	9c ad       	ldd	r25, Y+60	; 0x3c
    360c:	28 17       	cp	r18, r24
    360e:	39 07       	cpc	r19, r25
    3610:	08 f4       	brcc	.+2      	; 0x3614 <STEPPER_voidCW+0x4dc>
    3612:	db cd       	rjmp	.-1098   	; 0x31ca <STEPPER_voidCW+0x92>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
		_delay_ms(delay);
	}

}
    3614:	ce 5b       	subi	r28, 0xBE	; 190
    3616:	df 4f       	sbci	r29, 0xFF	; 255
    3618:	0f b6       	in	r0, 0x3f	; 63
    361a:	f8 94       	cli
    361c:	de bf       	out	0x3e, r29	; 62
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	cd bf       	out	0x3d, r28	; 61
    3622:	cf 91       	pop	r28
    3624:	df 91       	pop	r29
    3626:	08 95       	ret

00003628 <STEPPER_voidACW>:

void STEPPER_voidACW(u16 angle)
{
    3628:	df 93       	push	r29
    362a:	cf 93       	push	r28
    362c:	cd b7       	in	r28, 0x3d	; 61
    362e:	de b7       	in	r29, 0x3e	; 62
    3630:	ee 97       	sbiw	r28, 0x3e	; 62
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	cd bf       	out	0x3d, r28	; 61
    363c:	9e af       	std	Y+62, r25	; 0x3e
    363e:	8d af       	std	Y+61, r24	; 0x3d

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
    3640:	8d ad       	ldd	r24, Y+61	; 0x3d
    3642:	9e ad       	ldd	r25, Y+62	; 0x3e
    3644:	cc 01       	movw	r24, r24
    3646:	a0 e0       	ldi	r26, 0x00	; 0
    3648:	b0 e0       	ldi	r27, 0x00	; 0
    364a:	bc 01       	movw	r22, r24
    364c:	cd 01       	movw	r24, r26
    364e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	2c eb       	ldi	r18, 0xBC	; 188
    365c:	3c ec       	ldi	r19, 0xCC	; 204
    365e:	40 e3       	ldi	r20, 0x30	; 48
    3660:	5e e3       	ldi	r21, 0x3E	; 62
    3662:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	bc 01       	movw	r22, r24
    366c:	cd 01       	movw	r24, r26
    366e:	20 e0       	ldi	r18, 0x00	; 0
    3670:	30 e0       	ldi	r19, 0x00	; 0
    3672:	40 e8       	ldi	r20, 0x80	; 128
    3674:	50 e4       	ldi	r21, 0x40	; 64
    3676:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    367a:	dc 01       	movw	r26, r24
    367c:	cb 01       	movw	r24, r22
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	9c af       	std	Y+60, r25	; 0x3c
    368c:	8b af       	std	Y+59, r24	; 0x3b
	u16 counter1=0;
    368e:	1a ae       	std	Y+58, r1	; 0x3a
    3690:	19 ae       	std	Y+57, r1	; 0x39
	for (counter1=0;counter1<NOIterations;counter1++)
    3692:	1a ae       	std	Y+58, r1	; 0x3a
    3694:	19 ae       	std	Y+57, r1	; 0x39
    3696:	1d c2       	rjmp	.+1082   	; 0x3ad2 <STEPPER_voidACW+0x4aa>
	{
		//step 1
		DIO_voidSetPinValue(StepperGroup,StepperB1,Low);
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	60 e0       	ldi	r22, 0x00	; 0
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    36a2:	81 e0       	ldi	r24, 0x01	; 1
    36a4:	61 e0       	ldi	r22, 0x01	; 1
    36a6:	41 e0       	ldi	r20, 0x01	; 1
    36a8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    36ac:	81 e0       	ldi	r24, 0x01	; 1
    36ae:	62 e0       	ldi	r22, 0x02	; 2
    36b0:	41 e0       	ldi	r20, 0x01	; 1
    36b2:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	63 e0       	ldi	r22, 0x03	; 3
    36ba:	41 e0       	ldi	r20, 0x01	; 1
    36bc:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	a0 e2       	ldi	r26, 0x20	; 32
    36c6:	b1 e4       	ldi	r27, 0x41	; 65
    36c8:	8d ab       	std	Y+53, r24	; 0x35
    36ca:	9e ab       	std	Y+54, r25	; 0x36
    36cc:	af ab       	std	Y+55, r26	; 0x37
    36ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36d0:	6d a9       	ldd	r22, Y+53	; 0x35
    36d2:	7e a9       	ldd	r23, Y+54	; 0x36
    36d4:	8f a9       	ldd	r24, Y+55	; 0x37
    36d6:	98 ad       	ldd	r25, Y+56	; 0x38
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	4a ef       	ldi	r20, 0xFA	; 250
    36de:	54 e4       	ldi	r21, 0x44	; 68
    36e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	89 ab       	std	Y+49, r24	; 0x31
    36ea:	9a ab       	std	Y+50, r25	; 0x32
    36ec:	ab ab       	std	Y+51, r26	; 0x33
    36ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36f0:	69 a9       	ldd	r22, Y+49	; 0x31
    36f2:	7a a9       	ldd	r23, Y+50	; 0x32
    36f4:	8b a9       	ldd	r24, Y+51	; 0x33
    36f6:	9c a9       	ldd	r25, Y+52	; 0x34
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e8       	ldi	r20, 0x80	; 128
    36fe:	5f e3       	ldi	r21, 0x3F	; 63
    3700:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3704:	88 23       	and	r24, r24
    3706:	2c f4       	brge	.+10     	; 0x3712 <STEPPER_voidACW+0xea>
		__ticks = 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	98 ab       	std	Y+48, r25	; 0x30
    370e:	8f a7       	std	Y+47, r24	; 0x2f
    3710:	3f c0       	rjmp	.+126    	; 0x3790 <STEPPER_voidACW+0x168>
	else if (__tmp > 65535)
    3712:	69 a9       	ldd	r22, Y+49	; 0x31
    3714:	7a a9       	ldd	r23, Y+50	; 0x32
    3716:	8b a9       	ldd	r24, Y+51	; 0x33
    3718:	9c a9       	ldd	r25, Y+52	; 0x34
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	3f ef       	ldi	r19, 0xFF	; 255
    371e:	4f e7       	ldi	r20, 0x7F	; 127
    3720:	57 e4       	ldi	r21, 0x47	; 71
    3722:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3726:	18 16       	cp	r1, r24
    3728:	4c f5       	brge	.+82     	; 0x377c <STEPPER_voidACW+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    372a:	6d a9       	ldd	r22, Y+53	; 0x35
    372c:	7e a9       	ldd	r23, Y+54	; 0x36
    372e:	8f a9       	ldd	r24, Y+55	; 0x37
    3730:	98 ad       	ldd	r25, Y+56	; 0x38
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e2       	ldi	r20, 0x20	; 32
    3738:	51 e4       	ldi	r21, 0x41	; 65
    373a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	98 ab       	std	Y+48, r25	; 0x30
    3750:	8f a7       	std	Y+47, r24	; 0x2f
    3752:	0f c0       	rjmp	.+30     	; 0x3772 <STEPPER_voidACW+0x14a>
    3754:	88 ec       	ldi	r24, 0xC8	; 200
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	9e a7       	std	Y+46, r25	; 0x2e
    375a:	8d a7       	std	Y+45, r24	; 0x2d
    375c:	8d a5       	ldd	r24, Y+45	; 0x2d
    375e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3760:	01 97       	sbiw	r24, 0x01	; 1
    3762:	f1 f7       	brne	.-4      	; 0x3760 <STEPPER_voidACW+0x138>
    3764:	9e a7       	std	Y+46, r25	; 0x2e
    3766:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	8f a5       	ldd	r24, Y+47	; 0x2f
    376a:	98 a9       	ldd	r25, Y+48	; 0x30
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	98 ab       	std	Y+48, r25	; 0x30
    3770:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3772:	8f a5       	ldd	r24, Y+47	; 0x2f
    3774:	98 a9       	ldd	r25, Y+48	; 0x30
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	69 f7       	brne	.-38     	; 0x3754 <STEPPER_voidACW+0x12c>
    377a:	14 c0       	rjmp	.+40     	; 0x37a4 <STEPPER_voidACW+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377c:	69 a9       	ldd	r22, Y+49	; 0x31
    377e:	7a a9       	ldd	r23, Y+50	; 0x32
    3780:	8b a9       	ldd	r24, Y+51	; 0x33
    3782:	9c a9       	ldd	r25, Y+52	; 0x34
    3784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3788:	dc 01       	movw	r26, r24
    378a:	cb 01       	movw	r24, r22
    378c:	98 ab       	std	Y+48, r25	; 0x30
    378e:	8f a7       	std	Y+47, r24	; 0x2f
    3790:	8f a5       	ldd	r24, Y+47	; 0x2f
    3792:	98 a9       	ldd	r25, Y+48	; 0x30
    3794:	9c a7       	std	Y+44, r25	; 0x2c
    3796:	8b a7       	std	Y+43, r24	; 0x2b
    3798:	8b a5       	ldd	r24, Y+43	; 0x2b
    379a:	9c a5       	ldd	r25, Y+44	; 0x2c
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	f1 f7       	brne	.-4      	; 0x379c <STEPPER_voidACW+0x174>
    37a0:	9c a7       	std	Y+44, r25	; 0x2c
    37a2:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(delay);
		//step 2
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	41 e0       	ldi	r20, 0x01	; 1
    37b4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	62 e0       	ldi	r22, 0x02	; 2
    37bc:	41 e0       	ldi	r20, 0x01	; 1
    37be:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,Low);
    37c2:	81 e0       	ldi	r24, 0x01	; 1
    37c4:	63 e0       	ldi	r22, 0x03	; 3
    37c6:	40 e0       	ldi	r20, 0x00	; 0
    37c8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	a0 e2       	ldi	r26, 0x20	; 32
    37d2:	b1 e4       	ldi	r27, 0x41	; 65
    37d4:	8f a3       	std	Y+39, r24	; 0x27
    37d6:	98 a7       	std	Y+40, r25	; 0x28
    37d8:	a9 a7       	std	Y+41, r26	; 0x29
    37da:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37dc:	6f a1       	ldd	r22, Y+39	; 0x27
    37de:	78 a5       	ldd	r23, Y+40	; 0x28
    37e0:	89 a5       	ldd	r24, Y+41	; 0x29
    37e2:	9a a5       	ldd	r25, Y+42	; 0x2a
    37e4:	20 e0       	ldi	r18, 0x00	; 0
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	4a ef       	ldi	r20, 0xFA	; 250
    37ea:	54 e4       	ldi	r21, 0x44	; 68
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	8b a3       	std	Y+35, r24	; 0x23
    37f6:	9c a3       	std	Y+36, r25	; 0x24
    37f8:	ad a3       	std	Y+37, r26	; 0x25
    37fa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37fc:	6b a1       	ldd	r22, Y+35	; 0x23
    37fe:	7c a1       	ldd	r23, Y+36	; 0x24
    3800:	8d a1       	ldd	r24, Y+37	; 0x25
    3802:	9e a1       	ldd	r25, Y+38	; 0x26
    3804:	20 e0       	ldi	r18, 0x00	; 0
    3806:	30 e0       	ldi	r19, 0x00	; 0
    3808:	40 e8       	ldi	r20, 0x80	; 128
    380a:	5f e3       	ldi	r21, 0x3F	; 63
    380c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <STEPPER_voidACW+0x1f6>
		__ticks = 1;
    3814:	81 e0       	ldi	r24, 0x01	; 1
    3816:	90 e0       	ldi	r25, 0x00	; 0
    3818:	9a a3       	std	Y+34, r25	; 0x22
    381a:	89 a3       	std	Y+33, r24	; 0x21
    381c:	3f c0       	rjmp	.+126    	; 0x389c <STEPPER_voidACW+0x274>
	else if (__tmp > 65535)
    381e:	6b a1       	ldd	r22, Y+35	; 0x23
    3820:	7c a1       	ldd	r23, Y+36	; 0x24
    3822:	8d a1       	ldd	r24, Y+37	; 0x25
    3824:	9e a1       	ldd	r25, Y+38	; 0x26
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	3f ef       	ldi	r19, 0xFF	; 255
    382a:	4f e7       	ldi	r20, 0x7F	; 127
    382c:	57 e4       	ldi	r21, 0x47	; 71
    382e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3832:	18 16       	cp	r1, r24
    3834:	4c f5       	brge	.+82     	; 0x3888 <STEPPER_voidACW+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3836:	6f a1       	ldd	r22, Y+39	; 0x27
    3838:	78 a5       	ldd	r23, Y+40	; 0x28
    383a:	89 a5       	ldd	r24, Y+41	; 0x29
    383c:	9a a5       	ldd	r25, Y+42	; 0x2a
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e2       	ldi	r20, 0x20	; 32
    3844:	51 e4       	ldi	r21, 0x41	; 65
    3846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384a:	dc 01       	movw	r26, r24
    384c:	cb 01       	movw	r24, r22
    384e:	bc 01       	movw	r22, r24
    3850:	cd 01       	movw	r24, r26
    3852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	9a a3       	std	Y+34, r25	; 0x22
    385c:	89 a3       	std	Y+33, r24	; 0x21
    385e:	0f c0       	rjmp	.+30     	; 0x387e <STEPPER_voidACW+0x256>
    3860:	88 ec       	ldi	r24, 0xC8	; 200
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	98 a3       	std	Y+32, r25	; 0x20
    3866:	8f 8f       	std	Y+31, r24	; 0x1f
    3868:	8f 8d       	ldd	r24, Y+31	; 0x1f
    386a:	98 a1       	ldd	r25, Y+32	; 0x20
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <STEPPER_voidACW+0x244>
    3870:	98 a3       	std	Y+32, r25	; 0x20
    3872:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3874:	89 a1       	ldd	r24, Y+33	; 0x21
    3876:	9a a1       	ldd	r25, Y+34	; 0x22
    3878:	01 97       	sbiw	r24, 0x01	; 1
    387a:	9a a3       	std	Y+34, r25	; 0x22
    387c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	89 a1       	ldd	r24, Y+33	; 0x21
    3880:	9a a1       	ldd	r25, Y+34	; 0x22
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	69 f7       	brne	.-38     	; 0x3860 <STEPPER_voidACW+0x238>
    3886:	14 c0       	rjmp	.+40     	; 0x38b0 <STEPPER_voidACW+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3888:	6b a1       	ldd	r22, Y+35	; 0x23
    388a:	7c a1       	ldd	r23, Y+36	; 0x24
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3894:	dc 01       	movw	r26, r24
    3896:	cb 01       	movw	r24, r22
    3898:	9a a3       	std	Y+34, r25	; 0x22
    389a:	89 a3       	std	Y+33, r24	; 0x21
    389c:	89 a1       	ldd	r24, Y+33	; 0x21
    389e:	9a a1       	ldd	r25, Y+34	; 0x22
    38a0:	9e 8f       	std	Y+30, r25	; 0x1e
    38a2:	8d 8f       	std	Y+29, r24	; 0x1d
    38a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	f1 f7       	brne	.-4      	; 0x38a8 <STEPPER_voidACW+0x280>
    38ac:	9e 8f       	std	Y+30, r25	; 0x1e
    38ae:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(delay);
		//step 3
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	41 e0       	ldi	r20, 0x01	; 1
    38b6:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,High);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	41 e0       	ldi	r20, 0x01	; 1
    38c0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,Low);
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	62 e0       	ldi	r22, 0x02	; 2
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    38ce:	81 e0       	ldi	r24, 0x01	; 1
    38d0:	63 e0       	ldi	r22, 0x03	; 3
    38d2:	41 e0       	ldi	r20, 0x01	; 1
    38d4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	a0 e2       	ldi	r26, 0x20	; 32
    38de:	b1 e4       	ldi	r27, 0x41	; 65
    38e0:	89 8f       	std	Y+25, r24	; 0x19
    38e2:	9a 8f       	std	Y+26, r25	; 0x1a
    38e4:	ab 8f       	std	Y+27, r26	; 0x1b
    38e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e8:	69 8d       	ldd	r22, Y+25	; 0x19
    38ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	4a ef       	ldi	r20, 0xFA	; 250
    38f6:	54 e4       	ldi	r21, 0x44	; 68
    38f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	8d 8b       	std	Y+21, r24	; 0x15
    3902:	9e 8b       	std	Y+22, r25	; 0x16
    3904:	af 8b       	std	Y+23, r26	; 0x17
    3906:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3908:	6d 89       	ldd	r22, Y+21	; 0x15
    390a:	7e 89       	ldd	r23, Y+22	; 0x16
    390c:	8f 89       	ldd	r24, Y+23	; 0x17
    390e:	98 8d       	ldd	r25, Y+24	; 0x18
    3910:	20 e0       	ldi	r18, 0x00	; 0
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	40 e8       	ldi	r20, 0x80	; 128
    3916:	5f e3       	ldi	r21, 0x3F	; 63
    3918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    391c:	88 23       	and	r24, r24
    391e:	2c f4       	brge	.+10     	; 0x392a <STEPPER_voidACW+0x302>
		__ticks = 1;
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	9c 8b       	std	Y+20, r25	; 0x14
    3926:	8b 8b       	std	Y+19, r24	; 0x13
    3928:	3f c0       	rjmp	.+126    	; 0x39a8 <STEPPER_voidACW+0x380>
	else if (__tmp > 65535)
    392a:	6d 89       	ldd	r22, Y+21	; 0x15
    392c:	7e 89       	ldd	r23, Y+22	; 0x16
    392e:	8f 89       	ldd	r24, Y+23	; 0x17
    3930:	98 8d       	ldd	r25, Y+24	; 0x18
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	3f ef       	ldi	r19, 0xFF	; 255
    3936:	4f e7       	ldi	r20, 0x7F	; 127
    3938:	57 e4       	ldi	r21, 0x47	; 71
    393a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    393e:	18 16       	cp	r1, r24
    3940:	4c f5       	brge	.+82     	; 0x3994 <STEPPER_voidACW+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3942:	69 8d       	ldd	r22, Y+25	; 0x19
    3944:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3946:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3948:	9c 8d       	ldd	r25, Y+28	; 0x1c
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	9c 8b       	std	Y+20, r25	; 0x14
    3968:	8b 8b       	std	Y+19, r24	; 0x13
    396a:	0f c0       	rjmp	.+30     	; 0x398a <STEPPER_voidACW+0x362>
    396c:	88 ec       	ldi	r24, 0xC8	; 200
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	9a 8b       	std	Y+18, r25	; 0x12
    3972:	89 8b       	std	Y+17, r24	; 0x11
    3974:	89 89       	ldd	r24, Y+17	; 0x11
    3976:	9a 89       	ldd	r25, Y+18	; 0x12
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <STEPPER_voidACW+0x350>
    397c:	9a 8b       	std	Y+18, r25	; 0x12
    397e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3980:	8b 89       	ldd	r24, Y+19	; 0x13
    3982:	9c 89       	ldd	r25, Y+20	; 0x14
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	9c 8b       	std	Y+20, r25	; 0x14
    3988:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398a:	8b 89       	ldd	r24, Y+19	; 0x13
    398c:	9c 89       	ldd	r25, Y+20	; 0x14
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	69 f7       	brne	.-38     	; 0x396c <STEPPER_voidACW+0x344>
    3992:	14 c0       	rjmp	.+40     	; 0x39bc <STEPPER_voidACW+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3994:	6d 89       	ldd	r22, Y+21	; 0x15
    3996:	7e 89       	ldd	r23, Y+22	; 0x16
    3998:	8f 89       	ldd	r24, Y+23	; 0x17
    399a:	98 8d       	ldd	r25, Y+24	; 0x18
    399c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	9c 8b       	std	Y+20, r25	; 0x14
    39a6:	8b 8b       	std	Y+19, r24	; 0x13
    39a8:	8b 89       	ldd	r24, Y+19	; 0x13
    39aa:	9c 89       	ldd	r25, Y+20	; 0x14
    39ac:	98 8b       	std	Y+16, r25	; 0x10
    39ae:	8f 87       	std	Y+15, r24	; 0x0f
    39b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b2:	98 89       	ldd	r25, Y+16	; 0x10
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <STEPPER_voidACW+0x38c>
    39b8:	98 8b       	std	Y+16, r25	; 0x10
    39ba:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(delay);
		//step 4
		DIO_voidSetPinValue(StepperGroup,StepperB1,High);
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	41 e0       	ldi	r20, 0x01	; 1
    39c2:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB2,Low);
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	61 e0       	ldi	r22, 0x01	; 1
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	62 e0       	ldi	r22, 0x02	; 2
    39d4:	41 e0       	ldi	r20, 0x01	; 1
    39d6:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	63 e0       	ldi	r22, 0x03	; 3
    39de:	41 e0       	ldi	r20, 0x01	; 1
    39e0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a0 e2       	ldi	r26, 0x20	; 32
    39ea:	b1 e4       	ldi	r27, 0x41	; 65
    39ec:	8b 87       	std	Y+11, r24	; 0x0b
    39ee:	9c 87       	std	Y+12, r25	; 0x0c
    39f0:	ad 87       	std	Y+13, r26	; 0x0d
    39f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a ef       	ldi	r20, 0xFA	; 250
    3a02:	54 e4       	ldi	r21, 0x44	; 68
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	8f 83       	std	Y+7, r24	; 0x07
    3a0e:	98 87       	std	Y+8, r25	; 0x08
    3a10:	a9 87       	std	Y+9, r26	; 0x09
    3a12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a14:	6f 81       	ldd	r22, Y+7	; 0x07
    3a16:	78 85       	ldd	r23, Y+8	; 0x08
    3a18:	89 85       	ldd	r24, Y+9	; 0x09
    3a1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e8       	ldi	r20, 0x80	; 128
    3a22:	5f e3       	ldi	r21, 0x3F	; 63
    3a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a28:	88 23       	and	r24, r24
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <STEPPER_voidACW+0x40e>
		__ticks = 1;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	9e 83       	std	Y+6, r25	; 0x06
    3a32:	8d 83       	std	Y+5, r24	; 0x05
    3a34:	3f c0       	rjmp	.+126    	; 0x3ab4 <STEPPER_voidACW+0x48c>
	else if (__tmp > 65535)
    3a36:	6f 81       	ldd	r22, Y+7	; 0x07
    3a38:	78 85       	ldd	r23, Y+8	; 0x08
    3a3a:	89 85       	ldd	r24, Y+9	; 0x09
    3a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	3f ef       	ldi	r19, 0xFF	; 255
    3a42:	4f e7       	ldi	r20, 0x7F	; 127
    3a44:	57 e4       	ldi	r21, 0x47	; 71
    3a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4a:	18 16       	cp	r1, r24
    3a4c:	4c f5       	brge	.+82     	; 0x3aa0 <STEPPER_voidACW+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a50:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a52:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a54:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e2       	ldi	r20, 0x20	; 32
    3a5c:	51 e4       	ldi	r21, 0x41	; 65
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	9e 83       	std	Y+6, r25	; 0x06
    3a74:	8d 83       	std	Y+5, r24	; 0x05
    3a76:	0f c0       	rjmp	.+30     	; 0x3a96 <STEPPER_voidACW+0x46e>
    3a78:	88 ec       	ldi	r24, 0xC8	; 200
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	9c 83       	std	Y+4, r25	; 0x04
    3a7e:	8b 83       	std	Y+3, r24	; 0x03
    3a80:	8b 81       	ldd	r24, Y+3	; 0x03
    3a82:	9c 81       	ldd	r25, Y+4	; 0x04
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <STEPPER_voidACW+0x45c>
    3a88:	9c 83       	std	Y+4, r25	; 0x04
    3a8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a8e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	9e 83       	std	Y+6, r25	; 0x06
    3a94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a96:	8d 81       	ldd	r24, Y+5	; 0x05
    3a98:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <STEPPER_voidACW+0x450>
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <STEPPER_voidACW+0x4a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa2:	78 85       	ldd	r23, Y+8	; 0x08
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	9e 83       	std	Y+6, r25	; 0x06
    3ab2:	8d 83       	std	Y+5, r24	; 0x05
    3ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab8:	9a 83       	std	Y+2, r25	; 0x02
    3aba:	89 83       	std	Y+1, r24	; 0x01
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <STEPPER_voidACW+0x498>
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
void STEPPER_voidACW(u16 angle)
{

	u16 NOIterations =(angle/FullStepAngle)/FUllIteration;
	u16 counter1=0;
	for (counter1=0;counter1<NOIterations;counter1++)
    3ac8:	89 ad       	ldd	r24, Y+57	; 0x39
    3aca:	9a ad       	ldd	r25, Y+58	; 0x3a
    3acc:	01 96       	adiw	r24, 0x01	; 1
    3ace:	9a af       	std	Y+58, r25	; 0x3a
    3ad0:	89 af       	std	Y+57, r24	; 0x39
    3ad2:	29 ad       	ldd	r18, Y+57	; 0x39
    3ad4:	3a ad       	ldd	r19, Y+58	; 0x3a
    3ad6:	8b ad       	ldd	r24, Y+59	; 0x3b
    3ad8:	9c ad       	ldd	r25, Y+60	; 0x3c
    3ada:	28 17       	cp	r18, r24
    3adc:	39 07       	cpc	r19, r25
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <STEPPER_voidACW+0x4ba>
    3ae0:	db cd       	rjmp	.-1098   	; 0x3698 <STEPPER_voidACW+0x70>
		DIO_voidSetPinValue(StepperGroup,StepperB3,High);
		DIO_voidSetPinValue(StepperGroup,StepperB4,High);
		_delay_ms(delay);
	}

}
    3ae2:	ee 96       	adiw	r28, 0x3e	; 62
    3ae4:	0f b6       	in	r0, 0x3f	; 63
    3ae6:	f8 94       	cli
    3ae8:	de bf       	out	0x3e, r29	; 62
    3aea:	0f be       	out	0x3f, r0	; 63
    3aec:	cd bf       	out	0x3d, r28	; 61
    3aee:	cf 91       	pop	r28
    3af0:	df 91       	pop	r29
    3af2:	08 95       	ret

00003af4 <SEVSEG_voidInit>:
 *      Author: salma
 */
#include "SevenSeg_Interface.h"
u8 SevSegValue[10]=SEVSEGVALUE;
void SEVSEG_voidInit()
{
    3af4:	df 93       	push	r29
    3af6:	cf 93       	push	r28
    3af8:	cd b7       	in	r28, 0x3d	; 61
    3afa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(SevSeg1,0xff);
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	6f ef       	ldi	r22, 0xFF	; 255
    3b00:	0e 94 08 16 	call	0x2c10	; 0x2c10 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(SevSeg2,0xff);
    3b04:	82 e0       	ldi	r24, 0x02	; 2
    3b06:	6f ef       	ldi	r22, 0xFF	; 255
    3b08:	0e 94 08 16 	call	0x2c10	; 0x2c10 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(SevSeg1,OFF);
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	6f ef       	ldi	r22, 0xFF	; 255
    3b10:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	6f ef       	ldi	r22, 0xFF	; 255
    3b18:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
}
    3b1c:	cf 91       	pop	r28
    3b1e:	df 91       	pop	r29
    3b20:	08 95       	ret

00003b22 <SEVSEG_voidSetNum>:

void SEVSEG_voidSetNum(u8 num)
{
    3b22:	df 93       	push	r29
    3b24:	cf 93       	push	r28
    3b26:	00 d0       	rcall	.+0      	; 0x3b28 <SEVSEG_voidSetNum+0x6>
    3b28:	cd b7       	in	r28, 0x3d	; 61
    3b2a:	de b7       	in	r29, 0x3e	; 62
    3b2c:	8a 83       	std	Y+2, r24	; 0x02

	if (num<10)
    3b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b30:	8a 30       	cpi	r24, 0x0A	; 10
    3b32:	80 f4       	brcc	.+32     	; 0x3b54 <SEVSEG_voidSetNum+0x32>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3b34:	8a 81       	ldd	r24, Y+2	; 0x02
    3b36:	88 2f       	mov	r24, r24
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	fc 01       	movw	r30, r24
    3b3c:	e8 59       	subi	r30, 0x98	; 152
    3b3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b40:	90 81       	ld	r25, Z
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	69 2f       	mov	r22, r25
    3b46:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,OFF);
    3b4a:	82 e0       	ldi	r24, 0x02	; 2
    3b4c:	6f ef       	ldi	r22, 0xFF	; 255
    3b4e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
    3b52:	31 c0       	rjmp	.+98     	; 0x3bb6 <SEVSEG_voidSetNum+0x94>
	}
	else if (num==10)
    3b54:	8a 81       	ldd	r24, Y+2	; 0x02
    3b56:	8a 30       	cpi	r24, 0x0A	; 10
    3b58:	69 f4       	brne	.+26     	; 0x3b74 <SEVSEG_voidSetNum+0x52>
	{
		DIO_voidSetPortValue(SevSeg1,SevSegValue[0]);
    3b5a:	90 91 68 01 	lds	r25, 0x0168
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	69 2f       	mov	r22, r25
    3b62:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
    3b66:	90 91 69 01 	lds	r25, 0x0169
    3b6a:	82 e0       	ldi	r24, 0x02	; 2
    3b6c:	69 2f       	mov	r22, r25
    3b6e:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
    3b72:	21 c0       	rjmp	.+66     	; 0x3bb6 <SEVSEG_voidSetNum+0x94>
	}
	else
	{
		u8 counter = 0  ;
    3b74:	19 82       	std	Y+1, r1	; 0x01
    3b76:	06 c0       	rjmp	.+12     	; 0x3b84 <SEVSEG_voidSetNum+0x62>
		while(num>=10)
		{
			counter++;
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	8f 5f       	subi	r24, 0xFF	; 255
    3b7c:	89 83       	std	Y+1, r24	; 0x01
			num-=10;
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	8a 50       	subi	r24, 0x0A	; 10
    3b82:	8a 83       	std	Y+2, r24	; 0x02
		DIO_voidSetPortValue(SevSeg2,SevSegValue[1]);
	}
	else
	{
		u8 counter = 0  ;
		while(num>=10)
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	8a 30       	cpi	r24, 0x0A	; 10
    3b88:	b8 f7       	brcc	.-18     	; 0x3b78 <SEVSEG_voidSetNum+0x56>
		{
			counter++;
			num-=10;
		}
		DIO_voidSetPortValue(SevSeg1,SevSegValue[num]);
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	88 2f       	mov	r24, r24
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	fc 01       	movw	r30, r24
    3b92:	e8 59       	subi	r30, 0x98	; 152
    3b94:	fe 4f       	sbci	r31, 0xFE	; 254
    3b96:	90 81       	ld	r25, Z
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	69 2f       	mov	r22, r25
    3b9c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
		DIO_voidSetPortValue(SevSeg2,SevSegValue[counter]);
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	88 2f       	mov	r24, r24
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	fc 01       	movw	r30, r24
    3ba8:	e8 59       	subi	r30, 0x98	; 152
    3baa:	fe 4f       	sbci	r31, 0xFE	; 254
    3bac:	90 81       	ld	r25, Z
    3bae:	82 e0       	ldi	r24, 0x02	; 2
    3bb0:	69 2f       	mov	r22, r25
    3bb2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	}
}
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <SEVSEG_voidOff>:
void SEVSEG_voidOff ()
{
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortValue(SevSeg1,OFF);
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	6f ef       	ldi	r22, 0xFF	; 255
    3bcc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(SevSeg2,OFF);
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	6f ef       	ldi	r22, 0xFF	; 255
    3bd4:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	}
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <LED_voidInit>:
 */

#include "Led_Interface.h"
#include <util/delay.h>
void LED_voidInit (u8 Group, u8 pin)
{
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <LED_voidInit+0x6>
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinDir(Group, pin, Output);
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	6a 81       	ldd	r22, Y+2	; 0x02
    3bf0:	41 e0       	ldi	r20, 0x01	; 1
    3bf2:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
}
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	cf 91       	pop	r28
    3bfc:	df 91       	pop	r29
    3bfe:	08 95       	ret

00003c00 <LED_voidOn>:

void LED_voidOn (u8 Group, u8 pin)
{
    3c00:	df 93       	push	r29
    3c02:	cf 93       	push	r28
    3c04:	00 d0       	rcall	.+0      	; 0x3c06 <LED_voidOn+0x6>
    3c06:	cd b7       	in	r28, 0x3d	; 61
    3c08:	de b7       	in	r29, 0x3e	; 62
    3c0a:	89 83       	std	Y+1, r24	; 0x01
    3c0c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, High);
    3c0e:	89 81       	ldd	r24, Y+1	; 0x01
    3c10:	6a 81       	ldd	r22, Y+2	; 0x02
    3c12:	41 e0       	ldi	r20, 0x01	; 1
    3c14:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	cf 91       	pop	r28
    3c1e:	df 91       	pop	r29
    3c20:	08 95       	ret

00003c22 <LED_voidOff>:

void LED_voidOff (u8 Group, u8 pin)
{
    3c22:	df 93       	push	r29
    3c24:	cf 93       	push	r28
    3c26:	00 d0       	rcall	.+0      	; 0x3c28 <LED_voidOff+0x6>
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	6a 83       	std	Y+2, r22	; 0x02
	DIO_voidSetPinValue(Group, pin, Low);
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	6a 81       	ldd	r22, Y+2	; 0x02
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    3c3a:	0f 90       	pop	r0
    3c3c:	0f 90       	pop	r0
    3c3e:	cf 91       	pop	r28
    3c40:	df 91       	pop	r29
    3c42:	08 95       	ret

00003c44 <LED_voidToggle>:

void LED_voidToggle (u8 Group, u8 pin)
{
    3c44:	df 93       	push	r29
    3c46:	cf 93       	push	r28
    3c48:	00 d0       	rcall	.+0      	; 0x3c4a <LED_voidToggle+0x6>
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	89 83       	std	Y+1, r24	; 0x01
    3c50:	6a 83       	std	Y+2, r22	; 0x02
	if (DIO_u8ReadPinValue(Group,pin)==High)
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	6a 81       	ldd	r22, Y+2	; 0x02
    3c56:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
    3c5a:	81 30       	cpi	r24, 0x01	; 1
    3c5c:	29 f4       	brne	.+10     	; 0x3c68 <LED_voidToggle+0x24>
	{
		LED_voidOff(Group,pin);
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	6a 81       	ldd	r22, Y+2	; 0x02
    3c62:	0e 94 11 1e 	call	0x3c22	; 0x3c22 <LED_voidOff>
    3c66:	04 c0       	rjmp	.+8      	; 0x3c70 <LED_voidToggle+0x2c>
	}
	else
	{
		LED_voidOn(Group,pin);
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	6a 81       	ldd	r22, Y+2	; 0x02
    3c6c:	0e 94 00 1e 	call	0x3c00	; 0x3c00 <LED_voidOn>
	}

}
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	cf 91       	pop	r28
    3c76:	df 91       	pop	r29
    3c78:	08 95       	ret

00003c7a <LCD_voidSendCommand>:
#include <util/delay.h>
#include "Lcd_Interface.h"


void LCD_voidSendCommand(u8 command)
{
    3c7a:	df 93       	push	r29
    3c7c:	cf 93       	push	r28
    3c7e:	0f 92       	push	r0
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (command =>RS =  0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,Low);
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	40 e0       	ldi	r20, 0x00	; 0
    3c8c:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//set the RW value as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	61 e0       	ldi	r22, 0x01	; 1
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3c9a:	81 e0       	ldi	r24, 0x01	; 1
    3c9c:	62 e0       	ldi	r22, 0x02	; 2
    3c9e:	41 e0       	ldi	r20, 0x01	; 1
    3ca0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//Send Command
		DIO_voidSetPortValue(Lcd_DCGroup,command);
    3ca4:	83 e0       	ldi	r24, 0x03	; 3
    3ca6:	69 81       	ldd	r22, Y+1	; 0x01
    3ca8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	62 e0       	ldi	r22, 0x02	; 2
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(Lcd_DCGroup,Lcd_D7,get_bit(command,7));
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
#endif

}
    3cb6:	0f 90       	pop	r0
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	0f 92       	push	r0
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	89 83       	std	Y+1, r24	; 0x01
#if(LcdMode==8)
	//set the RS value as Low (Data =>RS =  1 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RsPin,High);
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	60 e0       	ldi	r22, 0x00	; 0
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//set the RW vlaue as Low (Write  => RW = 0 )
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_RwPin,Low);
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	61 e0       	ldi	r22, 0x01	; 1
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//set the E Value as High (High CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,High);
    3cde:	81 e0       	ldi	r24, 0x01	; 1
    3ce0:	62 e0       	ldi	r22, 0x02	; 2
    3ce2:	41 e0       	ldi	r20, 0x01	; 1
    3ce4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//Send Data
		DIO_voidSetPortValue(Lcd_DCGroup,data);
    3ce8:	83 e0       	ldi	r24, 0x03	; 3
    3cea:	69 81       	ldd	r22, Y+1	; 0x01
    3cec:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	62 e0       	ldi	r22, 0x02	; 2
    3cf4:	40 e0       	ldi	r20, 0x00	; 0
    3cf6:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	//Set the E value as Low (Low CLK)
		DIO_voidSetPinValue(Lcd_ControlGroup,Lcd_EPin,Low);

#endif

}
    3cfa:	0f 90       	pop	r0
    3cfc:	cf 91       	pop	r28
    3cfe:	df 91       	pop	r29
    3d00:	08 95       	ret

00003d02 <LCD_voidInit>:


void LCD_voidInit()
{
    3d02:	df 93       	push	r29
    3d04:	cf 93       	push	r28
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	e8 97       	sbiw	r28, 0x38	; 56
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
#if(LcdMode==8)
	//set Direction
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RsPin,Output);
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	41 e0       	ldi	r20, 0x01	; 1
    3d1c:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_RwPin,Output);
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	61 e0       	ldi	r22, 0x01	; 1
    3d24:	41 e0       	ldi	r20, 0x01	; 1
    3d26:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(Lcd_ControlGroup,Lcd_EPin,Output);
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	62 e0       	ldi	r22, 0x02	; 2
    3d2e:	41 e0       	ldi	r20, 0x01	; 1
    3d30:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPortDir(Lcd_DCGroup,0xff);
    3d34:	83 e0       	ldi	r24, 0x03	; 3
    3d36:	6f ef       	ldi	r22, 0xFF	; 255
    3d38:	0e 94 08 16 	call	0x2c10	; 0x2c10 <DIO_voidSetPortDir>
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	ac e0       	ldi	r26, 0x0C	; 12
    3d42:	b2 e4       	ldi	r27, 0x42	; 66
    3d44:	8d ab       	std	Y+53, r24	; 0x35
    3d46:	9e ab       	std	Y+54, r25	; 0x36
    3d48:	af ab       	std	Y+55, r26	; 0x37
    3d4a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d4c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d4e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d50:	8f a9       	ldd	r24, Y+55	; 0x37
    3d52:	98 ad       	ldd	r25, Y+56	; 0x38
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	4a ef       	ldi	r20, 0xFA	; 250
    3d5a:	54 e4       	ldi	r21, 0x44	; 68
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	89 ab       	std	Y+49, r24	; 0x31
    3d66:	9a ab       	std	Y+50, r25	; 0x32
    3d68:	ab ab       	std	Y+51, r26	; 0x33
    3d6a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d6c:	69 a9       	ldd	r22, Y+49	; 0x31
    3d6e:	7a a9       	ldd	r23, Y+50	; 0x32
    3d70:	8b a9       	ldd	r24, Y+51	; 0x33
    3d72:	9c a9       	ldd	r25, Y+52	; 0x34
    3d74:	20 e0       	ldi	r18, 0x00	; 0
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e8       	ldi	r20, 0x80	; 128
    3d7a:	5f e3       	ldi	r21, 0x3F	; 63
    3d7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d80:	88 23       	and	r24, r24
    3d82:	2c f4       	brge	.+10     	; 0x3d8e <LCD_voidInit+0x8c>
		__ticks = 1;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	90 e0       	ldi	r25, 0x00	; 0
    3d88:	98 ab       	std	Y+48, r25	; 0x30
    3d8a:	8f a7       	std	Y+47, r24	; 0x2f
    3d8c:	3f c0       	rjmp	.+126    	; 0x3e0c <LCD_voidInit+0x10a>
	else if (__tmp > 65535)
    3d8e:	69 a9       	ldd	r22, Y+49	; 0x31
    3d90:	7a a9       	ldd	r23, Y+50	; 0x32
    3d92:	8b a9       	ldd	r24, Y+51	; 0x33
    3d94:	9c a9       	ldd	r25, Y+52	; 0x34
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	3f ef       	ldi	r19, 0xFF	; 255
    3d9a:	4f e7       	ldi	r20, 0x7F	; 127
    3d9c:	57 e4       	ldi	r21, 0x47	; 71
    3d9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3da2:	18 16       	cp	r1, r24
    3da4:	4c f5       	brge	.+82     	; 0x3df8 <LCD_voidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da6:	6d a9       	ldd	r22, Y+53	; 0x35
    3da8:	7e a9       	ldd	r23, Y+54	; 0x36
    3daa:	8f a9       	ldd	r24, Y+55	; 0x37
    3dac:	98 ad       	ldd	r25, Y+56	; 0x38
    3dae:	20 e0       	ldi	r18, 0x00	; 0
    3db0:	30 e0       	ldi	r19, 0x00	; 0
    3db2:	40 e2       	ldi	r20, 0x20	; 32
    3db4:	51 e4       	ldi	r21, 0x41	; 65
    3db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	bc 01       	movw	r22, r24
    3dc0:	cd 01       	movw	r24, r26
    3dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	cb 01       	movw	r24, r22
    3dca:	98 ab       	std	Y+48, r25	; 0x30
    3dcc:	8f a7       	std	Y+47, r24	; 0x2f
    3dce:	0f c0       	rjmp	.+30     	; 0x3dee <LCD_voidInit+0xec>
    3dd0:	88 ec       	ldi	r24, 0xC8	; 200
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	9e a7       	std	Y+46, r25	; 0x2e
    3dd6:	8d a7       	std	Y+45, r24	; 0x2d
    3dd8:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dda:	9e a5       	ldd	r25, Y+46	; 0x2e
    3ddc:	01 97       	sbiw	r24, 0x01	; 1
    3dde:	f1 f7       	brne	.-4      	; 0x3ddc <LCD_voidInit+0xda>
    3de0:	9e a7       	std	Y+46, r25	; 0x2e
    3de2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de6:	98 a9       	ldd	r25, Y+48	; 0x30
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	98 ab       	std	Y+48, r25	; 0x30
    3dec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df0:	98 a9       	ldd	r25, Y+48	; 0x30
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	69 f7       	brne	.-38     	; 0x3dd0 <LCD_voidInit+0xce>
    3df6:	14 c0       	rjmp	.+40     	; 0x3e20 <LCD_voidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df8:	69 a9       	ldd	r22, Y+49	; 0x31
    3dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    3dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    3dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    3e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e04:	dc 01       	movw	r26, r24
    3e06:	cb 01       	movw	r24, r22
    3e08:	98 ab       	std	Y+48, r25	; 0x30
    3e0a:	8f a7       	std	Y+47, r24	; 0x2f
    3e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e10:	9c a7       	std	Y+44, r25	; 0x2c
    3e12:	8b a7       	std	Y+43, r24	; 0x2b
    3e14:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e16:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e18:	01 97       	sbiw	r24, 0x01	; 1
    3e1a:	f1 f7       	brne	.-4      	; 0x3e18 <LCD_voidInit+0x116>
    3e1c:	9c a7       	std	Y+44, r25	; 0x2c
    3e1e:	8b a7       	std	Y+43, r24	; 0x2b
	//wait for 30ms
	_delay_ms(35);
	//sent the Function set
	LCD_voidSendCommand(LCD_Set8Bit2Line5x8);
    3e20:	88 e3       	ldi	r24, 0x38	; 56
    3e22:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	a0 e8       	ldi	r26, 0x80	; 128
    3e2c:	bf e3       	ldi	r27, 0x3F	; 63
    3e2e:	8f a3       	std	Y+39, r24	; 0x27
    3e30:	98 a7       	std	Y+40, r25	; 0x28
    3e32:	a9 a7       	std	Y+41, r26	; 0x29
    3e34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e36:	6f a1       	ldd	r22, Y+39	; 0x27
    3e38:	78 a5       	ldd	r23, Y+40	; 0x28
    3e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    3e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	4a ef       	ldi	r20, 0xFA	; 250
    3e44:	54 e4       	ldi	r21, 0x44	; 68
    3e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	8b a3       	std	Y+35, r24	; 0x23
    3e50:	9c a3       	std	Y+36, r25	; 0x24
    3e52:	ad a3       	std	Y+37, r26	; 0x25
    3e54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e56:	6b a1       	ldd	r22, Y+35	; 0x23
    3e58:	7c a1       	ldd	r23, Y+36	; 0x24
    3e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e5e:	20 e0       	ldi	r18, 0x00	; 0
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	40 e8       	ldi	r20, 0x80	; 128
    3e64:	5f e3       	ldi	r21, 0x3F	; 63
    3e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e6a:	88 23       	and	r24, r24
    3e6c:	2c f4       	brge	.+10     	; 0x3e78 <LCD_voidInit+0x176>
		__ticks = 1;
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	9a a3       	std	Y+34, r25	; 0x22
    3e74:	89 a3       	std	Y+33, r24	; 0x21
    3e76:	3f c0       	rjmp	.+126    	; 0x3ef6 <LCD_voidInit+0x1f4>
	else if (__tmp > 65535)
    3e78:	6b a1       	ldd	r22, Y+35	; 0x23
    3e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	3f ef       	ldi	r19, 0xFF	; 255
    3e84:	4f e7       	ldi	r20, 0x7F	; 127
    3e86:	57 e4       	ldi	r21, 0x47	; 71
    3e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e8c:	18 16       	cp	r1, r24
    3e8e:	4c f5       	brge	.+82     	; 0x3ee2 <LCD_voidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e90:	6f a1       	ldd	r22, Y+39	; 0x27
    3e92:	78 a5       	ldd	r23, Y+40	; 0x28
    3e94:	89 a5       	ldd	r24, Y+41	; 0x29
    3e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	40 e2       	ldi	r20, 0x20	; 32
    3e9e:	51 e4       	ldi	r21, 0x41	; 65
    3ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	bc 01       	movw	r22, r24
    3eaa:	cd 01       	movw	r24, r26
    3eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	9a a3       	std	Y+34, r25	; 0x22
    3eb6:	89 a3       	std	Y+33, r24	; 0x21
    3eb8:	0f c0       	rjmp	.+30     	; 0x3ed8 <LCD_voidInit+0x1d6>
    3eba:	88 ec       	ldi	r24, 0xC8	; 200
    3ebc:	90 e0       	ldi	r25, 0x00	; 0
    3ebe:	98 a3       	std	Y+32, r25	; 0x20
    3ec0:	8f 8f       	std	Y+31, r24	; 0x1f
    3ec2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ec4:	98 a1       	ldd	r25, Y+32	; 0x20
    3ec6:	01 97       	sbiw	r24, 0x01	; 1
    3ec8:	f1 f7       	brne	.-4      	; 0x3ec6 <LCD_voidInit+0x1c4>
    3eca:	98 a3       	std	Y+32, r25	; 0x20
    3ecc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ece:	89 a1       	ldd	r24, Y+33	; 0x21
    3ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    3ed2:	01 97       	sbiw	r24, 0x01	; 1
    3ed4:	9a a3       	std	Y+34, r25	; 0x22
    3ed6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eda:	9a a1       	ldd	r25, Y+34	; 0x22
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	69 f7       	brne	.-38     	; 0x3eba <LCD_voidInit+0x1b8>
    3ee0:	14 c0       	rjmp	.+40     	; 0x3f0a <LCD_voidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    3eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	9a a3       	std	Y+34, r25	; 0x22
    3ef4:	89 a3       	std	Y+33, r24	; 0x21
    3ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    3efa:	9e 8f       	std	Y+30, r25	; 0x1e
    3efc:	8d 8f       	std	Y+29, r24	; 0x1d
    3efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <LCD_voidInit+0x200>
    3f06:	9e 8f       	std	Y+30, r25	; 0x1e
    3f08:	8d 8f       	std	Y+29, r24	; 0x1d
	//wait for 39us
	_delay_ms(1);
	//sent the display
	LCD_voidSendCommand(LCD_8BitCursorBlinkON);
    3f0a:	8f e0       	ldi	r24, 0x0F	; 15
    3f0c:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	a0 e8       	ldi	r26, 0x80	; 128
    3f16:	bf e3       	ldi	r27, 0x3F	; 63
    3f18:	89 8f       	std	Y+25, r24	; 0x19
    3f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    3f1c:	ab 8f       	std	Y+27, r26	; 0x1b
    3f1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f20:	69 8d       	ldd	r22, Y+25	; 0x19
    3f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f28:	20 e0       	ldi	r18, 0x00	; 0
    3f2a:	30 e0       	ldi	r19, 0x00	; 0
    3f2c:	4a ef       	ldi	r20, 0xFA	; 250
    3f2e:	54 e4       	ldi	r21, 0x44	; 68
    3f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f34:	dc 01       	movw	r26, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	8d 8b       	std	Y+21, r24	; 0x15
    3f3a:	9e 8b       	std	Y+22, r25	; 0x16
    3f3c:	af 8b       	std	Y+23, r26	; 0x17
    3f3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f40:	6d 89       	ldd	r22, Y+21	; 0x15
    3f42:	7e 89       	ldd	r23, Y+22	; 0x16
    3f44:	8f 89       	ldd	r24, Y+23	; 0x17
    3f46:	98 8d       	ldd	r25, Y+24	; 0x18
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	40 e8       	ldi	r20, 0x80	; 128
    3f4e:	5f e3       	ldi	r21, 0x3F	; 63
    3f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f54:	88 23       	and	r24, r24
    3f56:	2c f4       	brge	.+10     	; 0x3f62 <LCD_voidInit+0x260>
		__ticks = 1;
    3f58:	81 e0       	ldi	r24, 0x01	; 1
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	9c 8b       	std	Y+20, r25	; 0x14
    3f5e:	8b 8b       	std	Y+19, r24	; 0x13
    3f60:	3f c0       	rjmp	.+126    	; 0x3fe0 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    3f62:	6d 89       	ldd	r22, Y+21	; 0x15
    3f64:	7e 89       	ldd	r23, Y+22	; 0x16
    3f66:	8f 89       	ldd	r24, Y+23	; 0x17
    3f68:	98 8d       	ldd	r25, Y+24	; 0x18
    3f6a:	20 e0       	ldi	r18, 0x00	; 0
    3f6c:	3f ef       	ldi	r19, 0xFF	; 255
    3f6e:	4f e7       	ldi	r20, 0x7F	; 127
    3f70:	57 e4       	ldi	r21, 0x47	; 71
    3f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f76:	18 16       	cp	r1, r24
    3f78:	4c f5       	brge	.+82     	; 0x3fcc <LCD_voidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    3f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f82:	20 e0       	ldi	r18, 0x00	; 0
    3f84:	30 e0       	ldi	r19, 0x00	; 0
    3f86:	40 e2       	ldi	r20, 0x20	; 32
    3f88:	51 e4       	ldi	r21, 0x41	; 65
    3f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8e:	dc 01       	movw	r26, r24
    3f90:	cb 01       	movw	r24, r22
    3f92:	bc 01       	movw	r22, r24
    3f94:	cd 01       	movw	r24, r26
    3f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f9a:	dc 01       	movw	r26, r24
    3f9c:	cb 01       	movw	r24, r22
    3f9e:	9c 8b       	std	Y+20, r25	; 0x14
    3fa0:	8b 8b       	std	Y+19, r24	; 0x13
    3fa2:	0f c0       	rjmp	.+30     	; 0x3fc2 <LCD_voidInit+0x2c0>
    3fa4:	88 ec       	ldi	r24, 0xC8	; 200
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	9a 8b       	std	Y+18, r25	; 0x12
    3faa:	89 8b       	std	Y+17, r24	; 0x11
    3fac:	89 89       	ldd	r24, Y+17	; 0x11
    3fae:	9a 89       	ldd	r25, Y+18	; 0x12
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <LCD_voidInit+0x2ae>
    3fb4:	9a 8b       	std	Y+18, r25	; 0x12
    3fb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    3fba:	9c 89       	ldd	r25, Y+20	; 0x14
    3fbc:	01 97       	sbiw	r24, 0x01	; 1
    3fbe:	9c 8b       	std	Y+20, r25	; 0x14
    3fc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fc6:	00 97       	sbiw	r24, 0x00	; 0
    3fc8:	69 f7       	brne	.-38     	; 0x3fa4 <LCD_voidInit+0x2a2>
    3fca:	14 c0       	rjmp	.+40     	; 0x3ff4 <LCD_voidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    3fce:	7e 89       	ldd	r23, Y+22	; 0x16
    3fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    3fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    3fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	9c 8b       	std	Y+20, r25	; 0x14
    3fde:	8b 8b       	std	Y+19, r24	; 0x13
    3fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fe4:	98 8b       	std	Y+16, r25	; 0x10
    3fe6:	8f 87       	std	Y+15, r24	; 0x0f
    3fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fea:	98 89       	ldd	r25, Y+16	; 0x10
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	f1 f7       	brne	.-4      	; 0x3fec <LCD_voidInit+0x2ea>
    3ff0:	98 8b       	std	Y+16, r25	; 0x10
    3ff2:	8f 87       	std	Y+15, r24	; 0x0f
	//wait for 39us
	_delay_ms(1);
	//sent the Clear
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
    3ffa:	80 e0       	ldi	r24, 0x00	; 0
    3ffc:	90 e0       	ldi	r25, 0x00	; 0
    3ffe:	a0 e0       	ldi	r26, 0x00	; 0
    4000:	b0 e4       	ldi	r27, 0x40	; 64
    4002:	8b 87       	std	Y+11, r24	; 0x0b
    4004:	9c 87       	std	Y+12, r25	; 0x0c
    4006:	ad 87       	std	Y+13, r26	; 0x0d
    4008:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    400a:	6b 85       	ldd	r22, Y+11	; 0x0b
    400c:	7c 85       	ldd	r23, Y+12	; 0x0c
    400e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4010:	9e 85       	ldd	r25, Y+14	; 0x0e
    4012:	20 e0       	ldi	r18, 0x00	; 0
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	4a ef       	ldi	r20, 0xFA	; 250
    4018:	54 e4       	ldi	r21, 0x44	; 68
    401a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    401e:	dc 01       	movw	r26, r24
    4020:	cb 01       	movw	r24, r22
    4022:	8f 83       	std	Y+7, r24	; 0x07
    4024:	98 87       	std	Y+8, r25	; 0x08
    4026:	a9 87       	std	Y+9, r26	; 0x09
    4028:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    402a:	6f 81       	ldd	r22, Y+7	; 0x07
    402c:	78 85       	ldd	r23, Y+8	; 0x08
    402e:	89 85       	ldd	r24, Y+9	; 0x09
    4030:	9a 85       	ldd	r25, Y+10	; 0x0a
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e8       	ldi	r20, 0x80	; 128
    4038:	5f e3       	ldi	r21, 0x3F	; 63
    403a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    403e:	88 23       	and	r24, r24
    4040:	2c f4       	brge	.+10     	; 0x404c <LCD_voidInit+0x34a>
		__ticks = 1;
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	90 e0       	ldi	r25, 0x00	; 0
    4046:	9e 83       	std	Y+6, r25	; 0x06
    4048:	8d 83       	std	Y+5, r24	; 0x05
    404a:	3f c0       	rjmp	.+126    	; 0x40ca <LCD_voidInit+0x3c8>
	else if (__tmp > 65535)
    404c:	6f 81       	ldd	r22, Y+7	; 0x07
    404e:	78 85       	ldd	r23, Y+8	; 0x08
    4050:	89 85       	ldd	r24, Y+9	; 0x09
    4052:	9a 85       	ldd	r25, Y+10	; 0x0a
    4054:	20 e0       	ldi	r18, 0x00	; 0
    4056:	3f ef       	ldi	r19, 0xFF	; 255
    4058:	4f e7       	ldi	r20, 0x7F	; 127
    405a:	57 e4       	ldi	r21, 0x47	; 71
    405c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4060:	18 16       	cp	r1, r24
    4062:	4c f5       	brge	.+82     	; 0x40b6 <LCD_voidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4064:	6b 85       	ldd	r22, Y+11	; 0x0b
    4066:	7c 85       	ldd	r23, Y+12	; 0x0c
    4068:	8d 85       	ldd	r24, Y+13	; 0x0d
    406a:	9e 85       	ldd	r25, Y+14	; 0x0e
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	40 e2       	ldi	r20, 0x20	; 32
    4072:	51 e4       	ldi	r21, 0x41	; 65
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	bc 01       	movw	r22, r24
    407e:	cd 01       	movw	r24, r26
    4080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4084:	dc 01       	movw	r26, r24
    4086:	cb 01       	movw	r24, r22
    4088:	9e 83       	std	Y+6, r25	; 0x06
    408a:	8d 83       	std	Y+5, r24	; 0x05
    408c:	0f c0       	rjmp	.+30     	; 0x40ac <LCD_voidInit+0x3aa>
    408e:	88 ec       	ldi	r24, 0xC8	; 200
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	9c 83       	std	Y+4, r25	; 0x04
    4094:	8b 83       	std	Y+3, r24	; 0x03
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	f1 f7       	brne	.-4      	; 0x409a <LCD_voidInit+0x398>
    409e:	9c 83       	std	Y+4, r25	; 0x04
    40a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40a2:	8d 81       	ldd	r24, Y+5	; 0x05
    40a4:	9e 81       	ldd	r25, Y+6	; 0x06
    40a6:	01 97       	sbiw	r24, 0x01	; 1
    40a8:	9e 83       	std	Y+6, r25	; 0x06
    40aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ac:	8d 81       	ldd	r24, Y+5	; 0x05
    40ae:	9e 81       	ldd	r25, Y+6	; 0x06
    40b0:	00 97       	sbiw	r24, 0x00	; 0
    40b2:	69 f7       	brne	.-38     	; 0x408e <LCD_voidInit+0x38c>
    40b4:	14 c0       	rjmp	.+40     	; 0x40de <LCD_voidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40b6:	6f 81       	ldd	r22, Y+7	; 0x07
    40b8:	78 85       	ldd	r23, Y+8	; 0x08
    40ba:	89 85       	ldd	r24, Y+9	; 0x09
    40bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    40be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	9e 83       	std	Y+6, r25	; 0x06
    40c8:	8d 83       	std	Y+5, r24	; 0x05
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	9e 81       	ldd	r25, Y+6	; 0x06
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	89 83       	std	Y+1, r24	; 0x01
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	9a 81       	ldd	r25, Y+2	; 0x02
    40d6:	01 97       	sbiw	r24, 0x01	; 1
    40d8:	f1 f7       	brne	.-4      	; 0x40d6 <LCD_voidInit+0x3d4>
    40da:	9a 83       	std	Y+2, r25	; 0x02
    40dc:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
	//sent the EntryMode
	LCD_voidSendCommand(LCD_8BitEntryMode1);
    40de:	86 e0       	ldi	r24, 0x06	; 6
    40e0:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
		_delay_ms(2);
		//sent the EntryMode
		LCD_voidSendCommand(first_command);
		LCD_voidSendCommand(LCD_4BitEntryMode1);
#endif
}
    40e4:	e8 96       	adiw	r28, 0x38	; 56
    40e6:	0f b6       	in	r0, 0x3f	; 63
    40e8:	f8 94       	cli
    40ea:	de bf       	out	0x3e, r29	; 62
    40ec:	0f be       	out	0x3f, r0	; 63
    40ee:	cd bf       	out	0x3d, r28	; 61
    40f0:	cf 91       	pop	r28
    40f2:	df 91       	pop	r29
    40f4:	08 95       	ret

000040f6 <LCD_voidSendString>:


void LCD_voidSendString(u8 *String)
{
    40f6:	df 93       	push	r29
    40f8:	cf 93       	push	r28
    40fa:	00 d0       	rcall	.+0      	; 0x40fc <LCD_voidSendString+0x6>
    40fc:	0f 92       	push	r0
    40fe:	cd b7       	in	r28, 0x3d	; 61
    4100:	de b7       	in	r29, 0x3e	; 62
    4102:	9b 83       	std	Y+3, r25	; 0x03
    4104:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    4106:	19 82       	std	Y+1, r1	; 0x01
    4108:	0e c0       	rjmp	.+28     	; 0x4126 <LCD_voidSendString+0x30>
	while(String[i]!='\0')
	{
		LCD_voidSendData(String[i]);
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	28 2f       	mov	r18, r24
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	9b 81       	ldd	r25, Y+3	; 0x03
    4114:	fc 01       	movw	r30, r24
    4116:	e2 0f       	add	r30, r18
    4118:	f3 1f       	adc	r31, r19
    411a:	80 81       	ld	r24, Z
    411c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_voidSendData>
		i++;
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	8f 5f       	subi	r24, 0xFF	; 255
    4124:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendString(u8 *String)
{
	u8 i = 0 ;
	while(String[i]!='\0')
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	28 2f       	mov	r18, r24
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	8a 81       	ldd	r24, Y+2	; 0x02
    412e:	9b 81       	ldd	r25, Y+3	; 0x03
    4130:	fc 01       	movw	r30, r24
    4132:	e2 0f       	add	r30, r18
    4134:	f3 1f       	adc	r31, r19
    4136:	80 81       	ld	r24, Z
    4138:	88 23       	and	r24, r24
    413a:	39 f7       	brne	.-50     	; 0x410a <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(String[i]);
		i++;
	}
}
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
    4140:	0f 90       	pop	r0
    4142:	cf 91       	pop	r28
    4144:	df 91       	pop	r29
    4146:	08 95       	ret

00004148 <LCD_voidSetPos>:


void LCD_voidSetPos(u8 x, u8 y)
{
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	00 d0       	rcall	.+0      	; 0x414e <LCD_voidSetPos+0x6>
    414e:	0f 92       	push	r0
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	8a 83       	std	Y+2, r24	; 0x02
    4156:	6b 83       	std	Y+3, r22	; 0x03
	u8 adress;
	if (x==first_line_pos)
    4158:	8a 81       	ldd	r24, Y+2	; 0x02
    415a:	88 23       	and	r24, r24
    415c:	19 f4       	brne	.+6      	; 0x4164 <LCD_voidSetPos+0x1c>
	{
		adress=y+first_line_add;
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	89 83       	std	Y+1, r24	; 0x01
    4162:	06 c0       	rjmp	.+12     	; 0x4170 <LCD_voidSetPos+0x28>
	}
	else if (x==sec_line_pos)
    4164:	8a 81       	ldd	r24, Y+2	; 0x02
    4166:	81 30       	cpi	r24, 0x01	; 1
    4168:	19 f4       	brne	.+6      	; 0x4170 <LCD_voidSetPos+0x28>
	{
		adress=y+sec_line_add;
    416a:	8b 81       	ldd	r24, Y+3	; 0x03
    416c:	80 5c       	subi	r24, 0xC0	; 192
    416e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_voidSendCommand(adress|LCD_SetAddressDDRAM);
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	80 68       	ori	r24, 0x80	; 128
    4174:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
}
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	cf 91       	pop	r28
    4180:	df 91       	pop	r29
    4182:	08 95       	ret

00004184 <LCD_voidSpecialCharacter>:

void LCD_voidSpecialCharacter (u8 block_no , u8 *special, u8 x, u8 y)
{
    4184:	df 93       	push	r29
    4186:	cf 93       	push	r28
    4188:	cd b7       	in	r28, 0x3d	; 61
    418a:	de b7       	in	r29, 0x3e	; 62
    418c:	27 97       	sbiw	r28, 0x07	; 7
    418e:	0f b6       	in	r0, 0x3f	; 63
    4190:	f8 94       	cli
    4192:	de bf       	out	0x3e, r29	; 62
    4194:	0f be       	out	0x3f, r0	; 63
    4196:	cd bf       	out	0x3d, r28	; 61
    4198:	8b 83       	std	Y+3, r24	; 0x03
    419a:	7d 83       	std	Y+5, r23	; 0x05
    419c:	6c 83       	std	Y+4, r22	; 0x04
    419e:	4e 83       	std	Y+6, r20	; 0x06
    41a0:	2f 83       	std	Y+7, r18	; 0x07
	u8 adress;
	u8 counter;
	adress = block_no*8;
    41a2:	8b 81       	ldd	r24, Y+3	; 0x03
    41a4:	88 2f       	mov	r24, r24
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	88 0f       	add	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	88 0f       	add	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	88 0f       	add	r24, r24
    41b2:	99 1f       	adc	r25, r25
    41b4:	8a 83       	std	Y+2, r24	; 0x02
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	80 64       	ori	r24, 0x40	; 64
    41ba:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
	for (counter=0; counter<8;counter++)
    41be:	19 82       	std	Y+1, r1	; 0x01
    41c0:	0e c0       	rjmp	.+28     	; 0x41de <LCD_voidSpecialCharacter+0x5a>
	{
		LCD_voidSendData(special[counter]);
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ca:	9d 81       	ldd	r25, Y+5	; 0x05
    41cc:	fc 01       	movw	r30, r24
    41ce:	e2 0f       	add	r30, r18
    41d0:	f3 1f       	adc	r31, r19
    41d2:	80 81       	ld	r24, Z
    41d4:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_voidSendData>
{
	u8 adress;
	u8 counter;
	adress = block_no*8;
	LCD_voidSendCommand(adress|LCD_SetAddressCGRAM);
	for (counter=0; counter<8;counter++)
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	8f 5f       	subi	r24, 0xFF	; 255
    41dc:	89 83       	std	Y+1, r24	; 0x01
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	88 30       	cpi	r24, 0x08	; 8
    41e2:	78 f3       	brcs	.-34     	; 0x41c2 <LCD_voidSpecialCharacter+0x3e>
	{
		LCD_voidSendData(special[counter]);
	}
	//go back to DDRAM
	LCD_voidSetPos(x,y);
    41e4:	8e 81       	ldd	r24, Y+6	; 0x06
    41e6:	6f 81       	ldd	r22, Y+7	; 0x07
    41e8:	0e 94 a4 20 	call	0x4148	; 0x4148 <LCD_voidSetPos>
	LCD_voidSendData(block_no);
    41ec:	8b 81       	ldd	r24, Y+3	; 0x03
    41ee:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <LCD_voidSendData>
}
    41f2:	27 96       	adiw	r28, 0x07	; 7
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	cf 91       	pop	r28
    4200:	df 91       	pop	r29
    4202:	08 95       	ret

00004204 <LCD_voidClear>:

void LCD_voidClear()
{
    4204:	df 93       	push	r29
    4206:	cf 93       	push	r28
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
    420c:	2e 97       	sbiw	r28, 0x0e	; 14
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	f8 94       	cli
    4212:	de bf       	out	0x3e, r29	; 62
    4214:	0f be       	out	0x3f, r0	; 63
    4216:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_8BitClearDisplay);
    4218:	81 e0       	ldi	r24, 0x01	; 1
    421a:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <LCD_voidSendCommand>
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	a0 e0       	ldi	r26, 0x00	; 0
    4224:	b0 e4       	ldi	r27, 0x40	; 64
    4226:	8b 87       	std	Y+11, r24	; 0x0b
    4228:	9c 87       	std	Y+12, r25	; 0x0c
    422a:	ad 87       	std	Y+13, r26	; 0x0d
    422c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    422e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4230:	7c 85       	ldd	r23, Y+12	; 0x0c
    4232:	8d 85       	ldd	r24, Y+13	; 0x0d
    4234:	9e 85       	ldd	r25, Y+14	; 0x0e
    4236:	20 e0       	ldi	r18, 0x00	; 0
    4238:	30 e0       	ldi	r19, 0x00	; 0
    423a:	4a ef       	ldi	r20, 0xFA	; 250
    423c:	54 e4       	ldi	r21, 0x44	; 68
    423e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4242:	dc 01       	movw	r26, r24
    4244:	cb 01       	movw	r24, r22
    4246:	8f 83       	std	Y+7, r24	; 0x07
    4248:	98 87       	std	Y+8, r25	; 0x08
    424a:	a9 87       	std	Y+9, r26	; 0x09
    424c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    424e:	6f 81       	ldd	r22, Y+7	; 0x07
    4250:	78 85       	ldd	r23, Y+8	; 0x08
    4252:	89 85       	ldd	r24, Y+9	; 0x09
    4254:	9a 85       	ldd	r25, Y+10	; 0x0a
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	30 e0       	ldi	r19, 0x00	; 0
    425a:	40 e8       	ldi	r20, 0x80	; 128
    425c:	5f e3       	ldi	r21, 0x3F	; 63
    425e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4262:	88 23       	and	r24, r24
    4264:	2c f4       	brge	.+10     	; 0x4270 <LCD_voidClear+0x6c>
		__ticks = 1;
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	9e 83       	std	Y+6, r25	; 0x06
    426c:	8d 83       	std	Y+5, r24	; 0x05
    426e:	3f c0       	rjmp	.+126    	; 0x42ee <LCD_voidClear+0xea>
	else if (__tmp > 65535)
    4270:	6f 81       	ldd	r22, Y+7	; 0x07
    4272:	78 85       	ldd	r23, Y+8	; 0x08
    4274:	89 85       	ldd	r24, Y+9	; 0x09
    4276:	9a 85       	ldd	r25, Y+10	; 0x0a
    4278:	20 e0       	ldi	r18, 0x00	; 0
    427a:	3f ef       	ldi	r19, 0xFF	; 255
    427c:	4f e7       	ldi	r20, 0x7F	; 127
    427e:	57 e4       	ldi	r21, 0x47	; 71
    4280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4284:	18 16       	cp	r1, r24
    4286:	4c f5       	brge	.+82     	; 0x42da <LCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4288:	6b 85       	ldd	r22, Y+11	; 0x0b
    428a:	7c 85       	ldd	r23, Y+12	; 0x0c
    428c:	8d 85       	ldd	r24, Y+13	; 0x0d
    428e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	30 e0       	ldi	r19, 0x00	; 0
    4294:	40 e2       	ldi	r20, 0x20	; 32
    4296:	51 e4       	ldi	r21, 0x41	; 65
    4298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429c:	dc 01       	movw	r26, r24
    429e:	cb 01       	movw	r24, r22
    42a0:	bc 01       	movw	r22, r24
    42a2:	cd 01       	movw	r24, r26
    42a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a8:	dc 01       	movw	r26, r24
    42aa:	cb 01       	movw	r24, r22
    42ac:	9e 83       	std	Y+6, r25	; 0x06
    42ae:	8d 83       	std	Y+5, r24	; 0x05
    42b0:	0f c0       	rjmp	.+30     	; 0x42d0 <LCD_voidClear+0xcc>
    42b2:	88 ec       	ldi	r24, 0xC8	; 200
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	9c 83       	std	Y+4, r25	; 0x04
    42b8:	8b 83       	std	Y+3, r24	; 0x03
    42ba:	8b 81       	ldd	r24, Y+3	; 0x03
    42bc:	9c 81       	ldd	r25, Y+4	; 0x04
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <LCD_voidClear+0xba>
    42c2:	9c 83       	std	Y+4, r25	; 0x04
    42c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c6:	8d 81       	ldd	r24, Y+5	; 0x05
    42c8:	9e 81       	ldd	r25, Y+6	; 0x06
    42ca:	01 97       	sbiw	r24, 0x01	; 1
    42cc:	9e 83       	std	Y+6, r25	; 0x06
    42ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d0:	8d 81       	ldd	r24, Y+5	; 0x05
    42d2:	9e 81       	ldd	r25, Y+6	; 0x06
    42d4:	00 97       	sbiw	r24, 0x00	; 0
    42d6:	69 f7       	brne	.-38     	; 0x42b2 <LCD_voidClear+0xae>
    42d8:	14 c0       	rjmp	.+40     	; 0x4302 <LCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42da:	6f 81       	ldd	r22, Y+7	; 0x07
    42dc:	78 85       	ldd	r23, Y+8	; 0x08
    42de:	89 85       	ldd	r24, Y+9	; 0x09
    42e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	9e 83       	std	Y+6, r25	; 0x06
    42ec:	8d 83       	std	Y+5, r24	; 0x05
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	9e 81       	ldd	r25, Y+6	; 0x06
    42f2:	9a 83       	std	Y+2, r25	; 0x02
    42f4:	89 83       	std	Y+1, r24	; 0x01
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	9a 81       	ldd	r25, Y+2	; 0x02
    42fa:	01 97       	sbiw	r24, 0x01	; 1
    42fc:	f1 f7       	brne	.-4      	; 0x42fa <LCD_voidClear+0xf6>
    42fe:	9a 83       	std	Y+2, r25	; 0x02
    4300:	89 83       	std	Y+1, r24	; 0x01
	//wait for 1.53ms
	_delay_ms(2);
}
    4302:	2e 96       	adiw	r28, 0x0e	; 14
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	cf 91       	pop	r28
    4310:	df 91       	pop	r29
    4312:	08 95       	ret

00004314 <LCD_voidSendNumber>:
void LCD_voidSendNumber(s32 num) {
    4314:	0f 93       	push	r16
    4316:	1f 93       	push	r17
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	a0 97       	sbiw	r28, 0x20	; 32
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	6d 8f       	std	Y+29, r22	; 0x1d
    432e:	7e 8f       	std	Y+30, r23	; 0x1e
    4330:	8f 8f       	std	Y+31, r24	; 0x1f
    4332:	98 a3       	std	Y+32, r25	; 0x20
    s8 counter;
    u8 length = 0;
    4334:	1f 82       	std	Y+7, r1	; 0x07
    u8 StringStart = 0;
    4336:	1e 82       	std	Y+6, r1	; 0x06
    u8 IsNegative = 0;
    4338:	1d 82       	std	Y+5, r1	; 0x05
    u8 str[20];

    if (num < 0) {
    433a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    433c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    433e:	af 8d       	ldd	r26, Y+31	; 0x1f
    4340:	b8 a1       	ldd	r27, Y+32	; 0x20
    4342:	bb 23       	and	r27, r27
    4344:	c4 f4       	brge	.+48     	; 0x4376 <LCD_voidSendNumber+0x62>
        num = -num;
    4346:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4348:	9e 8d       	ldd	r25, Y+30	; 0x1e
    434a:	af 8d       	ldd	r26, Y+31	; 0x1f
    434c:	b8 a1       	ldd	r27, Y+32	; 0x20
    434e:	b0 95       	com	r27
    4350:	a0 95       	com	r26
    4352:	90 95       	com	r25
    4354:	81 95       	neg	r24
    4356:	9f 4f       	sbci	r25, 0xFF	; 255
    4358:	af 4f       	sbci	r26, 0xFF	; 255
    435a:	bf 4f       	sbci	r27, 0xFF	; 255
    435c:	8d 8f       	std	Y+29, r24	; 0x1d
    435e:	9e 8f       	std	Y+30, r25	; 0x1e
    4360:	af 8f       	std	Y+31, r26	; 0x1f
    4362:	b8 a3       	std	Y+32, r27	; 0x20
        IsNegative = 1;
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	8d 83       	std	Y+5, r24	; 0x05
        StringStart = 1;
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	8e 83       	std	Y+6, r24	; 0x06
        str[0] = '-';
    436c:	8d e2       	ldi	r24, 0x2D	; 45
    436e:	89 87       	std	Y+9, r24	; 0x09
        length++;
    4370:	8f 81       	ldd	r24, Y+7	; 0x07
    4372:	8f 5f       	subi	r24, 0xFF	; 255
    4374:	8f 83       	std	Y+7, r24	; 0x07
    }

    u32 temp_num = num;
    4376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4378:	9e 8d       	ldd	r25, Y+30	; 0x1e
    437a:	af 8d       	ldd	r26, Y+31	; 0x1f
    437c:	b8 a1       	ldd	r27, Y+32	; 0x20
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	9a 83       	std	Y+2, r25	; 0x02
    4382:	ab 83       	std	Y+3, r26	; 0x03
    4384:	bc 83       	std	Y+4, r27	; 0x04
    do {
        temp_num /= 10;
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	9a 81       	ldd	r25, Y+2	; 0x02
    438a:	ab 81       	ldd	r26, Y+3	; 0x03
    438c:	bc 81       	ldd	r27, Y+4	; 0x04
    438e:	2a e0       	ldi	r18, 0x0A	; 10
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	40 e0       	ldi	r20, 0x00	; 0
    4394:	50 e0       	ldi	r21, 0x00	; 0
    4396:	bc 01       	movw	r22, r24
    4398:	cd 01       	movw	r24, r26
    439a:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <__udivmodsi4>
    439e:	da 01       	movw	r26, r20
    43a0:	c9 01       	movw	r24, r18
    43a2:	89 83       	std	Y+1, r24	; 0x01
    43a4:	9a 83       	std	Y+2, r25	; 0x02
    43a6:	ab 83       	std	Y+3, r26	; 0x03
    43a8:	bc 83       	std	Y+4, r27	; 0x04
        length++;
    43aa:	8f 81       	ldd	r24, Y+7	; 0x07
    43ac:	8f 5f       	subi	r24, 0xFF	; 255
    43ae:	8f 83       	std	Y+7, r24	; 0x07
    } while (temp_num > 0);
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	9a 81       	ldd	r25, Y+2	; 0x02
    43b4:	ab 81       	ldd	r26, Y+3	; 0x03
    43b6:	bc 81       	ldd	r27, Y+4	; 0x04
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	a1 05       	cpc	r26, r1
    43bc:	b1 05       	cpc	r27, r1
    43be:	19 f7       	brne	.-58     	; 0x4386 <LCD_voidSendNumber+0x72>

    for (counter = length - 1; counter >= StringStart; counter--) {
    43c0:	8f 81       	ldd	r24, Y+7	; 0x07
    43c2:	81 50       	subi	r24, 0x01	; 1
    43c4:	88 87       	std	Y+8, r24	; 0x08
    43c6:	30 c0       	rjmp	.+96     	; 0x4428 <LCD_voidSendNumber+0x114>
        str[counter] = num % 10 + '0';
    43c8:	88 85       	ldd	r24, Y+8	; 0x08
    43ca:	08 2f       	mov	r16, r24
    43cc:	11 27       	eor	r17, r17
    43ce:	07 fd       	sbrc	r16, 7
    43d0:	10 95       	com	r17
    43d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    43d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    43d6:	af 8d       	ldd	r26, Y+31	; 0x1f
    43d8:	b8 a1       	ldd	r27, Y+32	; 0x20
    43da:	2a e0       	ldi	r18, 0x0A	; 10
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	40 e0       	ldi	r20, 0x00	; 0
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	bc 01       	movw	r22, r24
    43e4:	cd 01       	movw	r24, r26
    43e6:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    43ea:	dc 01       	movw	r26, r24
    43ec:	cb 01       	movw	r24, r22
    43ee:	28 2f       	mov	r18, r24
    43f0:	20 5d       	subi	r18, 0xD0	; 208
    43f2:	ce 01       	movw	r24, r28
    43f4:	09 96       	adiw	r24, 0x09	; 9
    43f6:	fc 01       	movw	r30, r24
    43f8:	e0 0f       	add	r30, r16
    43fa:	f1 1f       	adc	r31, r17
    43fc:	20 83       	st	Z, r18
        num /= 10;
    43fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4400:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4402:	af 8d       	ldd	r26, Y+31	; 0x1f
    4404:	b8 a1       	ldd	r27, Y+32	; 0x20
    4406:	2a e0       	ldi	r18, 0x0A	; 10
    4408:	30 e0       	ldi	r19, 0x00	; 0
    440a:	40 e0       	ldi	r20, 0x00	; 0
    440c:	50 e0       	ldi	r21, 0x00	; 0
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <__divmodsi4>
    4416:	da 01       	movw	r26, r20
    4418:	c9 01       	movw	r24, r18
    441a:	8d 8f       	std	Y+29, r24	; 0x1d
    441c:	9e 8f       	std	Y+30, r25	; 0x1e
    441e:	af 8f       	std	Y+31, r26	; 0x1f
    4420:	b8 a3       	std	Y+32, r27	; 0x20
    do {
        temp_num /= 10;
        length++;
    } while (temp_num > 0);

    for (counter = length - 1; counter >= StringStart; counter--) {
    4422:	88 85       	ldd	r24, Y+8	; 0x08
    4424:	81 50       	subi	r24, 0x01	; 1
    4426:	88 87       	std	Y+8, r24	; 0x08
    4428:	88 85       	ldd	r24, Y+8	; 0x08
    442a:	28 2f       	mov	r18, r24
    442c:	33 27       	eor	r19, r19
    442e:	27 fd       	sbrc	r18, 7
    4430:	30 95       	com	r19
    4432:	8e 81       	ldd	r24, Y+6	; 0x06
    4434:	88 2f       	mov	r24, r24
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	28 17       	cp	r18, r24
    443a:	39 07       	cpc	r19, r25
    443c:	2c f6       	brge	.-118    	; 0x43c8 <LCD_voidSendNumber+0xb4>
        str[counter] = num % 10 + '0';
        num /= 10;
    }
    str[length] = '\0';
    443e:	8f 81       	ldd	r24, Y+7	; 0x07
    4440:	28 2f       	mov	r18, r24
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	ce 01       	movw	r24, r28
    4446:	09 96       	adiw	r24, 0x09	; 9
    4448:	fc 01       	movw	r30, r24
    444a:	e2 0f       	add	r30, r18
    444c:	f3 1f       	adc	r31, r19
    444e:	10 82       	st	Z, r1
    LCD_voidSendString(str);
    4450:	ce 01       	movw	r24, r28
    4452:	09 96       	adiw	r24, 0x09	; 9
    4454:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <LCD_voidSendString>
}
    4458:	a0 96       	adiw	r28, 0x20	; 32
    445a:	0f b6       	in	r0, 0x3f	; 63
    445c:	f8 94       	cli
    445e:	de bf       	out	0x3e, r29	; 62
    4460:	0f be       	out	0x3f, r0	; 63
    4462:	cd bf       	out	0x3d, r28	; 61
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	1f 91       	pop	r17
    446a:	0f 91       	pop	r16
    446c:	08 95       	ret

0000446e <LM35_voidInit>:
 */

#include "LM35_Interface.h"
#include <util/delay.h>
void LM35_voidInit()
{
    446e:	df 93       	push	r29
    4470:	cf 93       	push	r28
    4472:	cd b7       	in	r28, 0x3d	; 61
    4474:	de b7       	in	r29, 0x3e	; 62
    4476:	61 97       	sbiw	r28, 0x11	; 17
    4478:	0f b6       	in	r0, 0x3f	; 63
    447a:	f8 94       	cli
    447c:	de bf       	out	0x3e, r29	; 62
    447e:	0f be       	out	0x3f, r0	; 63
    4480:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinDir(LM35Group,LM35Pin,Input);
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	63 e0       	ldi	r22, 0x03	; 3
    4486:	40 e0       	ldi	r20, 0x00	; 0
    4488:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	ADCInformation ADCInformationLM35;
	ADCInformationLM35.AutoTriggerState=LM35_ADC_AutoTriggerState;
    448c:	1f 86       	std	Y+15, r1	; 0x0f
	ADCInformationLM35.TriggerSource=LM35_ADC_TriggerSource;
    448e:	18 8a       	std	Y+16, r1	; 0x10
	ADCInformationLM35.DivisionFactor=LM35_ADC_DivisionFactor;
    4490:	83 e0       	ldi	r24, 0x03	; 3
    4492:	89 8b       	std	Y+17, r24	; 0x11
#if LM35Mode==Polling
	ADC_voidInitPolling(ADCInformationLM35);
    4494:	6f 85       	ldd	r22, Y+15	; 0x0f
    4496:	78 89       	ldd	r23, Y+16	; 0x10
    4498:	89 89       	ldd	r24, Y+17	; 0x11
    449a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <ADC_voidInitPolling>
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	a6 e9       	ldi	r26, 0x96	; 150
    44a4:	b3 e4       	ldi	r27, 0x43	; 67
    44a6:	8b 87       	std	Y+11, r24	; 0x0b
    44a8:	9c 87       	std	Y+12, r25	; 0x0c
    44aa:	ad 87       	std	Y+13, r26	; 0x0d
    44ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    44b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    44b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    44b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    44b6:	20 e0       	ldi	r18, 0x00	; 0
    44b8:	30 e0       	ldi	r19, 0x00	; 0
    44ba:	4a ef       	ldi	r20, 0xFA	; 250
    44bc:	54 e4       	ldi	r21, 0x44	; 68
    44be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c2:	dc 01       	movw	r26, r24
    44c4:	cb 01       	movw	r24, r22
    44c6:	8f 83       	std	Y+7, r24	; 0x07
    44c8:	98 87       	std	Y+8, r25	; 0x08
    44ca:	a9 87       	std	Y+9, r26	; 0x09
    44cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44ce:	6f 81       	ldd	r22, Y+7	; 0x07
    44d0:	78 85       	ldd	r23, Y+8	; 0x08
    44d2:	89 85       	ldd	r24, Y+9	; 0x09
    44d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	30 e0       	ldi	r19, 0x00	; 0
    44da:	40 e8       	ldi	r20, 0x80	; 128
    44dc:	5f e3       	ldi	r21, 0x3F	; 63
    44de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44e2:	88 23       	and	r24, r24
    44e4:	2c f4       	brge	.+10     	; 0x44f0 <LM35_voidInit+0x82>
		__ticks = 1;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	9e 83       	std	Y+6, r25	; 0x06
    44ec:	8d 83       	std	Y+5, r24	; 0x05
    44ee:	3f c0       	rjmp	.+126    	; 0x456e <LM35_voidInit+0x100>
	else if (__tmp > 65535)
    44f0:	6f 81       	ldd	r22, Y+7	; 0x07
    44f2:	78 85       	ldd	r23, Y+8	; 0x08
    44f4:	89 85       	ldd	r24, Y+9	; 0x09
    44f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f8:	20 e0       	ldi	r18, 0x00	; 0
    44fa:	3f ef       	ldi	r19, 0xFF	; 255
    44fc:	4f e7       	ldi	r20, 0x7F	; 127
    44fe:	57 e4       	ldi	r21, 0x47	; 71
    4500:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4504:	18 16       	cp	r1, r24
    4506:	4c f5       	brge	.+82     	; 0x455a <LM35_voidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4508:	6b 85       	ldd	r22, Y+11	; 0x0b
    450a:	7c 85       	ldd	r23, Y+12	; 0x0c
    450c:	8d 85       	ldd	r24, Y+13	; 0x0d
    450e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4510:	20 e0       	ldi	r18, 0x00	; 0
    4512:	30 e0       	ldi	r19, 0x00	; 0
    4514:	40 e2       	ldi	r20, 0x20	; 32
    4516:	51 e4       	ldi	r21, 0x41	; 65
    4518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    451c:	dc 01       	movw	r26, r24
    451e:	cb 01       	movw	r24, r22
    4520:	bc 01       	movw	r22, r24
    4522:	cd 01       	movw	r24, r26
    4524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4528:	dc 01       	movw	r26, r24
    452a:	cb 01       	movw	r24, r22
    452c:	9e 83       	std	Y+6, r25	; 0x06
    452e:	8d 83       	std	Y+5, r24	; 0x05
    4530:	0f c0       	rjmp	.+30     	; 0x4550 <LM35_voidInit+0xe2>
    4532:	88 ec       	ldi	r24, 0xC8	; 200
    4534:	90 e0       	ldi	r25, 0x00	; 0
    4536:	9c 83       	std	Y+4, r25	; 0x04
    4538:	8b 83       	std	Y+3, r24	; 0x03
    453a:	8b 81       	ldd	r24, Y+3	; 0x03
    453c:	9c 81       	ldd	r25, Y+4	; 0x04
    453e:	01 97       	sbiw	r24, 0x01	; 1
    4540:	f1 f7       	brne	.-4      	; 0x453e <LM35_voidInit+0xd0>
    4542:	9c 83       	std	Y+4, r25	; 0x04
    4544:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4546:	8d 81       	ldd	r24, Y+5	; 0x05
    4548:	9e 81       	ldd	r25, Y+6	; 0x06
    454a:	01 97       	sbiw	r24, 0x01	; 1
    454c:	9e 83       	std	Y+6, r25	; 0x06
    454e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4550:	8d 81       	ldd	r24, Y+5	; 0x05
    4552:	9e 81       	ldd	r25, Y+6	; 0x06
    4554:	00 97       	sbiw	r24, 0x00	; 0
    4556:	69 f7       	brne	.-38     	; 0x4532 <LM35_voidInit+0xc4>
    4558:	14 c0       	rjmp	.+40     	; 0x4582 <LM35_voidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    455a:	6f 81       	ldd	r22, Y+7	; 0x07
    455c:	78 85       	ldd	r23, Y+8	; 0x08
    455e:	89 85       	ldd	r24, Y+9	; 0x09
    4560:	9a 85       	ldd	r25, Y+10	; 0x0a
    4562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4566:	dc 01       	movw	r26, r24
    4568:	cb 01       	movw	r24, r22
    456a:	9e 83       	std	Y+6, r25	; 0x06
    456c:	8d 83       	std	Y+5, r24	; 0x05
    456e:	8d 81       	ldd	r24, Y+5	; 0x05
    4570:	9e 81       	ldd	r25, Y+6	; 0x06
    4572:	9a 83       	std	Y+2, r25	; 0x02
    4574:	89 83       	std	Y+1, r24	; 0x01
    4576:	89 81       	ldd	r24, Y+1	; 0x01
    4578:	9a 81       	ldd	r25, Y+2	; 0x02
    457a:	01 97       	sbiw	r24, 0x01	; 1
    457c:	f1 f7       	brne	.-4      	; 0x457a <LM35_voidInit+0x10c>
    457e:	9a 83       	std	Y+2, r25	; 0x02
    4580:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
#elif LM35Mode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    4582:	61 96       	adiw	r28, 0x11	; 17
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	08 95       	ret

00004594 <LM35_voidRead>:

void LM35_voidRead(u16 *temp)
{
    4594:	df 93       	push	r29
    4596:	cf 93       	push	r28
    4598:	00 d0       	rcall	.+0      	; 0x459a <LM35_voidRead+0x6>
    459a:	cd b7       	in	r28, 0x3d	; 61
    459c:	de b7       	in	r29, 0x3e	; 62
    459e:	9a 83       	std	Y+2, r25	; 0x02
    45a0:	89 83       	std	Y+1, r24	; 0x01
#if LM35Mode==Polling
	ADC_voidReadResultPolling(LM35Pin,temp);
    45a2:	29 81       	ldd	r18, Y+1	; 0x01
    45a4:	3a 81       	ldd	r19, Y+2	; 0x02
    45a6:	83 e0       	ldi	r24, 0x03	; 3
    45a8:	b9 01       	movw	r22, r18
    45aa:	0e 94 67 17 	call	0x2ece	; 0x2ece <ADC_voidReadResultPolling>
	*temp=((u32)(*temp)*ADCRefmV)/DACRes; //convert ot equevilant mV
    45ae:	e9 81       	ldd	r30, Y+1	; 0x01
    45b0:	fa 81       	ldd	r31, Y+2	; 0x02
    45b2:	80 81       	ld	r24, Z
    45b4:	91 81       	ldd	r25, Z+1	; 0x01
    45b6:	cc 01       	movw	r24, r24
    45b8:	a0 e0       	ldi	r26, 0x00	; 0
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	28 e8       	ldi	r18, 0x88	; 136
    45be:	33 e1       	ldi	r19, 0x13	; 19
    45c0:	40 e0       	ldi	r20, 0x00	; 0
    45c2:	50 e0       	ldi	r21, 0x00	; 0
    45c4:	bc 01       	movw	r22, r24
    45c6:	cd 01       	movw	r24, r26
    45c8:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__mulsi3>
    45cc:	dc 01       	movw	r26, r24
    45ce:	cb 01       	movw	r24, r22
    45d0:	07 2e       	mov	r0, r23
    45d2:	7a e0       	ldi	r23, 0x0A	; 10
    45d4:	b6 95       	lsr	r27
    45d6:	a7 95       	ror	r26
    45d8:	97 95       	ror	r25
    45da:	87 95       	ror	r24
    45dc:	7a 95       	dec	r23
    45de:	d1 f7       	brne	.-12     	; 0x45d4 <LM35_voidRead+0x40>
    45e0:	70 2d       	mov	r23, r0
    45e2:	e9 81       	ldd	r30, Y+1	; 0x01
    45e4:	fa 81       	ldd	r31, Y+2	; 0x02
    45e6:	91 83       	std	Z+1, r25	; 0x01
    45e8:	80 83       	st	Z, r24
	*temp= (*temp)/10.00;
    45ea:	e9 81       	ldd	r30, Y+1	; 0x01
    45ec:	fa 81       	ldd	r31, Y+2	; 0x02
    45ee:	80 81       	ld	r24, Z
    45f0:	91 81       	ldd	r25, Z+1	; 0x01
    45f2:	cc 01       	movw	r24, r24
    45f4:	a0 e0       	ldi	r26, 0x00	; 0
    45f6:	b0 e0       	ldi	r27, 0x00	; 0
    45f8:	bc 01       	movw	r22, r24
    45fa:	cd 01       	movw	r24, r26
    45fc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    4600:	dc 01       	movw	r26, r24
    4602:	cb 01       	movw	r24, r22
    4604:	bc 01       	movw	r22, r24
    4606:	cd 01       	movw	r24, r26
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	30 e0       	ldi	r19, 0x00	; 0
    460c:	40 e2       	ldi	r20, 0x20	; 32
    460e:	51 e4       	ldi	r21, 0x41	; 65
    4610:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	bc 01       	movw	r22, r24
    461a:	cd 01       	movw	r24, r26
    461c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4620:	dc 01       	movw	r26, r24
    4622:	cb 01       	movw	r24, r22
    4624:	e9 81       	ldd	r30, Y+1	; 0x01
    4626:	fa 81       	ldd	r31, Y+2	; 0x02
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    462c:	0f 90       	pop	r0
    462e:	0f 90       	pop	r0
    4630:	cf 91       	pop	r28
    4632:	df 91       	pop	r29
    4634:	08 95       	ret

00004636 <LDR_voidInit>:
 */

#include "LDR_Interface.h"

void LDR_voidInit()
{
    4636:	df 93       	push	r29
    4638:	cf 93       	push	r28
    463a:	00 d0       	rcall	.+0      	; 0x463c <LDR_voidInit+0x6>
    463c:	0f 92       	push	r0
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(LDRGroup,LDRPin,Input);
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	64 e0       	ldi	r22, 0x04	; 4
    4646:	40 e0       	ldi	r20, 0x00	; 0
    4648:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	ADCInformation ADCInformationLDR;
	ADCInformationLDR.AutoTriggerState=LDR_ADC_AutoTriggerState;
    464c:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationLDR.TriggerSource=LDR_ADC_TriggerSource;
    464e:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationLDR.DivisionFactor=LDR_ADC_DivisionFactor;
    4650:	83 e0       	ldi	r24, 0x03	; 3
    4652:	8b 83       	std	Y+3, r24	; 0x03
#if LDRMode==Polling
	ADC_voidInitPolling(ADCInformationLDR);
    4654:	69 81       	ldd	r22, Y+1	; 0x01
    4656:	7a 81       	ldd	r23, Y+2	; 0x02
    4658:	8b 81       	ldd	r24, Y+3	; 0x03
    465a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <ADC_voidInitPolling>
#elif LDRMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    465e:	0f 90       	pop	r0
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	cf 91       	pop	r28
    4666:	df 91       	pop	r29
    4668:	08 95       	ret

0000466a <LDR_voidRead>:

void LDR_voidRead(u16 *Light)
{
    466a:	df 93       	push	r29
    466c:	cf 93       	push	r28
    466e:	00 d0       	rcall	.+0      	; 0x4670 <LDR_voidRead+0x6>
    4670:	cd b7       	in	r28, 0x3d	; 61
    4672:	de b7       	in	r29, 0x3e	; 62
    4674:	9a 83       	std	Y+2, r25	; 0x02
    4676:	89 83       	std	Y+1, r24	; 0x01
#if LDRMode==Polling
	ADC_voidReadResultPolling(LDRPin,Light);
    4678:	29 81       	ldd	r18, Y+1	; 0x01
    467a:	3a 81       	ldd	r19, Y+2	; 0x02
    467c:	84 e0       	ldi	r24, 0x04	; 4
    467e:	b9 01       	movw	r22, r18
    4680:	0e 94 67 17 	call	0x2ece	; 0x2ece <ADC_voidReadResultPolling>
	*Light=((u32)(*Light)*ADCRefmV)/DACRes;  //convert ot equevilant mV
    4684:	e9 81       	ldd	r30, Y+1	; 0x01
    4686:	fa 81       	ldd	r31, Y+2	; 0x02
    4688:	80 81       	ld	r24, Z
    468a:	91 81       	ldd	r25, Z+1	; 0x01
    468c:	cc 01       	movw	r24, r24
    468e:	a0 e0       	ldi	r26, 0x00	; 0
    4690:	b0 e0       	ldi	r27, 0x00	; 0
    4692:	28 e8       	ldi	r18, 0x88	; 136
    4694:	33 e1       	ldi	r19, 0x13	; 19
    4696:	40 e0       	ldi	r20, 0x00	; 0
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	bc 01       	movw	r22, r24
    469c:	cd 01       	movw	r24, r26
    469e:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <__mulsi3>
    46a2:	dc 01       	movw	r26, r24
    46a4:	cb 01       	movw	r24, r22
    46a6:	07 2e       	mov	r0, r23
    46a8:	7a e0       	ldi	r23, 0x0A	; 10
    46aa:	b6 95       	lsr	r27
    46ac:	a7 95       	ror	r26
    46ae:	97 95       	ror	r25
    46b0:	87 95       	ror	r24
    46b2:	7a 95       	dec	r23
    46b4:	d1 f7       	brne	.-12     	; 0x46aa <LDR_voidRead+0x40>
    46b6:	70 2d       	mov	r23, r0
    46b8:	e9 81       	ldd	r30, Y+1	; 0x01
    46ba:	fa 81       	ldd	r31, Y+2	; 0x02
    46bc:	91 83       	std	Z+1, r25	; 0x01
    46be:	80 83       	st	Z, r24
#elif LM35Mode==Interrupt
#endif
}
    46c0:	0f 90       	pop	r0
    46c2:	0f 90       	pop	r0
    46c4:	cf 91       	pop	r28
    46c6:	df 91       	pop	r29
    46c8:	08 95       	ret

000046ca <KEYPAD_voidInit>:
#include "Keypad_Interface.h"
#include "../../Common/definition.h"
u8 keypad_value1[Row][Column]= KEYPAD_ARR1;
u8 keypad_value2[Row][Column]=KEYPAD_ARR2;
void KEYPAD_voidInit()
{
    46ca:	df 93       	push	r29
    46cc:	cf 93       	push	r28
    46ce:	cd b7       	in	r28, 0x3d	; 61
    46d0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPortDir(KeypadGroup,0xF0);
    46d2:	84 e0       	ldi	r24, 0x04	; 4
    46d4:	60 ef       	ldi	r22, 0xF0	; 240
    46d6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <DIO_voidSetPortDir>
	DIO_voidSetPortValue(KeypadGroup,0xFF);
    46da:	84 e0       	ldi	r24, 0x04	; 4
    46dc:	6f ef       	ldi	r22, 0xFF	; 255
    46de:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
}
    46e2:	cf 91       	pop	r28
    46e4:	df 91       	pop	r29
    46e6:	08 95       	ret

000046e8 <KEYPAD_u8GetValue1>:

u8 KEYPAD_u8GetValue1()
{
    46e8:	df 93       	push	r29
    46ea:	cf 93       	push	r28
    46ec:	00 d0       	rcall	.+0      	; 0x46ee <KEYPAD_u8GetValue1+0x6>
    46ee:	0f 92       	push	r0
    46f0:	cd b7       	in	r28, 0x3d	; 61
    46f2:	de b7       	in	r29, 0x3e	; 62
	u8 C , R ;
	for(C=0;C<Column;C++)
    46f4:	1a 82       	std	Y+2, r1	; 0x02
    46f6:	38 c0       	rjmp	.+112    	; 0x4768 <KEYPAD_u8GetValue1+0x80>
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
    46f8:	84 e0       	ldi	r24, 0x04	; 4
    46fa:	6f ef       	ldi	r22, 0xFF	; 255
    46fc:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <DIO_voidSetPortValue>
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    4700:	8a 81       	ldd	r24, Y+2	; 0x02
    4702:	98 2f       	mov	r25, r24
    4704:	9c 5f       	subi	r25, 0xFC	; 252
    4706:	84 e0       	ldi	r24, 0x04	; 4
    4708:	69 2f       	mov	r22, r25
    470a:	40 e0       	ldi	r20, 0x00	; 0
    470c:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    4710:	19 82       	std	Y+1, r1	; 0x01
    4712:	1c c0       	rjmp	.+56     	; 0x474c <KEYPAD_u8GetValue1+0x64>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    4714:	84 e0       	ldi	r24, 0x04	; 4
    4716:	69 81       	ldd	r22, Y+1	; 0x01
    4718:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
    471c:	88 23       	and	r24, r24
    471e:	99 f4       	brne	.+38     	; 0x4746 <KEYPAD_u8GetValue1+0x5e>
			{
				return keypad_value1[R][C];
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	48 2f       	mov	r20, r24
    4724:	50 e0       	ldi	r21, 0x00	; 0
    4726:	8a 81       	ldd	r24, Y+2	; 0x02
    4728:	28 2f       	mov	r18, r24
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	ca 01       	movw	r24, r20
    472e:	88 0f       	add	r24, r24
    4730:	99 1f       	adc	r25, r25
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	82 0f       	add	r24, r18
    4738:	93 1f       	adc	r25, r19
    473a:	fc 01       	movw	r30, r24
    473c:	ee 58       	subi	r30, 0x8E	; 142
    473e:	fe 4f       	sbci	r31, 0xFE	; 254
    4740:	80 81       	ld	r24, Z
    4742:	8b 83       	std	Y+3, r24	; 0x03
    4744:	16 c0       	rjmp	.+44     	; 0x4772 <KEYPAD_u8GetValue1+0x8a>
	u8 C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPortValue(KeypadGroup,0xFF);
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	8f 5f       	subi	r24, 0xFF	; 255
    474a:	89 83       	std	Y+1, r24	; 0x01
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	84 30       	cpi	r24, 0x04	; 4
    4750:	08 f3       	brcs	.-62     	; 0x4714 <KEYPAD_u8GetValue1+0x2c>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
    4752:	8a 81       	ldd	r24, Y+2	; 0x02
    4754:	98 2f       	mov	r25, r24
    4756:	9c 5f       	subi	r25, 0xFC	; 252
    4758:	84 e0       	ldi	r24, 0x04	; 4
    475a:	69 2f       	mov	r22, r25
    475c:	41 e0       	ldi	r20, 0x01	; 1
    475e:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}

u8 KEYPAD_u8GetValue1()
{
	u8 C , R ;
	for(C=0;C<Column;C++)
    4762:	8a 81       	ldd	r24, Y+2	; 0x02
    4764:	8f 5f       	subi	r24, 0xFF	; 255
    4766:	8a 83       	std	Y+2, r24	; 0x02
    4768:	8a 81       	ldd	r24, Y+2	; 0x02
    476a:	84 30       	cpi	r24, 0x04	; 4
    476c:	28 f2       	brcs	.-118    	; 0x46f8 <KEYPAD_u8GetValue1+0x10>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,High);
	}
	return Unpressed ;
    476e:	8f ef       	ldi	r24, 0xFF	; 255
    4770:	8b 83       	std	Y+3, r24	; 0x03
    4772:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	cf 91       	pop	r28
    477c:	df 91       	pop	r29
    477e:	08 95       	ret

00004780 <KEYPAD_charGetValue2>:

char KEYPAD_charGetValue2()
{
    4780:	df 93       	push	r29
    4782:	cf 93       	push	r28
    4784:	00 d0       	rcall	.+0      	; 0x4786 <KEYPAD_charGetValue2+0x6>
    4786:	00 d0       	rcall	.+0      	; 0x4788 <KEYPAD_charGetValue2+0x8>
    4788:	0f 92       	push	r0
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
	int C , R ;
	for(C=0;C<Column;C++)
    478e:	1c 82       	std	Y+4, r1	; 0x04
    4790:	1b 82       	std	Y+3, r1	; 0x03
    4792:	39 c0       	rjmp	.+114    	; 0x4806 <KEYPAD_charGetValue2+0x86>
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    4794:	8b 81       	ldd	r24, Y+3	; 0x03
    4796:	98 2f       	mov	r25, r24
    4798:	9c 5f       	subi	r25, 0xFC	; 252
    479a:	84 e0       	ldi	r24, 0x04	; 4
    479c:	69 2f       	mov	r22, r25
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		for(R=0;R<Row;R++)
    47a4:	1a 82       	std	Y+2, r1	; 0x02
    47a6:	19 82       	std	Y+1, r1	; 0x01
    47a8:	1c c0       	rjmp	.+56     	; 0x47e2 <KEYPAD_charGetValue2+0x62>
		{
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
    47aa:	99 81       	ldd	r25, Y+1	; 0x01
    47ac:	84 e0       	ldi	r24, 0x04	; 4
    47ae:	69 2f       	mov	r22, r25
    47b0:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
    47b4:	88 23       	and	r24, r24
    47b6:	81 f4       	brne	.+32     	; 0x47d8 <KEYPAD_charGetValue2+0x58>
			{
				return keypad_value1[R][C];
    47b8:	89 81       	ldd	r24, Y+1	; 0x01
    47ba:	9a 81       	ldd	r25, Y+2	; 0x02
    47bc:	2b 81       	ldd	r18, Y+3	; 0x03
    47be:	3c 81       	ldd	r19, Y+4	; 0x04
    47c0:	88 0f       	add	r24, r24
    47c2:	99 1f       	adc	r25, r25
    47c4:	88 0f       	add	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	82 0f       	add	r24, r18
    47ca:	93 1f       	adc	r25, r19
    47cc:	fc 01       	movw	r30, r24
    47ce:	ee 58       	subi	r30, 0x8E	; 142
    47d0:	fe 4f       	sbci	r31, 0xFE	; 254
    47d2:	80 81       	ld	r24, Z
    47d4:	8d 83       	std	Y+5, r24	; 0x05
    47d6:	1e c0       	rjmp	.+60     	; 0x4814 <KEYPAD_charGetValue2+0x94>
{
	int C , R ;
	for(C=0;C<Column;C++)
	{
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
		for(R=0;R<Row;R++)
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	9a 81       	ldd	r25, Y+2	; 0x02
    47dc:	01 96       	adiw	r24, 0x01	; 1
    47de:	9a 83       	std	Y+2, r25	; 0x02
    47e0:	89 83       	std	Y+1, r24	; 0x01
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	9a 81       	ldd	r25, Y+2	; 0x02
    47e6:	84 30       	cpi	r24, 0x04	; 4
    47e8:	91 05       	cpc	r25, r1
    47ea:	fc f2       	brlt	.-66     	; 0x47aa <KEYPAD_charGetValue2+0x2a>
			if(DIO_u8ReadPinValue(KeypadGroup,R)== Pressed)
			{
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
    47ec:	8b 81       	ldd	r24, Y+3	; 0x03
    47ee:	98 2f       	mov	r25, r24
    47f0:	9c 5f       	subi	r25, 0xFC	; 252
    47f2:	84 e0       	ldi	r24, 0x04	; 4
    47f4:	69 2f       	mov	r22, r25
    47f6:	40 e0       	ldi	r20, 0x00	; 0
    47f8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}

char KEYPAD_charGetValue2()
{
	int C , R ;
	for(C=0;C<Column;C++)
    47fc:	8b 81       	ldd	r24, Y+3	; 0x03
    47fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4800:	01 96       	adiw	r24, 0x01	; 1
    4802:	9c 83       	std	Y+4, r25	; 0x04
    4804:	8b 83       	std	Y+3, r24	; 0x03
    4806:	8b 81       	ldd	r24, Y+3	; 0x03
    4808:	9c 81       	ldd	r25, Y+4	; 0x04
    480a:	84 30       	cpi	r24, 0x04	; 4
    480c:	91 05       	cpc	r25, r1
    480e:	14 f2       	brlt	.-124    	; 0x4794 <KEYPAD_charGetValue2+0x14>
				return keypad_value1[R][C];
			}
		}
		DIO_voidSetPinValue(KeypadGroup,C+Column,Low);
	}
	return Unpressed ;
    4810:	8f ef       	ldi	r24, 0xFF	; 255
    4812:	8d 83       	std	Y+5, r24	; 0x05
    4814:	8d 81       	ldd	r24, Y+5	; 0x05
}
    4816:	0f 90       	pop	r0
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <GasSensor_voidAnalogInit>:
 */

#include "GasSensor_Interface.h"

void GasSensor_voidAnalogInit()
{
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	00 d0       	rcall	.+0      	; 0x482c <GasSensor_voidAnalogInit+0x6>
    482c:	0f 92       	push	r0
    482e:	cd b7       	in	r28, 0x3d	; 61
    4830:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	65 e0       	ldi	r22, 0x05	; 5
    4836:	40 e0       	ldi	r20, 0x00	; 0
    4838:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	ADCInformation ADCInformationGasSensor;
	ADCInformationGasSensor.AutoTriggerState=GasSensor_ADC_AutoTriggerState;
    483c:	19 82       	std	Y+1, r1	; 0x01
	ADCInformationGasSensor.TriggerSource=GasSensor_ADC_TriggerSource;
    483e:	1a 82       	std	Y+2, r1	; 0x02
	ADCInformationGasSensor.DivisionFactor=GasSensor_ADC_DivisionFactor;
    4840:	83 e0       	ldi	r24, 0x03	; 3
    4842:	8b 83       	std	Y+3, r24	; 0x03
#if GasSensorMode==Polling
	ADC_voidInitPolling(ADCInformationGasSensor);
    4844:	69 81       	ldd	r22, Y+1	; 0x01
    4846:	7a 81       	ldd	r23, Y+2	; 0x02
    4848:	8b 81       	ldd	r24, Y+3	; 0x03
    484a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <ADC_voidInitPolling>
#elif GasSensorMode==Interrupt
	ADC_voidInitInterrupt();
#endif
}
    484e:	0f 90       	pop	r0
    4850:	0f 90       	pop	r0
    4852:	0f 90       	pop	r0
    4854:	cf 91       	pop	r28
    4856:	df 91       	pop	r29
    4858:	08 95       	ret

0000485a <GasSensor_voidDigitalInit>:

void GasSensor_voidDigitalInit()
{
    485a:	df 93       	push	r29
    485c:	cf 93       	push	r28
    485e:	cd b7       	in	r28, 0x3d	; 61
    4860:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(GasSensorGroup,GasSensorPin,Input);
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	65 e0       	ldi	r22, 0x05	; 5
    4866:	40 e0       	ldi	r20, 0x00	; 0
    4868:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
}
    486c:	cf 91       	pop	r28
    486e:	df 91       	pop	r29
    4870:	08 95       	ret

00004872 <GasSensor_f32ReadAnalog>:

void GasSensor_f32ReadAnalog(u16 read)
{
    4872:	df 93       	push	r29
    4874:	cf 93       	push	r28
    4876:	00 d0       	rcall	.+0      	; 0x4878 <GasSensor_f32ReadAnalog+0x6>
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	9a 83       	std	Y+2, r25	; 0x02
    487e:	89 83       	std	Y+1, r24	; 0x01


}
    4880:	0f 90       	pop	r0
    4882:	0f 90       	pop	r0
    4884:	cf 91       	pop	r28
    4886:	df 91       	pop	r29
    4888:	08 95       	ret

0000488a <GasSensor_u8DigitalState>:

u8 GasSensor_u8DigitalState()
{
    488a:	df 93       	push	r29
    488c:	cf 93       	push	r28
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
	return DIO_u8ReadPinValue(GasSensorGroup,GasSensorPin);
    4892:	81 e0       	ldi	r24, 0x01	; 1
    4894:	65 e0       	ldi	r22, 0x05	; 5
    4896:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
}
    489a:	cf 91       	pop	r28
    489c:	df 91       	pop	r29
    489e:	08 95       	ret

000048a0 <DCMotor_voidInit>:

#include "DCMotor_Interface.h"


void DCMotor_voidInit()
{
    48a0:	df 93       	push	r29
    48a2:	cf 93       	push	r28
    48a4:	cd b7       	in	r28, 0x3d	; 61
    48a6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB1,Output);
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	41 e0       	ldi	r20, 0x01	; 1
    48ae:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB2,Output);
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	61 e0       	ldi	r22, 0x01	; 1
    48b6:	41 e0       	ldi	r20, 0x01	; 1
    48b8:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB3,Output);
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	62 e0       	ldi	r22, 0x02	; 2
    48c0:	41 e0       	ldi	r20, 0x01	; 1
    48c2:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(DCMotorGroup,DCMotorB4,Output);
    48c6:	81 e0       	ldi	r24, 0x01	; 1
    48c8:	63 e0       	ldi	r22, 0x03	; 3
    48ca:	41 e0       	ldi	r20, 0x01	; 1
    48cc:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
}
    48d0:	cf 91       	pop	r28
    48d2:	df 91       	pop	r29
    48d4:	08 95       	ret

000048d6 <DCMotor_voidOnMaxSpeed>:

void DCMotor_voidOnMaxSpeed(u8 Dir)
{
    48d6:	df 93       	push	r29
    48d8:	cf 93       	push	r28
    48da:	0f 92       	push	r0
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
    48e0:	89 83       	std	Y+1, r24	; 0x01
	if (Dir==clock_wise)
    48e2:	89 81       	ldd	r24, Y+1	; 0x01
    48e4:	88 23       	and	r24, r24
    48e6:	a9 f4       	brne	.+42     	; 0x4912 <DCMotor_voidOnMaxSpeed+0x3c>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,High);
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	60 e0       	ldi	r22, 0x00	; 0
    48ec:	41 e0       	ldi	r20, 0x01	; 1
    48ee:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,High);
    48f2:	81 e0       	ldi	r24, 0x01	; 1
    48f4:	63 e0       	ldi	r22, 0x03	; 3
    48f6:	41 e0       	ldi	r20, 0x01	; 1
    48f8:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	61 e0       	ldi	r22, 0x01	; 1
    4900:	40 e0       	ldi	r20, 0x00	; 0
    4902:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    4906:	81 e0       	ldi	r24, 0x01	; 1
    4908:	62 e0       	ldi	r22, 0x02	; 2
    490a:	40 e0       	ldi	r20, 0x00	; 0
    490c:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
    4910:	17 c0       	rjmp	.+46     	; 0x4940 <DCMotor_voidOnMaxSpeed+0x6a>
	}
	else if(Dir==anti_clock_wise)
    4912:	89 81       	ldd	r24, Y+1	; 0x01
    4914:	81 30       	cpi	r24, 0x01	; 1
    4916:	a1 f4       	brne	.+40     	; 0x4940 <DCMotor_voidOnMaxSpeed+0x6a>
	{
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4918:	81 e0       	ldi	r24, 0x01	; 1
    491a:	60 e0       	ldi	r22, 0x00	; 0
    491c:	40 e0       	ldi	r20, 0x00	; 0
    491e:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    4922:	81 e0       	ldi	r24, 0x01	; 1
    4924:	63 e0       	ldi	r22, 0x03	; 3
    4926:	40 e0       	ldi	r20, 0x00	; 0
    4928:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,High);
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	61 e0       	ldi	r22, 0x01	; 1
    4930:	41 e0       	ldi	r20, 0x01	; 1
    4932:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,High);
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	62 e0       	ldi	r22, 0x02	; 2
    493a:	41 e0       	ldi	r20, 0x01	; 1
    493c:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	}
}
    4940:	0f 90       	pop	r0
    4942:	cf 91       	pop	r28
    4944:	df 91       	pop	r29
    4946:	08 95       	ret

00004948 <DCMotor_voidOff>:

void DCMotor_voidOff()
{
    4948:	df 93       	push	r29
    494a:	cf 93       	push	r28
    494c:	cd b7       	in	r28, 0x3d	; 61
    494e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB1,Low);
    4950:	81 e0       	ldi	r24, 0x01	; 1
    4952:	60 e0       	ldi	r22, 0x00	; 0
    4954:	40 e0       	ldi	r20, 0x00	; 0
    4956:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB4,Low);
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	63 e0       	ldi	r22, 0x03	; 3
    495e:	40 e0       	ldi	r20, 0x00	; 0
    4960:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB2,Low);
    4964:	81 e0       	ldi	r24, 0x01	; 1
    4966:	61 e0       	ldi	r22, 0x01	; 1
    4968:	40 e0       	ldi	r20, 0x00	; 0
    496a:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DCMotorGroup,DCMotorB3,Low);
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	62 e0       	ldi	r22, 0x02	; 2
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	08 95       	ret

0000497e <BUZZER_voidInit>:
 *      Author: salma
 */
#include "Buzzer_Interface.h"
#include <util/delay.h>
void BUZZER_voidInit ()
{
    497e:	df 93       	push	r29
    4980:	cf 93       	push	r28
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(BuzzerGruop,BuzzerPin,Output);
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	61 e0       	ldi	r22, 0x01	; 1
    498a:	41 e0       	ldi	r20, 0x01	; 1
    498c:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
}
    4990:	cf 91       	pop	r28
    4992:	df 91       	pop	r29
    4994:	08 95       	ret

00004996 <BUZZER_voidOn>:

void BUZZER_voidOn ()
{
    4996:	df 93       	push	r29
    4998:	cf 93       	push	r28
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,High);
    499e:	81 e0       	ldi	r24, 0x01	; 1
    49a0:	61 e0       	ldi	r22, 0x01	; 1
    49a2:	41 e0       	ldi	r20, 0x01	; 1
    49a4:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    49a8:	cf 91       	pop	r28
    49aa:	df 91       	pop	r29
    49ac:	08 95       	ret

000049ae <BUZZER_voidOff>:

void BUZZER_voidOff ()
{
    49ae:	df 93       	push	r29
    49b0:	cf 93       	push	r28
    49b2:	cd b7       	in	r28, 0x3d	; 61
    49b4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(BuzzerGruop,BuzzerPin,Low);
    49b6:	81 e0       	ldi	r24, 0x01	; 1
    49b8:	61 e0       	ldi	r22, 0x01	; 1
    49ba:	40 e0       	ldi	r20, 0x00	; 0
    49bc:	0e 94 84 13 	call	0x2708	; 0x2708 <DIO_voidSetPinValue>
}
    49c0:	cf 91       	pop	r28
    49c2:	df 91       	pop	r29
    49c4:	08 95       	ret

000049c6 <BUZZER_voidToggle>:

void BUZZER_voidToggle ()
{
    49c6:	df 93       	push	r29
    49c8:	cf 93       	push	r28
    49ca:	cd b7       	in	r28, 0x3d	; 61
    49cc:	de b7       	in	r29, 0x3e	; 62
	if (DIO_u8ReadPinValue(BuzzerGruop,BuzzerPin)==High)
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	61 e0       	ldi	r22, 0x01	; 1
    49d2:	0e 94 92 14 	call	0x2924	; 0x2924 <DIO_u8ReadPinValue>
    49d6:	81 30       	cpi	r24, 0x01	; 1
    49d8:	19 f4       	brne	.+6      	; 0x49e0 <BUZZER_voidToggle+0x1a>
	{
		BUZZER_voidOff();
    49da:	0e 94 d7 24 	call	0x49ae	; 0x49ae <BUZZER_voidOff>
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <BUZZER_voidToggle+0x1e>
	}
	else
	{
		BUZZER_voidOn();
    49e0:	0e 94 cb 24 	call	0x4996	; 0x4996 <BUZZER_voidOn>
	}
}
    49e4:	cf 91       	pop	r28
    49e6:	df 91       	pop	r29
    49e8:	08 95       	ret

000049ea <BluetoothModule_voidInit>:
 */

#include "BluetoothModule_Interface.h"

void BluetoothModule_voidInit()
{
    49ea:	df 93       	push	r29
    49ec:	cf 93       	push	r28
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDir(UARTGroup,TX,output);
    49f2:	84 e0       	ldi	r24, 0x04	; 4
    49f4:	61 e0       	ldi	r22, 0x01	; 1
    49f6:	41 e0       	ldi	r20, 0x01	; 1
    49f8:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	DIO_voidSetPinDir(UARTGroup,RX,input);
    49fc:	84 e0       	ldi	r24, 0x04	; 4
    49fe:	60 e0       	ldi	r22, 0x00	; 0
    4a00:	40 e0       	ldi	r20, 0x00	; 0
    4a02:	0e 94 76 12 	call	0x24ec	; 0x24ec <DIO_voidSetPinDir>
	UART_voidInit(9600);
    4a06:	60 e8       	ldi	r22, 0x80	; 128
    4a08:	75 e2       	ldi	r23, 0x25	; 37
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
}
    4a12:	cf 91       	pop	r28
    4a14:	df 91       	pop	r29
    4a16:	08 95       	ret

00004a18 <BluetoothModule_u8RecieveData>:

u8 BluetoothModule_u8RecieveData()
{
    4a18:	df 93       	push	r29
    4a1a:	cf 93       	push	r28
    4a1c:	cd b7       	in	r28, 0x3d	; 61
    4a1e:	de b7       	in	r29, 0x3e	; 62
	return UART_u8RecieveData();
    4a20:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_u8RecieveData>
}
    4a24:	cf 91       	pop	r28
    4a26:	df 91       	pop	r29
    4a28:	08 95       	ret

00004a2a <main>:
#include "HAL/BluetoothModule/BluetoothModule_Interface.h"
#include <util/delay.h>
//void led ();

void main()
{
    4a2a:	df 93       	push	r29
    4a2c:	cf 93       	push	r28
    4a2e:	cd b7       	in	r28, 0x3d	; 61
    4a30:	de b7       	in	r29, 0x3e	; 62
    4a32:	60 97       	sbiw	r28, 0x10	; 16
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	f8 94       	cli
    4a38:	de bf       	out	0x3e, r29	; 62
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	cd bf       	out	0x3d, r28	; 61
	LM35_voidInit();
    4a3e:	0e 94 37 22 	call	0x446e	; 0x446e <LM35_voidInit>
	LCD_voidInit();
    4a42:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <LCD_voidInit>
	LDR_voidInit();
    4a46:	0e 94 1b 23 	call	0x4636	; 0x4636 <LDR_voidInit>

u16 temp;
	while(1)
	{
		LM35_voidRead(&temp);
    4a4a:	ce 01       	movw	r24, r28
    4a4c:	0f 96       	adiw	r24, 0x0f	; 15
    4a4e:	0e 94 ca 22 	call	0x4594	; 0x4594 <LM35_voidRead>
		LCD_voidClear();
    4a52:	0e 94 02 21 	call	0x4204	; 0x4204 <LCD_voidClear>
		LCD_voidSendNumber(temp);
    4a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a58:	98 89       	ldd	r25, Y+16	; 0x10
    4a5a:	cc 01       	movw	r24, r24
    4a5c:	a0 e0       	ldi	r26, 0x00	; 0
    4a5e:	b0 e0       	ldi	r27, 0x00	; 0
    4a60:	bc 01       	movw	r22, r24
    4a62:	cd 01       	movw	r24, r26
    4a64:	0e 94 8a 21 	call	0x4314	; 0x4314 <LCD_voidSendNumber>
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	aa e7       	ldi	r26, 0x7A	; 122
    4a6e:	b4 e4       	ldi	r27, 0x44	; 68
    4a70:	8b 87       	std	Y+11, r24	; 0x0b
    4a72:	9c 87       	std	Y+12, r25	; 0x0c
    4a74:	ad 87       	std	Y+13, r26	; 0x0d
    4a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	4a ef       	ldi	r20, 0xFA	; 250
    4a86:	54 e4       	ldi	r21, 0x44	; 68
    4a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a8c:	dc 01       	movw	r26, r24
    4a8e:	cb 01       	movw	r24, r22
    4a90:	8f 83       	std	Y+7, r24	; 0x07
    4a92:	98 87       	std	Y+8, r25	; 0x08
    4a94:	a9 87       	std	Y+9, r26	; 0x09
    4a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a98:	6f 81       	ldd	r22, Y+7	; 0x07
    4a9a:	78 85       	ldd	r23, Y+8	; 0x08
    4a9c:	89 85       	ldd	r24, Y+9	; 0x09
    4a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4aa0:	20 e0       	ldi	r18, 0x00	; 0
    4aa2:	30 e0       	ldi	r19, 0x00	; 0
    4aa4:	40 e8       	ldi	r20, 0x80	; 128
    4aa6:	5f e3       	ldi	r21, 0x3F	; 63
    4aa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4aac:	88 23       	and	r24, r24
    4aae:	2c f4       	brge	.+10     	; 0x4aba <main+0x90>
		__ticks = 1;
    4ab0:	81 e0       	ldi	r24, 0x01	; 1
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	9e 83       	std	Y+6, r25	; 0x06
    4ab6:	8d 83       	std	Y+5, r24	; 0x05
    4ab8:	3f c0       	rjmp	.+126    	; 0x4b38 <main+0x10e>
	else if (__tmp > 65535)
    4aba:	6f 81       	ldd	r22, Y+7	; 0x07
    4abc:	78 85       	ldd	r23, Y+8	; 0x08
    4abe:	89 85       	ldd	r24, Y+9	; 0x09
    4ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ac2:	20 e0       	ldi	r18, 0x00	; 0
    4ac4:	3f ef       	ldi	r19, 0xFF	; 255
    4ac6:	4f e7       	ldi	r20, 0x7F	; 127
    4ac8:	57 e4       	ldi	r21, 0x47	; 71
    4aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ace:	18 16       	cp	r1, r24
    4ad0:	4c f5       	brge	.+82     	; 0x4b24 <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ada:	20 e0       	ldi	r18, 0x00	; 0
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	40 e2       	ldi	r20, 0x20	; 32
    4ae0:	51 e4       	ldi	r21, 0x41	; 65
    4ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	bc 01       	movw	r22, r24
    4aec:	cd 01       	movw	r24, r26
    4aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af2:	dc 01       	movw	r26, r24
    4af4:	cb 01       	movw	r24, r22
    4af6:	9e 83       	std	Y+6, r25	; 0x06
    4af8:	8d 83       	std	Y+5, r24	; 0x05
    4afa:	0f c0       	rjmp	.+30     	; 0x4b1a <main+0xf0>
    4afc:	88 ec       	ldi	r24, 0xC8	; 200
    4afe:	90 e0       	ldi	r25, 0x00	; 0
    4b00:	9c 83       	std	Y+4, r25	; 0x04
    4b02:	8b 83       	std	Y+3, r24	; 0x03
    4b04:	8b 81       	ldd	r24, Y+3	; 0x03
    4b06:	9c 81       	ldd	r25, Y+4	; 0x04
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <main+0xde>
    4b0c:	9c 83       	std	Y+4, r25	; 0x04
    4b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b10:	8d 81       	ldd	r24, Y+5	; 0x05
    4b12:	9e 81       	ldd	r25, Y+6	; 0x06
    4b14:	01 97       	sbiw	r24, 0x01	; 1
    4b16:	9e 83       	std	Y+6, r25	; 0x06
    4b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	69 f7       	brne	.-38     	; 0x4afc <main+0xd2>
    4b22:	93 cf       	rjmp	.-218    	; 0x4a4a <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b24:	6f 81       	ldd	r22, Y+7	; 0x07
    4b26:	78 85       	ldd	r23, Y+8	; 0x08
    4b28:	89 85       	ldd	r24, Y+9	; 0x09
    4b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	9e 83       	std	Y+6, r25	; 0x06
    4b36:	8d 83       	std	Y+5, r24	; 0x05
    4b38:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3c:	9a 83       	std	Y+2, r25	; 0x02
    4b3e:	89 83       	std	Y+1, r24	; 0x01
    4b40:	89 81       	ldd	r24, Y+1	; 0x01
    4b42:	9a 81       	ldd	r25, Y+2	; 0x02
    4b44:	01 97       	sbiw	r24, 0x01	; 1
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <main+0x11a>
    4b48:	9a 83       	std	Y+2, r25	; 0x02
    4b4a:	89 83       	std	Y+1, r24	; 0x01
    4b4c:	7e cf       	rjmp	.-260    	; 0x4a4a <main+0x20>

00004b4e <__mulsi3>:
    4b4e:	62 9f       	mul	r22, r18
    4b50:	d0 01       	movw	r26, r0
    4b52:	73 9f       	mul	r23, r19
    4b54:	f0 01       	movw	r30, r0
    4b56:	82 9f       	mul	r24, r18
    4b58:	e0 0d       	add	r30, r0
    4b5a:	f1 1d       	adc	r31, r1
    4b5c:	64 9f       	mul	r22, r20
    4b5e:	e0 0d       	add	r30, r0
    4b60:	f1 1d       	adc	r31, r1
    4b62:	92 9f       	mul	r25, r18
    4b64:	f0 0d       	add	r31, r0
    4b66:	83 9f       	mul	r24, r19
    4b68:	f0 0d       	add	r31, r0
    4b6a:	74 9f       	mul	r23, r20
    4b6c:	f0 0d       	add	r31, r0
    4b6e:	65 9f       	mul	r22, r21
    4b70:	f0 0d       	add	r31, r0
    4b72:	99 27       	eor	r25, r25
    4b74:	72 9f       	mul	r23, r18
    4b76:	b0 0d       	add	r27, r0
    4b78:	e1 1d       	adc	r30, r1
    4b7a:	f9 1f       	adc	r31, r25
    4b7c:	63 9f       	mul	r22, r19
    4b7e:	b0 0d       	add	r27, r0
    4b80:	e1 1d       	adc	r30, r1
    4b82:	f9 1f       	adc	r31, r25
    4b84:	bd 01       	movw	r22, r26
    4b86:	cf 01       	movw	r24, r30
    4b88:	11 24       	eor	r1, r1
    4b8a:	08 95       	ret

00004b8c <__divmodhi4>:
    4b8c:	97 fb       	bst	r25, 7
    4b8e:	09 2e       	mov	r0, r25
    4b90:	07 26       	eor	r0, r23
    4b92:	0a d0       	rcall	.+20     	; 0x4ba8 <__divmodhi4_neg1>
    4b94:	77 fd       	sbrc	r23, 7
    4b96:	04 d0       	rcall	.+8      	; 0x4ba0 <__divmodhi4_neg2>
    4b98:	49 d0       	rcall	.+146    	; 0x4c2c <__udivmodhi4>
    4b9a:	06 d0       	rcall	.+12     	; 0x4ba8 <__divmodhi4_neg1>
    4b9c:	00 20       	and	r0, r0
    4b9e:	1a f4       	brpl	.+6      	; 0x4ba6 <__divmodhi4_exit>

00004ba0 <__divmodhi4_neg2>:
    4ba0:	70 95       	com	r23
    4ba2:	61 95       	neg	r22
    4ba4:	7f 4f       	sbci	r23, 0xFF	; 255

00004ba6 <__divmodhi4_exit>:
    4ba6:	08 95       	ret

00004ba8 <__divmodhi4_neg1>:
    4ba8:	f6 f7       	brtc	.-4      	; 0x4ba6 <__divmodhi4_exit>
    4baa:	90 95       	com	r25
    4bac:	81 95       	neg	r24
    4bae:	9f 4f       	sbci	r25, 0xFF	; 255
    4bb0:	08 95       	ret

00004bb2 <__udivmodsi4>:
    4bb2:	a1 e2       	ldi	r26, 0x21	; 33
    4bb4:	1a 2e       	mov	r1, r26
    4bb6:	aa 1b       	sub	r26, r26
    4bb8:	bb 1b       	sub	r27, r27
    4bba:	fd 01       	movw	r30, r26
    4bbc:	0d c0       	rjmp	.+26     	; 0x4bd8 <__udivmodsi4_ep>

00004bbe <__udivmodsi4_loop>:
    4bbe:	aa 1f       	adc	r26, r26
    4bc0:	bb 1f       	adc	r27, r27
    4bc2:	ee 1f       	adc	r30, r30
    4bc4:	ff 1f       	adc	r31, r31
    4bc6:	a2 17       	cp	r26, r18
    4bc8:	b3 07       	cpc	r27, r19
    4bca:	e4 07       	cpc	r30, r20
    4bcc:	f5 07       	cpc	r31, r21
    4bce:	20 f0       	brcs	.+8      	; 0x4bd8 <__udivmodsi4_ep>
    4bd0:	a2 1b       	sub	r26, r18
    4bd2:	b3 0b       	sbc	r27, r19
    4bd4:	e4 0b       	sbc	r30, r20
    4bd6:	f5 0b       	sbc	r31, r21

00004bd8 <__udivmodsi4_ep>:
    4bd8:	66 1f       	adc	r22, r22
    4bda:	77 1f       	adc	r23, r23
    4bdc:	88 1f       	adc	r24, r24
    4bde:	99 1f       	adc	r25, r25
    4be0:	1a 94       	dec	r1
    4be2:	69 f7       	brne	.-38     	; 0x4bbe <__udivmodsi4_loop>
    4be4:	60 95       	com	r22
    4be6:	70 95       	com	r23
    4be8:	80 95       	com	r24
    4bea:	90 95       	com	r25
    4bec:	9b 01       	movw	r18, r22
    4bee:	ac 01       	movw	r20, r24
    4bf0:	bd 01       	movw	r22, r26
    4bf2:	cf 01       	movw	r24, r30
    4bf4:	08 95       	ret

00004bf6 <__divmodsi4>:
    4bf6:	97 fb       	bst	r25, 7
    4bf8:	09 2e       	mov	r0, r25
    4bfa:	05 26       	eor	r0, r21
    4bfc:	0e d0       	rcall	.+28     	; 0x4c1a <__divmodsi4_neg1>
    4bfe:	57 fd       	sbrc	r21, 7
    4c00:	04 d0       	rcall	.+8      	; 0x4c0a <__divmodsi4_neg2>
    4c02:	d7 df       	rcall	.-82     	; 0x4bb2 <__udivmodsi4>
    4c04:	0a d0       	rcall	.+20     	; 0x4c1a <__divmodsi4_neg1>
    4c06:	00 1c       	adc	r0, r0
    4c08:	38 f4       	brcc	.+14     	; 0x4c18 <__divmodsi4_exit>

00004c0a <__divmodsi4_neg2>:
    4c0a:	50 95       	com	r21
    4c0c:	40 95       	com	r20
    4c0e:	30 95       	com	r19
    4c10:	21 95       	neg	r18
    4c12:	3f 4f       	sbci	r19, 0xFF	; 255
    4c14:	4f 4f       	sbci	r20, 0xFF	; 255
    4c16:	5f 4f       	sbci	r21, 0xFF	; 255

00004c18 <__divmodsi4_exit>:
    4c18:	08 95       	ret

00004c1a <__divmodsi4_neg1>:
    4c1a:	f6 f7       	brtc	.-4      	; 0x4c18 <__divmodsi4_exit>
    4c1c:	90 95       	com	r25
    4c1e:	80 95       	com	r24
    4c20:	70 95       	com	r23
    4c22:	61 95       	neg	r22
    4c24:	7f 4f       	sbci	r23, 0xFF	; 255
    4c26:	8f 4f       	sbci	r24, 0xFF	; 255
    4c28:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2a:	08 95       	ret

00004c2c <__udivmodhi4>:
    4c2c:	aa 1b       	sub	r26, r26
    4c2e:	bb 1b       	sub	r27, r27
    4c30:	51 e1       	ldi	r21, 0x11	; 17
    4c32:	07 c0       	rjmp	.+14     	; 0x4c42 <__udivmodhi4_ep>

00004c34 <__udivmodhi4_loop>:
    4c34:	aa 1f       	adc	r26, r26
    4c36:	bb 1f       	adc	r27, r27
    4c38:	a6 17       	cp	r26, r22
    4c3a:	b7 07       	cpc	r27, r23
    4c3c:	10 f0       	brcs	.+4      	; 0x4c42 <__udivmodhi4_ep>
    4c3e:	a6 1b       	sub	r26, r22
    4c40:	b7 0b       	sbc	r27, r23

00004c42 <__udivmodhi4_ep>:
    4c42:	88 1f       	adc	r24, r24
    4c44:	99 1f       	adc	r25, r25
    4c46:	5a 95       	dec	r21
    4c48:	a9 f7       	brne	.-22     	; 0x4c34 <__udivmodhi4_loop>
    4c4a:	80 95       	com	r24
    4c4c:	90 95       	com	r25
    4c4e:	bc 01       	movw	r22, r24
    4c50:	cd 01       	movw	r24, r26
    4c52:	08 95       	ret

00004c54 <__prologue_saves__>:
    4c54:	2f 92       	push	r2
    4c56:	3f 92       	push	r3
    4c58:	4f 92       	push	r4
    4c5a:	5f 92       	push	r5
    4c5c:	6f 92       	push	r6
    4c5e:	7f 92       	push	r7
    4c60:	8f 92       	push	r8
    4c62:	9f 92       	push	r9
    4c64:	af 92       	push	r10
    4c66:	bf 92       	push	r11
    4c68:	cf 92       	push	r12
    4c6a:	df 92       	push	r13
    4c6c:	ef 92       	push	r14
    4c6e:	ff 92       	push	r15
    4c70:	0f 93       	push	r16
    4c72:	1f 93       	push	r17
    4c74:	cf 93       	push	r28
    4c76:	df 93       	push	r29
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	ca 1b       	sub	r28, r26
    4c7e:	db 0b       	sbc	r29, r27
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	09 94       	ijmp

00004c8c <__epilogue_restores__>:
    4c8c:	2a 88       	ldd	r2, Y+18	; 0x12
    4c8e:	39 88       	ldd	r3, Y+17	; 0x11
    4c90:	48 88       	ldd	r4, Y+16	; 0x10
    4c92:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c94:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c96:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c98:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c9e:	b9 84       	ldd	r11, Y+9	; 0x09
    4ca0:	c8 84       	ldd	r12, Y+8	; 0x08
    4ca2:	df 80       	ldd	r13, Y+7	; 0x07
    4ca4:	ee 80       	ldd	r14, Y+6	; 0x06
    4ca6:	fd 80       	ldd	r15, Y+5	; 0x05
    4ca8:	0c 81       	ldd	r16, Y+4	; 0x04
    4caa:	1b 81       	ldd	r17, Y+3	; 0x03
    4cac:	aa 81       	ldd	r26, Y+2	; 0x02
    4cae:	b9 81       	ldd	r27, Y+1	; 0x01
    4cb0:	ce 0f       	add	r28, r30
    4cb2:	d1 1d       	adc	r29, r1
    4cb4:	0f b6       	in	r0, 0x3f	; 63
    4cb6:	f8 94       	cli
    4cb8:	de bf       	out	0x3e, r29	; 62
    4cba:	0f be       	out	0x3f, r0	; 63
    4cbc:	cd bf       	out	0x3d, r28	; 61
    4cbe:	ed 01       	movw	r28, r26
    4cc0:	08 95       	ret

00004cc2 <_exit>:
    4cc2:	f8 94       	cli

00004cc4 <__stop_program>:
    4cc4:	ff cf       	rjmp	.-2      	; 0x4cc4 <__stop_program>
